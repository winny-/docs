{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Libretro/RetroArch Documentation! \u00b6 RetroArch is the official reference frontend for libretro \"cores\": applications that include emulators, game engines, and media players. Settings are also unified across cores with advanced features like shaders, netplay, rewinding, and more! Libretro is a simple backend API for emulators, game engines, and media players to be run through a unified GUI. Which platforms is RetroArch available for? \u00b6 RetroArch runs and is supported on GNU/Linux, BSD, Windows, Mac OSX (PPC/Intel), Haiku, PlayStation Classic, PlayStation 2, PlayStation 3, Playstation Vita, Playstation Portable, Xbox 360, Xbox One, Raspberry Pi, Nintendo GameCube, Nintendo Wii, Nintendo Wii U, Nintendo 3DS & 2DS Family, Nintendo Switch, Steam Link, Android, iOS, Open Pandora, Blackberry and even on web browsers by using the Emscripten compiler. What is the license for this? \u00b6 libretro is released under the MIT license. RetroArch is released under the GNU GPLv3. The cores are usually released with the same license as the originating projects. What emulators, games, and other cores are currently supported? \u00b6 You can see a list sorted by hardware maker under For Users > Core Library: Emulation Official Links \u00b6 Website Patreon F.A.Q Github Repository Forum Facebook Facebook Group Facebook Watch Twitter YouTube Facebook Facebook Watch Facebook Gaming Facebook Group RetroArch Gameplays Dailymotion Discord Teespring Lakka's Website Lakka's YouTube Lakka's Twitter Libretro Documentation Steam Steam Group Steam Developer Page Steam","title":"About"},{"location":"#welcome-to-the-libretroretroarch-documentation","text":"RetroArch is the official reference frontend for libretro \"cores\": applications that include emulators, game engines, and media players. Settings are also unified across cores with advanced features like shaders, netplay, rewinding, and more! Libretro is a simple backend API for emulators, game engines, and media players to be run through a unified GUI.","title":"Welcome to the Libretro/RetroArch Documentation!"},{"location":"#which-platforms-is-retroarch-available-for","text":"RetroArch runs and is supported on GNU/Linux, BSD, Windows, Mac OSX (PPC/Intel), Haiku, PlayStation Classic, PlayStation 2, PlayStation 3, Playstation Vita, Playstation Portable, Xbox 360, Xbox One, Raspberry Pi, Nintendo GameCube, Nintendo Wii, Nintendo Wii U, Nintendo 3DS & 2DS Family, Nintendo Switch, Steam Link, Android, iOS, Open Pandora, Blackberry and even on web browsers by using the Emscripten compiler.","title":"Which platforms is RetroArch available for?"},{"location":"#what-is-the-license-for-this","text":"libretro is released under the MIT license. RetroArch is released under the GNU GPLv3. The cores are usually released with the same license as the originating projects.","title":"What is the license for this?"},{"location":"#what-emulators-games-and-other-cores-are-currently-supported","text":"You can see a list sorted by hardware maker under For Users > Core Library: Emulation","title":"What emulators, games, and other cores are currently supported?"},{"location":"#official-links","text":"Website Patreon F.A.Q Github Repository Forum Facebook Facebook Group Facebook Watch Twitter YouTube Facebook Facebook Watch Facebook Gaming Facebook Group RetroArch Gameplays Dailymotion Discord Teespring Lakka's Website Lakka's YouTube Lakka's Twitter Libretro Documentation Steam Steam Group Steam Developer Page Steam","title":"Official Links"},{"location":"development/bounties/","text":"Libretro open source bounties \u00b6 What is an Open Source Bounty? Bounties are usually offered as an incentive for fixing software bugs or implementing minor features. Bounty driven development is one of the Business models for open-source software. The compensation offered for an open-source bounty is usually small. Source: Wikipedia Stages of the bounty process \u00b6 Users fund bounties on open github issues or feature requests they want to see addressed. Developers create solutions which closes the issues and claim the corresponding bounties on Bountysource. Backers can accept or reject the claims. If accepted, Bountysource pays the bounties to the developer. What is Bountysource? \u00b6 Bountysource is a funding platform for open-source software which allows users and developers to create bounties from any existing github issue. Libretro has no formal partnership with Bountysource and there is no requirement to use the Bountysource service. Who can post a bounty? \u00b6 Anybody with PayPal, Bitcoin, or funds in a Bountysource account (such as earning money from a previous bounty). What does it cost to post a bounty? \u00b6 There are no fees associated with posting a bounty. For example, to post a $5 bounty, you will be charged $5. For a $500 bounty, you will be charged $500. Do I have to be affiliated with libretro in order to put a bounty on an issue? \u00b6 No. Anybody can put a bounty on any issue, regardless of their relationship with the project. Do I have to be affiliated libretro in order to claim a bounty on an issue? \u00b6 No. Can several people claim the same bounty? \u00b6 Yes. When there are multiple claims on a bounty, the people who funded the bounty decide which of the solutions gets the bounty. When a bounty claim is submitted by a developer, the claim is put into a two week verification period. Backers are notified by email and can then accept or reject the claim. If all Backers vote to accept the claim, it is processed immediately and the developer is awarded the bounty. If any Backer fails to accept the claim, it remains in the two week waiting period. If any Backer has an issue with the claim, they can reject it. Claims cannot be paid out until the dispute is resolved and the rejected status is lifted. Further Bountysource information \u00b6 You can find a more comprehensive version of this information and more directly from Bountysource.","title":"Open Source Bounties"},{"location":"development/bounties/#libretro-open-source-bounties","text":"What is an Open Source Bounty? Bounties are usually offered as an incentive for fixing software bugs or implementing minor features. Bounty driven development is one of the Business models for open-source software. The compensation offered for an open-source bounty is usually small. Source: Wikipedia","title":"Libretro open source bounties"},{"location":"development/bounties/#stages-of-the-bounty-process","text":"Users fund bounties on open github issues or feature requests they want to see addressed. Developers create solutions which closes the issues and claim the corresponding bounties on Bountysource. Backers can accept or reject the claims. If accepted, Bountysource pays the bounties to the developer.","title":"Stages of the bounty process"},{"location":"development/bounties/#what-is-bountysource","text":"Bountysource is a funding platform for open-source software which allows users and developers to create bounties from any existing github issue. Libretro has no formal partnership with Bountysource and there is no requirement to use the Bountysource service.","title":"What is Bountysource?"},{"location":"development/bounties/#who-can-post-a-bounty","text":"Anybody with PayPal, Bitcoin, or funds in a Bountysource account (such as earning money from a previous bounty).","title":"Who can post a bounty?"},{"location":"development/bounties/#what-does-it-cost-to-post-a-bounty","text":"There are no fees associated with posting a bounty. For example, to post a $5 bounty, you will be charged $5. For a $500 bounty, you will be charged $500.","title":"What does it cost to post a bounty?"},{"location":"development/bounties/#do-i-have-to-be-affiliated-with-libretro-in-order-to-put-a-bounty-on-an-issue","text":"No. Anybody can put a bounty on any issue, regardless of their relationship with the project.","title":"Do I have to be affiliated with libretro in order to put a bounty on an issue?"},{"location":"development/bounties/#do-i-have-to-be-affiliated-libretro-in-order-to-claim-a-bounty-on-an-issue","text":"No.","title":"Do I have to be affiliated libretro in order to claim a bounty on an issue?"},{"location":"development/bounties/#can-several-people-claim-the-same-bounty","text":"Yes. When there are multiple claims on a bounty, the people who funded the bounty decide which of the solutions gets the bounty. When a bounty claim is submitted by a developer, the claim is put into a two week verification period. Backers are notified by email and can then accept or reject the claim. If all Backers vote to accept the claim, it is processed immediately and the developer is awarded the bounty. If any Backer fails to accept the claim, it remains in the two week waiting period. If any Backer has an issue with the claim, they can reject it. Claims cannot be paid out until the dispute is resolved and the rejected status is lifted.","title":"Can several people claim the same bounty?"},{"location":"development/bounties/#further-bountysource-information","text":"You can find a more comprehensive version of this information and more directly from Bountysource.","title":"Further Bountysource information"},{"location":"development/coding-standards/","text":"Libretro Coding Standards \u00b6 Scope These standards are intended to apply to frontends, cores, and other projects that are maintained as part of the Libretro organization. These standards are not enforced on independent projects making use of the Libretro API or other open technologies. Standards for RetroArch \u00b6 C89 Compatibility \u00b6 All code contributed to RetroArch must be compliant with the \"C89\" coding standard established by ANSI X3.159-1989 . Variable declaration \u00b6 To maintain C89 compatibility, declare all local variables at the beginning of their respective scope blocks, rather than inline at the time of their first use. Comments \u00b6 To maintain C89 compatibility, comments should be written in legacy using /* at the beginning and */ and the end. Each new line of a multiline comment should begin with a space and an asterisk: /* Sometimes it is useful to incorporate a lengthy comment in source. * For example: * - providing specifications for a function preceeding its declaration * - to explain a complex or unintuitive algorithm * - to explain the history or special circumstances of a section of code */ Comment headers for functions should use a maximum column width of 80 characters. Indentation \u00b6 Indentation is three spaces. Braces \u00b6 Brace usage follows \"Allman style\". The brace associated with a control statement is placed on the following line, indented to the same level as the control statement. Statements within the braces are indented to the next level. while ( x == y ) { something (); somethingelse (); } finalthing (); Single-line if conditional statements \u00b6 if and else conditionals with single-line statements should be spaced with the conditional on one line and the statement below it, indented, with no braces: if ( time > launch_date ) initiate_probe_communication (); else generate_prelaunch_report (); Whitespace and alignment \u00b6 When possible, use whitespace to improve the readability of code that makes many assignment statements in a row, uses complex conditionals, or passes a large number of paramters to a function. Example of aligning successive assignment statements : if ( seq == 1157460427127406720ULL ) { content_ctx_info_t content_info ; content_info . argc = 0 ; content_info . argv = NULL ; content_info . args = NULL ; content_info . environ_get = NULL ; ... } Example of aligning a complex parameter list : if ( recording_driver_get_data_ptr ()) { runloop_msg_queue_push ( msg_hash_to_str ( MSG_RESTARTING_RECORDING_DUE_TO_DRIVER_REINIT ), 2 , 180 , false , NULL , MESSAGE_QUEUE_ICON_DEFAULT , MESSAGE_QUEUE_CATEGORY_INFO ); command_event ( CMD_EVENT_RECORD_DEINIT , NULL ); command_event ( CMD_EVENT_RECORD_INIT , NULL ); } vim configuration for Libretro style \u00b6 Coders who use the vim editor can create a vimrc configuration file with the following settings in order to pre-set RetroArch indentation style. set tabstop=3 set shiftwidth=3 set expandtab set textwidth=80 Standards for Libretro cores \u00b6 Cores and other projects that are maintained by the Libretro organization can be considered as three categories: New, original software Ports and enhancements of third-party software that is still maintained Ports and enhancements of third-party software that is not maintained New cores and other projects that are maintained by the Libretro organization should be coded as closely to the Libretro/RetroArch standard as possible based on the language used by the core. Cores that are based on existing software should generally conform to whatever standards and style were used in the orginal software, unless the original software is no longer maintained. In that case the coding style may be changed to Libretro/RetroArch at the discretion of the involved Libretro developers and leadership.","title":"Coding Standards"},{"location":"development/coding-standards/#libretro-coding-standards","text":"Scope These standards are intended to apply to frontends, cores, and other projects that are maintained as part of the Libretro organization. These standards are not enforced on independent projects making use of the Libretro API or other open technologies.","title":"Libretro Coding Standards"},{"location":"development/coding-standards/#standards-for-retroarch","text":"","title":"Standards for RetroArch"},{"location":"development/coding-standards/#c89-compatibility","text":"All code contributed to RetroArch must be compliant with the \"C89\" coding standard established by ANSI X3.159-1989 .","title":"C89 Compatibility"},{"location":"development/coding-standards/#variable-declaration","text":"To maintain C89 compatibility, declare all local variables at the beginning of their respective scope blocks, rather than inline at the time of their first use.","title":"Variable declaration"},{"location":"development/coding-standards/#comments","text":"To maintain C89 compatibility, comments should be written in legacy using /* at the beginning and */ and the end. Each new line of a multiline comment should begin with a space and an asterisk: /* Sometimes it is useful to incorporate a lengthy comment in source. * For example: * - providing specifications for a function preceeding its declaration * - to explain a complex or unintuitive algorithm * - to explain the history or special circumstances of a section of code */ Comment headers for functions should use a maximum column width of 80 characters.","title":"Comments"},{"location":"development/coding-standards/#indentation","text":"Indentation is three spaces.","title":"Indentation"},{"location":"development/coding-standards/#braces","text":"Brace usage follows \"Allman style\". The brace associated with a control statement is placed on the following line, indented to the same level as the control statement. Statements within the braces are indented to the next level. while ( x == y ) { something (); somethingelse (); } finalthing ();","title":"Braces"},{"location":"development/coding-standards/#single-line-if-conditional-statements","text":"if and else conditionals with single-line statements should be spaced with the conditional on one line and the statement below it, indented, with no braces: if ( time > launch_date ) initiate_probe_communication (); else generate_prelaunch_report ();","title":"Single-line if conditional statements"},{"location":"development/coding-standards/#whitespace-and-alignment","text":"When possible, use whitespace to improve the readability of code that makes many assignment statements in a row, uses complex conditionals, or passes a large number of paramters to a function. Example of aligning successive assignment statements : if ( seq == 1157460427127406720ULL ) { content_ctx_info_t content_info ; content_info . argc = 0 ; content_info . argv = NULL ; content_info . args = NULL ; content_info . environ_get = NULL ; ... } Example of aligning a complex parameter list : if ( recording_driver_get_data_ptr ()) { runloop_msg_queue_push ( msg_hash_to_str ( MSG_RESTARTING_RECORDING_DUE_TO_DRIVER_REINIT ), 2 , 180 , false , NULL , MESSAGE_QUEUE_ICON_DEFAULT , MESSAGE_QUEUE_CATEGORY_INFO ); command_event ( CMD_EVENT_RECORD_DEINIT , NULL ); command_event ( CMD_EVENT_RECORD_INIT , NULL ); }","title":"Whitespace and alignment"},{"location":"development/coding-standards/#vim-configuration-for-libretro-style","text":"Coders who use the vim editor can create a vimrc configuration file with the following settings in order to pre-set RetroArch indentation style. set tabstop=3 set shiftwidth=3 set expandtab set textwidth=80","title":"vim configuration for Libretro style"},{"location":"development/coding-standards/#standards-for-libretro-cores","text":"Cores and other projects that are maintained by the Libretro organization can be considered as three categories: New, original software Ports and enhancements of third-party software that is still maintained Ports and enhancements of third-party software that is not maintained New cores and other projects that are maintained by the Libretro organization should be coded as closely to the Libretro/RetroArch standard as possible based on the language used by the core. Cores that are based on existing software should generally conform to whatever standards and style were used in the orginal software, unless the original software is no longer maintained. In that case the coding style may be changed to Libretro/RetroArch at the discretion of the involved Libretro developers and leadership.","title":"Standards for Libretro cores"},{"location":"development/frontends/","text":"Frontend Development \u00b6 Libretro frontends are programs that have implemented the libretro API specification. If fully implemented, this allows the program to run any libretro core that has been developed. Frontend Development Guides \u00b6 A Libretro retrospective - Developer Emery Hemingway's detailed look back on implementing a new libretro frontend for the Genode Operating System. Reference frontend \u00b6 RetroArch is the official reference libretro frontend, developed in-house. It is usually the first in implementing new features added to the libretro API. Written almost entirely in C, targets a large amount of platforms. Name Author(s) Description Anarchy Arcade Elijah Newman-Gomez AArcade is a virtual reality 3D desktop that launches shortcuts to absolutely anything you like. Arcan Letoram Powerful development framework for creating virtually anything from user interfaces for specialized embedded applications all the way to full-blown standalone desktop environments. BizHawk BizHawk Experimental libretro player support for the BizHawk multi-platform emulator. einwegger\u00e4t mudlord Debugging tool for libretro cores. EmuVR GNOME Games GNOME Games is a GNOME application to browse your video games library and to easily pick and play a game from it. Ludo kivutar libretro frontend written in Go. minir Alcaro WIMP interface (Windows, Icons, Menus and Pointers), and only cares about the major desktop OSes. Drops flexibility in favor of improved out-of-the-box experience. minir test fronts Alcaro Three different fronts, none of which has IO drivers: retroprofile just runs the core, intended for performance tests and PGO; retrorepeat runs the core twice, expecting identical output; retrostateverify traces the entire core and verifies whether its savestates are perfect. nanoarch heuripedes Small frontend providing video, audio and basic input features to run non-libretro-GL cores. Built on GLFW. New Retro Arcade Digital Cyber Cherries noarch RobLoach Minimalist frontend which does not provide video, audio or even basic input. It loads a libretro core, runs an iteration, and then exits. Good for unit testing. Phoenix Phoenix Upcoming libretro frontend written with the Qt5 cross-platform application framework. retro_frontend Ehmry Frontend for the Genode operating system framework. Following the Genode philosophy this frontend strives to be a minimal implemention that is extensible via the abstract OS services provided to it. RetroPlayer Kodi-Game Also known as Kodi-Game , RetroPlayer is a libretro compatibility layer for Kodi . sdlarch heuripedes Small frontend providing video, audio and basic input to run basic libretro cores. Built on SDL. URetro Nintendo WiiU frontend Vintage Simulator runvnc 3D Lua-programmable libretro frontend supporting many 3D formats, some Cairo graphics, physics, emulation control with scripts ZMZ Alcaro Abandoned","title":"Frontends"},{"location":"development/frontends/#frontend-development","text":"Libretro frontends are programs that have implemented the libretro API specification. If fully implemented, this allows the program to run any libretro core that has been developed.","title":"Frontend Development"},{"location":"development/frontends/#frontend-development-guides","text":"A Libretro retrospective - Developer Emery Hemingway's detailed look back on implementing a new libretro frontend for the Genode Operating System.","title":"Frontend Development Guides"},{"location":"development/frontends/#reference-frontend","text":"RetroArch is the official reference libretro frontend, developed in-house. It is usually the first in implementing new features added to the libretro API. Written almost entirely in C, targets a large amount of platforms. Name Author(s) Description Anarchy Arcade Elijah Newman-Gomez AArcade is a virtual reality 3D desktop that launches shortcuts to absolutely anything you like. Arcan Letoram Powerful development framework for creating virtually anything from user interfaces for specialized embedded applications all the way to full-blown standalone desktop environments. BizHawk BizHawk Experimental libretro player support for the BizHawk multi-platform emulator. einwegger\u00e4t mudlord Debugging tool for libretro cores. EmuVR GNOME Games GNOME Games is a GNOME application to browse your video games library and to easily pick and play a game from it. Ludo kivutar libretro frontend written in Go. minir Alcaro WIMP interface (Windows, Icons, Menus and Pointers), and only cares about the major desktop OSes. Drops flexibility in favor of improved out-of-the-box experience. minir test fronts Alcaro Three different fronts, none of which has IO drivers: retroprofile just runs the core, intended for performance tests and PGO; retrorepeat runs the core twice, expecting identical output; retrostateverify traces the entire core and verifies whether its savestates are perfect. nanoarch heuripedes Small frontend providing video, audio and basic input features to run non-libretro-GL cores. Built on GLFW. New Retro Arcade Digital Cyber Cherries noarch RobLoach Minimalist frontend which does not provide video, audio or even basic input. It loads a libretro core, runs an iteration, and then exits. Good for unit testing. Phoenix Phoenix Upcoming libretro frontend written with the Qt5 cross-platform application framework. retro_frontend Ehmry Frontend for the Genode operating system framework. Following the Genode philosophy this frontend strives to be a minimal implemention that is extensible via the abstract OS services provided to it. RetroPlayer Kodi-Game Also known as Kodi-Game , RetroPlayer is a libretro compatibility layer for Kodi . sdlarch heuripedes Small frontend providing video, audio and basic input to run basic libretro cores. Built on SDL. URetro Nintendo WiiU frontend Vintage Simulator runvnc 3D Lua-programmable libretro frontend supporting many 3D formats, some Cairo graphics, physics, emulation control with scripts ZMZ Alcaro Abandoned","title":"Reference frontend"},{"location":"development/input-api/","text":"Libretro Input API \u00b6 Overview \u00b6 Libretro's input system is based on abstracted input device types: RetroPad Digitial Joypad Analog and Digital Joypad Mouse Pointer Keyboard Lightgun RetroPad \u00b6 The RetroPad is a joypad abstraction interface defined by the Libretro API. It is the primary input device for a libretro frontend. Unless a core absolutely requires the use of a keyboard with no possible fallback for gamepad-type controls, a [[Libretro core]] should always be implemented as such that it is directly controllable by the RetroPad. In terms of button layout and functionality, the RetroPad is based on a PlayStation/Super Nintendo joypad. Specification \u00b6 The minimum implementation required for the RetroPad abstraction: At least two shoulder buttons At least four face buttons At least one D-pad At least one analogue stick A Start button and a Select / Back button. Above: An example of the RetroPad joypad abstraction mapped to the Megadrive 6-Button gamepad. Digital RetroPad \u00b6 A RetroPad abstraction with all digital controls can be used. The conceptual arrangement for the buttons for the RetroPad is inspired by the Super Nintendo controller and the Sony Playstation DualShock. Analog RetroPad \u00b6 A RetroPad abstraction with one or more analog inputs can be used. Conceptually inspired by the Sony DualShock2, this adds two analog sticks to the digital RetroPad and allows all buttons to return analog values in the range of [-0x7fff, 0x7fff] , although some devices may return -0x8000 . Positive X axis is right. Positive Y axis is down. Buttons are returned in the range [0, 0x7fff] . Mouse Input \u00b6 X and Y coordinates are reported relatively to last poll (poll callback) and it is up to the core to keep track of where the pointer coordinates with respect to the display. Pointer Input \u00b6 The pointer abstraction represents pen, stylus, touch and other input devices that use absolute coordinates with respect to the screen. Coordinates in X and Y are reported as [-0x7fff, 0x7fff] : -0x7fff corresponds to the far left/top of the screen, 0x7fff to the far right/bottom of the screen. The \"screen\" is defined as area that is passed to the frontend and later displayed on the monitor. The frontend is free to scale/resize this screen as it sees fit but (X, Y) = (-0x7fff, -0x7fff) will always correspond to the top-left pixel of the display. Keyboard Input \u00b6 The libretro API allows a core to poll the frontend for the raw current pressed state of keys. There is also a callback available which is called by the frontend in response to keyboard events. down is set if the key is being pressed and false if it is being released. Even though the frontend should try to synchronize keypresses with keycode events, cores should assume that multiple characters can be generated from a single keypress. In other words, keycode events should be treated separately from character events. Similarily if only a keycode event is generated with no corresponding character, the character should be 0 . Lightgun Input \u00b6 The libretro lightgun abstraction reports X/Y coordinates in screen space (similar to the pointer) in the range [-0x8000, 0x7fff] in both axes, with zero being center and -0x8000 being out of bounds. The core an query the on/off screen state of the lightgun. It features a trigger, start/select buttons, auxiliary action buttons and a directional pad. A forced off-screen shot can be requested for auto-reloading function in some games.","title":"Input API"},{"location":"development/input-api/#libretro-input-api","text":"","title":"Libretro Input API"},{"location":"development/input-api/#overview","text":"Libretro's input system is based on abstracted input device types: RetroPad Digitial Joypad Analog and Digital Joypad Mouse Pointer Keyboard Lightgun","title":"Overview"},{"location":"development/input-api/#retropad","text":"The RetroPad is a joypad abstraction interface defined by the Libretro API. It is the primary input device for a libretro frontend. Unless a core absolutely requires the use of a keyboard with no possible fallback for gamepad-type controls, a [[Libretro core]] should always be implemented as such that it is directly controllable by the RetroPad. In terms of button layout and functionality, the RetroPad is based on a PlayStation/Super Nintendo joypad.","title":"RetroPad"},{"location":"development/input-api/#specification","text":"The minimum implementation required for the RetroPad abstraction: At least two shoulder buttons At least four face buttons At least one D-pad At least one analogue stick A Start button and a Select / Back button. Above: An example of the RetroPad joypad abstraction mapped to the Megadrive 6-Button gamepad.","title":"Specification"},{"location":"development/input-api/#digital-retropad","text":"A RetroPad abstraction with all digital controls can be used. The conceptual arrangement for the buttons for the RetroPad is inspired by the Super Nintendo controller and the Sony Playstation DualShock.","title":"Digital RetroPad"},{"location":"development/input-api/#analog-retropad","text":"A RetroPad abstraction with one or more analog inputs can be used. Conceptually inspired by the Sony DualShock2, this adds two analog sticks to the digital RetroPad and allows all buttons to return analog values in the range of [-0x7fff, 0x7fff] , although some devices may return -0x8000 . Positive X axis is right. Positive Y axis is down. Buttons are returned in the range [0, 0x7fff] .","title":"Analog RetroPad"},{"location":"development/input-api/#mouse-input","text":"X and Y coordinates are reported relatively to last poll (poll callback) and it is up to the core to keep track of where the pointer coordinates with respect to the display.","title":"Mouse Input"},{"location":"development/input-api/#pointer-input","text":"The pointer abstraction represents pen, stylus, touch and other input devices that use absolute coordinates with respect to the screen. Coordinates in X and Y are reported as [-0x7fff, 0x7fff] : -0x7fff corresponds to the far left/top of the screen, 0x7fff to the far right/bottom of the screen. The \"screen\" is defined as area that is passed to the frontend and later displayed on the monitor. The frontend is free to scale/resize this screen as it sees fit but (X, Y) = (-0x7fff, -0x7fff) will always correspond to the top-left pixel of the display.","title":"Pointer Input"},{"location":"development/input-api/#keyboard-input","text":"The libretro API allows a core to poll the frontend for the raw current pressed state of keys. There is also a callback available which is called by the frontend in response to keyboard events. down is set if the key is being pressed and false if it is being released. Even though the frontend should try to synchronize keypresses with keycode events, cores should assume that multiple characters can be generated from a single keypress. In other words, keycode events should be treated separately from character events. Similarily if only a keycode event is generated with no corresponding character, the character should be 0 .","title":"Keyboard Input"},{"location":"development/input-api/#lightgun-input","text":"The libretro lightgun abstraction reports X/Y coordinates in screen space (similar to the pointer) in the range [-0x8000, 0x7fff] in both axes, with zero being center and -0x8000 being out of bounds. The core an query the on/off screen state of the lightgun. It features a trigger, start/select buttons, auxiliary action buttons and a directional pad. A forced off-screen shot can be requested for auto-reloading function in some games.","title":"Lightgun Input"},{"location":"development/libretro-overview/","text":"Libretro Development Overview \u00b6 The Libretro API is a lightweight C-based Application Programming Interface (API) that exposes generic audio, video, and input callbacks. Frontends and cores \u00b6 There are two sides to Libretro development: frontends are programs that can run libretro-compatible cores. cores are program (such as a game, emulator, or media player) that has been ported to the libretro API so that it can be executed by libretro frontends. Developers of cores such as standalone games, game emulators, media players, and other applications don\u2019t have to worry about writing different video drivers for Direct3D, OpenGL or worrying about catering to all possible input APIs, sound APIs, joypads, etc. Cores are built as a single library file which can be executed by any frontend that supports the libretro API. The frontend's responsibility is to provide all the implementation-specific details. The core's responsibility is solely to provide the main program. libretro.h \u00b6 The libretro API consists of several functions outlined in libretro.h, found in the RetroArch source package. The API header is compatible with C99 and C++. From C99, the bool type and <stdint.h> are used. The latest version of this file can be found in libretro-common . Core development resources \u00b6 You can see a partial list of the cores which are maintained as part of libretro's github repositories in the section For Users > Core Documentation . Core development overview \u00b6 Visit the overview on libretro core development . Frontend development resources \u00b6 A growing list of libretro frontends is available, reflecting a variety of host systems and use cases. RetroArch Reference Frontend \u00b6 RetroArch is the libretro \"reference frontend\" and is available across a wide range of host platforms. Learn more about RetroARch development in the section For Developers > RetroArch Development . Libretro-powered operating systems \u00b6 Lakka , based on LibreELEC, is Libretro's reference operating system distribution. Below is a partial list of external distributions that also use libretro or RetroArch as part of their backend technology: batocera.linux RetroPie Recalbox Licensing Libretro is an open specification that is 100% free to implement, with no licensing fees or strings attached. Our reference frontend is RetroArch. The two projects are not the same, and this is reflected in the licensing. RetroArch is licensed via GPLv3 whereas the libretro API is a MIT-licensed API.","title":"Libretro Overview"},{"location":"development/libretro-overview/#libretro-development-overview","text":"The Libretro API is a lightweight C-based Application Programming Interface (API) that exposes generic audio, video, and input callbacks.","title":"Libretro Development Overview"},{"location":"development/libretro-overview/#frontends-and-cores","text":"There are two sides to Libretro development: frontends are programs that can run libretro-compatible cores. cores are program (such as a game, emulator, or media player) that has been ported to the libretro API so that it can be executed by libretro frontends. Developers of cores such as standalone games, game emulators, media players, and other applications don\u2019t have to worry about writing different video drivers for Direct3D, OpenGL or worrying about catering to all possible input APIs, sound APIs, joypads, etc. Cores are built as a single library file which can be executed by any frontend that supports the libretro API. The frontend's responsibility is to provide all the implementation-specific details. The core's responsibility is solely to provide the main program.","title":"Frontends and cores"},{"location":"development/libretro-overview/#libretroh","text":"The libretro API consists of several functions outlined in libretro.h, found in the RetroArch source package. The API header is compatible with C99 and C++. From C99, the bool type and <stdint.h> are used. The latest version of this file can be found in libretro-common .","title":"libretro.h"},{"location":"development/libretro-overview/#core-development-resources","text":"You can see a partial list of the cores which are maintained as part of libretro's github repositories in the section For Users > Core Documentation .","title":"Core development resources"},{"location":"development/libretro-overview/#core-development-overview","text":"Visit the overview on libretro core development .","title":"Core development overview"},{"location":"development/libretro-overview/#frontend-development-resources","text":"A growing list of libretro frontends is available, reflecting a variety of host systems and use cases.","title":"Frontend development resources"},{"location":"development/libretro-overview/#retroarch-reference-frontend","text":"RetroArch is the libretro \"reference frontend\" and is available across a wide range of host platforms. Learn more about RetroARch development in the section For Developers > RetroArch Development .","title":"RetroArch Reference Frontend"},{"location":"development/libretro-overview/#libretro-powered-operating-systems","text":"Lakka , based on LibreELEC, is Libretro's reference operating system distribution. Below is a partial list of external distributions that also use libretro or RetroArch as part of their backend technology: batocera.linux RetroPie Recalbox Licensing Libretro is an open specification that is 100% free to implement, with no licensing fees or strings attached. Our reference frontend is RetroArch. The two projects are not the same, and this is reflected in the licensing. RetroArch is licensed via GPLv3 whereas the libretro API is a MIT-licensed API.","title":"Libretro-powered operating systems"},{"location":"development/licenses/","text":"Licenses \u00b6 There is software behind RetroArch and Lakka that is protected by Non-Commercial licenses. It is important to respect the wishes of the developers and people behind the respective projects. See below for a summary of the licenses behind RetroArch and its cores: Non-commercial \u00b6 SOFTWARE LISTED IN THE TABLE BELOW ARE PROTECTED BY NON-COMMERCIAL LICENSES. EVERY ENTRY HAS A HYPERLINK FOR PROOF OF THE SOFTWARE'S LICENSE SOFTWARE LISTED IN THE TABLE BELOW MAY NOT BE SOLD, NOR MAY THEY BE USED IN A COMMERCIAL PRODUCT OR ACTIVITY WITHOUT COPYRIGHT HOLDERS' APPROVAL. Software License Non-commercial Lakka Non-commercial Non-commercial Opera Non-commercial Non-commercial Cannonball Non-commercial Non-commercial Dinothawr Non-commercial Non-commercial FB Alpha Non-commercial Non-commercial FB Alpha 2012 Non-commercial Non-commercial FB Alpha 2012 CPS-1 Non-commercial Non-commercial FB Alpha 2012 CPS-2 Non-commercial Non-commercial FB Alpha 2012 CPS-3 Non-commercial Non-commercial FB Alpha 2012 Neo Geo Non-commercial Non-commercial fMSX Non-commercial Non-commercial Genesis Plus GX Non-commercial Non-commercial MAME 2000 MAME (Non-commercial) Non-commercial MAME 2003 MAME (Non-commercial) Non-commercial MAME 2003 Midway MAME (Non-commercial) Non-commercial MAME 2003-Plus MAME (Non-commercial) Non-commercial MAME 2009 MAME (Non-commercial) Non-commercial MAME 2010 MAME (Non-commercial) Non-commercial MAME 2014 MAME (Non-commercial) Non-commercial MESS 2014 MAME (Non-commercial) Non-commercial PicoDrive MAME (Non-commercial) Non-commercial Snes9x Non-commercial Non-commercial Snes9x 2002 Non-commercial Non-commercial Snes9x 2005 Non-commercial Non-commercial Snes9x 2005 Plus Non-commercial Non-commercial Snes9x 2010 Non-commercial Non-commercial UME 2014 MAME (Non-commercial) Non-commercial Libretro \u00b6 Libretro License Non-commercial LibRetro API MIT RetroArch GPLv3 Lakka Non-commercial Non-commercial libretro/docs MIT libretro/retroarch-assets Attribution 4.0 International (CC BY 4.0) Cores \u00b6 Core License Non-commercial 3D Engine GPLv3 Opera Non-commercial Non-commercial 2048 Public Domain Atari800 GPLv2 Beetle bsnes GPLv2 Beetle Cygne GPLv2 Beetle GBA GPLv2 Beetle Lynx zlib , GPLv2 Beetle NeoPop GPLv2 Beetle PC-FX GPLv2 Beetle PCE FAST GPLv2 Beetle PSX GPLv2 Beetle PSX HW GPLv2 Beetle Saturn GPLv2 Beetle SGX GPLv2 Beetle VB GPLv2 blueMSX GPLv2 bnes GPLv3 bsnes-mercury Accuracy GPLv3 bsnes-mercury Balanced GPLv3 bsnes-mercury Performance GPLv3 bsnes Accuracy GPLv3 bsnes Balanced GPLv3 bsnes C++98 (v085) GPLv3 bsnes Performance GPLv3 Caprice32 GPLv2 ChaiLove MIT Citra GPLv2 Citra Canary/Experimental GPLv2 Craft MIT CrocoDS MIT DeSmuME 2015 GPLv2 DeSmuME GPLv2 Dinothawr Non-commercial Non-commercial Dolphin GPLv2 DOSBox GPLv2 Dummy Core MIT Dungeon Crawl Stone Soup GPLv2+ EasyRPG GPLv3 EightyOne GPLv3 Emux CHIP-8 GPLv2 Emux GB GPLv2 Emux NES GPLv2 Emux SMS GPLv2 FB Alpha Non-commercial Non-commercial FB Alpha 2012 Non-commercial Non-commercial FB Alpha 2012 CPS-1 Non-commercial Non-commercial FB Alpha 2012 CPS-2 Non-commercial Non-commercial FB Alpha 2012 CPS-3 Non-commercial Non-commercial FB Alpha 2012 Neo Geo Non-commercial Non-commercial FCEUmm GPLv2 FFmpeg LGPLv2, GPLv2 Flycast GPLv2 fMSX Non-commercial Non-commercial FreeIntv GPLv3 FreeJ2ME GPLv3 Frodo GPLv2 Fuse GPLv3 Gambatte GPLv2 Game Music Emu GPLv3 Gearboy GPLv3 Gearsystem GPLv3 Genesis Plus GX Non-commercial Non-commercial gpSP GPLv2 GW zlib Handy zlib Hatari GPLv2 higan Accuracy GPLv3 Imageviewer MIT Lutro MIT MAME BSD-3-Clause & GNU GPLv2 MAME 2000 MAME (Non-commercial) Non-commercial MAME 2003 MAME (Non-commercial) Non-commercial MAME 2003 Midway MAME (Non-commercial) Non-commercial MAME 2003-Plus MAME (Non-commercial) Non-commercial MAME 2009 MAME (Non-commercial) Non-commercial MAME 2010 MAME (Non-commercial) Non-commercial MAME 2014 MAME (Non-commercial) Non-commercial MAME 2016 BSD-3-Clause & GNU GPLv2 melonDS GPLv3 Mesen GPLv3 Mesen-S GPLv3 MESS 2014 MAME (Non-commercial) Non-commercial Meteor GPLv3 mGBA MPLv2.0 mpv GPLv3 Mr.Boom MIT Mupen64Plus GPLv3 Mupen64Plus GLES3 GPLv3 Neko Project II Neko Project II Kai MIT Nestopia UE GPLv2 nSide Balanced GPLv3 NXEngine GPLv3 O2EM Artistic License OpenLara BSD-2-Clause P-UAE GPLv2 ParaLLEl N64 GPLv3 PCem GPLv2 PCSX ReARMed GPLv2 PCSX ReARMed [Interpreter] GPLv2 PicoDrive MAME (Non-commercial) Non-commercial PocketCDG MIT PokeMini GPLv3 PPSSPP GPLv2 PrBoom GPLv2 ProSystem GPLv2 PX68k kero_src.txt QuickNES LGPLv2.1+ Redream (libretro fork) GPLv3 REminiscence GPLv3 RemoteJoy GPLv2 Remote RetroPad MIT SameBoy MIT ScummVM GPLv2 Snes9x Non-commercial Non-commercial Snes9x 2002 Non-commercial Non-commercial Snes9x 2005 Non-commercial Non-commercial Snes9x 2005 Plus Non-commercial Non-commercial Snes9x 2010 Non-commercial Non-commercial Stella GPLv2 TempGBA GPLv2 TGB Dual GPLv2 The Powder Toy GPLv3 Theodore GPLv3 TyrQuake GPLv2 UME 2014 MAME (Non-commercial) Non-commercial Uzem GPLv3 VBA-M GPLv2 VBA Next GPLv2 vecx GPLv3 VeMUlator GPLv3 VICE C64 GPLv2 VICE C128 GPLv2 VICE PLUS4 GPLv2 VICE VIC20 GPLv2 Video Processor BSD-2-Clause Virtual Jaguar GPLv3 XRick GPLv3 Yabause GPLv2","title":"Licenses"},{"location":"development/licenses/#licenses","text":"There is software behind RetroArch and Lakka that is protected by Non-Commercial licenses. It is important to respect the wishes of the developers and people behind the respective projects. See below for a summary of the licenses behind RetroArch and its cores:","title":"Licenses"},{"location":"development/licenses/#non-commercial","text":"SOFTWARE LISTED IN THE TABLE BELOW ARE PROTECTED BY NON-COMMERCIAL LICENSES. EVERY ENTRY HAS A HYPERLINK FOR PROOF OF THE SOFTWARE'S LICENSE SOFTWARE LISTED IN THE TABLE BELOW MAY NOT BE SOLD, NOR MAY THEY BE USED IN A COMMERCIAL PRODUCT OR ACTIVITY WITHOUT COPYRIGHT HOLDERS' APPROVAL. Software License Non-commercial Lakka Non-commercial Non-commercial Opera Non-commercial Non-commercial Cannonball Non-commercial Non-commercial Dinothawr Non-commercial Non-commercial FB Alpha Non-commercial Non-commercial FB Alpha 2012 Non-commercial Non-commercial FB Alpha 2012 CPS-1 Non-commercial Non-commercial FB Alpha 2012 CPS-2 Non-commercial Non-commercial FB Alpha 2012 CPS-3 Non-commercial Non-commercial FB Alpha 2012 Neo Geo Non-commercial Non-commercial fMSX Non-commercial Non-commercial Genesis Plus GX Non-commercial Non-commercial MAME 2000 MAME (Non-commercial) Non-commercial MAME 2003 MAME (Non-commercial) Non-commercial MAME 2003 Midway MAME (Non-commercial) Non-commercial MAME 2003-Plus MAME (Non-commercial) Non-commercial MAME 2009 MAME (Non-commercial) Non-commercial MAME 2010 MAME (Non-commercial) Non-commercial MAME 2014 MAME (Non-commercial) Non-commercial MESS 2014 MAME (Non-commercial) Non-commercial PicoDrive MAME (Non-commercial) Non-commercial Snes9x Non-commercial Non-commercial Snes9x 2002 Non-commercial Non-commercial Snes9x 2005 Non-commercial Non-commercial Snes9x 2005 Plus Non-commercial Non-commercial Snes9x 2010 Non-commercial Non-commercial UME 2014 MAME (Non-commercial) Non-commercial","title":"Non-commercial"},{"location":"development/licenses/#libretro","text":"Libretro License Non-commercial LibRetro API MIT RetroArch GPLv3 Lakka Non-commercial Non-commercial libretro/docs MIT libretro/retroarch-assets Attribution 4.0 International (CC BY 4.0)","title":"Libretro"},{"location":"development/licenses/#cores","text":"Core License Non-commercial 3D Engine GPLv3 Opera Non-commercial Non-commercial 2048 Public Domain Atari800 GPLv2 Beetle bsnes GPLv2 Beetle Cygne GPLv2 Beetle GBA GPLv2 Beetle Lynx zlib , GPLv2 Beetle NeoPop GPLv2 Beetle PC-FX GPLv2 Beetle PCE FAST GPLv2 Beetle PSX GPLv2 Beetle PSX HW GPLv2 Beetle Saturn GPLv2 Beetle SGX GPLv2 Beetle VB GPLv2 blueMSX GPLv2 bnes GPLv3 bsnes-mercury Accuracy GPLv3 bsnes-mercury Balanced GPLv3 bsnes-mercury Performance GPLv3 bsnes Accuracy GPLv3 bsnes Balanced GPLv3 bsnes C++98 (v085) GPLv3 bsnes Performance GPLv3 Caprice32 GPLv2 ChaiLove MIT Citra GPLv2 Citra Canary/Experimental GPLv2 Craft MIT CrocoDS MIT DeSmuME 2015 GPLv2 DeSmuME GPLv2 Dinothawr Non-commercial Non-commercial Dolphin GPLv2 DOSBox GPLv2 Dummy Core MIT Dungeon Crawl Stone Soup GPLv2+ EasyRPG GPLv3 EightyOne GPLv3 Emux CHIP-8 GPLv2 Emux GB GPLv2 Emux NES GPLv2 Emux SMS GPLv2 FB Alpha Non-commercial Non-commercial FB Alpha 2012 Non-commercial Non-commercial FB Alpha 2012 CPS-1 Non-commercial Non-commercial FB Alpha 2012 CPS-2 Non-commercial Non-commercial FB Alpha 2012 CPS-3 Non-commercial Non-commercial FB Alpha 2012 Neo Geo Non-commercial Non-commercial FCEUmm GPLv2 FFmpeg LGPLv2, GPLv2 Flycast GPLv2 fMSX Non-commercial Non-commercial FreeIntv GPLv3 FreeJ2ME GPLv3 Frodo GPLv2 Fuse GPLv3 Gambatte GPLv2 Game Music Emu GPLv3 Gearboy GPLv3 Gearsystem GPLv3 Genesis Plus GX Non-commercial Non-commercial gpSP GPLv2 GW zlib Handy zlib Hatari GPLv2 higan Accuracy GPLv3 Imageviewer MIT Lutro MIT MAME BSD-3-Clause & GNU GPLv2 MAME 2000 MAME (Non-commercial) Non-commercial MAME 2003 MAME (Non-commercial) Non-commercial MAME 2003 Midway MAME (Non-commercial) Non-commercial MAME 2003-Plus MAME (Non-commercial) Non-commercial MAME 2009 MAME (Non-commercial) Non-commercial MAME 2010 MAME (Non-commercial) Non-commercial MAME 2014 MAME (Non-commercial) Non-commercial MAME 2016 BSD-3-Clause & GNU GPLv2 melonDS GPLv3 Mesen GPLv3 Mesen-S GPLv3 MESS 2014 MAME (Non-commercial) Non-commercial Meteor GPLv3 mGBA MPLv2.0 mpv GPLv3 Mr.Boom MIT Mupen64Plus GPLv3 Mupen64Plus GLES3 GPLv3 Neko Project II Neko Project II Kai MIT Nestopia UE GPLv2 nSide Balanced GPLv3 NXEngine GPLv3 O2EM Artistic License OpenLara BSD-2-Clause P-UAE GPLv2 ParaLLEl N64 GPLv3 PCem GPLv2 PCSX ReARMed GPLv2 PCSX ReARMed [Interpreter] GPLv2 PicoDrive MAME (Non-commercial) Non-commercial PocketCDG MIT PokeMini GPLv3 PPSSPP GPLv2 PrBoom GPLv2 ProSystem GPLv2 PX68k kero_src.txt QuickNES LGPLv2.1+ Redream (libretro fork) GPLv3 REminiscence GPLv3 RemoteJoy GPLv2 Remote RetroPad MIT SameBoy MIT ScummVM GPLv2 Snes9x Non-commercial Non-commercial Snes9x 2002 Non-commercial Non-commercial Snes9x 2005 Non-commercial Non-commercial Snes9x 2005 Plus Non-commercial Non-commercial Snes9x 2010 Non-commercial Non-commercial Stella GPLv2 TempGBA GPLv2 TGB Dual GPLv2 The Powder Toy GPLv3 Theodore GPLv3 TyrQuake GPLv2 UME 2014 MAME (Non-commercial) Non-commercial Uzem GPLv3 VBA-M GPLv2 VBA Next GPLv2 vecx GPLv3 VeMUlator GPLv3 VICE C64 GPLv2 VICE C128 GPLv2 VICE PLUS4 GPLv2 VICE VIC20 GPLv2 Video Processor BSD-2-Clause Virtual Jaguar GPLv3 XRick GPLv3 Yabause GPLv2","title":"Cores"},{"location":"development/cores/developing-cores/","text":"Developing Libretro Cores \u00b6 Libretro API \u00b6 The Libretro API is a lightweight C-based Application Programming Interface (API) that exposes generic audio, video, and input callbacks. Developers of \"cores\" such as standalone games, game emulators, media players, and other applications don\u2019t have to worry about writing different video drivers for Direct3D, OpenGL or worrying about catering to all possible input APIs, sound APIs, joypads, etc. When you choose to use the libretro API, your program gets turned into a single library file (called a \u2018libretro core\u2019). A frontend that supports the libretro API can then load that library file and run the app. The frontend\u2019s responsibility is to provide all the implementation-specific details. The libretro core\u2019s responsibility is solely to provide the main program. Any project that is ported to work with this API can be made to run on ANY libretro frontend \u2013 now and forever. You maintain a single codebase that only deals with the main program, and you then target one single API (libretro) in order to port your program over to multiple platforms at once. A libretro core written in portable C or C++ can run seamlessly on many platforms with very little or no porting effort. Libretro bindings for other languages are growing increasingly common and comprehensive as well. Licensing Libretro is an open specification that is 100% free to implement, with no licensing fees or strings attached. Our reference frontend is RetroArch. The two projects are not the same, and this is reflected in the licensing. RetroArch is licensed via GPLv3 whereas the libretro API is a MIT-licensed API. Resources for core development \u00b6 Canonical libretro.h \u00b6 The most current canonical copy of libretro.h can be found in the master branch of the libretro-common repository. Tip libretro.h is the single most important technical reference for developers of libretro cores and frontends skeletor sample core \u00b6 RetroArch contributor bparker06 created skeletor as a minimal libretro core implementation. skeletor can also be useful by furnishing the stub libretro Makefile and Makefile.common files. Vectrexia codebase and development log \u00b6 beardypig published a two-part guide ( Part 1 , Part 2 ) describing the process of implementing libretro.h as part of creating Vectrexia , an original emulator core designed for libretro from the ground up. libretro-common \u00b6 libretro-common is a collection of essential cross-platform coding blocks useful for libretro core and frontend development, written primarily in C. Permissively licensed. libretro-deps \u00b6 libretro-deps is a collection of third-party dependencies, pre-modified for use by libretro cores. libretro-samples \u00b6 libretro-samples is a set of illustrations of the libretro API. OpenGL hardware accelerated cores \u00b6 A guide for developing OpenGL accelerated cores is available. Implementing the API \u00b6 The libretro API consists of several functions outlined in libretro.h, found in the RetroArch source package. A libretro implementation should be compiled into a dynamically loadable executable (.dll/.so/.dylib) or a static library (.a/.lib) that exports all the functions outlined in libretro.h. These will be called by the frontend. Implementations are designed to be single-instance, so global state is allowed. Should the frontend call these functions in wrong order, undefined behavior occurs. The API header is compatible with C99 and C++. From C99, the bool type and are used. The program flow of a frontend using the libretro API can be expressed as follows: Startup \u00b6 retro_api_version() \u00b6 This function should return RETRO_API_VERSION, defined in libretro.h. It is used by the frontend to determine if ABI/API are mismatched. The ver- sion will be bumped should there be any non- compatible changes to the API. Changes to retro_* structures, as well as changes in publically visible functions and/or their arguments will warrant a bump in API version. retro_set_*() \u00b6 Libretro is callback based. The frontend will set all callbacks at this stage, and the implementation must store these function pointers somewhere. The frontend can, at a later stage, call these. retro_init() \u00b6 This function is called once, and gives the implementation a chance to initialize data structures. Environment callback \u00b6 While libretro has callbacks for video, audio and input, there\u2019s a callback type dubbed the environment callback. This callback ( retro_environment_t ) is a generic way for the libretro implementation to access features of the API that are considered too obscure to deserve its own symbols. It can be extended without breaking ABI. The callback has a return type of bool which tells if the frontend recognized the request given to it. retro_set_controller_port_device() \u00b6 By default, joypads will be assumed to be inserted into the implementation. If the engine is sensitive to which type of input device is plugged in, the frontend may call this function to set the device to be used for a certain player. The implementation should try to auto-detect this if possible. retro_get_system_info() \u00b6 The frontend will typically request statically known information about the core such as the name of the implementation, version number, etc. The information returned should be stored statically. If dynamic allocation must take place, the implementation must make sure to free this storage in retro_deinit() later. retro_load_game() \u00b6 This function will load content. If the implementation is an emulator, this would be a game ROM image, if it is a game engine, this could be packaged upassets for the game, etc. The function takes a structure that points to the path where the ROM was loaded from, as well as a memory chunk of the already loaded file. There are two modes of loading files with libretro. If the game engine requires to know the path of where the ROM image was loaded from, the need_fullpath field in retro_system_info must be set to true. If the path is required, the frontend will not load the file into the data/size fields, and it is up to the implementation to load the file from disk. The path might be both relative and absolute, and the implementation must check for both cases. This is useful if the ROM image is too large to load into memory at once. It is also useful if the assests consist of many smaller files, where it is necessary to know the path of a master file to infer the paths of the others. If need_fullpath is set to false , the frontend will load the ROM image into memory beforehand. In this mode, the path field is not guaranteed to be non- NULL . It should point to a valid path if the file was indeed, loaded from disk, however, it is possible that the file was loaded from stdin , or similar, which has no well-defined path. It is recommended that need_fullpath is set to false if possible, as it allows more features, such as soft-patching to work correctly. retro_get_system_av_info() \u00b6 This function lets the frontend know essential audio/video properties of the game. As this information can depend on the game being loaded, this info will only be queried after a valid ROM image has been loaded. It is important to accuractely report FPS and audio sampling rates, as FFmpeg recording relies on exact information to be able to run in sync for several hours. Running \u00b6 retro_run() \u00b6 After a game has been loaded successfully, retro_run() will be called repeatedly as long as the user desires. When called, the implementation will perform its inner functionality for one video frame. During this time, the implementation is free to call callbacks for video frames, audio samples, as well as polling input, and querying current input state. The requirements for the callbacks are that video callback is called exactly once, i.e. it does not have to come last. Also, input polling must be called at least once. Input \u00b6 Abstracting joypad and other input devices is the hardest part of defining a multi-system API as it differs across every system. The libretro API therefore provides the RetroPad -- a joypad abstraction available with digital and analog controls -- to allow cores to be written without platform-specific input code. Input device abstractions are also available for keyboards, mice, pointers, and lightguns. Learn more in the Input API docs. Video/Audio synchronization considerations \u00b6 Libretro is based on fixed rates; video FPS and audio sampling rates are always assumed to be constant. Frontends will have control of the speed of playing, typically using VSync to obtain correctspeed. The frontend is free to \"fast-forward\", i.e. play as fast as possible without waiting, or slow-motion. For this reason, the engine should not rely on system timers to perform arbitrary synchronization. This is common and often needed in 3D games to account for varying frame rates while still maintaining a playable game. However, libretro targets classic systems where one can assume that 100% real-time performance will always be met, thus avoiding the need for careful timing code. By default, the libretro implementation should replace any arbitrary sleep() and time() patterns with simply calling video/audio callbacks. The frontend will make sure to apply the proper synchronization. This is mostly a problem with game ports, such as PrBoom. For the libretro port of PrBoom, which heavily relied on timers and sleeping patterns, sleeping was replaced with simply running for one frame, and calling the video callback. After that, enough audio was rendered to correspond to one frames worth of time, 1/fps seconds. All sleeping and timing patterns could be removed, and synchronization was correct. Audio callback options \u00b6 The libretro API has two different audio callbacks. Only one of these should be used; the implementation must choose which callback is best suited. Per-sample audio \u00b6 The first audio callback is per-sample, and has the type void (*)(int16_t, int16_t) . This should be used if the implementation outputs audio on a per-sample basis. The frontend will make sure to partition the audio data into suitable chunks to avoid incurring too much syscall overhead. Batch audio \u00b6 If audio is output in a \"batch\" fashion, i.e. 1 / fps seconds worth of audio data at a time, the batch approach should be considered. Rather than looping over all samples and calling per-sample callback every time, the batch callback should be used instead, size_t (*)(const int16_t *, size_t) . Using the batch callback, audio will not be copied in a temporary buffer, which can buy a slight performance gain. Also, all data will be pushed to audio driver in one go, saving some slight overhead. It is not recommended to use the batch callback for very small (< 32 frames) amounts of data. The data passed to the batch callback should, if possible, be aligned to 16 bytes (depends on platform), to allow accelerated SIMD operations on audio. retro_serialize_size() , retro_serialize() , and retro_unserialize() \u00b6 Serialization is optional to implement. Serialization is better known as \"save states\" in emulators, and these functions are certainly more useful in emulators which have a fixed amount of state. It allows the frontend to take a snapshot of all internal state, and later restore it. This functionality is used to implement e.g. rewind and netplay. Some important considerations must be taken to implement these functions well: If serialization is not supported, retro_serialize_size() should return 0. If retro_serialize_size() returns non-zero, it is assumed that serialization is properly implemented. The frontend should call retro_serialize_size() before calling retro_serialize() to determine the amount of memory needed to correctly serialize. The size eventually passed to retro_serialize() must be at least the size of the value returned in retro_serialize_size() . If too large a buffer is passed to retro_serialize() , the extra data should be ignored (or memset to 0). It is valid for the value returned by retro_serialize_size() to vary over time, however, it cannot ever increase over time. If it should ever change, it must decrease. This is rationaled by the ability to predetermined a fixed save state size right after retro_load_game() that will always be large enough to hold any following serialization. This certainty is fundamental to the rewind implementation. This requirement only holds between calls to retro_load_game() and retro_unload_game() . If possible, the implementation should attempt to serialize data at consistent offsets in the memory buffer. This will greatly help the rewind implementation in RetroArch to use less memory. Both retro_serialize() and retro_unserialize() return a boolean value to let the frontend know if the implementation succeeded in serializing or unserializing. Tear-down \u00b6 retro_unload_game() \u00b6 After the user desired to stop playing, retro_unload_game() will be called. This should free any internal data related to the game, and allow retro_load_game() to be called again. retro_deinit() \u00b6 This function should free all state that was initialized during retro_init() . After calling this function, the frontend can again call retro_init() .","title":"Core Development Overview"},{"location":"development/cores/developing-cores/#developing-libretro-cores","text":"","title":"Developing Libretro Cores"},{"location":"development/cores/developing-cores/#libretro-api","text":"The Libretro API is a lightweight C-based Application Programming Interface (API) that exposes generic audio, video, and input callbacks. Developers of \"cores\" such as standalone games, game emulators, media players, and other applications don\u2019t have to worry about writing different video drivers for Direct3D, OpenGL or worrying about catering to all possible input APIs, sound APIs, joypads, etc. When you choose to use the libretro API, your program gets turned into a single library file (called a \u2018libretro core\u2019). A frontend that supports the libretro API can then load that library file and run the app. The frontend\u2019s responsibility is to provide all the implementation-specific details. The libretro core\u2019s responsibility is solely to provide the main program. Any project that is ported to work with this API can be made to run on ANY libretro frontend \u2013 now and forever. You maintain a single codebase that only deals with the main program, and you then target one single API (libretro) in order to port your program over to multiple platforms at once. A libretro core written in portable C or C++ can run seamlessly on many platforms with very little or no porting effort. Libretro bindings for other languages are growing increasingly common and comprehensive as well. Licensing Libretro is an open specification that is 100% free to implement, with no licensing fees or strings attached. Our reference frontend is RetroArch. The two projects are not the same, and this is reflected in the licensing. RetroArch is licensed via GPLv3 whereas the libretro API is a MIT-licensed API.","title":"Libretro API"},{"location":"development/cores/developing-cores/#resources-for-core-development","text":"","title":"Resources for core development"},{"location":"development/cores/developing-cores/#canonical-libretroh","text":"The most current canonical copy of libretro.h can be found in the master branch of the libretro-common repository. Tip libretro.h is the single most important technical reference for developers of libretro cores and frontends","title":"Canonical libretro.h"},{"location":"development/cores/developing-cores/#skeletor-sample-core","text":"RetroArch contributor bparker06 created skeletor as a minimal libretro core implementation. skeletor can also be useful by furnishing the stub libretro Makefile and Makefile.common files.","title":"skeletor sample core"},{"location":"development/cores/developing-cores/#vectrexia-codebase-and-development-log","text":"beardypig published a two-part guide ( Part 1 , Part 2 ) describing the process of implementing libretro.h as part of creating Vectrexia , an original emulator core designed for libretro from the ground up.","title":"Vectrexia codebase and development log"},{"location":"development/cores/developing-cores/#libretro-common","text":"libretro-common is a collection of essential cross-platform coding blocks useful for libretro core and frontend development, written primarily in C. Permissively licensed.","title":"libretro-common"},{"location":"development/cores/developing-cores/#libretro-deps","text":"libretro-deps is a collection of third-party dependencies, pre-modified for use by libretro cores.","title":"libretro-deps"},{"location":"development/cores/developing-cores/#libretro-samples","text":"libretro-samples is a set of illustrations of the libretro API.","title":"libretro-samples"},{"location":"development/cores/developing-cores/#opengl-hardware-accelerated-cores","text":"A guide for developing OpenGL accelerated cores is available.","title":"OpenGL hardware accelerated cores"},{"location":"development/cores/developing-cores/#implementing-the-api","text":"The libretro API consists of several functions outlined in libretro.h, found in the RetroArch source package. A libretro implementation should be compiled into a dynamically loadable executable (.dll/.so/.dylib) or a static library (.a/.lib) that exports all the functions outlined in libretro.h. These will be called by the frontend. Implementations are designed to be single-instance, so global state is allowed. Should the frontend call these functions in wrong order, undefined behavior occurs. The API header is compatible with C99 and C++. From C99, the bool type and are used. The program flow of a frontend using the libretro API can be expressed as follows:","title":"Implementing the API"},{"location":"development/cores/developing-cores/#startup","text":"","title":"Startup"},{"location":"development/cores/developing-cores/#retro_api_version","text":"This function should return RETRO_API_VERSION, defined in libretro.h. It is used by the frontend to determine if ABI/API are mismatched. The ver- sion will be bumped should there be any non- compatible changes to the API. Changes to retro_* structures, as well as changes in publically visible functions and/or their arguments will warrant a bump in API version.","title":"retro_api_version()"},{"location":"development/cores/developing-cores/#retro_set_","text":"Libretro is callback based. The frontend will set all callbacks at this stage, and the implementation must store these function pointers somewhere. The frontend can, at a later stage, call these.","title":"retro_set_*()"},{"location":"development/cores/developing-cores/#retro_init","text":"This function is called once, and gives the implementation a chance to initialize data structures.","title":"retro_init()"},{"location":"development/cores/developing-cores/#environment-callback","text":"While libretro has callbacks for video, audio and input, there\u2019s a callback type dubbed the environment callback. This callback ( retro_environment_t ) is a generic way for the libretro implementation to access features of the API that are considered too obscure to deserve its own symbols. It can be extended without breaking ABI. The callback has a return type of bool which tells if the frontend recognized the request given to it.","title":"Environment callback"},{"location":"development/cores/developing-cores/#retro_set_controller_port_device","text":"By default, joypads will be assumed to be inserted into the implementation. If the engine is sensitive to which type of input device is plugged in, the frontend may call this function to set the device to be used for a certain player. The implementation should try to auto-detect this if possible.","title":"retro_set_controller_port_device()"},{"location":"development/cores/developing-cores/#retro_get_system_info","text":"The frontend will typically request statically known information about the core such as the name of the implementation, version number, etc. The information returned should be stored statically. If dynamic allocation must take place, the implementation must make sure to free this storage in retro_deinit() later.","title":"retro_get_system_info()"},{"location":"development/cores/developing-cores/#retro_load_game","text":"This function will load content. If the implementation is an emulator, this would be a game ROM image, if it is a game engine, this could be packaged upassets for the game, etc. The function takes a structure that points to the path where the ROM was loaded from, as well as a memory chunk of the already loaded file. There are two modes of loading files with libretro. If the game engine requires to know the path of where the ROM image was loaded from, the need_fullpath field in retro_system_info must be set to true. If the path is required, the frontend will not load the file into the data/size fields, and it is up to the implementation to load the file from disk. The path might be both relative and absolute, and the implementation must check for both cases. This is useful if the ROM image is too large to load into memory at once. It is also useful if the assests consist of many smaller files, where it is necessary to know the path of a master file to infer the paths of the others. If need_fullpath is set to false , the frontend will load the ROM image into memory beforehand. In this mode, the path field is not guaranteed to be non- NULL . It should point to a valid path if the file was indeed, loaded from disk, however, it is possible that the file was loaded from stdin , or similar, which has no well-defined path. It is recommended that need_fullpath is set to false if possible, as it allows more features, such as soft-patching to work correctly.","title":"retro_load_game()"},{"location":"development/cores/developing-cores/#retro_get_system_av_info","text":"This function lets the frontend know essential audio/video properties of the game. As this information can depend on the game being loaded, this info will only be queried after a valid ROM image has been loaded. It is important to accuractely report FPS and audio sampling rates, as FFmpeg recording relies on exact information to be able to run in sync for several hours.","title":"retro_get_system_av_info()"},{"location":"development/cores/developing-cores/#running","text":"","title":"Running"},{"location":"development/cores/developing-cores/#retro_run","text":"After a game has been loaded successfully, retro_run() will be called repeatedly as long as the user desires. When called, the implementation will perform its inner functionality for one video frame. During this time, the implementation is free to call callbacks for video frames, audio samples, as well as polling input, and querying current input state. The requirements for the callbacks are that video callback is called exactly once, i.e. it does not have to come last. Also, input polling must be called at least once.","title":"retro_run()"},{"location":"development/cores/developing-cores/#input","text":"Abstracting joypad and other input devices is the hardest part of defining a multi-system API as it differs across every system. The libretro API therefore provides the RetroPad -- a joypad abstraction available with digital and analog controls -- to allow cores to be written without platform-specific input code. Input device abstractions are also available for keyboards, mice, pointers, and lightguns. Learn more in the Input API docs.","title":"Input"},{"location":"development/cores/developing-cores/#videoaudio-synchronization-considerations","text":"Libretro is based on fixed rates; video FPS and audio sampling rates are always assumed to be constant. Frontends will have control of the speed of playing, typically using VSync to obtain correctspeed. The frontend is free to \"fast-forward\", i.e. play as fast as possible without waiting, or slow-motion. For this reason, the engine should not rely on system timers to perform arbitrary synchronization. This is common and often needed in 3D games to account for varying frame rates while still maintaining a playable game. However, libretro targets classic systems where one can assume that 100% real-time performance will always be met, thus avoiding the need for careful timing code. By default, the libretro implementation should replace any arbitrary sleep() and time() patterns with simply calling video/audio callbacks. The frontend will make sure to apply the proper synchronization. This is mostly a problem with game ports, such as PrBoom. For the libretro port of PrBoom, which heavily relied on timers and sleeping patterns, sleeping was replaced with simply running for one frame, and calling the video callback. After that, enough audio was rendered to correspond to one frames worth of time, 1/fps seconds. All sleeping and timing patterns could be removed, and synchronization was correct.","title":"Video/Audio synchronization considerations"},{"location":"development/cores/developing-cores/#audio-callback-options","text":"The libretro API has two different audio callbacks. Only one of these should be used; the implementation must choose which callback is best suited.","title":"Audio callback options"},{"location":"development/cores/developing-cores/#per-sample-audio","text":"The first audio callback is per-sample, and has the type void (*)(int16_t, int16_t) . This should be used if the implementation outputs audio on a per-sample basis. The frontend will make sure to partition the audio data into suitable chunks to avoid incurring too much syscall overhead.","title":"Per-sample audio"},{"location":"development/cores/developing-cores/#batch-audio","text":"If audio is output in a \"batch\" fashion, i.e. 1 / fps seconds worth of audio data at a time, the batch approach should be considered. Rather than looping over all samples and calling per-sample callback every time, the batch callback should be used instead, size_t (*)(const int16_t *, size_t) . Using the batch callback, audio will not be copied in a temporary buffer, which can buy a slight performance gain. Also, all data will be pushed to audio driver in one go, saving some slight overhead. It is not recommended to use the batch callback for very small (< 32 frames) amounts of data. The data passed to the batch callback should, if possible, be aligned to 16 bytes (depends on platform), to allow accelerated SIMD operations on audio.","title":"Batch audio"},{"location":"development/cores/developing-cores/#retro_serialize_size-retro_serialize-and-retro_unserialize","text":"Serialization is optional to implement. Serialization is better known as \"save states\" in emulators, and these functions are certainly more useful in emulators which have a fixed amount of state. It allows the frontend to take a snapshot of all internal state, and later restore it. This functionality is used to implement e.g. rewind and netplay. Some important considerations must be taken to implement these functions well: If serialization is not supported, retro_serialize_size() should return 0. If retro_serialize_size() returns non-zero, it is assumed that serialization is properly implemented. The frontend should call retro_serialize_size() before calling retro_serialize() to determine the amount of memory needed to correctly serialize. The size eventually passed to retro_serialize() must be at least the size of the value returned in retro_serialize_size() . If too large a buffer is passed to retro_serialize() , the extra data should be ignored (or memset to 0). It is valid for the value returned by retro_serialize_size() to vary over time, however, it cannot ever increase over time. If it should ever change, it must decrease. This is rationaled by the ability to predetermined a fixed save state size right after retro_load_game() that will always be large enough to hold any following serialization. This certainty is fundamental to the rewind implementation. This requirement only holds between calls to retro_load_game() and retro_unload_game() . If possible, the implementation should attempt to serialize data at consistent offsets in the memory buffer. This will greatly help the rewind implementation in RetroArch to use less memory. Both retro_serialize() and retro_unserialize() return a boolean value to let the frontend know if the implementation succeeded in serializing or unserializing.","title":"retro_serialize_size(), retro_serialize(), and retro_unserialize()"},{"location":"development/cores/developing-cores/#tear-down","text":"","title":"Tear-down"},{"location":"development/cores/developing-cores/#retro_unload_game","text":"After the user desired to stop playing, retro_unload_game() will be called. This should free any internal data related to the game, and allow retro_load_game() to be called again.","title":"retro_unload_game()"},{"location":"development/cores/developing-cores/#retro_deinit","text":"This function should free all state that was initialized during retro_init() . After calling this function, the frontend can again call retro_init() .","title":"retro_deinit()"},{"location":"development/cores/dynamic-rate-control/","text":"Dynamic Rate Control for Retro Game Emulators \u00b6 Dynamic Rate Control allows emulator frontends to synchronize both audio and video output at the same time, even when the emulating system has a different refresh rate and audio sampling rate than the gaming system that is being emulated. The method works by dynamically adjusting audio resampling ratios in such ways that ideally, the audio buffer is never underrun nor overrun, thus avoiding blocking on audio. This in turn allows vertical synchronization for video. The audio pitch is adjusted when adjusting audio resampling ratios, but in practice so little, that it is inaudible to the human ear. Read this documenation in PDF form Because the formulas in this documenation have not yet been converted to markdown, please consult the original PDF version . If you can assist in the conversion, please post an issue or PR in the libretro documentation repository . Retro games are highly synchronous. Their audio output rates are linked directly to video refresh rates. Every video frame, the audio chip generates on average a fixed amount of audio samples. Before continuing to emulate the next frame, the generated audio samples must be pushed to an audio buffer of fixed size. If there is not enough space in the audio buffer, the emulator must wait (block) for the buffer to become ready for writing. This is a non-ideal situation as while the emulator is blocking on audio, a vertical refresh might be missed entirely, thus creating stuttering video. Ideal synchronization \u00b6 For an emulator of a retro game system, a key factor in smooth video is vertical refresh synchronization ( VSync ), where each frame of the game maps to a single frame on the monitor. Audio must also be pushed to the speakers without any audio dropouts. This double synchronization requirement poses a problem as any form of synchronization to one modality will negatively affect the other. This is a real problem as an emulator has no way of guaranteeing perfectly equal video refresh rates and audio sampling rates as the original system. On conventional computer hardware, there is no perfect way of knowing the real monitor refresh rates and audio sampling rates either due to tolerances on oscillators. Scope of method \u00b6 As this method aims to implement a method for synchronization when VSync is used, this method is only useful when game frame rate is close to monitor frame rate. If this is not the case, other methods should be employed. Method \u00b6 This method assumes that audio from the emulator is output at regular intervals, e.g. every video frame. The method also assumes that audio is resampled from the game system sampling rate to the sound cards sampling rate. The resampling ratio will be dynamically adjusted every time audio is resampled and subsequently pushed to the audio buffer. Link to full version \u00b6 Because the formulas in this documenation have not yet been converted to markdown, please consult the original PDF version . If you can assist in the conversion, please post an issue or PR in the libretro documentation repository .","title":"Dynamic Rate Control for Emulators"},{"location":"development/cores/dynamic-rate-control/#dynamic-rate-control-for-retro-game-emulators","text":"Dynamic Rate Control allows emulator frontends to synchronize both audio and video output at the same time, even when the emulating system has a different refresh rate and audio sampling rate than the gaming system that is being emulated. The method works by dynamically adjusting audio resampling ratios in such ways that ideally, the audio buffer is never underrun nor overrun, thus avoiding blocking on audio. This in turn allows vertical synchronization for video. The audio pitch is adjusted when adjusting audio resampling ratios, but in practice so little, that it is inaudible to the human ear. Read this documenation in PDF form Because the formulas in this documenation have not yet been converted to markdown, please consult the original PDF version . If you can assist in the conversion, please post an issue or PR in the libretro documentation repository . Retro games are highly synchronous. Their audio output rates are linked directly to video refresh rates. Every video frame, the audio chip generates on average a fixed amount of audio samples. Before continuing to emulate the next frame, the generated audio samples must be pushed to an audio buffer of fixed size. If there is not enough space in the audio buffer, the emulator must wait (block) for the buffer to become ready for writing. This is a non-ideal situation as while the emulator is blocking on audio, a vertical refresh might be missed entirely, thus creating stuttering video.","title":"Dynamic Rate Control for Retro Game Emulators"},{"location":"development/cores/dynamic-rate-control/#ideal-synchronization","text":"For an emulator of a retro game system, a key factor in smooth video is vertical refresh synchronization ( VSync ), where each frame of the game maps to a single frame on the monitor. Audio must also be pushed to the speakers without any audio dropouts. This double synchronization requirement poses a problem as any form of synchronization to one modality will negatively affect the other. This is a real problem as an emulator has no way of guaranteeing perfectly equal video refresh rates and audio sampling rates as the original system. On conventional computer hardware, there is no perfect way of knowing the real monitor refresh rates and audio sampling rates either due to tolerances on oscillators.","title":"Ideal synchronization"},{"location":"development/cores/dynamic-rate-control/#scope-of-method","text":"As this method aims to implement a method for synchronization when VSync is used, this method is only useful when game frame rate is close to monitor frame rate. If this is not the case, other methods should be employed.","title":"Scope of method"},{"location":"development/cores/dynamic-rate-control/#method","text":"This method assumes that audio from the emulator is output at regular intervals, e.g. every video frame. The method also assumes that audio is resampled from the game system sampling rate to the sound cards sampling rate. The resampling ratio will be dynamically adjusted every time audio is resampled and subsequently pushed to the audio buffer.","title":"Method"},{"location":"development/cores/dynamic-rate-control/#link-to-full-version","text":"Because the formulas in this documenation have not yet been converted to markdown, please consult the original PDF version . If you can assist in the conversion, please post an issue or PR in the libretro documentation repository .","title":"Link to full version"},{"location":"development/cores/opengl-cores/","text":"Use case for Libretro OpenGL API \u00b6 What do most modern platforms have in common? \u00b6 Answer : OpenGL or OpenGL ES. These APIs allow us to write 3D graphics-based applications: * In a platform-agnostic way * With hardware acceleration * Using a standard language/API What do these platforms not have in common? \u00b6 Audio Input Shader Windowing implementations User interfaces Touchscreen overlays Camera Sensors Development environments What is not portable about OpenGL? \u00b6 Symbol wrapper lookup (necessary on Windows) Divergent subsets of API functionality (GLES \u00bd/3, GL 1.5/\u2154/4) Windowing interfacing context drivers per platform Display frontend for each platform Post-processing by way of shaders Libretro's OpenGL implementation is designed specifically to address the practicalities of extending OpenGL and OpenGL ES hardware acceleration to the wide variety of architectures and environments supported by the libretro ecosystem. Implementing OpenGL accelerated cores \u00b6 Libretro GL provides a portable solution for OpenGL-based hardware acceleration along with the rest of libretro's simple but comprehensive API. The Libretro API allows cores to use OpenGL (GL2+ or GLES2) directly in addition to frontend features, such as multi-pass shaders. This is accomplished by letting cores render to frame buffer objects (FBOs) instead of the back buffer. Important GL drivers must support render-to-texture extensions for this to work. Application model \u00b6 Using OpenGL in a libretro context is somewhat different than when you use libraries like SDL, GLFW or SFML. In libretro, the frontend owns the OpenGL context. For an application using conventional libraries like SDL, the application will do this: Initialize, create a window of specific size Initialize OpenGL resources Per frame, handle window events (resize), handle input, render as desired, swap buffers Tear down context and window Using libretro API, platform specifics like managing windows, rendering surfaces and input are all handled by the frontend. The core will only deal with rendering to a surface. The core renders to an FBO of fixed size, determined by the core. The frontend takes this rendered data and stretches to screen as desired by the user. It can apply shaders, change aspect ratio, etc. This model is equivalent to software rendering where retro_video_refresh_t_callback is called. Using OpenGL in libretro \u00b6 Use RETRO_ENVIRONMENT_SET_PIXEL_FORMAT and request a 32-bit format. This is the format that the resulting framebuffer will have. In reality, RetroArch converts all 16-bit data ( RETRO_PIXEL_FORMAT_RGB565 ) to 32-bit ( XRGB8888 ) when running desktop GL for performance reasons. In GLES mode, this is not done, however. Do not rely on this behavior, and be explicit about it. Use RETRO_ENVIRONMENT_SET_HW_RENDER environment callback in retro_load_game() , notifying frontend that core is using hardware rendering. An OpenGL 2+ or GLES2 context can be specified here. If this is not supported the callback will return false, and you can fallback to software rendering or refuse to start. In retro_get_system_av_info() , as normal, max_width and max_height fields specify the maximum resolution the core will render to. When the frontend has created a context or reset the context, retro_hw_context_reset_t is called. Here, OpenGL resources can be initialized. The frontend can reset the context at will (e.g. when changing from fullscreen to windowed mode and vice versa). The core should take this into account. It will be notified when reinitialization needs to happen. A callback to grab OpenGL symbols is exposed via retro_hw_get_proc_address_t . Use this to retrieve symbols and extensions. In retro_run() , use retro_hw_get_current_framebuffer_t callback to get which FBO to render to, e.g. glBindFramebuffer(GL_FRAMEBUFFER, get_current_framebuffer()) . This is your \"backbuffer\". Do not attempt to render to the real backbuffer. You must call this every frame as it can change every frame. The dimensions of this FBO are at least as big as declared in max_width and max_height . If desired, the FBO also has a depth buffer attached (see RETRO_ENVIRONMENT_SET_HW_RENDER ). When done rendering, call retro_video_refresh_t with the macro RETRO_HW_FRAMEBUFFER_VALID as argument for buffer. Width and height should be specified as well, but pitch argument is irrelevant and will be ignored. If the frame is duped (see RETRO_ENVIRONMENT_CAN_DUPE ), the buffer argument takes NULL as normal. Important considerations in the OpenGL code \u00b6 The frontend and libretro core share OpenGL context state. Some considerations have to be taken into account for this cooperation to work nicely. Don\u2019t leave buffers and global objects bound when calling retro_video_refresh_t . Make sure to unbind everything, i.e. VAOs, VBOs, shader programs, textures, etc. Failing to do this could potentially hit strange bugs. The frontend will also follow this rule to avoid clashes. Being tidy here is considered good practice anyway. The GL viewport will be modified by frontend as well as libretro core. Set this every frame. glEnable() state like depth testing, etc, is likely to be disabled in frontend as it's just rendering a quad to screen. Enable this per-frame if you use depth testing. There is no need to disable this before calling retro_video_refresh_t . Avoid VAOs. They tend to break on less-than-stellar drivers, such as AMD drivers on Windows as of 2013 Try to write code which is GLES2 as well as GL2+ (w/ extensions) compliant. This ensures maximum target surface for the libretro core. Libretro treats top-left as origin. OpenGL treats bottom-left as origin. To be compatible with the libretro model, top-left semantics are preserved. Rendering normally will cause the image to be flipped vertically. To avoid this, simply scale the final projection matrix by [1,\u2212 1 , 1 ,1] . Test implementations \u00b6 Several OpenGL demonstrations are available in libretro-samples A demonstration OpenGL core is available which uses instanced rendering of a textured cube, with FPS-style fly-by camera and libretro\u2019s mouse API as well. It is valid GLES and GL2 at the same time. Building a libretro core \u00b6 Libretro is an interface, and not a utility library. Libretro cores are built as standalone dynamic or static libraries, and as they use GL symbols here, they must link against GL symbols themselves. An example of how this can be done is shown in the test implementation .","title":"OpenGL Accelerated Cores"},{"location":"development/cores/opengl-cores/#use-case-for-libretro-opengl-api","text":"","title":"Use case for Libretro OpenGL API"},{"location":"development/cores/opengl-cores/#what-do-most-modern-platforms-have-in-common","text":"Answer : OpenGL or OpenGL ES. These APIs allow us to write 3D graphics-based applications: * In a platform-agnostic way * With hardware acceleration * Using a standard language/API","title":"What do most modern platforms have in common?"},{"location":"development/cores/opengl-cores/#what-do-these-platforms-not-have-in-common","text":"Audio Input Shader Windowing implementations User interfaces Touchscreen overlays Camera Sensors Development environments","title":"What do these platforms not have in common?"},{"location":"development/cores/opengl-cores/#what-is-not-portable-about-opengl","text":"Symbol wrapper lookup (necessary on Windows) Divergent subsets of API functionality (GLES \u00bd/3, GL 1.5/\u2154/4) Windowing interfacing context drivers per platform Display frontend for each platform Post-processing by way of shaders Libretro's OpenGL implementation is designed specifically to address the practicalities of extending OpenGL and OpenGL ES hardware acceleration to the wide variety of architectures and environments supported by the libretro ecosystem.","title":"What is not portable about OpenGL?"},{"location":"development/cores/opengl-cores/#implementing-opengl-accelerated-cores","text":"Libretro GL provides a portable solution for OpenGL-based hardware acceleration along with the rest of libretro's simple but comprehensive API. The Libretro API allows cores to use OpenGL (GL2+ or GLES2) directly in addition to frontend features, such as multi-pass shaders. This is accomplished by letting cores render to frame buffer objects (FBOs) instead of the back buffer. Important GL drivers must support render-to-texture extensions for this to work.","title":"Implementing OpenGL accelerated cores"},{"location":"development/cores/opengl-cores/#application-model","text":"Using OpenGL in a libretro context is somewhat different than when you use libraries like SDL, GLFW or SFML. In libretro, the frontend owns the OpenGL context. For an application using conventional libraries like SDL, the application will do this: Initialize, create a window of specific size Initialize OpenGL resources Per frame, handle window events (resize), handle input, render as desired, swap buffers Tear down context and window Using libretro API, platform specifics like managing windows, rendering surfaces and input are all handled by the frontend. The core will only deal with rendering to a surface. The core renders to an FBO of fixed size, determined by the core. The frontend takes this rendered data and stretches to screen as desired by the user. It can apply shaders, change aspect ratio, etc. This model is equivalent to software rendering where retro_video_refresh_t_callback is called.","title":"Application model"},{"location":"development/cores/opengl-cores/#using-opengl-in-libretro","text":"Use RETRO_ENVIRONMENT_SET_PIXEL_FORMAT and request a 32-bit format. This is the format that the resulting framebuffer will have. In reality, RetroArch converts all 16-bit data ( RETRO_PIXEL_FORMAT_RGB565 ) to 32-bit ( XRGB8888 ) when running desktop GL for performance reasons. In GLES mode, this is not done, however. Do not rely on this behavior, and be explicit about it. Use RETRO_ENVIRONMENT_SET_HW_RENDER environment callback in retro_load_game() , notifying frontend that core is using hardware rendering. An OpenGL 2+ or GLES2 context can be specified here. If this is not supported the callback will return false, and you can fallback to software rendering or refuse to start. In retro_get_system_av_info() , as normal, max_width and max_height fields specify the maximum resolution the core will render to. When the frontend has created a context or reset the context, retro_hw_context_reset_t is called. Here, OpenGL resources can be initialized. The frontend can reset the context at will (e.g. when changing from fullscreen to windowed mode and vice versa). The core should take this into account. It will be notified when reinitialization needs to happen. A callback to grab OpenGL symbols is exposed via retro_hw_get_proc_address_t . Use this to retrieve symbols and extensions. In retro_run() , use retro_hw_get_current_framebuffer_t callback to get which FBO to render to, e.g. glBindFramebuffer(GL_FRAMEBUFFER, get_current_framebuffer()) . This is your \"backbuffer\". Do not attempt to render to the real backbuffer. You must call this every frame as it can change every frame. The dimensions of this FBO are at least as big as declared in max_width and max_height . If desired, the FBO also has a depth buffer attached (see RETRO_ENVIRONMENT_SET_HW_RENDER ). When done rendering, call retro_video_refresh_t with the macro RETRO_HW_FRAMEBUFFER_VALID as argument for buffer. Width and height should be specified as well, but pitch argument is irrelevant and will be ignored. If the frame is duped (see RETRO_ENVIRONMENT_CAN_DUPE ), the buffer argument takes NULL as normal.","title":"Using OpenGL in libretro"},{"location":"development/cores/opengl-cores/#important-considerations-in-the-opengl-code","text":"The frontend and libretro core share OpenGL context state. Some considerations have to be taken into account for this cooperation to work nicely. Don\u2019t leave buffers and global objects bound when calling retro_video_refresh_t . Make sure to unbind everything, i.e. VAOs, VBOs, shader programs, textures, etc. Failing to do this could potentially hit strange bugs. The frontend will also follow this rule to avoid clashes. Being tidy here is considered good practice anyway. The GL viewport will be modified by frontend as well as libretro core. Set this every frame. glEnable() state like depth testing, etc, is likely to be disabled in frontend as it's just rendering a quad to screen. Enable this per-frame if you use depth testing. There is no need to disable this before calling retro_video_refresh_t . Avoid VAOs. They tend to break on less-than-stellar drivers, such as AMD drivers on Windows as of 2013 Try to write code which is GLES2 as well as GL2+ (w/ extensions) compliant. This ensures maximum target surface for the libretro core. Libretro treats top-left as origin. OpenGL treats bottom-left as origin. To be compatible with the libretro model, top-left semantics are preserved. Rendering normally will cause the image to be flipped vertically. To avoid this, simply scale the final projection matrix by [1,\u2212 1 , 1 ,1] .","title":"Important considerations in the OpenGL code"},{"location":"development/cores/opengl-cores/#test-implementations","text":"Several OpenGL demonstrations are available in libretro-samples A demonstration OpenGL core is available which uses instanced rendering of a textured cube, with FPS-style fly-by camera and libretro\u2019s mouse API as well. It is valid GLES and GL2 at the same time.","title":"Test implementations"},{"location":"development/cores/opengl-cores/#building-a-libretro-core","text":"Libretro is an interface, and not a utility library. Libretro cores are built as standalone dynamic or static libraries, and as they use GL symbols here, they must link against GL symbols themselves. An example of how this can be done is shown in the test implementation .","title":"Building a libretro core"},{"location":"development/cores/core-specific/dolphin/","text":"Nintendo Gamecube/Wii (Dolphin) \u00b6 Requirements \u00b6 CMake How to compile (for Windows x64 - Visual Studio 2017) \u00b6 In addition to the requirement(s) listed above, you will also need Visual Studio 2017 installed in order for the following to work. Enter the following commands (from the Dolphin source directory): 1 2 3 4 mkdir build cd build cmake .. -DLIBRETRO=ON -DCMAKE_BUILD_TYPE=Release -G\"Visual Studio 15 2017 Win64\" cmake --build . --target dolphin_libretro --config Release","title":"Nintendo - GameCube/Wii (Dolphin)"},{"location":"development/cores/core-specific/dolphin/#nintendo-gamecubewii-dolphin","text":"","title":"Nintendo Gamecube/Wii (Dolphin)"},{"location":"development/cores/core-specific/dolphin/#requirements","text":"CMake","title":"Requirements"},{"location":"development/cores/core-specific/dolphin/#how-to-compile-for-windows-x64-visual-studio-2017","text":"In addition to the requirement(s) listed above, you will also need Visual Studio 2017 installed in order for the following to work. Enter the following commands (from the Dolphin source directory): 1 2 3 4 mkdir build cd build cmake .. -DLIBRETRO=ON -DCMAKE_BUILD_TYPE=Release -G\"Visual Studio 15 2017 Win64\" cmake --build . --target dolphin_libretro --config Release","title":"How to compile (for Windows x64 - Visual Studio 2017)"},{"location":"development/cores/core-specific/ishiiruka/","text":"Nintendo Gamecube/Wii (Ishiiruka) \u00b6 Requirements \u00b6 CMake How to compile (for Windows x64 - Visual Studio 2017) \u00b6 In addition to the requirement(s) listed above, you will also need Visual Studio 2017 installed in order for the following to work. Enter the following commands (from the Ishiiruka source directory): 1 2 3 4 mkdir build cd build cmake .. -DLIBRETRO=ON -DCMAKE_BUILD_TYPE=Release -G\"Visual Studio 15 2017 Win64\" cmake --build . --target ishiiruka_libretro --config Release","title":"Nintendo - GameCube/Wii (Ishiiruka)"},{"location":"development/cores/core-specific/ishiiruka/#nintendo-gamecubewii-ishiiruka","text":"","title":"Nintendo Gamecube/Wii (Ishiiruka)"},{"location":"development/cores/core-specific/ishiiruka/#requirements","text":"CMake","title":"Requirements"},{"location":"development/cores/core-specific/ishiiruka/#how-to-compile-for-windows-x64-visual-studio-2017","text":"In addition to the requirement(s) listed above, you will also need Visual Studio 2017 installed in order for the following to work. Enter the following commands (from the Ishiiruka source directory): 1 2 3 4 mkdir build cd build cmake .. -DLIBRETRO=ON -DCMAKE_BUILD_TYPE=Release -G\"Visual Studio 15 2017 Win64\" cmake --build . --target ishiiruka_libretro --config Release","title":"How to compile (for Windows x64 - Visual Studio 2017)"},{"location":"development/cores/core-specific/mame-2003-plus/","text":"MAME 2003-Plus Development \u00b6 Build environement \u00b6 MAME 2003-Plus is generally compatibile with the RetroArch build environments that can be found in the docs section For Developers -> RetroArch -> Compilation Guides . Submitting Control Names \u00b6 Note: This first half of this section is written for users who cannot submit code themselves so that coders have the information necessary to assist. The second half is the process written from a coding perspective. Background reference: controls.dat \u00b6 As part of mame2003 we have an 'automated port' of the MAME 0.141 controls.dat project information . It address many, but not all games supported by mame2003-plus. Therefore in many cases adding new control labels can be as simple as adding the existing controls.dat metadata to a driver declaration. However as part of that process the controls.dat metadata needs to be checked in two ways before it can be added: 1. From the user perspective: are the control names actually correct 2. From the coder perspective: does the switch logic in the controls.dat naming function work as intended Users: Necessary Information \u00b6 Games affected \u00b6 Often clones and even different games that share the same hardware platform and operating system share the same control names. Please do as best you can to submit a complete list of all games which share the control names you are submitting so that it can be applied comprehensively. For example there are quite a few games in the CPS1 driver which use the same control labels as sf2 , Street Fighter 2. In that driver, the sf2 control labels are applied all games listed as being a clone of sf2 or a clone of sf2ce . List of control names \u00b6 Please submit your list of control names in a plain text list following the format below with one name to a line and the control number on the left. Naming standard \u00b6 The standard we use for determining the proper text to use for the name is to refer to current MAME. That is considered the canonical reference. For example the button names for Street Fighter 2 would be submitted as: BUTTON1: \"Jab Punch\" BUTTON2: \"Strong Punch\" BUTTON3: \"Fierce Punch\" BUTTON4: \"Short Kick\" BUTTON5: \"Forward Kick\" BUTTON6: \"Roundhouse Kick\" Coders: Implementation \u00b6 Custom button names are added by creating a ControlInfo struct and a button label function in the driver such for Street Fighter 2 and its clones. Note that in the button labeler function we prefix the name of the control with a macro like BTN1 , BTN2 , etc. so that there is a reference to the original MAME button number still visible in the libretro frontend. Generic and custom joystick labels \u00b6 There are two generic joystick labeling functions available for control panels with joysticks that have no game-specific labels. joy2way_labels returns only generic Left and Right strings. joy4way_labels returns only generic Left , Right , Up , and Down strings for 4-way and 8-way joysticks An example of game-specific 8-way joystick labels is Street Fighter 2, which uses Crouch instead of Down and Jump instead of Up . Street Fighter 2 is therefore is not suitable for the generic function. Street Fighter 2 Example \u00b6 In this case, we were able to incorporate some of the control.dat metadata which populates the st2_ctrl struct: const struct ControlInfo sf2_ctrl = { false , /* alternating_controls */ true , /* mirrored_controls */ \"\" , /* control_details */ & sf2_get_btn }; const char * sf2_get_btn ( int type ) { switch ( type ) { /* P1NumButtons=6 */ case ( IPT_OSD_DESCRIPTION ) : return \"8-way Joystick+joy8way\" ; case IPT_BUTTON1 : return BTN1 \"Jab Punch\" ; case IPT_BUTTON2 : return BTN2 \"Strong Punch\" ; case IPT_BUTTON3 : return BTN3 \"Fierce Punch\" ; case IPT_BUTTON4 : return BTN4 \"Short Kick\" ; case IPT_BUTTON5 : return BTN5 \"Forward Kick\" ; case IPT_BUTTON6 : return BTN6 \"Roundhouse Kick\" ; case IPT_JOYSTICK_UP : return \"Jump\" ; case IPT_JOYSTICK_DOWN : return \"Crouch\" ; case IPT_JOYSTICK_LEFT : return \"Left\" ; case IPT_JOYSTICK_RIGHT : return \"Right\" ; } /* end of switch */ return generic_btn_label ( type ); } Driver Declaration \u00b6 Then you indicate the change for the appropriate romsets by adding a new letter ( C ) to the macro name and adding a function pointer to the struct. In other words, the GAME driver macro becomes GAMEC . Before: \u00b6 GAME ( 1991 , sf2 , 0 , sf2 , sf2 , cps1 , ROT0 , \"Capcom\" , \"Street Fighter II - The World Warrior (World 910522)\" ) After: \u00b6 GAMEC ( 1991 , sf2 , 0 , sf2 , sf2 , cps1 , ROT0 , \"Capcom\" , \"Street Fighter II - The World Warrior (World 910522)\" , & sf2_ctrl , NULL ) Note that a NULL is also added to the end of the macro. That parameter is used for NVRAM bootstraps. The same driver macro is used for adding controls and bootstraps in order to avoid having more and more macros. If this game also had an NVRAM bootstrap, the bootstrap would be included rather than NULL. Stone Ball Example \u00b6 In this case we do not currently have much control metadata, so the implementation is minimal: const struct ControlInfo stonebal_ctrl = { false , /* alternating_controls */ false , /* mirrored_controls */ \"\" , /* control__details */ & stonebal_get_btn }; const char * stonebal_get_btn ( int type ) { switch ( type ) { case IPT_BUTTON1 : return BTN1 \"Shoot/Fight\" ; case IPT_BUTTON2 : return BTN2 \"Pass/Tackle\" ; case IPT_BUTTON3 : return BTN3 \"Push\" ; } /* end of switch */ return generic_btn_label ( type ); } Driver Declaration \u00b6 Before: \u00b6 GAME ( 1994 , stonebal , 0 , stonebal , stonebal , stonebal , ROT0 , \"Art and Magic\" , \"Stone Ball (4 Players)\" ) GAME ( 1994 , stoneba2 , stonebal , stonebal , stonebal , stonebal , ROT0 , \"Art and Magic\" , \"Stone Ball (2 Players)\" ) After: \u00b6 GAMEC ( 1994 , stonebal , 0 , stonebal , stonebal , stonebal , ROT0 , \"Art and Magic\" , \"Stone Ball (4 Players)\" , & stonebal_ctrl , NULL ) GAMEC ( 1994 , stoneba2 , stonebal , stonebal , stonebal , stonebal , ROT0 , \"Art and Magic\" , \"Stone Ball (2 Players)\" , & stonebal_ctrl , NULL ) Note that a NULL is also added to the end of the macro. That parameter is used for NVRAM bootstraps. The same driver macro is used for adding controls and bootstraps in order to avoid having more and more macros. If this game also had an NVRAM bootstrap, the bootstrap would be included rather than NULL. Adding an NVRAM Bootstrap \u00b6 Purpose and criteria for bootstraps \u00b6 The purpose of the NVRAM bootstrap functionality is to create a good user experience the first time a game is booted. When the behavior of a game on its first boot is impossible for a new user to tell from a crash, then a bootstrap is in order. More specifically, the conditions for adding a bootstrap are: * It is not clear what the user needs to do to get into the game or * It is not reasonably possible for the user to get into the game using a SNES controller or arcade control panel Example commit \u00b6 This doc will use the process of adding an nvram bootstrap for the game \"Run and Gun (US ver. UAB)\" with the driver name rungunu . Step 1: Generate a working NVRAM file \u00b6 The exact process is game-specific. Step 2: Compile and execute bin2c \u00b6 git clone http://github.com/libretro/mame2003-plus-libretro cd mame2003-plus-libretro cd tools/bin2c make ./bin2c -o rungunu_bootstrap.c rungunu.nv Output \u00b6 The generated output will look like this: const unsigned char rungunu_nv_bytes [] = { 4 , 38 , 251 , 217 , 146 , 71 , 85 , 65 , 66 , 0 , 16 , 3 , 7 , 3 , 0 , 0 , 0 , 0 , 0 , 7 , 7 , 0 , 7 , 26 , 1 , 16 , 26 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , }; const unsigned int rungunu_nv_length = 128 ; Step 3: Create a bin2cFILE \u00b6 The next step is manual -- putting the data that bin2c generated into the format that the core uses: struct bin2cFILE { const unsigned int length ; const unsigned char data []; }; Resulting bootstrap structure \u00b6 const struct bin2cFILE rungunu_bootstrap = { 128 , { 4 , 38 , 251 , 217 , 146 , 71 , 85 , 65 , 66 , 0 , 16 , 3 , 7 , 3 , 0 , 0 , 0 , 0 , 0 , 7 , 7 , 0 , 7 , 26 , 1 , 16 , 26 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , } }; Step 4: Setup the various source files \u00b6 Add rungunu_bootstrap to bootstrap.c and bootstrap.h . If rungun.c didn't already include the necessary headers from a prior bootstrap project I would have needed to add: #include \"bootstrap.h\" #include \"inptport.h\" Step 5: Declare the bootstrap in the driver \u00b6 Original: \u00b6 GAMEX ( 1993 , rungunu , 0 , rng , rng , rng , ROT0 , \"Konami\" , \"Run and Gun (US ver. UAB)\" , GAME_IMPERFECT_GRAPHICS | GAME_IMPERFECT_COLORS | GAME_IMPERFECT_SOUND ) Bootstrapped: \u00b6 GAMECX ( 1993 , rungunu , 0 , rng , rng , rng , ROT0 , \"Konami\" , \"Run and Gun (US ver. UAB)\" , GAME_IMPERFECT_GRAPHICS | GAME_IMPERFECT_COLORS | GAME_IMPERFECT_SOUND , & generic_ctrl , & rungun_bootstrap ) Important The newer driver macros that support setting the bootstrap pointer also need a button labeling function pointer. If there is no existing control name function, passing &generic_ctrl suffices. Compiling a PR for testing \u00b6 Note: For purposes of this guide, replace PR_NUMBER with the literal number of the github Pull Request you are interested in testing. For example, if you are interested in testing out the Pull Request which implemented the libretro analog input API, you would substitute PR_NUMBER below with 590 , the PR number for that request . *nix or msys: \u00b6 git clone https://github.com/libretro/mame2003-plus-libretro.git patch -p1 -d mame2003-plus-libretro < < ( wget -qO- https://patch-diff.githubusercontent.com/raw/libretro/mame2003-plus-libretro/pull/PR_NUMBER.diff ) cd mame2003-plus-libretro make Note: If you are using the standard libretro/RetroArch msys2 environment, you will first need to install patch with this command: pacman -S patch RetroPie \u00b6 cd ~/RetroPie-Setup/ sudo ./retropie_packages.sh lr-mame2003-plus clean sudo ./retropie_packages.sh lr-mame2003-plus sources sudo patch -p1 -d tmp/build/lr-mame2003-plus < < ( wget -qO- https://patch-diff.githubusercontent.com/raw/libretro/mame2003-plus-libretro/pull/PR_NUMBER.diff ) rm 590 .diff sudo ./retropie_packages.sh lr-mame2003-plus build sudo ./retropie_packages.sh lr-mame2003-plus build install","title":"MAME 2003-Plus"},{"location":"development/cores/core-specific/mame-2003-plus/#mame-2003-plus-development","text":"","title":"MAME 2003-Plus Development"},{"location":"development/cores/core-specific/mame-2003-plus/#build-environement","text":"MAME 2003-Plus is generally compatibile with the RetroArch build environments that can be found in the docs section For Developers -> RetroArch -> Compilation Guides .","title":"Build environement"},{"location":"development/cores/core-specific/mame-2003-plus/#submitting-control-names","text":"Note: This first half of this section is written for users who cannot submit code themselves so that coders have the information necessary to assist. The second half is the process written from a coding perspective.","title":"Submitting Control Names"},{"location":"development/cores/core-specific/mame-2003-plus/#background-reference-controlsdat","text":"As part of mame2003 we have an 'automated port' of the MAME 0.141 controls.dat project information . It address many, but not all games supported by mame2003-plus. Therefore in many cases adding new control labels can be as simple as adding the existing controls.dat metadata to a driver declaration. However as part of that process the controls.dat metadata needs to be checked in two ways before it can be added: 1. From the user perspective: are the control names actually correct 2. From the coder perspective: does the switch logic in the controls.dat naming function work as intended","title":"Background reference: controls.dat"},{"location":"development/cores/core-specific/mame-2003-plus/#users-necessary-information","text":"","title":"Users: Necessary Information"},{"location":"development/cores/core-specific/mame-2003-plus/#games-affected","text":"Often clones and even different games that share the same hardware platform and operating system share the same control names. Please do as best you can to submit a complete list of all games which share the control names you are submitting so that it can be applied comprehensively. For example there are quite a few games in the CPS1 driver which use the same control labels as sf2 , Street Fighter 2. In that driver, the sf2 control labels are applied all games listed as being a clone of sf2 or a clone of sf2ce .","title":"Games affected"},{"location":"development/cores/core-specific/mame-2003-plus/#list-of-control-names","text":"Please submit your list of control names in a plain text list following the format below with one name to a line and the control number on the left.","title":"List of control names"},{"location":"development/cores/core-specific/mame-2003-plus/#naming-standard","text":"The standard we use for determining the proper text to use for the name is to refer to current MAME. That is considered the canonical reference. For example the button names for Street Fighter 2 would be submitted as: BUTTON1: \"Jab Punch\" BUTTON2: \"Strong Punch\" BUTTON3: \"Fierce Punch\" BUTTON4: \"Short Kick\" BUTTON5: \"Forward Kick\" BUTTON6: \"Roundhouse Kick\"","title":"Naming standard"},{"location":"development/cores/core-specific/mame-2003-plus/#coders-implementation","text":"Custom button names are added by creating a ControlInfo struct and a button label function in the driver such for Street Fighter 2 and its clones. Note that in the button labeler function we prefix the name of the control with a macro like BTN1 , BTN2 , etc. so that there is a reference to the original MAME button number still visible in the libretro frontend.","title":"Coders: Implementation"},{"location":"development/cores/core-specific/mame-2003-plus/#generic-and-custom-joystick-labels","text":"There are two generic joystick labeling functions available for control panels with joysticks that have no game-specific labels. joy2way_labels returns only generic Left and Right strings. joy4way_labels returns only generic Left , Right , Up , and Down strings for 4-way and 8-way joysticks An example of game-specific 8-way joystick labels is Street Fighter 2, which uses Crouch instead of Down and Jump instead of Up . Street Fighter 2 is therefore is not suitable for the generic function.","title":"Generic and custom joystick labels"},{"location":"development/cores/core-specific/mame-2003-plus/#street-fighter-2-example","text":"In this case, we were able to incorporate some of the control.dat metadata which populates the st2_ctrl struct: const struct ControlInfo sf2_ctrl = { false , /* alternating_controls */ true , /* mirrored_controls */ \"\" , /* control_details */ & sf2_get_btn }; const char * sf2_get_btn ( int type ) { switch ( type ) { /* P1NumButtons=6 */ case ( IPT_OSD_DESCRIPTION ) : return \"8-way Joystick+joy8way\" ; case IPT_BUTTON1 : return BTN1 \"Jab Punch\" ; case IPT_BUTTON2 : return BTN2 \"Strong Punch\" ; case IPT_BUTTON3 : return BTN3 \"Fierce Punch\" ; case IPT_BUTTON4 : return BTN4 \"Short Kick\" ; case IPT_BUTTON5 : return BTN5 \"Forward Kick\" ; case IPT_BUTTON6 : return BTN6 \"Roundhouse Kick\" ; case IPT_JOYSTICK_UP : return \"Jump\" ; case IPT_JOYSTICK_DOWN : return \"Crouch\" ; case IPT_JOYSTICK_LEFT : return \"Left\" ; case IPT_JOYSTICK_RIGHT : return \"Right\" ; } /* end of switch */ return generic_btn_label ( type ); }","title":"Street Fighter 2 Example"},{"location":"development/cores/core-specific/mame-2003-plus/#driver-declaration","text":"Then you indicate the change for the appropriate romsets by adding a new letter ( C ) to the macro name and adding a function pointer to the struct. In other words, the GAME driver macro becomes GAMEC .","title":"Driver Declaration"},{"location":"development/cores/core-specific/mame-2003-plus/#before","text":"GAME ( 1991 , sf2 , 0 , sf2 , sf2 , cps1 , ROT0 , \"Capcom\" , \"Street Fighter II - The World Warrior (World 910522)\" )","title":"Before:"},{"location":"development/cores/core-specific/mame-2003-plus/#after","text":"GAMEC ( 1991 , sf2 , 0 , sf2 , sf2 , cps1 , ROT0 , \"Capcom\" , \"Street Fighter II - The World Warrior (World 910522)\" , & sf2_ctrl , NULL ) Note that a NULL is also added to the end of the macro. That parameter is used for NVRAM bootstraps. The same driver macro is used for adding controls and bootstraps in order to avoid having more and more macros. If this game also had an NVRAM bootstrap, the bootstrap would be included rather than NULL.","title":"After:"},{"location":"development/cores/core-specific/mame-2003-plus/#stone-ball-example","text":"In this case we do not currently have much control metadata, so the implementation is minimal: const struct ControlInfo stonebal_ctrl = { false , /* alternating_controls */ false , /* mirrored_controls */ \"\" , /* control__details */ & stonebal_get_btn }; const char * stonebal_get_btn ( int type ) { switch ( type ) { case IPT_BUTTON1 : return BTN1 \"Shoot/Fight\" ; case IPT_BUTTON2 : return BTN2 \"Pass/Tackle\" ; case IPT_BUTTON3 : return BTN3 \"Push\" ; } /* end of switch */ return generic_btn_label ( type ); }","title":"Stone Ball Example"},{"location":"development/cores/core-specific/mame-2003-plus/#driver-declaration_1","text":"","title":"Driver Declaration"},{"location":"development/cores/core-specific/mame-2003-plus/#before_1","text":"GAME ( 1994 , stonebal , 0 , stonebal , stonebal , stonebal , ROT0 , \"Art and Magic\" , \"Stone Ball (4 Players)\" ) GAME ( 1994 , stoneba2 , stonebal , stonebal , stonebal , stonebal , ROT0 , \"Art and Magic\" , \"Stone Ball (2 Players)\" )","title":"Before:"},{"location":"development/cores/core-specific/mame-2003-plus/#after_1","text":"GAMEC ( 1994 , stonebal , 0 , stonebal , stonebal , stonebal , ROT0 , \"Art and Magic\" , \"Stone Ball (4 Players)\" , & stonebal_ctrl , NULL ) GAMEC ( 1994 , stoneba2 , stonebal , stonebal , stonebal , stonebal , ROT0 , \"Art and Magic\" , \"Stone Ball (2 Players)\" , & stonebal_ctrl , NULL ) Note that a NULL is also added to the end of the macro. That parameter is used for NVRAM bootstraps. The same driver macro is used for adding controls and bootstraps in order to avoid having more and more macros. If this game also had an NVRAM bootstrap, the bootstrap would be included rather than NULL.","title":"After:"},{"location":"development/cores/core-specific/mame-2003-plus/#adding-an-nvram-bootstrap","text":"","title":"Adding an NVRAM Bootstrap"},{"location":"development/cores/core-specific/mame-2003-plus/#purpose-and-criteria-for-bootstraps","text":"The purpose of the NVRAM bootstrap functionality is to create a good user experience the first time a game is booted. When the behavior of a game on its first boot is impossible for a new user to tell from a crash, then a bootstrap is in order. More specifically, the conditions for adding a bootstrap are: * It is not clear what the user needs to do to get into the game or * It is not reasonably possible for the user to get into the game using a SNES controller or arcade control panel","title":"Purpose and criteria for bootstraps"},{"location":"development/cores/core-specific/mame-2003-plus/#example-commit","text":"This doc will use the process of adding an nvram bootstrap for the game \"Run and Gun (US ver. UAB)\" with the driver name rungunu .","title":"Example commit"},{"location":"development/cores/core-specific/mame-2003-plus/#step-1-generate-a-working-nvram-file","text":"The exact process is game-specific.","title":"Step 1: Generate a working NVRAM file"},{"location":"development/cores/core-specific/mame-2003-plus/#step-2-compile-and-execute-bin2c","text":"git clone http://github.com/libretro/mame2003-plus-libretro cd mame2003-plus-libretro cd tools/bin2c make ./bin2c -o rungunu_bootstrap.c rungunu.nv","title":"Step 2: Compile and execute bin2c"},{"location":"development/cores/core-specific/mame-2003-plus/#output","text":"The generated output will look like this: const unsigned char rungunu_nv_bytes [] = { 4 , 38 , 251 , 217 , 146 , 71 , 85 , 65 , 66 , 0 , 16 , 3 , 7 , 3 , 0 , 0 , 0 , 0 , 0 , 7 , 7 , 0 , 7 , 26 , 1 , 16 , 26 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , }; const unsigned int rungunu_nv_length = 128 ;","title":"Output"},{"location":"development/cores/core-specific/mame-2003-plus/#step-3-create-a-bin2cfile","text":"The next step is manual -- putting the data that bin2c generated into the format that the core uses: struct bin2cFILE { const unsigned int length ; const unsigned char data []; };","title":"Step 3: Create a bin2cFILE"},{"location":"development/cores/core-specific/mame-2003-plus/#resulting-bootstrap-structure","text":"const struct bin2cFILE rungunu_bootstrap = { 128 , { 4 , 38 , 251 , 217 , 146 , 71 , 85 , 65 , 66 , 0 , 16 , 3 , 7 , 3 , 0 , 0 , 0 , 0 , 0 , 7 , 7 , 0 , 7 , 26 , 1 , 16 , 26 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , } };","title":"Resulting bootstrap structure"},{"location":"development/cores/core-specific/mame-2003-plus/#step-4-setup-the-various-source-files","text":"Add rungunu_bootstrap to bootstrap.c and bootstrap.h . If rungun.c didn't already include the necessary headers from a prior bootstrap project I would have needed to add: #include \"bootstrap.h\" #include \"inptport.h\"","title":"Step 4: Setup the various source files"},{"location":"development/cores/core-specific/mame-2003-plus/#step-5-declare-the-bootstrap-in-the-driver","text":"","title":"Step 5: Declare the bootstrap in the driver"},{"location":"development/cores/core-specific/mame-2003-plus/#original","text":"GAMEX ( 1993 , rungunu , 0 , rng , rng , rng , ROT0 , \"Konami\" , \"Run and Gun (US ver. UAB)\" , GAME_IMPERFECT_GRAPHICS | GAME_IMPERFECT_COLORS | GAME_IMPERFECT_SOUND )","title":"Original:"},{"location":"development/cores/core-specific/mame-2003-plus/#bootstrapped","text":"GAMECX ( 1993 , rungunu , 0 , rng , rng , rng , ROT0 , \"Konami\" , \"Run and Gun (US ver. UAB)\" , GAME_IMPERFECT_GRAPHICS | GAME_IMPERFECT_COLORS | GAME_IMPERFECT_SOUND , & generic_ctrl , & rungun_bootstrap ) Important The newer driver macros that support setting the bootstrap pointer also need a button labeling function pointer. If there is no existing control name function, passing &generic_ctrl suffices.","title":"Bootstrapped:"},{"location":"development/cores/core-specific/mame-2003-plus/#compiling-a-pr-for-testing","text":"Note: For purposes of this guide, replace PR_NUMBER with the literal number of the github Pull Request you are interested in testing. For example, if you are interested in testing out the Pull Request which implemented the libretro analog input API, you would substitute PR_NUMBER below with 590 , the PR number for that request .","title":"Compiling a PR for testing"},{"location":"development/cores/core-specific/mame-2003-plus/#nix-or-msys","text":"git clone https://github.com/libretro/mame2003-plus-libretro.git patch -p1 -d mame2003-plus-libretro < < ( wget -qO- https://patch-diff.githubusercontent.com/raw/libretro/mame2003-plus-libretro/pull/PR_NUMBER.diff ) cd mame2003-plus-libretro make Note: If you are using the standard libretro/RetroArch msys2 environment, you will first need to install patch with this command: pacman -S patch","title":"*nix or msys:"},{"location":"development/cores/core-specific/mame-2003-plus/#retropie","text":"cd ~/RetroPie-Setup/ sudo ./retropie_packages.sh lr-mame2003-plus clean sudo ./retropie_packages.sh lr-mame2003-plus sources sudo patch -p1 -d tmp/build/lr-mame2003-plus < < ( wget -qO- https://patch-diff.githubusercontent.com/raw/libretro/mame2003-plus-libretro/pull/PR_NUMBER.diff ) rm 590 .diff sudo ./retropie_packages.sh lr-mame2003-plus build sudo ./retropie_packages.sh lr-mame2003-plus build install","title":"RetroPie"},{"location":"development/cores/core-specific/mame-2016/","text":"MAME 2016 Developer Docs \u00b6 As of 2019, this libretro port of MAME (the libretro \"OSD\" in MAME parlance) is known to be rather messy. The plan is to rewrite it eventually. What follows here is a technical explanation of what libretro had to do to MAME's GENie build system in order to compile it as a shared library with the appropriate API exported to be used as a libretro core. The problem with a static library MAME OSD \u00b6 You're not supposed to put the public API of a shared library into a static library, particularly if those symbols are \"unused\" by any other part of the shared library. In other words, while the libretro API is contained within the retro OSD, the file containing the public API ( libretro.c ) must not be stripped by the helpful linker trying to optimize for you. How you do that varies quite a bit by linker, and some of them such as GNU ld require the options be in a specific order. How to do that with GENie is not clear. To solve all of these issues at once, we leave libretro.c out of the OSD library and add it to the main MAME library directly. This requires adding an includedirs block for the directory containing libco's header and a files block containing libretro.c . These changes are near the bottom of the GENie project in scripts/src/main.lua . This is not a clean solution. It just happens to be the one that works across platforms without jumping through hoops for every linker that comes along. Other libretro GENie mods \u00b6 As mentioned above, near the bottom of scripts/src/main.lua , there's a chunk of libretro-related additions and overrides. You can spot it by searching for \"BEGIN libretro overrides to MAME's GENie build\". Most of what's there is pretty self-explanatory. It overrides MAME to build a shared library and includes processing for ARCH and platform, the two standard libretro build target variables, and includes the libretro.c file mentioned above. It could probably be split into its own file, but hasn't been thus far for simplicity. The only other addition is scripts/src/osd/retro.lua and its cfg file which isn't strictly necessary to be a separate file. Pretty standard stuff in there. The real work is in main.lua, and it's all contingent upon use of the libretro OSD to be as minimally invasive into MAME as possible. That's about it really. Compared to the old system, GENie is both much simpler and more complicated for us. More complicated because stuff is in so many different places. Simpler because modifying GENie rules like we have done makes for an incredibly shallow fork. Makefile.libretro \u00b6 There is still a pure Makefile named Makefile.libretro . It guesses the ARCH and platform variables if they're not defined, and it passes those (renaming ARCH in the process) along with the OSD and several other useful arguments to GENie. It's basically a major shortcut for the make command line which for our needs is pretty long. It's been tested building the \"arcade\" (used to be UME) and tiny targets, just pass SUBTARGET=tiny to Makefile.libretro to get the latter. Final thoughts \u00b6 MAME is a beast. It compiles to a 137MB .dylib on the Mac and a 172MB .so on Linux. Nonetheless, if its retro OSD weren't such a mess, it would be a good example of how to port something to libretro. Presently it still requires a fork, but the fork is perhaps the shallowest libretro fork we've got. And while not every decision the MAME developers have ever made could be considered optimal, the one thing they have done is insist that every external dependency they have is included in their source tree -- which is exactly what we need. MAME's GENie setup is complex, but that is because MAME is complex. GENie isn't difficult to figure out if you know a bit of lua. Indeed iKarith does not claim to fully understand GENie, but managed to modify the project to build a libretro core with only a few pointers (thanks balrog!) and a little grepping of 3rdparty/genie.","title":"MAME 2016"},{"location":"development/cores/core-specific/mame-2016/#mame-2016-developer-docs","text":"As of 2019, this libretro port of MAME (the libretro \"OSD\" in MAME parlance) is known to be rather messy. The plan is to rewrite it eventually. What follows here is a technical explanation of what libretro had to do to MAME's GENie build system in order to compile it as a shared library with the appropriate API exported to be used as a libretro core.","title":"MAME 2016 Developer Docs"},{"location":"development/cores/core-specific/mame-2016/#the-problem-with-a-static-library-mame-osd","text":"You're not supposed to put the public API of a shared library into a static library, particularly if those symbols are \"unused\" by any other part of the shared library. In other words, while the libretro API is contained within the retro OSD, the file containing the public API ( libretro.c ) must not be stripped by the helpful linker trying to optimize for you. How you do that varies quite a bit by linker, and some of them such as GNU ld require the options be in a specific order. How to do that with GENie is not clear. To solve all of these issues at once, we leave libretro.c out of the OSD library and add it to the main MAME library directly. This requires adding an includedirs block for the directory containing libco's header and a files block containing libretro.c . These changes are near the bottom of the GENie project in scripts/src/main.lua . This is not a clean solution. It just happens to be the one that works across platforms without jumping through hoops for every linker that comes along.","title":"The problem with a static library MAME OSD"},{"location":"development/cores/core-specific/mame-2016/#other-libretro-genie-mods","text":"As mentioned above, near the bottom of scripts/src/main.lua , there's a chunk of libretro-related additions and overrides. You can spot it by searching for \"BEGIN libretro overrides to MAME's GENie build\". Most of what's there is pretty self-explanatory. It overrides MAME to build a shared library and includes processing for ARCH and platform, the two standard libretro build target variables, and includes the libretro.c file mentioned above. It could probably be split into its own file, but hasn't been thus far for simplicity. The only other addition is scripts/src/osd/retro.lua and its cfg file which isn't strictly necessary to be a separate file. Pretty standard stuff in there. The real work is in main.lua, and it's all contingent upon use of the libretro OSD to be as minimally invasive into MAME as possible. That's about it really. Compared to the old system, GENie is both much simpler and more complicated for us. More complicated because stuff is in so many different places. Simpler because modifying GENie rules like we have done makes for an incredibly shallow fork.","title":"Other libretro GENie mods"},{"location":"development/cores/core-specific/mame-2016/#makefilelibretro","text":"There is still a pure Makefile named Makefile.libretro . It guesses the ARCH and platform variables if they're not defined, and it passes those (renaming ARCH in the process) along with the OSD and several other useful arguments to GENie. It's basically a major shortcut for the make command line which for our needs is pretty long. It's been tested building the \"arcade\" (used to be UME) and tiny targets, just pass SUBTARGET=tiny to Makefile.libretro to get the latter.","title":"Makefile.libretro"},{"location":"development/cores/core-specific/mame-2016/#final-thoughts","text":"MAME is a beast. It compiles to a 137MB .dylib on the Mac and a 172MB .so on Linux. Nonetheless, if its retro OSD weren't such a mess, it would be a good example of how to port something to libretro. Presently it still requires a fork, but the fork is perhaps the shallowest libretro fork we've got. And while not every decision the MAME developers have ever made could be considered optimal, the one thing they have done is insist that every external dependency they have is included in their source tree -- which is exactly what we need. MAME's GENie setup is complex, but that is because MAME is complex. GENie isn't difficult to figure out if you know a bit of lua. Indeed iKarith does not claim to fully understand GENie, but managed to modify the project to build a libretro core with only a few pointers (thanks balrog!) and a little grepping of 3rdparty/genie.","title":"Final thoughts"},{"location":"development/cores/core-specific/mame/","text":"MAME (0.181-current) Development \u00b6 Building libretro-mame \u00b6 Build environement \u00b6 Windows \u00b6 Install and configure the RetroArch msys2 build environment From the msys2 console, install python with the command pacman -S python Clone the repository \u00b6 git clone http://github.com/libretro/mame cd mame general make syntax \u00b6 Build type Command Complete build make -f -j3 Makefile.libretro Arcade-only build make -f -j3 Makefile.libretro SUBTARGET=arcade Softlist-only build make -f -j3 Makefile.libretro SUBTARGET=mess Platform-specific make syntax \u00b6 Platform Command 64-bit processors make -f -j3 Makefile.libretro PTR64=1 Building a previous version \u00b6 Important If you want to build a previous version of MAME, begin by making sure that you can build the most recent version. Once you have built the most recent version of MAME to establish that your build environment is complete, reset the contents of the repository to a clean state: make clean git reset --hard Warning These commands will delete any files in your mame subfolder that are not in the libretro/mame github repository. checkout the previous version source \u00b6 See the section \"Commit hashes for previous versions\" below to find the correct commit hash. For example, if you wish to build MAME 0.205, the corresponding commit hash is b691c38 . Use this commit hash and the git checkout command to roll back the source to your chosen version: git checkout b691c38 Commit hashes for previous versions \u00b6 Version Commit mame0216 7cf10a3 mame0207 40fc339 mame0206 cf02fe3 mame0205 b691c38 mame0204 c6150e7 mame0203 b57a140 mame0202 856478f mame0201 4dc302e mame0200 ff19cd3 mame0199 f2e805a mame0198 c5f6a62 mame0197 74293f8 mame0196 e8f2016 mame0195 e44e85b mame0194 5be2496 mame0193 bf28b34 mame0192 d771f54 mame0191 a5db728 mame0190 f57574c mame0189 2beedc5 mame0188 7b45ec1 mame0187 1d9648b mame0186 e4c6cb1 mame0185 fe01a13 mame0184 7768128 mame0183 4ee22dc mame0182 22c42ab mame0181 3a1651e","title":"MAME (0.181-current)"},{"location":"development/cores/core-specific/mame/#mame-0181-current-development","text":"","title":"MAME (0.181-current) Development"},{"location":"development/cores/core-specific/mame/#building-libretro-mame","text":"","title":"Building libretro-mame"},{"location":"development/cores/core-specific/mame/#build-environement","text":"","title":"Build environement"},{"location":"development/cores/core-specific/mame/#windows","text":"Install and configure the RetroArch msys2 build environment From the msys2 console, install python with the command pacman -S python","title":"Windows"},{"location":"development/cores/core-specific/mame/#clone-the-repository","text":"git clone http://github.com/libretro/mame cd mame","title":"Clone the repository"},{"location":"development/cores/core-specific/mame/#general-make-syntax","text":"Build type Command Complete build make -f -j3 Makefile.libretro Arcade-only build make -f -j3 Makefile.libretro SUBTARGET=arcade Softlist-only build make -f -j3 Makefile.libretro SUBTARGET=mess","title":"general make syntax"},{"location":"development/cores/core-specific/mame/#platform-specific-make-syntax","text":"Platform Command 64-bit processors make -f -j3 Makefile.libretro PTR64=1","title":"Platform-specific make syntax"},{"location":"development/cores/core-specific/mame/#building-a-previous-version","text":"Important If you want to build a previous version of MAME, begin by making sure that you can build the most recent version. Once you have built the most recent version of MAME to establish that your build environment is complete, reset the contents of the repository to a clean state: make clean git reset --hard Warning These commands will delete any files in your mame subfolder that are not in the libretro/mame github repository.","title":"Building a previous version"},{"location":"development/cores/core-specific/mame/#checkout-the-previous-version-source","text":"See the section \"Commit hashes for previous versions\" below to find the correct commit hash. For example, if you wish to build MAME 0.205, the corresponding commit hash is b691c38 . Use this commit hash and the git checkout command to roll back the source to your chosen version: git checkout b691c38","title":"checkout the previous version source"},{"location":"development/cores/core-specific/mame/#commit-hashes-for-previous-versions","text":"Version Commit mame0216 7cf10a3 mame0207 40fc339 mame0206 cf02fe3 mame0205 b691c38 mame0204 c6150e7 mame0203 b57a140 mame0202 856478f mame0201 4dc302e mame0200 ff19cd3 mame0199 f2e805a mame0198 c5f6a62 mame0197 74293f8 mame0196 e8f2016 mame0195 e44e85b mame0194 5be2496 mame0193 bf28b34 mame0192 d771f54 mame0191 a5db728 mame0190 f57574c mame0189 2beedc5 mame0188 7b45ec1 mame0187 1d9648b mame0186 e4c6cb1 mame0185 fe01a13 mame0184 7768128 mame0183 4ee22dc mame0182 22c42ab mame0181 3a1651e","title":"Commit hashes for previous versions"},{"location":"development/retroarch/debugging/","text":"Debugging \u00b6 Dr.MinGW \u00b6 Windows debug builds now have an integrated crash handler. If you find any recurrent crashes you can start the retroarch_debug.exe executable, reproduce the crash and you should find a time-stamped crash log in the retroarch directory. GDB (All platforms) \u00b6 The GNU Debugger is the most widely available debugging tool for many platforms. Windows users This guide assumes you have already installed the MSYS2/MinGW environment as detailed here and that you are running in the appropriate \"MSYS2 MinGW\" (32 or 64-bit) shell (not \"MSYS2 MSYS\"). If you observe a crash with RetroArch and would like to get more information, navigate to the folder where your RetroArch installation is and run: gdb retroarch Windows users If you have not compiled RetroArch yourself with debugging enabled ( make DEBUG=1 ), please specify retroarch_debug.exe here instead of retroarch to use the debug version that ships with our binary package. In order to debug in Windows 10 when the D3D10 or D3D11 video drivers are in use, be sure that you have also installed Microsoft's free Windows Direct3D Graphics Tools package . After gdb has started, you can then start up RetroArch with run . If RetroArch crashes, gdb should show you a prompt with a message such as: Program received signal SIGSEGV, Segmentation fault. From here, type bt full to get a full backtrace of the crash. You can copy/paste this information to a pastebin site such as dpaste to get a link that you can provide to developers to help with your problem. Run quit when you are done to exit gdb. To get a full backtrace of the crash for all threads, type thread apply all bt full . For more information on using GDB, please see their online documentation here . ASAN (Linux/Mac/BSD/Android) \u00b6 AddressSanitizer (ASAN) is a very fast memory error detector and an indispensable tool for finding issues with improper memory handling such as use-after-free, buffer overflows and general memory leaks. It is available since GCC 4.8 and Clang 3.1 for Linux (x64 and ARM) systems. Typical slowdown of runtime performance is around 2x. There are several ways to use RetroArch in conjunction with ASAN and there are many different options that can be combined with each other. The first step is that you need to compile ASAN directly into the RetroArch binary. Here are some simple examples: For detecting memory errors/leaks and undefined behavior: make DEBUG=1 SANITIZER=address,undefined For detecting threading errors such as race conditions: make DEBUG=1 SANITIZER=thread Then you can run the RetroArch binary normally with ./retroarch . As problems are detected, they will be printed to the console either at runtime or when the program exits or crashes, depending on the type of error. For more information, see the gcc , Google and clang documentation. Dr. Memory (Windows/Linux/Mac/Android) \u00b6 Dr. Memory is another tool for detecting memory errors similar to ASAN. Its website can be found here: http://www.drmemory.org/ After installation, the simplest way to use Dr. Memory with RetroArch is to open the start menu shortcut under \"Dr. Memory\" called \"Explore Dr. Memory\", and then drag the retroarch_debug.exe file onto the drmemory.exe file there. No re-compilation is necessary to use this tool. Any errors encountered will be displayed in a notepad window after the program exits or crashes. VulnScan (Windows/Linux) \u00b6 Also known as Microsoft Security Risk Detection, is a new memory error detection tool that is (at the time of writing) in closed beta status. For more information, please see its website here . Valgrind (Linux) \u00b6 Valgrind is probably the oldest and most well known memory error and leak detector available. Here is an example command-line usage to run valgrind with RetroArch to check for memory or threading errors: valgrind -v --tool=memcheck --leak-check=yes --track-origins=yes --show-reachable=yes ./retroarch No recompilation is necessary to use this tool, but make sure to run it using a debug build of RetroArch (built with make DEBUG=1 ). Some users have reported a large number of false positives with this tool, as well as much slower runtime performance, so in general we typically recommend to use ASAN instead if that is an option for you. rr (Linux) \u00b6 rr is a deterministic debugger that enhances gdb by supporting the recording and replay (and even reverse-replay) of your program's execution. Very useful for accurately reproducing a hard-to-trigger issue such as a race condition or crash that only occurs under certain conditions. For more information on using rr, please see their usage guide here . Time Travel Debugging (Windows) \u00b6 Time Travel Debugging is a Windows tool for recording and replaying a program's execution, similar to rr . For more information, please visit their website. Android Studio (Android) \u00b6 See this file for a guide on how to build, sideload and debug a core using Android Studio.","title":"Debugging"},{"location":"development/retroarch/debugging/#debugging","text":"","title":"Debugging"},{"location":"development/retroarch/debugging/#drmingw","text":"Windows debug builds now have an integrated crash handler. If you find any recurrent crashes you can start the retroarch_debug.exe executable, reproduce the crash and you should find a time-stamped crash log in the retroarch directory.","title":"Dr.MinGW"},{"location":"development/retroarch/debugging/#gdb-all-platforms","text":"The GNU Debugger is the most widely available debugging tool for many platforms. Windows users This guide assumes you have already installed the MSYS2/MinGW environment as detailed here and that you are running in the appropriate \"MSYS2 MinGW\" (32 or 64-bit) shell (not \"MSYS2 MSYS\"). If you observe a crash with RetroArch and would like to get more information, navigate to the folder where your RetroArch installation is and run: gdb retroarch Windows users If you have not compiled RetroArch yourself with debugging enabled ( make DEBUG=1 ), please specify retroarch_debug.exe here instead of retroarch to use the debug version that ships with our binary package. In order to debug in Windows 10 when the D3D10 or D3D11 video drivers are in use, be sure that you have also installed Microsoft's free Windows Direct3D Graphics Tools package . After gdb has started, you can then start up RetroArch with run . If RetroArch crashes, gdb should show you a prompt with a message such as: Program received signal SIGSEGV, Segmentation fault. From here, type bt full to get a full backtrace of the crash. You can copy/paste this information to a pastebin site such as dpaste to get a link that you can provide to developers to help with your problem. Run quit when you are done to exit gdb. To get a full backtrace of the crash for all threads, type thread apply all bt full . For more information on using GDB, please see their online documentation here .","title":"GDB (All platforms)"},{"location":"development/retroarch/debugging/#asan-linuxmacbsdandroid","text":"AddressSanitizer (ASAN) is a very fast memory error detector and an indispensable tool for finding issues with improper memory handling such as use-after-free, buffer overflows and general memory leaks. It is available since GCC 4.8 and Clang 3.1 for Linux (x64 and ARM) systems. Typical slowdown of runtime performance is around 2x. There are several ways to use RetroArch in conjunction with ASAN and there are many different options that can be combined with each other. The first step is that you need to compile ASAN directly into the RetroArch binary. Here are some simple examples: For detecting memory errors/leaks and undefined behavior: make DEBUG=1 SANITIZER=address,undefined For detecting threading errors such as race conditions: make DEBUG=1 SANITIZER=thread Then you can run the RetroArch binary normally with ./retroarch . As problems are detected, they will be printed to the console either at runtime or when the program exits or crashes, depending on the type of error. For more information, see the gcc , Google and clang documentation.","title":"ASAN (Linux/Mac/BSD/Android)"},{"location":"development/retroarch/debugging/#dr-memory-windowslinuxmacandroid","text":"Dr. Memory is another tool for detecting memory errors similar to ASAN. Its website can be found here: http://www.drmemory.org/ After installation, the simplest way to use Dr. Memory with RetroArch is to open the start menu shortcut under \"Dr. Memory\" called \"Explore Dr. Memory\", and then drag the retroarch_debug.exe file onto the drmemory.exe file there. No re-compilation is necessary to use this tool. Any errors encountered will be displayed in a notepad window after the program exits or crashes.","title":"Dr. Memory (Windows/Linux/Mac/Android)"},{"location":"development/retroarch/debugging/#vulnscan-windowslinux","text":"Also known as Microsoft Security Risk Detection, is a new memory error detection tool that is (at the time of writing) in closed beta status. For more information, please see its website here .","title":"VulnScan (Windows/Linux)"},{"location":"development/retroarch/debugging/#valgrind-linux","text":"Valgrind is probably the oldest and most well known memory error and leak detector available. Here is an example command-line usage to run valgrind with RetroArch to check for memory or threading errors: valgrind -v --tool=memcheck --leak-check=yes --track-origins=yes --show-reachable=yes ./retroarch No recompilation is necessary to use this tool, but make sure to run it using a debug build of RetroArch (built with make DEBUG=1 ). Some users have reported a large number of false positives with this tool, as well as much slower runtime performance, so in general we typically recommend to use ASAN instead if that is an option for you.","title":"Valgrind (Linux)"},{"location":"development/retroarch/debugging/#rr-linux","text":"rr is a deterministic debugger that enhances gdb by supporting the recording and replay (and even reverse-replay) of your program's execution. Very useful for accurately reproducing a hard-to-trigger issue such as a race condition or crash that only occurs under certain conditions. For more information on using rr, please see their usage guide here .","title":"rr (Linux)"},{"location":"development/retroarch/debugging/#time-travel-debugging-windows","text":"Time Travel Debugging is a Windows tool for recording and replaying a program's execution, similar to rr . For more information, please visit their website.","title":"Time Travel Debugging (Windows)"},{"location":"development/retroarch/debugging/#android-studio-android","text":"See this file for a guide on how to build, sideload and debug a core using Android Studio.","title":"Android Studio (Android)"},{"location":"development/retroarch/glossary/","text":"Glossary \u00b6 While developing RetroArch, you might find some terms which are unfamiliar to new developers. These are explained here. Griffin \u00b6 TODO Salamander \u00b6 Salamander is a small RetroArch launcher for embedded platforms with static linking. On such platforms, each core binary contains the core and the complete RetroArch frontend. Switching cores is achieved by just re-launching into a different core binary. Salamander simply launches the most recently used core (or a default one, if none is stored in the config file).","title":"Glossary"},{"location":"development/retroarch/glossary/#glossary","text":"While developing RetroArch, you might find some terms which are unfamiliar to new developers. These are explained here.","title":"Glossary"},{"location":"development/retroarch/glossary/#griffin","text":"TODO","title":"Griffin"},{"location":"development/retroarch/glossary/#salamander","text":"Salamander is a small RetroArch launcher for embedded platforms with static linking. On such platforms, each core binary contains the core and the complete RetroArch frontend. Switching cores is achieved by just re-launching into a different core binary. Salamander simply launches the most recently used core (or a default one, if none is stored in the config file).","title":"Salamander"},{"location":"development/retroarch/netplay/","text":"Netplay \u00b6 RetroArch allows a second (or further) player, or spectators, to be connected via the Internet. RetroArch's netplay code is based on replay, and provides netplay over unreliable networks free of input latency in the default configuration. Netplay supports up to 16 players and many spectators. Netplay in RetroArch is guaranteed\u00b9 to work with perfect synchronization given a few minor constraints: The core is deterministic, The only input devices the core interacts with are the joypad and analog sticks, and Both the core and the loaded content are identical on host and client. Cores are expected to support serialization for proper netplay behavior, but netplay will work in limited fashion with cores that do not support serialization. The experience will be far more smooth with serialization. Netplay in RetroArch works by expecting input to come delayed from the network, then rewinding and re-playing with the delayed input to get a consistent state. At any given time, all netplay clients may be in inconsistent states, but once they receive each other's delayed data, they invisibly rewind to the last time they were consistent, replay with the new input, and reach a new state, notionally closer to the \"correct\", canonical state than the previous one. So long as both sides agree on which frame is which, it should be impossible for them to become de-synced, since each input event always happens at the correct frame. \u00b9 Guarantee not actually a guarantee. Behavior \u00b6 Netplay's protocol uses TCP, as reliability and in-order delivery are both mandatory for correct behavior. A single netplay server may have connections from multiple netplay clients. For most behavior, the server and client are equal participants, but for operations which require global synchronization, the server is canonical. In normal, running behavior, each playing client simply sends the input state of their controller every frame, and the server forwards input data between clients. Every client and the server is aware of which player slots are in use (i.e., which controllers are plugged in), and the server is aware of which client corresponds to which player slot. It is crucial that every player send their input data in order for every frame, and thus every client keeps in mind the frame counter for every player. If input data is received with an unexpectedly low frame number, it is ignored, and if input data is received with an unexpectedly high frame number, the connection is terminated. It is also crucial that every player agree on which frame is which, and so during initial connection the server gives a canonical frame count and a serialized save state, allowing the client to join mid-stream. Spectators send no input data. When new input data is received from a player, if it is before the currently executing frame, RetroArch will invisibly rewind and replay with the new input data, arriving at the original frame so that the local player's own input is always seemless. A typical, playing client sends no data other than its own input every frame. During normal play, the server sends its own input data. If the server is not playing, but spectating, it sends a special \"no input\" packet, so that clients may nonetheless no its frame count. Other spectators send no data. Other events coordinate on the server's frame counter, and most may therefore only be performed by the server. For instance, for a client to switch from spectating to playing, it cannot simply start sending input data, but must send a request to change modes, which the server will honor at its present frame count. The client may have to rewind to send data from earlier frames, or wait to send input data until its local frame count has reached the server's. In particular, resets and savestate loads are always synchronized to the server's frame count, and thus only the server may reset the core or load a savestate. Because input preceeding a savestate load is irrelevant, upon receiving a savestate load command, all frame counts are updated to be at least the server's frame count, including the local frame count if applicable. This is the only condition under which the frame count will skip at a rate greater than one frame per executed frame. Implementation \u00b6 Netplay is in effect a buffer of input states (implemented as a ring of buffers) and some pre- and post-frame behaviors. There are three important locations, each of which : self, other and unread. Each refers to a frame, and a state buffer corresponding to that frame. The state buffer contains the savestate for the frame, and the input from both the local and remote players. Self is where RetroArch believes itself to be, which may be ahead or behind of what it's read from the peer. Self progresses at a rate of one frame per executed frame, except when the local frame count is forced to skip ahead due to loading a state. Unread is the first frame at which not all players' data has been read. Typically unread is less than self, but it is possible for one client to get ahead of others. Other is where it was most recently in perfect sync: i.e., other-1 is the last frame from which all local and remote input have been actioned. It is never necessary to rewind farther than other in order to attain synchronization, and other is always less than or equal to both self and unread. Since the state buffer is a ring, other is the first frame that it's unsafe to overwrite. The server has a slightly more complicated job as it can handle multiple clients, however it is not vastly more complicated: For each connection which is playing (i.e., has a controller), it maintains a per-player unread frame, and the global unread frame is the earliest of each player unread frame. The server forwards input data: When input data is received from an earlier frame than the server's current frame, it forwards it immediately. Otherwise, it forwards it when the frame is reached. i.e., during frame n, the server may send its own and any number of other players' data for frame n, but will never send frame n+1. This is because the server's clock is the arbiter of all synchronization-related events, such as flipping players, players joining and parting, and saving/loading states. Pre-frame, netplay serializes the core's state, polls for local input, and polls for input from the network. If the input from the network is too far behind (i.e., unread is too far behind self), it stalls to allow the other side to catch up. To assure that this stalling does not block the UI thread, it is implemented similarly to pausing, rather than by blocking on the socket. If input has not been received for the other side up to the current frame (the usual case), the remote input is simulated in a simplistic manner. Each frame's local serialized state and simulated or real input goes into the frame buffers. During the frame of execution, when the core requests input, it receives the input from the state buffer, both local and real or simulated remote. Post-frame, it checks whether it's read more than it's actioned, i.e. If read > other and self > other. If so, it first checks whether its simulated remote data was correct. If it was, it simply moves other up. If not, it rewinds to other (by loading the serialized state there) and runs the core in replay mode with the real data up to the least of self and read, then sets other to that. To avoid latency building up, if the input from the network is too far ahead (i.e., unread is too far ahead of self), the frame limiter is momentarily disabled to catch up. Note that since network latency is expected, the normal case is the opposite: unread is behind self. When in netplay mode, the callback for receiving input is replaced by input_state_net. It is the role of input_state_net to combine the true local input (whether live or replay) with the remote input (whether true or simulated). Some thoughts about \"frame counts\": The frame counters act like indexes into a 0-indexed array; i.e., they refer to the first unactioned frame. So, when read_frame_count is 23, we've read 23 frames, but the last frame we read is frame 22. With self_frame_count it's slightly more complicated, since there are two relevant actions: Reading the data and emulating with the data. The frame count is only incremented after the latter, so there is a period of time during which we've actually read self_frame_count+1 frames of local input. Clients may come and go, and may start or stop playing even as they're connected. A client that is not playing is said to be spectating: It receives all the same data but sends none. A client may switch from spectating to playing by sending the appropriate request, at which point it is allotted a player number (see the SPECTATE, PLAY and MODE commands below). The server may also be in spectator mode, but as the server never sends data early (i.e., it only forwards data on the frame it's reached), it must also inform all clients of its own current frame even if it has no input. The NOINPUT command is provided for that purpose. Protocol \u00b6 A netplay connection involves a handshake, which assures that client and server are running the same software and brings the client to synchronization, and then an exchange of input packets. The handshake procedure (this part is done by both server and client): 1. Send connection header 2. Receive and verify connection header 3. Send nickname 4. Receive nickname For the client: 5. Send PASSWORD if applicable 4. Receive INFO 5. Send INFO 6. Receive SYNC For the server: 5. Receive PASSWORD if applicable 6. Send INFO 7. Receive INFO 8. Send SYNC Note that both the server and the client send the connection header before reading it. This is intentional. It allows either servers or clients (but not both) to generalize, by echoing the connection header of the other side. Other features \u00b6 Typically, it is assumed that input latency is not desired. However, input latency is an option. The benefit of input latency is that the actual execution lags behind one's frame count, and thus it is more usual that remote data is available, and rewinding is both less frequent and less expensive. There is an additional location in the state buffer, run, used when input latency is enabled. In that case, self points to where input is being read, and run points to the frame actually being executed. Run is purely local. Command format \u00b6 Netplay commands consist of a 32-bit command identifier, followed by a 32-bit payload size, both in network byte order, followed by a payload. The command identifiers are listed in netplay.h. The commands are described below. Unless specified otherwise, all payload values are in network byte order. Command : ACK Payload: None Description: Acknowledgement. Not used. Command : NAK Payload: None Description: Negative Acknowledgement. If received, the connection is terminated. Sent whenever a command is malformed or otherwise not understood. Command : DISCONNECT Payload: None Description: Gracefully disconnect. Not used. Command : INPUT Payload: 1 2 3 4 5 6 7 8 { frame number: uint32 is server data: 1 bit player: 31 bits joypad input: uint32 analog 1 input: uint32 analog 2 input: uint32 } Description: Input state for each frame. Netplay must send an INPUT command for every frame in order to function at all. Client's player value is ignored. Server indicates which frames are its own input data because INPUT is a synchronization point: No synchronization events from the given frame may arrive after the server's input for the frame. Command : NOINPUT Payload: 1 2 3 { frame number: uint32 } Description: Sent by the server to indicate a frame has passed when the server is not otherwise sending data. Command : NICK Payload: 1 2 3 { nickname: char[32] } Description: Send nickname. Mandatory handshake command. Command : PASSWORD Payload: 1 2 3 { password hash: char[64] } Description: Send hashed password to server. Mandatory handshake command for clients if the server demands a password. Command : INFO Payload 1 2 3 4 5 { core name: char[32] core version: char[32] content CRC: uint32 } Description: Send core/content info. Mandatory handshake command. Sent by server first, then by client, and must match. Server may send INFO with no payload, in which case the client sends its own info and expects the server to load the appropriate core and content then send a new INFO command. If mutual agreement cannot be achieved, the correct solution is to simply disconnect. Command : SYNC Payload: 1 2 3 4 5 6 7 8 9 { frame number: uint32 paused?: 1 bit connected players: 31 bits flip frame: uint32 controller devices: uint32[16] client nick: char[32] sram: variable } Description: Initial state synchronization. Mandatory handshake command from server to client only. Connected players is a bitmap with the lowest bit being player 0. Flip frame is 0 if players aren't flipped. Controller devices are the devices plugged into each controller port, and 16 is really MAX_USERS. Client is forced to have a different nick if multiple clients have the same nick. Command : SPECTATE Payload: None Description: Request to enter spectate mode. The client should immediately consider itself to be in spectator mode and send no further input. Command : PLAY Payload: 1 2 3 4 { reserved: 31 bits as slave?: 1 bit } Description: Request to enter player mode. The client must wait for a MODE command before sending input. Server may refuse or force slave connections, so the request is not necessarily honored. Payload may be elided if zero. Command : MODE Payload: 1 2 3 4 5 6 7 8 { frame number: uint32 reserved: 13 bits slave: 1 bit playing: 1 bit you: 1 bit player number: uint16 } Description: Inform of a connection mode change (possibly of the receiving client). Only server-to-client. Frame number is the first frame in which player data is expected, or the first frame in which player data is not expected. In the case of new players the frame number must be later than the last frame of the server's own input that has been sent, and in the case of leaving players the frame number must be later than the last frame of the relevant player's input that has been transmitted. Command : MODE_REFUSED Payload: 1 2 3 { reason: uint32 } Description: Inform a client that its request to change modes has been refused. Command : CRC Payload: 1 2 3 4 { frame number: uint32 hash: uint32 } Description: Informs the peer of the correct CRC hash for the specified frame. If the receiver's hash doesn't match, they should send a REQUEST_SAVESTATE command. Command : REQUEST_SAVESTATE Payload: None Description: Requests that the peer send a savestate. Command : LOAD_SAVESTATE Payload: 1 2 3 4 5 { frame number: uint32 uncompressed size: uint32 serialized save state: blob (variable size) } Description: Cause the other side to load a savestate, notionally one which the sending side has also loaded. If both sides support zlib compression, the serialized state is zlib compressed. Otherwise it is uncompressed. Command : PAUSE Payload: 1 2 3 { nickname: char[32] } Description: Indicates that the core is paused. The receiving peer should also pause. The server should pass it on, using the known correct name rather than the provided name. Command : RESUME Payload: None Description: Indicates that the core is no longer paused. Command : STALL Payload: 1 2 3 { frames: uint32 } Description: Request that a client stall for the given number of frames. Command : RESET Payload: 1 2 3 { frame number: uint32 } Description: Indicate that the core was reset at the beginning of the given frame. Command : CHEATS Unused Command : FLIP_PLAYERS Payload: 1 2 3 { frame number: uint32 } Description: Flip players at the requested frame. Command : CFG Unused Command : CFG_ACK Unused","title":"Netplay"},{"location":"development/retroarch/netplay/#netplay","text":"RetroArch allows a second (or further) player, or spectators, to be connected via the Internet. RetroArch's netplay code is based on replay, and provides netplay over unreliable networks free of input latency in the default configuration. Netplay supports up to 16 players and many spectators. Netplay in RetroArch is guaranteed\u00b9 to work with perfect synchronization given a few minor constraints: The core is deterministic, The only input devices the core interacts with are the joypad and analog sticks, and Both the core and the loaded content are identical on host and client. Cores are expected to support serialization for proper netplay behavior, but netplay will work in limited fashion with cores that do not support serialization. The experience will be far more smooth with serialization. Netplay in RetroArch works by expecting input to come delayed from the network, then rewinding and re-playing with the delayed input to get a consistent state. At any given time, all netplay clients may be in inconsistent states, but once they receive each other's delayed data, they invisibly rewind to the last time they were consistent, replay with the new input, and reach a new state, notionally closer to the \"correct\", canonical state than the previous one. So long as both sides agree on which frame is which, it should be impossible for them to become de-synced, since each input event always happens at the correct frame. \u00b9 Guarantee not actually a guarantee.","title":"Netplay"},{"location":"development/retroarch/netplay/#behavior","text":"Netplay's protocol uses TCP, as reliability and in-order delivery are both mandatory for correct behavior. A single netplay server may have connections from multiple netplay clients. For most behavior, the server and client are equal participants, but for operations which require global synchronization, the server is canonical. In normal, running behavior, each playing client simply sends the input state of their controller every frame, and the server forwards input data between clients. Every client and the server is aware of which player slots are in use (i.e., which controllers are plugged in), and the server is aware of which client corresponds to which player slot. It is crucial that every player send their input data in order for every frame, and thus every client keeps in mind the frame counter for every player. If input data is received with an unexpectedly low frame number, it is ignored, and if input data is received with an unexpectedly high frame number, the connection is terminated. It is also crucial that every player agree on which frame is which, and so during initial connection the server gives a canonical frame count and a serialized save state, allowing the client to join mid-stream. Spectators send no input data. When new input data is received from a player, if it is before the currently executing frame, RetroArch will invisibly rewind and replay with the new input data, arriving at the original frame so that the local player's own input is always seemless. A typical, playing client sends no data other than its own input every frame. During normal play, the server sends its own input data. If the server is not playing, but spectating, it sends a special \"no input\" packet, so that clients may nonetheless no its frame count. Other spectators send no data. Other events coordinate on the server's frame counter, and most may therefore only be performed by the server. For instance, for a client to switch from spectating to playing, it cannot simply start sending input data, but must send a request to change modes, which the server will honor at its present frame count. The client may have to rewind to send data from earlier frames, or wait to send input data until its local frame count has reached the server's. In particular, resets and savestate loads are always synchronized to the server's frame count, and thus only the server may reset the core or load a savestate. Because input preceeding a savestate load is irrelevant, upon receiving a savestate load command, all frame counts are updated to be at least the server's frame count, including the local frame count if applicable. This is the only condition under which the frame count will skip at a rate greater than one frame per executed frame.","title":"Behavior"},{"location":"development/retroarch/netplay/#implementation","text":"Netplay is in effect a buffer of input states (implemented as a ring of buffers) and some pre- and post-frame behaviors. There are three important locations, each of which : self, other and unread. Each refers to a frame, and a state buffer corresponding to that frame. The state buffer contains the savestate for the frame, and the input from both the local and remote players. Self is where RetroArch believes itself to be, which may be ahead or behind of what it's read from the peer. Self progresses at a rate of one frame per executed frame, except when the local frame count is forced to skip ahead due to loading a state. Unread is the first frame at which not all players' data has been read. Typically unread is less than self, but it is possible for one client to get ahead of others. Other is where it was most recently in perfect sync: i.e., other-1 is the last frame from which all local and remote input have been actioned. It is never necessary to rewind farther than other in order to attain synchronization, and other is always less than or equal to both self and unread. Since the state buffer is a ring, other is the first frame that it's unsafe to overwrite. The server has a slightly more complicated job as it can handle multiple clients, however it is not vastly more complicated: For each connection which is playing (i.e., has a controller), it maintains a per-player unread frame, and the global unread frame is the earliest of each player unread frame. The server forwards input data: When input data is received from an earlier frame than the server's current frame, it forwards it immediately. Otherwise, it forwards it when the frame is reached. i.e., during frame n, the server may send its own and any number of other players' data for frame n, but will never send frame n+1. This is because the server's clock is the arbiter of all synchronization-related events, such as flipping players, players joining and parting, and saving/loading states. Pre-frame, netplay serializes the core's state, polls for local input, and polls for input from the network. If the input from the network is too far behind (i.e., unread is too far behind self), it stalls to allow the other side to catch up. To assure that this stalling does not block the UI thread, it is implemented similarly to pausing, rather than by blocking on the socket. If input has not been received for the other side up to the current frame (the usual case), the remote input is simulated in a simplistic manner. Each frame's local serialized state and simulated or real input goes into the frame buffers. During the frame of execution, when the core requests input, it receives the input from the state buffer, both local and real or simulated remote. Post-frame, it checks whether it's read more than it's actioned, i.e. If read > other and self > other. If so, it first checks whether its simulated remote data was correct. If it was, it simply moves other up. If not, it rewinds to other (by loading the serialized state there) and runs the core in replay mode with the real data up to the least of self and read, then sets other to that. To avoid latency building up, if the input from the network is too far ahead (i.e., unread is too far ahead of self), the frame limiter is momentarily disabled to catch up. Note that since network latency is expected, the normal case is the opposite: unread is behind self. When in netplay mode, the callback for receiving input is replaced by input_state_net. It is the role of input_state_net to combine the true local input (whether live or replay) with the remote input (whether true or simulated). Some thoughts about \"frame counts\": The frame counters act like indexes into a 0-indexed array; i.e., they refer to the first unactioned frame. So, when read_frame_count is 23, we've read 23 frames, but the last frame we read is frame 22. With self_frame_count it's slightly more complicated, since there are two relevant actions: Reading the data and emulating with the data. The frame count is only incremented after the latter, so there is a period of time during which we've actually read self_frame_count+1 frames of local input. Clients may come and go, and may start or stop playing even as they're connected. A client that is not playing is said to be spectating: It receives all the same data but sends none. A client may switch from spectating to playing by sending the appropriate request, at which point it is allotted a player number (see the SPECTATE, PLAY and MODE commands below). The server may also be in spectator mode, but as the server never sends data early (i.e., it only forwards data on the frame it's reached), it must also inform all clients of its own current frame even if it has no input. The NOINPUT command is provided for that purpose.","title":"Implementation"},{"location":"development/retroarch/netplay/#protocol","text":"A netplay connection involves a handshake, which assures that client and server are running the same software and brings the client to synchronization, and then an exchange of input packets. The handshake procedure (this part is done by both server and client): 1. Send connection header 2. Receive and verify connection header 3. Send nickname 4. Receive nickname For the client: 5. Send PASSWORD if applicable 4. Receive INFO 5. Send INFO 6. Receive SYNC For the server: 5. Receive PASSWORD if applicable 6. Send INFO 7. Receive INFO 8. Send SYNC Note that both the server and the client send the connection header before reading it. This is intentional. It allows either servers or clients (but not both) to generalize, by echoing the connection header of the other side.","title":"Protocol"},{"location":"development/retroarch/netplay/#other-features","text":"Typically, it is assumed that input latency is not desired. However, input latency is an option. The benefit of input latency is that the actual execution lags behind one's frame count, and thus it is more usual that remote data is available, and rewinding is both less frequent and less expensive. There is an additional location in the state buffer, run, used when input latency is enabled. In that case, self points to where input is being read, and run points to the frame actually being executed. Run is purely local.","title":"Other features"},{"location":"development/retroarch/netplay/#command-format","text":"Netplay commands consist of a 32-bit command identifier, followed by a 32-bit payload size, both in network byte order, followed by a payload. The command identifiers are listed in netplay.h. The commands are described below. Unless specified otherwise, all payload values are in network byte order. Command : ACK Payload: None Description: Acknowledgement. Not used. Command : NAK Payload: None Description: Negative Acknowledgement. If received, the connection is terminated. Sent whenever a command is malformed or otherwise not understood. Command : DISCONNECT Payload: None Description: Gracefully disconnect. Not used. Command : INPUT Payload: 1 2 3 4 5 6 7 8 { frame number: uint32 is server data: 1 bit player: 31 bits joypad input: uint32 analog 1 input: uint32 analog 2 input: uint32 } Description: Input state for each frame. Netplay must send an INPUT command for every frame in order to function at all. Client's player value is ignored. Server indicates which frames are its own input data because INPUT is a synchronization point: No synchronization events from the given frame may arrive after the server's input for the frame. Command : NOINPUT Payload: 1 2 3 { frame number: uint32 } Description: Sent by the server to indicate a frame has passed when the server is not otherwise sending data. Command : NICK Payload: 1 2 3 { nickname: char[32] } Description: Send nickname. Mandatory handshake command. Command : PASSWORD Payload: 1 2 3 { password hash: char[64] } Description: Send hashed password to server. Mandatory handshake command for clients if the server demands a password. Command : INFO Payload 1 2 3 4 5 { core name: char[32] core version: char[32] content CRC: uint32 } Description: Send core/content info. Mandatory handshake command. Sent by server first, then by client, and must match. Server may send INFO with no payload, in which case the client sends its own info and expects the server to load the appropriate core and content then send a new INFO command. If mutual agreement cannot be achieved, the correct solution is to simply disconnect. Command : SYNC Payload: 1 2 3 4 5 6 7 8 9 { frame number: uint32 paused?: 1 bit connected players: 31 bits flip frame: uint32 controller devices: uint32[16] client nick: char[32] sram: variable } Description: Initial state synchronization. Mandatory handshake command from server to client only. Connected players is a bitmap with the lowest bit being player 0. Flip frame is 0 if players aren't flipped. Controller devices are the devices plugged into each controller port, and 16 is really MAX_USERS. Client is forced to have a different nick if multiple clients have the same nick. Command : SPECTATE Payload: None Description: Request to enter spectate mode. The client should immediately consider itself to be in spectator mode and send no further input. Command : PLAY Payload: 1 2 3 4 { reserved: 31 bits as slave?: 1 bit } Description: Request to enter player mode. The client must wait for a MODE command before sending input. Server may refuse or force slave connections, so the request is not necessarily honored. Payload may be elided if zero. Command : MODE Payload: 1 2 3 4 5 6 7 8 { frame number: uint32 reserved: 13 bits slave: 1 bit playing: 1 bit you: 1 bit player number: uint16 } Description: Inform of a connection mode change (possibly of the receiving client). Only server-to-client. Frame number is the first frame in which player data is expected, or the first frame in which player data is not expected. In the case of new players the frame number must be later than the last frame of the server's own input that has been sent, and in the case of leaving players the frame number must be later than the last frame of the relevant player's input that has been transmitted. Command : MODE_REFUSED Payload: 1 2 3 { reason: uint32 } Description: Inform a client that its request to change modes has been refused. Command : CRC Payload: 1 2 3 4 { frame number: uint32 hash: uint32 } Description: Informs the peer of the correct CRC hash for the specified frame. If the receiver's hash doesn't match, they should send a REQUEST_SAVESTATE command. Command : REQUEST_SAVESTATE Payload: None Description: Requests that the peer send a savestate. Command : LOAD_SAVESTATE Payload: 1 2 3 4 5 { frame number: uint32 uncompressed size: uint32 serialized save state: blob (variable size) } Description: Cause the other side to load a savestate, notionally one which the sending side has also loaded. If both sides support zlib compression, the serialized state is zlib compressed. Otherwise it is uncompressed. Command : PAUSE Payload: 1 2 3 { nickname: char[32] } Description: Indicates that the core is paused. The receiving peer should also pause. The server should pass it on, using the known correct name rather than the provided name. Command : RESUME Payload: None Description: Indicates that the core is no longer paused. Command : STALL Payload: 1 2 3 { frames: uint32 } Description: Request that a client stall for the given number of frames. Command : RESET Payload: 1 2 3 { frame number: uint32 } Description: Indicate that the core was reset at the beginning of the given frame. Command : CHEATS Unused Command : FLIP_PLAYERS Payload: 1 2 3 { frame number: uint32 } Description: Flip players at the requested frame. Command : CFG Unused Command : CFG_ACK Unused","title":"Command format"},{"location":"development/retroarch/network-control-interface/","text":"RetroArch Network Control Interface \u00b6 Purpose \u00b6 Network Commands allow the control of certain parts of RetroArch over UDP. Enabling \u00b6 Enable network commands in the settings menu, or ensure that network_cmd_enable = \"true\" is set in retroarch.cfg. RetroArch will listen on port 55355 by default. Sending commands \u00b6 On Linux, network commands may be sent from the command line like so: echo -n \"QUIT\" | nc -u -w1 127.0.0.1 55355 Commands \u00b6 The following commands are supported: FAST_FORWARD FAST_FORWARD_HOLD LOAD_STATE SAVE_STATE FULLSCREEN_TOGGLE QUIT STATE_SLOT_PLUS STATE_SLOT_MINUS REWIND MOVIE_RECORD_TOGGLE PAUSE_TOGGLE FRAMEADVANCE RESET SHADER_NEXT SHADER_PREV CHEAT_INDEX_PLUS CHEAT_INDEX_MINUS CHEAT_TOGGLE SCREENSHOT MUTE NETPLAY_FLIP SLOWMOTION VOLUME_UP VOLUME_DOWN OVERLAY_NEXT DISK_EJECT_TOGGLE DISK_NEXT DISK_PREV GRAB_MOUSE_TOGGLE MENU_TOGGLE","title":"Network Control Interface"},{"location":"development/retroarch/network-control-interface/#retroarch-network-control-interface","text":"","title":"RetroArch Network Control Interface"},{"location":"development/retroarch/network-control-interface/#purpose","text":"Network Commands allow the control of certain parts of RetroArch over UDP.","title":"Purpose"},{"location":"development/retroarch/network-control-interface/#enabling","text":"Enable network commands in the settings menu, or ensure that network_cmd_enable = \"true\" is set in retroarch.cfg. RetroArch will listen on port 55355 by default.","title":"Enabling"},{"location":"development/retroarch/network-control-interface/#sending-commands","text":"On Linux, network commands may be sent from the command line like so: echo -n \"QUIT\" | nc -u -w1 127.0.0.1 55355","title":"Sending commands"},{"location":"development/retroarch/network-control-interface/#commands","text":"The following commands are supported: FAST_FORWARD FAST_FORWARD_HOLD LOAD_STATE SAVE_STATE FULLSCREEN_TOGGLE QUIT STATE_SLOT_PLUS STATE_SLOT_MINUS REWIND MOVIE_RECORD_TOGGLE PAUSE_TOGGLE FRAMEADVANCE RESET SHADER_NEXT SHADER_PREV CHEAT_INDEX_PLUS CHEAT_INDEX_MINUS CHEAT_TOGGLE SCREENSHOT MUTE NETPLAY_FLIP SLOWMOTION VOLUME_UP VOLUME_DOWN OVERLAY_NEXT DISK_EJECT_TOGGLE DISK_NEXT DISK_PREV GRAB_MOUSE_TOGGLE MENU_TOGGLE","title":"Commands"},{"location":"development/retroarch/new-menu-options/","text":"Adding a RetroArch menu option \u00b6 Files you need to change \u00b6 msg_hash_us.c msg_hash_us.h msg_hash_**.c (If you speak more than one language) msg_hash_**.h (If you speak more than one language) msg_hash_lbl.h msg_hash.h menu_cbs_sublabel.c menu_setting.c menu_displaylist.c configuration.c configuration.h config.def.h Creating the menu variable \u00b6 For this example the variable will be an int named test_menu_option. Open config.def.h Add static const int test_menu_option = 0; the 0 can be any number, this is just the default value, the user will change it later. Open configuration.h There are sections for each variable type(string, float, int, uint and bool) go to \"ints\" and add int test_menu_option; Open configuration.c Add SETTING_INT(\"test_menu_option\", &settings->ints.test_menu_option, true, test_menu_option, false); to populate_settings_int. The variable is now setup but the menu still doesnt know it exists. Making the menu read the variable \u00b6 The variables name must now be configured Open msg_hash.h Add MENU_LABEL(TEST_MENU_OPTION) to enum msg_hash_enums Open intl/msg_hash_lbl.h Add MSG_HASH(MENU_ENUM_LABEL_TEST_MENU_OPTION, \"test_menu_option\") in the MENU_ENUM_LABEL_ section this is how RetroArch identifies the option. Open intl/msg_hash_us.h Add MSG_HASH(MENU_ENUM_LABEL_VALUE_TEST_MENU_OPTION, \"Test Menu Option\") in the MENU_ENUM_LABEL_VALUE_ section this is what the user actually sees. Add MSG_HASH(MENU_ENUM_SUBLABEL_TEST_MENU_OPTION, \"Unused Text\") in the MENU_ENUM_SUBLABEL_ section, sublabels are only used by xmb and glui, they are unused by rgui. Open intl/msg_hash_us.c Add case MENU_ENUM_LABEL_TEST_MENU_OPTION: snprintf(s, len, \"Help text\"); break; to menu_hash_get_help_us_enum this is the variable info that is shown when you push rshift. The option is now defined but the menu has still not been told to display it. Displaying your option \u00b6 Now the menu has to be told how to display the option. Open menu/cbs/menu_cbs_sublabel.c Add default_sublabel_macro(action_bind_sublabel_test_menu_option, MENU_ENUM_SUBLABEL_TEST_MENU_OPTION) to the block of default_sublabel_macro functions. Add case MENU_ENUM_LABEL_TEST_MENU_OPTION: BIND_ACTION_SUBLABEL(cbs, action_bind_sublabel_test_menu_option); break; to the menu_cbs_init_bind_sublabel function. Open menu/menu_setting.c Find your variables section(saving, netplay, video, ...) and add CONFIG_INT(list, list_info, &settings->ints.test_menu_option, MENU_ENUM_LABEL_TEST_MENU_OPTION, MENU_ENUM_LABEL_VALUE_TEST_MENU_OPTION, test_menu_option, &group_info, &subgroup_info, parent_group, general_write_handler, general_read_handler); the menu knows everything it needs now. Open menu/menu_displaylist.c Find your variables section and add menu_displaylist_parse_settings_enum(menu, info, MENU_ENUM_LABEL_TEST_MENU_OPTION, PARSE_ONLY_INT, false); the position of this command in the list is what determines the order of the menu entries, the first run is at the top of the list. Finishing \u00b6 There may be slight differences between variable types but for the most part if you want a string or bool just swap where ever you saw int for string or bool. The variables name always follows the same format just replace test_menu_option, TEST_MENU_OPTION and \"Test Menu Option\" with your variables actual name in the same format of uppercase, lowercase or string. This guide only effects the menu variables and the english name, if you speak another language do what you did to intl/msg_hash_us.c/h to your language files as well.","title":"Adding Menu Entries"},{"location":"development/retroarch/new-menu-options/#adding-a-retroarch-menu-option","text":"","title":"Adding a RetroArch menu option"},{"location":"development/retroarch/new-menu-options/#files-you-need-to-change","text":"msg_hash_us.c msg_hash_us.h msg_hash_**.c (If you speak more than one language) msg_hash_**.h (If you speak more than one language) msg_hash_lbl.h msg_hash.h menu_cbs_sublabel.c menu_setting.c menu_displaylist.c configuration.c configuration.h config.def.h","title":"Files you need to change"},{"location":"development/retroarch/new-menu-options/#creating-the-menu-variable","text":"For this example the variable will be an int named test_menu_option. Open config.def.h Add static const int test_menu_option = 0; the 0 can be any number, this is just the default value, the user will change it later. Open configuration.h There are sections for each variable type(string, float, int, uint and bool) go to \"ints\" and add int test_menu_option; Open configuration.c Add SETTING_INT(\"test_menu_option\", &settings->ints.test_menu_option, true, test_menu_option, false); to populate_settings_int. The variable is now setup but the menu still doesnt know it exists.","title":"Creating the menu variable"},{"location":"development/retroarch/new-menu-options/#making-the-menu-read-the-variable","text":"The variables name must now be configured Open msg_hash.h Add MENU_LABEL(TEST_MENU_OPTION) to enum msg_hash_enums Open intl/msg_hash_lbl.h Add MSG_HASH(MENU_ENUM_LABEL_TEST_MENU_OPTION, \"test_menu_option\") in the MENU_ENUM_LABEL_ section this is how RetroArch identifies the option. Open intl/msg_hash_us.h Add MSG_HASH(MENU_ENUM_LABEL_VALUE_TEST_MENU_OPTION, \"Test Menu Option\") in the MENU_ENUM_LABEL_VALUE_ section this is what the user actually sees. Add MSG_HASH(MENU_ENUM_SUBLABEL_TEST_MENU_OPTION, \"Unused Text\") in the MENU_ENUM_SUBLABEL_ section, sublabels are only used by xmb and glui, they are unused by rgui. Open intl/msg_hash_us.c Add case MENU_ENUM_LABEL_TEST_MENU_OPTION: snprintf(s, len, \"Help text\"); break; to menu_hash_get_help_us_enum this is the variable info that is shown when you push rshift. The option is now defined but the menu has still not been told to display it.","title":"Making the menu read the variable"},{"location":"development/retroarch/new-menu-options/#displaying-your-option","text":"Now the menu has to be told how to display the option. Open menu/cbs/menu_cbs_sublabel.c Add default_sublabel_macro(action_bind_sublabel_test_menu_option, MENU_ENUM_SUBLABEL_TEST_MENU_OPTION) to the block of default_sublabel_macro functions. Add case MENU_ENUM_LABEL_TEST_MENU_OPTION: BIND_ACTION_SUBLABEL(cbs, action_bind_sublabel_test_menu_option); break; to the menu_cbs_init_bind_sublabel function. Open menu/menu_setting.c Find your variables section(saving, netplay, video, ...) and add CONFIG_INT(list, list_info, &settings->ints.test_menu_option, MENU_ENUM_LABEL_TEST_MENU_OPTION, MENU_ENUM_LABEL_VALUE_TEST_MENU_OPTION, test_menu_option, &group_info, &subgroup_info, parent_group, general_write_handler, general_read_handler); the menu knows everything it needs now. Open menu/menu_displaylist.c Find your variables section and add menu_displaylist_parse_settings_enum(menu, info, MENU_ENUM_LABEL_TEST_MENU_OPTION, PARSE_ONLY_INT, false); the position of this command in the list is what determines the order of the menu entries, the first run is at the top of the list.","title":"Displaying your option"},{"location":"development/retroarch/new-menu-options/#finishing","text":"There may be slight differences between variable types but for the most part if you want a string or bool just swap where ever you saw int for string or bool. The variables name always follows the same format just replace test_menu_option, TEST_MENU_OPTION and \"Test Menu Option\" with your variables actual name in the same format of uppercase, lowercase or string. This guide only effects the menu variables and the english name, if you speak another language do what you did to intl/msg_hash_us.c/h to your language files as well.","title":"Finishing"},{"location":"development/retroarch/new-translations-crowdin/","text":"Helping translation \u00b6 As LibRetro, it is very important for us that RetroArch can be easily understood by everyone. Using RetroArch in your own language will give you a better understanding of the options and will make you feel at home. Currently, RetroArch is in the process of being translated into 22 languages. We used to use a system that was not very complicated on GitHub. However, this scenario could be difficult for new users or users who did not use the development infrastructure. That's why we switched to Crowdin 1 . What is Crowdin? \u00b6 Crowdin is a closed-source cloud-based localization technology and services company. The tool has an Online Translation Editor, where texts can be translated and proofread by linguists. It's free to use. How to register \u00b6 First you need to create Crowdin account in here . After creating your Crowdin account, you can start translating. Translate \u00b6 You can reach the project page of RetroArch by clicking here . You can either join the project and make translations or you don't join the project but still make translations. But if you join the project, you will be informed about the changes and development, also you can display RetroArch project on your profile and you can connect quickly. You can join the project by clicking the Join button at the top right. After clicking the language you want to translate, the string file will welcome you. After clicking the file from here, you will see the translation page. This screen may scare you at first, but don't worry, it's actually a very simple process. You will see untranslated or translated titles in the left menu. After clicking on any title, you will see the source string, that is, the main term, and below you will have your space to translate to your language. After making your translation, click Save and you will have sent your translation. It's that simple. Proofreading \u00b6 If you want to proofreading translations other than voting, you will need a separate authority for this. I kindly ask you to write to me via Discord gadsby#6752 so that we can discuss to provide this authorization. RetroArch or Libretro is not affiliated in any way with Crowdin. \u21a9","title":"Adding Translations with Crowdin"},{"location":"development/retroarch/new-translations-crowdin/#helping-translation","text":"As LibRetro, it is very important for us that RetroArch can be easily understood by everyone. Using RetroArch in your own language will give you a better understanding of the options and will make you feel at home. Currently, RetroArch is in the process of being translated into 22 languages. We used to use a system that was not very complicated on GitHub. However, this scenario could be difficult for new users or users who did not use the development infrastructure. That's why we switched to Crowdin 1 .","title":"Helping translation"},{"location":"development/retroarch/new-translations-crowdin/#what-is-crowdin","text":"Crowdin is a closed-source cloud-based localization technology and services company. The tool has an Online Translation Editor, where texts can be translated and proofread by linguists. It's free to use.","title":"What is Crowdin?"},{"location":"development/retroarch/new-translations-crowdin/#how-to-register","text":"First you need to create Crowdin account in here . After creating your Crowdin account, you can start translating.","title":"How to register"},{"location":"development/retroarch/new-translations-crowdin/#translate","text":"You can reach the project page of RetroArch by clicking here . You can either join the project and make translations or you don't join the project but still make translations. But if you join the project, you will be informed about the changes and development, also you can display RetroArch project on your profile and you can connect quickly. You can join the project by clicking the Join button at the top right. After clicking the language you want to translate, the string file will welcome you. After clicking the file from here, you will see the translation page. This screen may scare you at first, but don't worry, it's actually a very simple process. You will see untranslated or translated titles in the left menu. After clicking on any title, you will see the source string, that is, the main term, and below you will have your space to translate to your language. After making your translation, click Save and you will have sent your translation. It's that simple.","title":"Translate"},{"location":"development/retroarch/new-translations-crowdin/#proofreading","text":"If you want to proofreading translations other than voting, you will need a separate authority for this. I kindly ask you to write to me via Discord gadsby#6752 so that we can discuss to provide this authorization. RetroArch or Libretro is not affiliated in any way with Crowdin. \u21a9","title":"Proofreading"},{"location":"development/retroarch/new-translations/","text":"Adding a translation to a new language \u00b6 Files you need to change \u00b6 libretro-common/include/libretro.h msg_hash.h msg_hash.c Makefile.common intl/msg_hash_xx.c (new file) intl/msg_hash_xx.h (new file) intl/msg_hash_us.h menu/menu_setting.c griffin/griffin.c Instructions \u00b6 Open libretro-common/include/libretro.h Add a RETRO_LANGUAGE_XXXXX item to the retro_language enum just above RETRO_LANGUAGE_LAST , using the next available integer value Open msg_hash.h Add a MENU_ENUM_LABEL_VALUE_LANG_XXXXX item to the msg_hash_enums enum Add declaration of a const char *msg_hash_to_str_xx(enum msg_hash_enums msg) function Add declaration of a int menu_hash_get_help_xx_enum(enum msg_hash_enums msg, char *s, size_t len) function Open msg_hash.c Add a case RETRO_LANGUAGE_XXXXX : ret = menu_hash_get_help_xx_enum ( msg , s , len ); break ; block inside the menu_hash_get_help_enum() function Add a case RETRO_LANGUAGE_XXXXX : ret = msg_hash_to_str_xx ( msg ); break ; block inside the msg_hash_to_str() function Open Makefile.common Add intl/msg_hash_xx.o to OBJS Copy intl/msg_hash_us.c to intl/msg_hash_xx.c Decide if intl/msg_hash_xx.c should use UTF-8 + BOM encoding. See the section below Open intl/msg_hash_xx.c Rename the menu_hash_get_help_us_enum() function to menu_hash_get_help_xx_enum() Rename the menu_hash_to_str_us_label_enum() function to menu_hash_to_str_xx_label_enum() Rename the menu_hash_to_str_us() function to msg_hash_to_str_xx() and, inside that same function: Replace the call to menu_hash_to_str_us_label_enum() with a call to menu_hash_to_str_xx_label_enum() Replace the #include \"msg_hash_us.h\" line with #include \"msg_hash_xx.h\" Open intl/msg_hash_us.h Add a MSG_HASH ( MENU_ENUM_LABEL_VALUE_LANG_XXXXX , \"Xxxxx\" ) block with the name of the new language written in English Copy intl/msg_hash_us.h to intl/msg_hash_xx.h Decide if intl/msg_hash_xx.h should use UTF-8 + BOM encoding. See the section below Open intl/msg_hash_xx.h Make sure to modify the MSG_HASH ( MENU_ENUM_LABEL_VALUE_LANG_XXXXX , \"Xxxxx\" ) block to show the name of the new language written in the target language Open menu/menu_setting.c Add a modes [ RETRO_LANGUAGE_XXXXX ] = msg_hash_to_str ( MENU_ENUM_LABEL_VALUE_LANG_XXXXX ); assignment to the setting_get_string_representation_uint_user_language() function Open griffin/griffin.c Add a #include \"../intl/msg_hash_xx.c\" line below the existing, similar ones for other languages. Encoding of translation files \u00b6 Translation files ( intl/msg_hash_xx.{c,h} ) in general must be UTF-8 encoded For some languages, these files need to have a \"UTF-8 Unicode (with BOM)\" encoding, this is, UTF-8 and a BOM . AFAIK this is so because a requirement of the MSVC compilers (Windows platform). Examples of this as of now are: msg_hash_ar.{c,h} msg_hash_chs.{c,h} msg_hash_cht.{c,h} msg_hash_ja.{c,h} msg_hash_ko.{c,h} msg_hash_pl.{c,h} msg_hash_ru.{c,h} msg_hash_vn.h Be careful when creating and editing your new translation files as some text editors do strip the BOM without warning. Translation \u00b6 If you speak the target language xx then you could start translating literals in intl/msg_hash_xx.c intl/msg_hash_xx.h by replacing the English original ones with its translations. Example: Addition of Arabic language: \u00b6 Commit 45580cb Commit d8f1a08 Commit 7a0428f See also \u00b6 Adding a RetroArch menu option","title":"Adding Translations(not active)"},{"location":"development/retroarch/new-translations/#adding-a-translation-to-a-new-language","text":"","title":"Adding a translation to a new language"},{"location":"development/retroarch/new-translations/#files-you-need-to-change","text":"libretro-common/include/libretro.h msg_hash.h msg_hash.c Makefile.common intl/msg_hash_xx.c (new file) intl/msg_hash_xx.h (new file) intl/msg_hash_us.h menu/menu_setting.c griffin/griffin.c","title":"Files you need to change"},{"location":"development/retroarch/new-translations/#instructions","text":"Open libretro-common/include/libretro.h Add a RETRO_LANGUAGE_XXXXX item to the retro_language enum just above RETRO_LANGUAGE_LAST , using the next available integer value Open msg_hash.h Add a MENU_ENUM_LABEL_VALUE_LANG_XXXXX item to the msg_hash_enums enum Add declaration of a const char *msg_hash_to_str_xx(enum msg_hash_enums msg) function Add declaration of a int menu_hash_get_help_xx_enum(enum msg_hash_enums msg, char *s, size_t len) function Open msg_hash.c Add a case RETRO_LANGUAGE_XXXXX : ret = menu_hash_get_help_xx_enum ( msg , s , len ); break ; block inside the menu_hash_get_help_enum() function Add a case RETRO_LANGUAGE_XXXXX : ret = msg_hash_to_str_xx ( msg ); break ; block inside the msg_hash_to_str() function Open Makefile.common Add intl/msg_hash_xx.o to OBJS Copy intl/msg_hash_us.c to intl/msg_hash_xx.c Decide if intl/msg_hash_xx.c should use UTF-8 + BOM encoding. See the section below Open intl/msg_hash_xx.c Rename the menu_hash_get_help_us_enum() function to menu_hash_get_help_xx_enum() Rename the menu_hash_to_str_us_label_enum() function to menu_hash_to_str_xx_label_enum() Rename the menu_hash_to_str_us() function to msg_hash_to_str_xx() and, inside that same function: Replace the call to menu_hash_to_str_us_label_enum() with a call to menu_hash_to_str_xx_label_enum() Replace the #include \"msg_hash_us.h\" line with #include \"msg_hash_xx.h\" Open intl/msg_hash_us.h Add a MSG_HASH ( MENU_ENUM_LABEL_VALUE_LANG_XXXXX , \"Xxxxx\" ) block with the name of the new language written in English Copy intl/msg_hash_us.h to intl/msg_hash_xx.h Decide if intl/msg_hash_xx.h should use UTF-8 + BOM encoding. See the section below Open intl/msg_hash_xx.h Make sure to modify the MSG_HASH ( MENU_ENUM_LABEL_VALUE_LANG_XXXXX , \"Xxxxx\" ) block to show the name of the new language written in the target language Open menu/menu_setting.c Add a modes [ RETRO_LANGUAGE_XXXXX ] = msg_hash_to_str ( MENU_ENUM_LABEL_VALUE_LANG_XXXXX ); assignment to the setting_get_string_representation_uint_user_language() function Open griffin/griffin.c Add a #include \"../intl/msg_hash_xx.c\" line below the existing, similar ones for other languages.","title":"Instructions"},{"location":"development/retroarch/new-translations/#encoding-of-translation-files","text":"Translation files ( intl/msg_hash_xx.{c,h} ) in general must be UTF-8 encoded For some languages, these files need to have a \"UTF-8 Unicode (with BOM)\" encoding, this is, UTF-8 and a BOM . AFAIK this is so because a requirement of the MSVC compilers (Windows platform). Examples of this as of now are: msg_hash_ar.{c,h} msg_hash_chs.{c,h} msg_hash_cht.{c,h} msg_hash_ja.{c,h} msg_hash_ko.{c,h} msg_hash_pl.{c,h} msg_hash_ru.{c,h} msg_hash_vn.h Be careful when creating and editing your new translation files as some text editors do strip the BOM without warning.","title":"Encoding of translation files"},{"location":"development/retroarch/new-translations/#translation","text":"If you speak the target language xx then you could start translating literals in intl/msg_hash_xx.c intl/msg_hash_xx.h by replacing the English original ones with its translations.","title":"Translation"},{"location":"development/retroarch/new-translations/#example-addition-of-arabic-language","text":"Commit 45580cb Commit d8f1a08 Commit 7a0428f","title":"Example: Addition of Arabic language:"},{"location":"development/retroarch/new-translations/#see-also","text":"Adding a RetroArch menu option","title":"See also"},{"location":"development/retroarch/compilation/3ds/","text":"Nintendo 3DS Compilation / Development Guide \u00b6 Environment configuration \u00b6 You need the homebrew Nintendo 3DS SDK libctru and DevkitARM toolchain installed. If you are running windows you will need to install MSYS2 and point it to your devkitARM installation like this: 1 2 3 4 5 6 Put these lines in RetroArch3DSEnv.sh export DEVKITPRO=\"/c/devkitPro\" export DEVKITARM=\"$DEVKITPRO/devkitARM\" export CTRULIB=\"$DEVKITPRO/libctru\" export CTRBANNERTOOL=\"/c/Users/Emily/Desktop/RetroArchDev/CompatFiles/bannertool.exe\" bash The custom bannertool is needed if you want to compile .cia builds due to a broken wav encoder in the windows version of bannertool included with RetroArch. Before building RetroArch you will have to load MSYS2 and launch RetroArch3DSEnv.sh , then proceed as you would for linux. The working bannertool can be compiled from the sources here using MSYS2. RetroArch Compilation \u00b6 Fetching RetroArch \u00b6 Clone RetroArch's repository from GitHub 1 2 git clone https://github.com/libretro/RetroArch.git retroarch cd retroarch For subsequent builds you only need to pull the changes from the repo 1 2 cd retroarch git pull To update your local copy from the repository run git pull Building RetroArch separately \u00b6 First, you need to compile Salamander . To compile Salamander (for 3DS) run: 1 make -f Makefile.ctr.salamander Second, to compile RetroArch (for 3DS) run: 1 make -f Makefile.ctr Note RetroArch on 3DS is statically linked. With statically linked RetroArch, each executable is a separate libretro core instead of the core being separately loaded from a single executable. A pre-existing libretro library needs to be present in the root directory in order to link RetroArch 3DS. This file needs to be called 'libretro_ctr.a'. After a few seconds/minutes you should be able to find a retroarch_ctr.elf and retroarch_ctr.dol file under that directory. Building RetroArch in bulk \u00b6 Instead of building each core one by one, you can build all cores as a batch task. Run from the main 'retroarch' directory: 1 cd dist-scripts Note Make sure that all the libretro cores that you want to compile are inside the 'dist-scripts' directory. Once inside this directory, run : 1 ./dist-cores.sh ctr This process will also automate the packaging process for you. Packaging RetroArch \u00b6 Additional Tips: \u00b6 Core Compilation \u00b6 Fetching Cores \u00b6 The easiest way to fetch all the cores is to use libretro-super. Run 1 ./libretro-fetch.sh Building Cores \u00b6 The easiest way to build all the cores (for 3DS) is to use libretro-super. Run 1 ./libretro-build-ctr.sh In case you only want to build one and/or more cores instead of all, you can specify the cores you want to build after the first command in no particular order. E.g.: 1 ./libretro-build-ctr.sh snes9x2010 fceumm Once finished, you can find the libretro cores inside directory dist/ctr .","title":"Nintendo 3DS"},{"location":"development/retroarch/compilation/3ds/#nintendo-3ds-compilation-development-guide","text":"","title":"Nintendo 3DS Compilation / Development Guide"},{"location":"development/retroarch/compilation/3ds/#environment-configuration","text":"You need the homebrew Nintendo 3DS SDK libctru and DevkitARM toolchain installed. If you are running windows you will need to install MSYS2 and point it to your devkitARM installation like this: 1 2 3 4 5 6 Put these lines in RetroArch3DSEnv.sh export DEVKITPRO=\"/c/devkitPro\" export DEVKITARM=\"$DEVKITPRO/devkitARM\" export CTRULIB=\"$DEVKITPRO/libctru\" export CTRBANNERTOOL=\"/c/Users/Emily/Desktop/RetroArchDev/CompatFiles/bannertool.exe\" bash The custom bannertool is needed if you want to compile .cia builds due to a broken wav encoder in the windows version of bannertool included with RetroArch. Before building RetroArch you will have to load MSYS2 and launch RetroArch3DSEnv.sh , then proceed as you would for linux. The working bannertool can be compiled from the sources here using MSYS2.","title":"Environment configuration"},{"location":"development/retroarch/compilation/3ds/#retroarch-compilation","text":"","title":"RetroArch Compilation"},{"location":"development/retroarch/compilation/3ds/#fetching-retroarch","text":"Clone RetroArch's repository from GitHub 1 2 git clone https://github.com/libretro/RetroArch.git retroarch cd retroarch For subsequent builds you only need to pull the changes from the repo 1 2 cd retroarch git pull To update your local copy from the repository run git pull","title":"Fetching RetroArch"},{"location":"development/retroarch/compilation/3ds/#building-retroarch-separately","text":"First, you need to compile Salamander . To compile Salamander (for 3DS) run: 1 make -f Makefile.ctr.salamander Second, to compile RetroArch (for 3DS) run: 1 make -f Makefile.ctr Note RetroArch on 3DS is statically linked. With statically linked RetroArch, each executable is a separate libretro core instead of the core being separately loaded from a single executable. A pre-existing libretro library needs to be present in the root directory in order to link RetroArch 3DS. This file needs to be called 'libretro_ctr.a'. After a few seconds/minutes you should be able to find a retroarch_ctr.elf and retroarch_ctr.dol file under that directory.","title":"Building RetroArch separately"},{"location":"development/retroarch/compilation/3ds/#building-retroarch-in-bulk","text":"Instead of building each core one by one, you can build all cores as a batch task. Run from the main 'retroarch' directory: 1 cd dist-scripts Note Make sure that all the libretro cores that you want to compile are inside the 'dist-scripts' directory. Once inside this directory, run : 1 ./dist-cores.sh ctr This process will also automate the packaging process for you.","title":"Building RetroArch in bulk"},{"location":"development/retroarch/compilation/3ds/#packaging-retroarch","text":"","title":"Packaging RetroArch"},{"location":"development/retroarch/compilation/3ds/#additional-tips","text":"","title":"Additional Tips:"},{"location":"development/retroarch/compilation/3ds/#core-compilation","text":"","title":"Core Compilation"},{"location":"development/retroarch/compilation/3ds/#fetching-cores","text":"The easiest way to fetch all the cores is to use libretro-super. Run 1 ./libretro-fetch.sh","title":"Fetching Cores"},{"location":"development/retroarch/compilation/3ds/#building-cores","text":"The easiest way to build all the cores (for 3DS) is to use libretro-super. Run 1 ./libretro-build-ctr.sh In case you only want to build one and/or more cores instead of all, you can specify the cores you want to build after the first command in no particular order. E.g.: 1 ./libretro-build-ctr.sh snes9x2010 fceumm Once finished, you can find the libretro cores inside directory dist/ctr .","title":"Building Cores"},{"location":"development/retroarch/compilation/android/","text":"Compiling for Android \u00b6 Compiling from Windows \u00b6 You need a complete Android development environment, including the Android SDK and Android NDK . Other dependencies: Cygwin (base settings for Bash scripts) Git Installing OpenJDK or Oracle JDK \u00b6 Installing cygwin \u00b6 Download the setup tool from the official webpage and install the base distribution. Installing git \u00b6 You can install Windows git or add the cygwin git version from the cygwin installer. Next step: From here, follow the instructions for compiling Android from Linux. \u00b6 Compiling from Linux \u00b6 You need a complete android development environment ready to develop native apps. That means you have: Android SDK Android NDK Use Google to figure out how to install that and make sure the appropriate executables from the above are in your path variable. These instructions have been tested under Linux (Fedora 20 and Ubuntu 18.04). They may also work in windows with cygwin. Getting the code \u00b6 1 2 3 git clone https://github.com/libretro/libretro-super.git cd libretro-super ./libretro-fetch.sh ./libretro-fetch.sh can fail on fork() calls, repeat until all are up to date. For ./libretro-build-android-mk.sh , some cores may fail to compile (g++ \"Argument list too long\" error). Building the cores \u00b6 For the core building portion of this tutorial, you'll need to put at least your NDK dir in the PATH variable for the build script to work. Just for the heck of it, I also like to throw in the tools folder from SDK as well as the build-tools (adjust to your situation): 1 export PATH=/home/boo/Android/Sdk/ndk-bundle/build:/home/boo/Android/Sdk/tools:/home/boo/Android/Sdk/build-tools/28.0.3:$PATH Run build script ( read notes below before running the script): \u00b6 1 NOCLEAN=1 ./libretro-build-android-mk.sh You can omit NOCLEAN=1 if you'd like to perform make clean on every core's repo before building each. For a variety of reasons, some of the cores may not be compiled by the script. These reasons can range from: core folder doesn't have a libretro/jni folder setup yet, core's libretro/jni folder is in a place that the script does not expect, core has been recently added to project and has not yet been added to script or you're missing some essential dependencies and the build script failed. Some cores (like snes9x2002) need an older NDK. Some core don't use jni but use make or cmake instead. In the event you are missing a core that you want, you can build it in most cases by going to its subfolder (libretro-corename) and performing this series of commands: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #for example cd libretro-flycast #get corename for later corename=$(echo ${PWD##*/}|cut -d \"-\" -f 2) #now try to find the libretro/jni folder cd $(find . -iname \"jni\" -type d | grep --color=NEVER \"libretro/jni\") #if it exists and you don't get an error, build the core: ndk-build #if it succeeds, do this to copy built .so files to dist folder: for arch in \"arm64-v8a\" \"armeabi-v7a\" \"x86\" \"x86_64\"; do if [ -f \"$arch/libretro.so\" ]; then cp -v $arch/libretro.so $SRC/dist/android/$arch/\"$corename\"_libretro_android.so; else echo \"$arch\" build HAS FAILED!; fi; done You may also want to check this repo for a list of dependencies needed to build the cores: 1 2 3 4 5 https://github.com/libretro/libretro-deps/ #these deps can usually be installed via apt-get install (don't forget to append -dev at the end). for example: sudo apt-get install libfaac-dev more info about core building can be had here: 1 https://github.com/thebunnyrules/docs/blob/master/docs/development/cores/developing-cores.md Building RetroArch \u00b6 PREP WORK \u00b6 The RetroArch repo is fetched into the libretro-super folder by ./libretro-fetch.sh above. You first need to fetch the submodules for it. 1 2 cd retroarch git submodule update --init Now go to the project folder: 1 cd pkg/android/phoenix Within this folder, edit local.properties to point to the location of your sdk and ndk directories by adding lines that look like this: 1 2 ndk.dir=/complete/path/to/android-ndk-r20 sdk.dir=/complete/path/to/Sdk Eg. if you have Android Studio, your dirs should be in : 1 2 ndk.dir=/home/yourUSERNAME/Android/Sdk/ndk-bundle sdk.dir=/home/yourUSERNAME/Android/Sdk If you want to build a release apk (aka an apk with none of the debug layers), you'll have to self sign it. Make a file called keystore.properties with the following content: 1 2 3 4 storePassword=YOURPASS keyPassword=YOURPASS keyAlias=KEY_ALIAS storeFile=/full/path/to/keystore-file_NO_RELATIVE_PATHS.jks Next, generate a keystore file and be sure to put it where keystore.properties says it is: 1 keytool -genkey -alias KEY_ALIS -keyalg RSA -keypass YOURPASS -keystore keystore-file.jks Now all the generated release apk will be automatically signed by gradle. Next, copy the cores, assets and overlays to an assets folder you create here: 1 2 3 4 5 mkdir -p assets/cores mkdir assets/overlays cp ../../../../dist/android/arm64-v8a/* assets/cores/ #replace arm64-v8a here by the archetecture of the device you will be using. Google your phone's specs. cp -r ../../../../dist/info/ assets/ cp -r ../../../../retroarch/media/overlays/* assets/overlays/ Optionally, you may want to include the assets for the front-end (menu icons, fonts, images etc), shader caches, dbs, cheats, etc... These assets can be downloaded at any time during run time via the updater but if you want to bundle them into the build you may do so by downloading bundle.zip / cheats.zip and extracting them to assets folder: 1 2 3 4 5 wget https://buildbot.libretro.com/assets/frontend/bundle.zip unzip -n bundle.zip -d assets wget https://buildbot.libretro.com/assets/frontend/cheats.zip mkdir assets/cheats unzip cheats.zip -d assets/cheats NOTE ABOUT BUNDLED ASSETS AND CORES I've sometimes noticed a bug where the built apk does not unpack the bundled assets and cores on first install. My workaround was to re-install the apk a second time. On the second install, the assets and cores get unpacked. This is a bug in 1.7.7 and 1.7.8. BUILD \u00b6 Now run gradlew and let it configure and sync itself and download all it's dependencies: 1 ./gradlew Optionally: You can get a list of available tasks by doing: 1 ./gradlew tasks Now, if all went smoothly with config step, you can proceed to build the apk 1 2 3 4 5 6 7 8 #Builds release variants: Normal, ra32 and aarch64 ./gradlew assembleRelease #Build debug variants: ./gradlew assembleDebug #Builds all variants ./gradlew buildNeeded If all goes well, this will spit out an .apk. For example build/outputs/apk/normal/debug/phoenix-normal-debug.apk . Put it on your device with 1 adb install -r build/outputs/apk/normal/debug/phoenix-normal-debug.apk You can find all the apks built by gradle with this command (execute from the same dir as gradlew)\" 1 find . -iname \"*.apk\" This should give you a list of all the outputted apks.","title":"Android"},{"location":"development/retroarch/compilation/android/#compiling-for-android","text":"","title":"Compiling for Android"},{"location":"development/retroarch/compilation/android/#compiling-from-windows","text":"You need a complete Android development environment, including the Android SDK and Android NDK . Other dependencies: Cygwin (base settings for Bash scripts) Git","title":"Compiling from Windows"},{"location":"development/retroarch/compilation/android/#installing-openjdk-or-oracle-jdk","text":"","title":"Installing OpenJDK or Oracle JDK"},{"location":"development/retroarch/compilation/android/#installing-cygwin","text":"Download the setup tool from the official webpage and install the base distribution.","title":"Installing cygwin"},{"location":"development/retroarch/compilation/android/#installing-git","text":"You can install Windows git or add the cygwin git version from the cygwin installer.","title":"Installing git"},{"location":"development/retroarch/compilation/android/#next-step-from-here-follow-the-instructions-for-compiling-android-from-linux","text":"","title":"Next step: From here, follow the instructions for compiling Android from Linux."},{"location":"development/retroarch/compilation/android/#compiling-from-linux","text":"You need a complete android development environment ready to develop native apps. That means you have: Android SDK Android NDK Use Google to figure out how to install that and make sure the appropriate executables from the above are in your path variable. These instructions have been tested under Linux (Fedora 20 and Ubuntu 18.04). They may also work in windows with cygwin.","title":"Compiling from Linux"},{"location":"development/retroarch/compilation/android/#getting-the-code","text":"1 2 3 git clone https://github.com/libretro/libretro-super.git cd libretro-super ./libretro-fetch.sh ./libretro-fetch.sh can fail on fork() calls, repeat until all are up to date. For ./libretro-build-android-mk.sh , some cores may fail to compile (g++ \"Argument list too long\" error).","title":"Getting the code"},{"location":"development/retroarch/compilation/android/#building-the-cores","text":"For the core building portion of this tutorial, you'll need to put at least your NDK dir in the PATH variable for the build script to work. Just for the heck of it, I also like to throw in the tools folder from SDK as well as the build-tools (adjust to your situation): 1 export PATH=/home/boo/Android/Sdk/ndk-bundle/build:/home/boo/Android/Sdk/tools:/home/boo/Android/Sdk/build-tools/28.0.3:$PATH","title":"Building the cores"},{"location":"development/retroarch/compilation/android/#run-build-script-read-notes-below-before-running-the-script","text":"1 NOCLEAN=1 ./libretro-build-android-mk.sh You can omit NOCLEAN=1 if you'd like to perform make clean on every core's repo before building each. For a variety of reasons, some of the cores may not be compiled by the script. These reasons can range from: core folder doesn't have a libretro/jni folder setup yet, core's libretro/jni folder is in a place that the script does not expect, core has been recently added to project and has not yet been added to script or you're missing some essential dependencies and the build script failed. Some cores (like snes9x2002) need an older NDK. Some core don't use jni but use make or cmake instead. In the event you are missing a core that you want, you can build it in most cases by going to its subfolder (libretro-corename) and performing this series of commands: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #for example cd libretro-flycast #get corename for later corename=$(echo ${PWD##*/}|cut -d \"-\" -f 2) #now try to find the libretro/jni folder cd $(find . -iname \"jni\" -type d | grep --color=NEVER \"libretro/jni\") #if it exists and you don't get an error, build the core: ndk-build #if it succeeds, do this to copy built .so files to dist folder: for arch in \"arm64-v8a\" \"armeabi-v7a\" \"x86\" \"x86_64\"; do if [ -f \"$arch/libretro.so\" ]; then cp -v $arch/libretro.so $SRC/dist/android/$arch/\"$corename\"_libretro_android.so; else echo \"$arch\" build HAS FAILED!; fi; done You may also want to check this repo for a list of dependencies needed to build the cores: 1 2 3 4 5 https://github.com/libretro/libretro-deps/ #these deps can usually be installed via apt-get install (don't forget to append -dev at the end). for example: sudo apt-get install libfaac-dev more info about core building can be had here: 1 https://github.com/thebunnyrules/docs/blob/master/docs/development/cores/developing-cores.md","title":"Run build script ( read notes below before running the script):"},{"location":"development/retroarch/compilation/android/#building-retroarch","text":"","title":"Building RetroArch"},{"location":"development/retroarch/compilation/android/#prep-work","text":"The RetroArch repo is fetched into the libretro-super folder by ./libretro-fetch.sh above. You first need to fetch the submodules for it. 1 2 cd retroarch git submodule update --init Now go to the project folder: 1 cd pkg/android/phoenix Within this folder, edit local.properties to point to the location of your sdk and ndk directories by adding lines that look like this: 1 2 ndk.dir=/complete/path/to/android-ndk-r20 sdk.dir=/complete/path/to/Sdk Eg. if you have Android Studio, your dirs should be in : 1 2 ndk.dir=/home/yourUSERNAME/Android/Sdk/ndk-bundle sdk.dir=/home/yourUSERNAME/Android/Sdk If you want to build a release apk (aka an apk with none of the debug layers), you'll have to self sign it. Make a file called keystore.properties with the following content: 1 2 3 4 storePassword=YOURPASS keyPassword=YOURPASS keyAlias=KEY_ALIAS storeFile=/full/path/to/keystore-file_NO_RELATIVE_PATHS.jks Next, generate a keystore file and be sure to put it where keystore.properties says it is: 1 keytool -genkey -alias KEY_ALIS -keyalg RSA -keypass YOURPASS -keystore keystore-file.jks Now all the generated release apk will be automatically signed by gradle. Next, copy the cores, assets and overlays to an assets folder you create here: 1 2 3 4 5 mkdir -p assets/cores mkdir assets/overlays cp ../../../../dist/android/arm64-v8a/* assets/cores/ #replace arm64-v8a here by the archetecture of the device you will be using. Google your phone's specs. cp -r ../../../../dist/info/ assets/ cp -r ../../../../retroarch/media/overlays/* assets/overlays/ Optionally, you may want to include the assets for the front-end (menu icons, fonts, images etc), shader caches, dbs, cheats, etc... These assets can be downloaded at any time during run time via the updater but if you want to bundle them into the build you may do so by downloading bundle.zip / cheats.zip and extracting them to assets folder: 1 2 3 4 5 wget https://buildbot.libretro.com/assets/frontend/bundle.zip unzip -n bundle.zip -d assets wget https://buildbot.libretro.com/assets/frontend/cheats.zip mkdir assets/cheats unzip cheats.zip -d assets/cheats NOTE ABOUT BUNDLED ASSETS AND CORES I've sometimes noticed a bug where the built apk does not unpack the bundled assets and cores on first install. My workaround was to re-install the apk a second time. On the second install, the assets and cores get unpacked. This is a bug in 1.7.7 and 1.7.8.","title":"PREP WORK"},{"location":"development/retroarch/compilation/android/#build","text":"Now run gradlew and let it configure and sync itself and download all it's dependencies: 1 ./gradlew Optionally: You can get a list of available tasks by doing: 1 ./gradlew tasks Now, if all went smoothly with config step, you can proceed to build the apk 1 2 3 4 5 6 7 8 #Builds release variants: Normal, ra32 and aarch64 ./gradlew assembleRelease #Build debug variants: ./gradlew assembleDebug #Builds all variants ./gradlew buildNeeded If all goes well, this will spit out an .apk. For example build/outputs/apk/normal/debug/phoenix-normal-debug.apk . Put it on your device with 1 adb install -r build/outputs/apk/normal/debug/phoenix-normal-debug.apk You can find all the apks built by gradle with this command (execute from the same dir as gradlew)\" 1 find . -iname \"*.apk\" This should give you a list of all the outputted apks.","title":"BUILD"},{"location":"development/retroarch/compilation/dos/","text":"DOS Compilation / Development Guide \u00b6 Environment configuration \u00b6 This guide will use cross-compilation from Linux to build a DOS executable with the DJGPP toolchain. Most Linux distributions do not include this toolchain, but prebuilt binaries can be obtained here , or if you are using Arch Linux, you can use the AUR package djgpp-gcc to build it easily. DJGPP builds 32-bit programs, which means an 80386 or higher processor is required. 80286 is not supported. Core Support \u00b6 Note RetroArch on DOS is statically linked. With statically linked RetroArch, each executable is a separate libretro core instead of the core being separately loaded from a single executable. A pre-existing libretro library needs to be present in the root of the source directory in order to link RetroArch DOS. This file needs to be called 'libretro.a'. RetroArch Compilation \u00b6 Fetching RetroArch \u00b6 Clone RetroArch's repository from GitHub 1 2 git clone https://github.com/libretro/RetroArch.git retroarch cd retroarch For subsequent builds you only need to pull the changes from the repo 1 2 cd retroarch git pull Building RetroArch \u00b6 To compile RetroArch run the following commands inside RetroArch's source tree: 1 2 3 CROSS_COMPILE=i686-pc-msdosdjgpp- ./configure --with-libretro=\"-L. -lretro\" make clean make -j4 Replace the value of CROSS_COMPILE with the prefix of your specific toolchain if necessary. Once finished, you should find retroarch.exe in the current directory, this is the final binary you can run inside DOS. Since older DOS versions do not support long filenames, you may want to rename this file to something shorter. RetroArch for DOS also requires the CWSDPMI server application from the DJGPP distribution, which can be downloaded separately here . On the target system, CWSDPMI.EXE will need to be placed in the same directory as your RetroArch executable for it to run properly. Once you have the DPMI program in place, simply run your RetroArch executable and the DPMI server will be loaded automatically at startup. It is also possible to include the DPMI server inside the main RetroArch executable so that only a single file is needed, but that is outside the scope of this document. See here for more information.","title":"DOS"},{"location":"development/retroarch/compilation/dos/#dos-compilation-development-guide","text":"","title":"DOS Compilation / Development Guide"},{"location":"development/retroarch/compilation/dos/#environment-configuration","text":"This guide will use cross-compilation from Linux to build a DOS executable with the DJGPP toolchain. Most Linux distributions do not include this toolchain, but prebuilt binaries can be obtained here , or if you are using Arch Linux, you can use the AUR package djgpp-gcc to build it easily. DJGPP builds 32-bit programs, which means an 80386 or higher processor is required. 80286 is not supported.","title":"Environment configuration"},{"location":"development/retroarch/compilation/dos/#core-support","text":"Note RetroArch on DOS is statically linked. With statically linked RetroArch, each executable is a separate libretro core instead of the core being separately loaded from a single executable. A pre-existing libretro library needs to be present in the root of the source directory in order to link RetroArch DOS. This file needs to be called 'libretro.a'.","title":"Core Support"},{"location":"development/retroarch/compilation/dos/#retroarch-compilation","text":"","title":"RetroArch Compilation"},{"location":"development/retroarch/compilation/dos/#fetching-retroarch","text":"Clone RetroArch's repository from GitHub 1 2 git clone https://github.com/libretro/RetroArch.git retroarch cd retroarch For subsequent builds you only need to pull the changes from the repo 1 2 cd retroarch git pull","title":"Fetching RetroArch"},{"location":"development/retroarch/compilation/dos/#building-retroarch","text":"To compile RetroArch run the following commands inside RetroArch's source tree: 1 2 3 CROSS_COMPILE=i686-pc-msdosdjgpp- ./configure --with-libretro=\"-L. -lretro\" make clean make -j4 Replace the value of CROSS_COMPILE with the prefix of your specific toolchain if necessary. Once finished, you should find retroarch.exe in the current directory, this is the final binary you can run inside DOS. Since older DOS versions do not support long filenames, you may want to rename this file to something shorter. RetroArch for DOS also requires the CWSDPMI server application from the DJGPP distribution, which can be downloaded separately here . On the target system, CWSDPMI.EXE will need to be placed in the same directory as your RetroArch executable for it to run properly. Once you have the DPMI program in place, simply run your RetroArch executable and the DPMI server will be loaded automatically at startup. It is also possible to include the DPMI server inside the main RetroArch executable so that only a single file is needed, but that is outside the scope of this document. See here for more information.","title":"Building RetroArch"},{"location":"development/retroarch/compilation/gamecube/","text":"Nintendo GameCube Compilation / Development Guide \u00b6 Environment configuration \u00b6 You need the homebrew Nintendo GameCube SDK libogc and Devkitpro PPC toolchain installed. RetroArch Compilation \u00b6 Fetching RetroArch \u00b6 Clone RetroArch's repository from GitHub 1 2 git clone https://github.com/libretro/RetroArch.git retroarch cd retroarch For subsequent builds you only need to pull the changes from the repo 1 2 cd retroarch git pull To update your local copy from the repository run git pull Building RetroArch separately \u00b6 First, to compile RetroArch (for GameCube) run: 1 make -f Makefile.griffin platform=ngc Note RetroArch on GameCube is statically linked. With statically linked RetroArch, each executable is a separate libretro core instead of the core being separately loaded from a single executable. A pre-existing libretro library needs to be present in the root directory in order to link RetroArch GameCube. This file needs to be called 'libretro_ngc.a'. After a few seconds/minutes you should be able to find a retroarch_ngc.elf and retroarch_ngc.dol file under that directory. Building RetroArch in bulk \u00b6 Instead of building each core one by one, you can build all cores as a batch task. Run from the main 'retroarch' directory: 1 cd dist-scripts Note Make sure that all the libretro cores that you want to compile are inside the 'dist-scripts' directory. Once inside this directory, run : 1 ./dist-cores.sh ngc This process will also automate the packaging process for you. Packaging RetroArch \u00b6 Additional Tips: \u00b6 Core Compilation \u00b6 Fetching Cores \u00b6 The easiest way to fetch all the cores is to use libretro-super. Run 1 ./libretro-fetch.sh Building Cores \u00b6 The easiest way to build all the cores (for GameCube) is to use libretro-super. Run 1 ./libretro-build-ngc.sh In case you only want to build one and/or more cores instead of all, you can specify the cores you want to build after the first command in no particular order. E.g.: 1 ./libretro-build-ngc.sh snes9x2010 fceumm Once finished, you can find the libretro cores inside directory dist/ngc .","title":"Nintendo GameCube"},{"location":"development/retroarch/compilation/gamecube/#nintendo-gamecube-compilation-development-guide","text":"","title":"Nintendo GameCube Compilation / Development Guide"},{"location":"development/retroarch/compilation/gamecube/#environment-configuration","text":"You need the homebrew Nintendo GameCube SDK libogc and Devkitpro PPC toolchain installed.","title":"Environment configuration"},{"location":"development/retroarch/compilation/gamecube/#retroarch-compilation","text":"","title":"RetroArch Compilation"},{"location":"development/retroarch/compilation/gamecube/#fetching-retroarch","text":"Clone RetroArch's repository from GitHub 1 2 git clone https://github.com/libretro/RetroArch.git retroarch cd retroarch For subsequent builds you only need to pull the changes from the repo 1 2 cd retroarch git pull To update your local copy from the repository run git pull","title":"Fetching RetroArch"},{"location":"development/retroarch/compilation/gamecube/#building-retroarch-separately","text":"First, to compile RetroArch (for GameCube) run: 1 make -f Makefile.griffin platform=ngc Note RetroArch on GameCube is statically linked. With statically linked RetroArch, each executable is a separate libretro core instead of the core being separately loaded from a single executable. A pre-existing libretro library needs to be present in the root directory in order to link RetroArch GameCube. This file needs to be called 'libretro_ngc.a'. After a few seconds/minutes you should be able to find a retroarch_ngc.elf and retroarch_ngc.dol file under that directory.","title":"Building RetroArch separately"},{"location":"development/retroarch/compilation/gamecube/#building-retroarch-in-bulk","text":"Instead of building each core one by one, you can build all cores as a batch task. Run from the main 'retroarch' directory: 1 cd dist-scripts Note Make sure that all the libretro cores that you want to compile are inside the 'dist-scripts' directory. Once inside this directory, run : 1 ./dist-cores.sh ngc This process will also automate the packaging process for you.","title":"Building RetroArch in bulk"},{"location":"development/retroarch/compilation/gamecube/#packaging-retroarch","text":"","title":"Packaging RetroArch"},{"location":"development/retroarch/compilation/gamecube/#additional-tips","text":"","title":"Additional Tips:"},{"location":"development/retroarch/compilation/gamecube/#core-compilation","text":"","title":"Core Compilation"},{"location":"development/retroarch/compilation/gamecube/#fetching-cores","text":"The easiest way to fetch all the cores is to use libretro-super. Run 1 ./libretro-fetch.sh","title":"Fetching Cores"},{"location":"development/retroarch/compilation/gamecube/#building-cores","text":"The easiest way to build all the cores (for GameCube) is to use libretro-super. Run 1 ./libretro-build-ngc.sh In case you only want to build one and/or more cores instead of all, you can specify the cores you want to build after the first command in no particular order. E.g.: 1 ./libretro-build-ngc.sh snes9x2010 fceumm Once finished, you can find the libretro cores inside directory dist/ngc .","title":"Building Cores"},{"location":"development/retroarch/compilation/haiku/","text":"Haiku Compilation / Development Guide \u00b6 This compilation guide will teach you how to build RetroArch for Haiku. It is more than recommended to keep your Haiku system up to date and use Nightlybuilds with upgraded packages. This video covers a quick demonstration of these subjects; Environment Configuration Building RetroArch Be sure to read instructions that are given on this page. Environment configuration \u00b6 The following software needs to be installed: Haiku standard development packages (haiku_devel) SDL libraries and development packages (libsdl_devel / libsdl2_devel) X11 libraries and development packages (libx11_devel, libxau_devel, libxext_devel) Mesa libraries and development packages (mesa_devel, glu_devel) Jpeg, PNG, Zlib libraries and development packages (jpeg_devel, libpng16_devel, zlib_devel) Optional dependencies: libxml2_devel - For XML shaders and cheat support. freetype_devel - TTF font rendering ffmpeg_devel - FFmpeg recording RetroArch Compilation \u00b6 Fetching RetroArch \u00b6 Clone RetroArch's repository from GitHub 1 2 git clone https://github.com/libretro/RetroArch.git retroarch cd retroarch For subsequent builds you only need to pull the changes from the repo 1 2 cd retroarch git pull To update your local copy from the repository run git pull Building RetroArch \u00b6 Make sure gcc is installed, then run: 1 2 3 4 5 6 7 # Build ./configure --prefix=~/config/non-packaged/ --datarootdir=~/config/non-packaged/data/ --with-man_dir=~/config/non-packaged/documentation/man/ make # Install make install # Run retroarch Core Compilation \u00b6 Fetching Cores \u00b6 The easiest way to fetch all the cores is to use libretro-super. Run 1 ./libretro-fetch.sh Building Cores \u00b6 The easiest way to build all the cores is to use libretro-super. To build all cores for Haiku, run 1 ./libretro-build.sh In case you only want to build one and/or more cores instead of all, you can specify the cores you want to build after the first command in no particular order. E.g.: 1 ./libretro-build.sh snes9x2010 fceumm Once finished, you can find the libretro cores inside directory dist/haiku . Video Tutorial \u00b6","title":"Haiku"},{"location":"development/retroarch/compilation/haiku/#haiku-compilation-development-guide","text":"This compilation guide will teach you how to build RetroArch for Haiku. It is more than recommended to keep your Haiku system up to date and use Nightlybuilds with upgraded packages. This video covers a quick demonstration of these subjects; Environment Configuration Building RetroArch Be sure to read instructions that are given on this page.","title":"Haiku Compilation / Development Guide"},{"location":"development/retroarch/compilation/haiku/#environment-configuration","text":"The following software needs to be installed: Haiku standard development packages (haiku_devel) SDL libraries and development packages (libsdl_devel / libsdl2_devel) X11 libraries and development packages (libx11_devel, libxau_devel, libxext_devel) Mesa libraries and development packages (mesa_devel, glu_devel) Jpeg, PNG, Zlib libraries and development packages (jpeg_devel, libpng16_devel, zlib_devel) Optional dependencies: libxml2_devel - For XML shaders and cheat support. freetype_devel - TTF font rendering ffmpeg_devel - FFmpeg recording","title":"Environment configuration"},{"location":"development/retroarch/compilation/haiku/#retroarch-compilation","text":"","title":"RetroArch Compilation"},{"location":"development/retroarch/compilation/haiku/#fetching-retroarch","text":"Clone RetroArch's repository from GitHub 1 2 git clone https://github.com/libretro/RetroArch.git retroarch cd retroarch For subsequent builds you only need to pull the changes from the repo 1 2 cd retroarch git pull To update your local copy from the repository run git pull","title":"Fetching RetroArch"},{"location":"development/retroarch/compilation/haiku/#building-retroarch","text":"Make sure gcc is installed, then run: 1 2 3 4 5 6 7 # Build ./configure --prefix=~/config/non-packaged/ --datarootdir=~/config/non-packaged/data/ --with-man_dir=~/config/non-packaged/documentation/man/ make # Install make install # Run retroarch","title":"Building RetroArch"},{"location":"development/retroarch/compilation/haiku/#core-compilation","text":"","title":"Core Compilation"},{"location":"development/retroarch/compilation/haiku/#fetching-cores","text":"The easiest way to fetch all the cores is to use libretro-super. Run 1 ./libretro-fetch.sh","title":"Fetching Cores"},{"location":"development/retroarch/compilation/haiku/#building-cores","text":"The easiest way to build all the cores is to use libretro-super. To build all cores for Haiku, run 1 ./libretro-build.sh In case you only want to build one and/or more cores instead of all, you can specify the cores you want to build after the first command in no particular order. E.g.: 1 ./libretro-build.sh snes9x2010 fceumm Once finished, you can find the libretro cores inside directory dist/haiku .","title":"Building Cores"},{"location":"development/retroarch/compilation/haiku/#video-tutorial","text":"","title":"Video Tutorial"},{"location":"development/retroarch/compilation/ios/","text":"iOS Compilation / Development Guide \u00b6 Environment configuration \u00b6 The following software needs to be installed: XCode iOS SDK The following versions of the operating system are supported: iOS 6.0 iOS 7.0+ iOS 8.0+ iOS 9.0+ iOS 10.0+ iOS 11 support is in-progress Get the RetroArch source \u00b6 Clone RetroArch's repository from GitHub 1 2 git clone https://github.com/libretro/RetroArch.git retroarch cd retroarch For subsequent builds you only need to pull the changes from the repo 1 2 cd retroarch git pull To update your local copy from the repository run git pull Core Compilation \u00b6 RetroArch needs the emulation cores compiled for it to be useful. Let's compile the cores first. Fetching Cores \u00b6 The easiest way to fetch all the cores is to use libretro-super. Run 1 2 3 git clone https://github.com/libretro/libretro-super cd libretro-super ./libretro-fetch.sh Building Cores \u00b6 The easiest way to build all the cores (for iOS) is to use libretro-super. To build iOS 6 to 8-compatible cores, run 1 ./libretro-build-ios.sh To build iOS 9 and up-compatible cores, run 1 ./libretro-build-ios9.sh In case you only want to build one and/or more cores instead of all, you can specify the cores you want to build after the first command in no particular order. E.g.: 1 ./libretro-build-ios.sh snes9x2010 fceumm Once finished, you can find the libretro cores inside directory dist/ios or dist/ios9 . Code Signing the Cores \u00b6 Note that you must code sign the dylib cores in order for you to use them. In iOS 9 and above \u00b6 Starting from iOS 9, the cores must be packaged as part of the application, even if they are code-signed. This was an additional security measure introduced in iOS 9. Fortunately, the code signing is handled as part of the Xcode build/archive process, so all you need to do is place your compiled .dylib cores in the pkg/apple/iOS/modules folder. Running the application via Xcode or archiving the application for an adhoc distribution will codesign the cores as long as they are placed in the aforementioned pkg/apple/iOS/modules folder. In iOS 6 to 8 \u00b6 You need to manually code sign the cores, and then you can copy them to the Documents/RetroArch/cores directory using an application like \"iFunBox\" or \"iExplorer\". Manually Code Signing \u00b6 cd [path where the dylib cores are] codesign -fs '[Your Full Developer Certificate Name]' *.dylib Known Issues with Code Signing (iOS 9 and above) \u00b6 Building and running from Xcode doesn't code sign the cores the first time for some reason. This is a bug in the build process. The cores seem to get signed after the cores are copied. If you build and run again, the cores will have been signed and will be usable in RetroArch. Building RetroArch \u00b6 Using the graphical interface \u00b6 For iOS 6 to 8 \u00b6 Open Xcode. Open the following project file pkg/apple/RetroArch_iOS.xcodeproj in the Xcode IDE and build ( \u2318-B ) and run ( \u2318-R ) it there. For iOS 10 and up \u00b6 Open Xcode. Open the following project file pkg/apple/RetroArch_iOS10.xcodeproj In the Navigator Pane on the left, select the Retroarch_iOS10 project In the Project and Targets list on the left side, choose the RetroArchiOS10 target. Select the Target (the one with the RetroArch icon), not the project. In the \"General\" tab, change the \"Team\" under Signing to be your developer name. Set the active scheme to RetroArchiOS10, and select your connected iOS device as the device. Run ( \u2318-R ) Creating an IPA for adhoc distribution (or for someone else to re-sign) \u00b6 You will need an adhoc distribution certificate to create an adhoc distribution. Go to developer.apple.com to create an adhoc certificate. In Xcode, select your target (RetroArchiOS10 for iOS 10 and above, RetroArch for others), Choose \"Generic iOS Device\" for the device, and select Product -> Archive. After it is done archiving, the Organizer window will appear. Select the archive and then use the \"Export..\" button on the right pane, and select \"Save for Ad Hoc Deployment\". Choose your developer name and you'll create an IPA in a directory of your choosing. This IPA can be resigned for other people to use using utilities such as iOS App Signer . You can install the IPA on your iOS device by dragging the IPA onto the Installed Apps section in the Devices window. Notes on building and running \u00b6 If you use Xcode to build and run RetroArch, and overwrite an existing RetroArch, you'll notice that your configuration will be wrong and stuff like your settings and directory locations will be missing. That's because you get a new application identifier when you do a re-install or upgrade, and the RetroArch config uses absolute paths in its configuration. You'll need to delete the app and then reinstall, or manually edit the RetroArch config file and fix the file paths by hand. Using the command line \u00b6 For iOS 6 to 8 \u00b6 To build a debug build : 1 2 3 4 # Build xcodebuild -target RetroArch -configuration Debug -project pkg/apple/RetroArch_iOS.xcodeproj # Run open ./pkg/apple/build/Debug/RetroArch.app/ To build a release build : 1 2 3 4 # Build xcodebuild -target RetroArch -configuration Release -project pkg/apple/RetroArch_iOS.xcodeproj # Run open ./pkg/apple/build/Release/RetroArch.app/ For iOS 10 and up \u00b6 To build a debug build : 1 2 3 4 # Build xcodebuild -target RetroArch -configuration Debug -project pkg/apple/RetroArch_iOS10.xcodeproj # Run open ./pkg/apple/build/Debug/RetroArch.app/ To build a release build : 1 2 3 4 # Build xcodebuild -target RetroArch -configuration Release -project pkg/apple/RetroArch_iOS10.xcodeproj # Run open ./pkg/apple/build/Release/RetroArch.app/ Packaging RetroArch \u00b6 Additional Tips: \u00b6 Cores \u00b6 When you run RetroArch and try to run a game, and see the message \"Failed to load libretro core\", that means the core is not code signed. See the above \"Code Signing the Cores\" section on making sure your cores are signed. You can manually check the code signature on a file by doing: codesign -dvv mednafen_psx_libretro_ios.dylib . The Authority entry has your certificate - make sure it's your dev or adhoc distribution certificate. To see if your core is valid and usable in RetroArch, you can also try Load Core and selecting the core. If you see the core name appear at the top (in the GUI menu), then it is properly codesigned and loaded. If you still see \"No Core\", then your core is not codesigned and cannot be used. Getting your ROMs/content/BIOS in RetroArch \u00b6 Use a desktop tool like \"iFunBox\" or \"iExplorer\". You can use iTunes but note that it cannot access subdirectories. BIOS files go in RetroArch/system You can also download content in Safari and \"Open in..\" and choose RetroArch. Currently there is a bug in that it will crash (the app delegate needs fixing), but it gets placed in the \"Inbox\" folder in RetroArch's Documents folder. You can choose \"Load Content\" and navigate to the \"Inbox\" directory. Development \u00b6 Where do I start? \u00b6 The RetroArch codebase can be daunting, especially if you're used to iOS development in Objective C or Swift. Objective C is a subset of C so the syntax should look somewhat familiar to you. The first and main entrypoint you should look at is in core/griffin/griffin.c . This is where all the code is included, with compiler flags used to bring in code specific to the platform. For iOS, you should pay attention to the compiler flags like __APPLE__ , TARGET_OS_IPHONE , HAVE_COCOATOUCH . Note that you can Cmd-click into the #include paths to peer into the source code. You can also Cmd-Shift-O and type in the source file as well. And, breakpoints work as well! The iOS specific code is in core/griffin/griffin_objc.m . Here you'll find the include to ./ui/drivers/ui_cocoatouch.m , which contains the application delegate - the main entry point for the iOS application lifecycle. From there everything should look familiar to you as an iOS developer, and you should be able to hook in any iOS specific objective c code. Although you can use Objective C data structures and code, you'll probably be having to use C data structures since you'll have to call methods in C to hook back into RetroArch, and they will expect C data structures. The great thing is you can mix C code with Objective C, as long as you do the necessary conversions to the data structures that RetroArch expects.","title":"iOS"},{"location":"development/retroarch/compilation/ios/#ios-compilation-development-guide","text":"","title":"iOS Compilation / Development Guide"},{"location":"development/retroarch/compilation/ios/#environment-configuration","text":"The following software needs to be installed: XCode iOS SDK The following versions of the operating system are supported: iOS 6.0 iOS 7.0+ iOS 8.0+ iOS 9.0+ iOS 10.0+ iOS 11 support is in-progress","title":"Environment configuration"},{"location":"development/retroarch/compilation/ios/#get-the-retroarch-source","text":"Clone RetroArch's repository from GitHub 1 2 git clone https://github.com/libretro/RetroArch.git retroarch cd retroarch For subsequent builds you only need to pull the changes from the repo 1 2 cd retroarch git pull To update your local copy from the repository run git pull","title":"Get the RetroArch source"},{"location":"development/retroarch/compilation/ios/#core-compilation","text":"RetroArch needs the emulation cores compiled for it to be useful. Let's compile the cores first.","title":"Core Compilation"},{"location":"development/retroarch/compilation/ios/#fetching-cores","text":"The easiest way to fetch all the cores is to use libretro-super. Run 1 2 3 git clone https://github.com/libretro/libretro-super cd libretro-super ./libretro-fetch.sh","title":"Fetching Cores"},{"location":"development/retroarch/compilation/ios/#building-cores","text":"The easiest way to build all the cores (for iOS) is to use libretro-super. To build iOS 6 to 8-compatible cores, run 1 ./libretro-build-ios.sh To build iOS 9 and up-compatible cores, run 1 ./libretro-build-ios9.sh In case you only want to build one and/or more cores instead of all, you can specify the cores you want to build after the first command in no particular order. E.g.: 1 ./libretro-build-ios.sh snes9x2010 fceumm Once finished, you can find the libretro cores inside directory dist/ios or dist/ios9 .","title":"Building Cores"},{"location":"development/retroarch/compilation/ios/#code-signing-the-cores","text":"Note that you must code sign the dylib cores in order for you to use them.","title":"Code Signing the Cores"},{"location":"development/retroarch/compilation/ios/#in-ios-9-and-above","text":"Starting from iOS 9, the cores must be packaged as part of the application, even if they are code-signed. This was an additional security measure introduced in iOS 9. Fortunately, the code signing is handled as part of the Xcode build/archive process, so all you need to do is place your compiled .dylib cores in the pkg/apple/iOS/modules folder. Running the application via Xcode or archiving the application for an adhoc distribution will codesign the cores as long as they are placed in the aforementioned pkg/apple/iOS/modules folder.","title":"In iOS 9 and above"},{"location":"development/retroarch/compilation/ios/#in-ios-6-to-8","text":"You need to manually code sign the cores, and then you can copy them to the Documents/RetroArch/cores directory using an application like \"iFunBox\" or \"iExplorer\".","title":"In iOS 6 to 8"},{"location":"development/retroarch/compilation/ios/#manually-code-signing","text":"cd [path where the dylib cores are] codesign -fs '[Your Full Developer Certificate Name]' *.dylib","title":"Manually Code Signing"},{"location":"development/retroarch/compilation/ios/#known-issues-with-code-signing-ios-9-and-above","text":"Building and running from Xcode doesn't code sign the cores the first time for some reason. This is a bug in the build process. The cores seem to get signed after the cores are copied. If you build and run again, the cores will have been signed and will be usable in RetroArch.","title":"Known Issues with Code Signing (iOS 9 and above)"},{"location":"development/retroarch/compilation/ios/#building-retroarch","text":"","title":"Building RetroArch"},{"location":"development/retroarch/compilation/ios/#using-the-graphical-interface","text":"","title":"Using the graphical interface"},{"location":"development/retroarch/compilation/ios/#for-ios-6-to-8","text":"Open Xcode. Open the following project file pkg/apple/RetroArch_iOS.xcodeproj in the Xcode IDE and build ( \u2318-B ) and run ( \u2318-R ) it there.","title":"For iOS 6 to 8"},{"location":"development/retroarch/compilation/ios/#for-ios-10-and-up","text":"Open Xcode. Open the following project file pkg/apple/RetroArch_iOS10.xcodeproj In the Navigator Pane on the left, select the Retroarch_iOS10 project In the Project and Targets list on the left side, choose the RetroArchiOS10 target. Select the Target (the one with the RetroArch icon), not the project. In the \"General\" tab, change the \"Team\" under Signing to be your developer name. Set the active scheme to RetroArchiOS10, and select your connected iOS device as the device. Run ( \u2318-R )","title":"For iOS 10 and up"},{"location":"development/retroarch/compilation/ios/#creating-an-ipa-for-adhoc-distribution-or-for-someone-else-to-re-sign","text":"You will need an adhoc distribution certificate to create an adhoc distribution. Go to developer.apple.com to create an adhoc certificate. In Xcode, select your target (RetroArchiOS10 for iOS 10 and above, RetroArch for others), Choose \"Generic iOS Device\" for the device, and select Product -> Archive. After it is done archiving, the Organizer window will appear. Select the archive and then use the \"Export..\" button on the right pane, and select \"Save for Ad Hoc Deployment\". Choose your developer name and you'll create an IPA in a directory of your choosing. This IPA can be resigned for other people to use using utilities such as iOS App Signer . You can install the IPA on your iOS device by dragging the IPA onto the Installed Apps section in the Devices window.","title":"Creating an IPA for adhoc distribution (or for someone else to re-sign)"},{"location":"development/retroarch/compilation/ios/#notes-on-building-and-running","text":"If you use Xcode to build and run RetroArch, and overwrite an existing RetroArch, you'll notice that your configuration will be wrong and stuff like your settings and directory locations will be missing. That's because you get a new application identifier when you do a re-install or upgrade, and the RetroArch config uses absolute paths in its configuration. You'll need to delete the app and then reinstall, or manually edit the RetroArch config file and fix the file paths by hand.","title":"Notes on building and running"},{"location":"development/retroarch/compilation/ios/#using-the-command-line","text":"","title":"Using the command line"},{"location":"development/retroarch/compilation/ios/#for-ios-6-to-8_1","text":"To build a debug build : 1 2 3 4 # Build xcodebuild -target RetroArch -configuration Debug -project pkg/apple/RetroArch_iOS.xcodeproj # Run open ./pkg/apple/build/Debug/RetroArch.app/ To build a release build : 1 2 3 4 # Build xcodebuild -target RetroArch -configuration Release -project pkg/apple/RetroArch_iOS.xcodeproj # Run open ./pkg/apple/build/Release/RetroArch.app/","title":"For iOS 6 to 8"},{"location":"development/retroarch/compilation/ios/#for-ios-10-and-up_1","text":"To build a debug build : 1 2 3 4 # Build xcodebuild -target RetroArch -configuration Debug -project pkg/apple/RetroArch_iOS10.xcodeproj # Run open ./pkg/apple/build/Debug/RetroArch.app/ To build a release build : 1 2 3 4 # Build xcodebuild -target RetroArch -configuration Release -project pkg/apple/RetroArch_iOS10.xcodeproj # Run open ./pkg/apple/build/Release/RetroArch.app/","title":"For iOS 10 and up"},{"location":"development/retroarch/compilation/ios/#packaging-retroarch","text":"","title":"Packaging RetroArch"},{"location":"development/retroarch/compilation/ios/#additional-tips","text":"","title":"Additional Tips:"},{"location":"development/retroarch/compilation/ios/#cores","text":"When you run RetroArch and try to run a game, and see the message \"Failed to load libretro core\", that means the core is not code signed. See the above \"Code Signing the Cores\" section on making sure your cores are signed. You can manually check the code signature on a file by doing: codesign -dvv mednafen_psx_libretro_ios.dylib . The Authority entry has your certificate - make sure it's your dev or adhoc distribution certificate. To see if your core is valid and usable in RetroArch, you can also try Load Core and selecting the core. If you see the core name appear at the top (in the GUI menu), then it is properly codesigned and loaded. If you still see \"No Core\", then your core is not codesigned and cannot be used.","title":"Cores"},{"location":"development/retroarch/compilation/ios/#getting-your-romscontentbios-in-retroarch","text":"Use a desktop tool like \"iFunBox\" or \"iExplorer\". You can use iTunes but note that it cannot access subdirectories. BIOS files go in RetroArch/system You can also download content in Safari and \"Open in..\" and choose RetroArch. Currently there is a bug in that it will crash (the app delegate needs fixing), but it gets placed in the \"Inbox\" folder in RetroArch's Documents folder. You can choose \"Load Content\" and navigate to the \"Inbox\" directory.","title":"Getting your ROMs/content/BIOS in RetroArch"},{"location":"development/retroarch/compilation/ios/#development","text":"","title":"Development"},{"location":"development/retroarch/compilation/ios/#where-do-i-start","text":"The RetroArch codebase can be daunting, especially if you're used to iOS development in Objective C or Swift. Objective C is a subset of C so the syntax should look somewhat familiar to you. The first and main entrypoint you should look at is in core/griffin/griffin.c . This is where all the code is included, with compiler flags used to bring in code specific to the platform. For iOS, you should pay attention to the compiler flags like __APPLE__ , TARGET_OS_IPHONE , HAVE_COCOATOUCH . Note that you can Cmd-click into the #include paths to peer into the source code. You can also Cmd-Shift-O and type in the source file as well. And, breakpoints work as well! The iOS specific code is in core/griffin/griffin_objc.m . Here you'll find the include to ./ui/drivers/ui_cocoatouch.m , which contains the application delegate - the main entry point for the iOS application lifecycle. From there everything should look familiar to you as an iOS developer, and you should be able to hook in any iOS specific objective c code. Although you can use Objective C data structures and code, you'll probably be having to use C data structures since you'll have to call methods in C to hook back into RetroArch, and they will expect C data structures. The great thing is you can mix C code with Objective C, as long as you do the necessary conversions to the data structures that RetroArch expects.","title":"Where do I start?"},{"location":"development/retroarch/compilation/linux-and-bsd/","text":"Compilation in Linux and BSD \u00b6 Compilation on Linux and BSD does not have many surprises, as its foundation is Unix-based. Dependencies \u00b6 At least one libretro implementation pkgconfig Working OpenGL headers (should be included by default, but you might need to install libgl/mesa development packages) Optional dependencies \u00b6 libxml2-devel - For XML shaders and cheat support. freetype-devel - TTF font rendering ffmpeg/libavcodec - FFmpeg recording nvidia-cg-toolkit - Cg shaders libudev-devel zlib-devel Some other libraries can be built support for as well, please refer to ./configure --help . Satisfying dependencies under Fedora 23 \u00b6 sudo dnf install make automake gcc gcc-c++ kernel-devel mesa-libEGL-devel libv4l-devel libxkbcommon-devel mesa-libgbm-devel Cg libCg zlib-devel freetype-devel libxml2-devel ffmpeg-devel SDL2-devel SDL-devel perl-X11-Protocol perl-Net-DBus pulseaudio-libs-devel openal-soft-devel libusb-devel Satisfying dependencies under Debian/Ubuntu \u00b6 apt-get -y install build-essential libxkbcommon-dev zlib1g-dev libfreetype6-dev libegl1-mesa-dev libgles2-mesa-dev libgbm-dev nvidia-cg-toolkit nvidia-cg-dev libavcodec-dev libsdl2-dev libsdl-image1.2-dev libxml2-dev yasm Satisfying dependencies under Alpine \u00b6 apk add eudev-dev ffmpeg-dev freetype-dev g++ gcc libxml2-dev mesa-dev pkgconf zlib-dev This list of packages may not be complete. Getting the code \u00b6 git clone git://github.com/libretro/libretro-super.git cd libretro-super SHALLOW_CLONE = 1 ./libretro-fetch.sh Building RetroArch \u00b6 ./retroarch-build.sh Building libretro cores \u00b6 You should at least build one libretro implementation so RetroArch can do stuff. There is a super-project that is designed to easily build every libretro port out there. To build every core: NOCLEAN = 1 ./libretro-build.sh Omit NOCLEAN=1 if you wish to perform \"make clean\" on every repo before building Installing \u00b6 Let's assume you'd like to install RetroArch into a folder called ~/ra mkdir -p ~/ra/cores cd retroarch make DESTDIR = ~/ra install cd .. #to libretro-super directory ./libretro-install.sh ~/ra/cores You should now have a fully functional RetroArch build in ~/ra Enjoy! :)","title":"Overview for Linux/BSD"},{"location":"development/retroarch/compilation/linux-and-bsd/#compilation-in-linux-and-bsd","text":"Compilation on Linux and BSD does not have many surprises, as its foundation is Unix-based.","title":"Compilation in Linux and BSD"},{"location":"development/retroarch/compilation/linux-and-bsd/#dependencies","text":"At least one libretro implementation pkgconfig Working OpenGL headers (should be included by default, but you might need to install libgl/mesa development packages)","title":"Dependencies"},{"location":"development/retroarch/compilation/linux-and-bsd/#optional-dependencies","text":"libxml2-devel - For XML shaders and cheat support. freetype-devel - TTF font rendering ffmpeg/libavcodec - FFmpeg recording nvidia-cg-toolkit - Cg shaders libudev-devel zlib-devel Some other libraries can be built support for as well, please refer to ./configure --help .","title":"Optional dependencies"},{"location":"development/retroarch/compilation/linux-and-bsd/#satisfying-dependencies-under-fedora-23","text":"sudo dnf install make automake gcc gcc-c++ kernel-devel mesa-libEGL-devel libv4l-devel libxkbcommon-devel mesa-libgbm-devel Cg libCg zlib-devel freetype-devel libxml2-devel ffmpeg-devel SDL2-devel SDL-devel perl-X11-Protocol perl-Net-DBus pulseaudio-libs-devel openal-soft-devel libusb-devel","title":"Satisfying dependencies under Fedora 23"},{"location":"development/retroarch/compilation/linux-and-bsd/#satisfying-dependencies-under-debianubuntu","text":"apt-get -y install build-essential libxkbcommon-dev zlib1g-dev libfreetype6-dev libegl1-mesa-dev libgles2-mesa-dev libgbm-dev nvidia-cg-toolkit nvidia-cg-dev libavcodec-dev libsdl2-dev libsdl-image1.2-dev libxml2-dev yasm","title":"Satisfying dependencies under Debian/Ubuntu"},{"location":"development/retroarch/compilation/linux-and-bsd/#satisfying-dependencies-under-alpine","text":"apk add eudev-dev ffmpeg-dev freetype-dev g++ gcc libxml2-dev mesa-dev pkgconf zlib-dev This list of packages may not be complete.","title":"Satisfying dependencies under Alpine"},{"location":"development/retroarch/compilation/linux-and-bsd/#getting-the-code","text":"git clone git://github.com/libretro/libretro-super.git cd libretro-super SHALLOW_CLONE = 1 ./libretro-fetch.sh","title":"Getting the code"},{"location":"development/retroarch/compilation/linux-and-bsd/#building-retroarch","text":"./retroarch-build.sh","title":"Building RetroArch"},{"location":"development/retroarch/compilation/linux-and-bsd/#building-libretro-cores","text":"You should at least build one libretro implementation so RetroArch can do stuff. There is a super-project that is designed to easily build every libretro port out there. To build every core: NOCLEAN = 1 ./libretro-build.sh Omit NOCLEAN=1 if you wish to perform \"make clean\" on every repo before building","title":"Building libretro cores"},{"location":"development/retroarch/compilation/linux-and-bsd/#installing","text":"Let's assume you'd like to install RetroArch into a folder called ~/ra mkdir -p ~/ra/cores cd retroarch make DESTDIR = ~/ra install cd .. #to libretro-super directory ./libretro-install.sh ~/ra/cores You should now have a fully functional RetroArch build in ~/ra Enjoy! :)","title":"Installing"},{"location":"development/retroarch/compilation/msvc-runtime-versions/","text":"MSVC Runtime Versions \u00b6 VC++ version _MSC_VER Alternative name C runtime C++ runtime 1.0 800 MSVCRT10.DLL 2.0 900 MSVCRT20.DLL 4.0 1000 MSVCRT40.DLL 4.2 1020 MSVCRT.DLL 5.0 1100 Visual Studio 97 MSVCRT.DLL MSVCP50.DLL 6.0 1200 Visual Studio 6.0, VC98 MSVCRT.DLL MSVCP60.DLL 7.0 1300 Visual Studio .NET (2002) MSVCR70.DLL MSVCP70.DLL 7.1 1310 Visual Studio .NET 2003 MSVCR71.DLL MSVCP71.DLL 8.0 1400 Visual Studio 2005 MSVCR80.DLL MSVCP80.DLL 9.0 1500 Visual Studio 2008 MSVCR90.DLL MSVCP90.DLL 10.0 1600 Visual Studio 2010 MSVCR100.DLL MSVCP100.DLL 11.0 1700 Visual Studio 2012 MSVCR110.DLL MSVCP110.DLL 12.0 1800 Visual Studio 2013 MSVCR120.DLL MSVCP120.DLL 14.0 1900 Visual Studio 2015 See notes MSVCP140.DLL 14.1* 1910* Visual Studio 2017 See notes MSVCP140.DLL Note for VC2003 The runtime does not have its own redist, it is instead only bundled with .NET Framework 1.1, or you can manually extract it from KB932298 (2007 DST Update). Note for VC2015/2017 The runtime was split into 4 external libraries: concrt140.dll, msvcp140.dll, vccorlib140.dll and vcruntime140.dll, as well as an OS-local component named ucrtbase.dll included with Windows 10 and up. Note for VC2017 The version numbers increment with each update (VC++ versions 14.1/14.11/14.12, _MSC_VER 1910/1911/1912, Visual Studio versions 15.0/15.3/15.5 etc.). And yes, the C++ runtime is still called VCP140 and not VCP141... What does my Windows version ship with? \u00b6 Version NT3 95 NT4 98 2000 ME XP 2003 2003R2 Vista 2008 7 2008R2 2012 8 8.1 2012R2 10 2016 1.0 X 2.0 X X X X X X X X X X X X X X X X X X 4.0 X* X X X X X X X X X X X X X X X X 5.0 X* X X X X 6.0 X X X X X X X X X X X X X 2002 2003 X* X* 2005 X X X X X X X X X X 2008 X X X X X X X X 2010 X X X 2012 X 2013 2015 2017 Note for Windows 95 The VC40 runtime is only bundled with Windows 95B (OSR2) and up. Note for Windows 98 The VC50 runtime is not always installed, but is available on the install CD (in WIN98/WIN98_36.CAB for First Edition and 37.CAB for Second Edition). Note for Server 2003 and 2003R2 The VC2003 runtime requires installing the .NET Framework via the Windows Components Wizard after installation. Which runtime is supported by my Windows version? \u00b6 From Minimum service pack levels for Microsoft VC++ Redistributable Packages : Version 95 NT4 98 2000 ME XP 2003 2003R2 Vista 2008 7 2008R2 2012 8 8.1 2012R2 10 2016 2003 X* SP6a* X* X* X* X* X* X* X* X* 2005 SP2+ SP1+ 2005 SP1 SP2+ SP1+ X X X X X X X X X X 2008 SP4 SP2+ SP1+ X X 2008 SP1 SP2+ SP1+ X X X X X X X X X X 2010 SP3 SP2+ X SP2+ SP2+ X X* 2010 SP1 SP3 SP2+ X SP2+ SP2+ X X* X* X* X* X* X* 2012 Upd. 4 SP3 SP2+ X SP2+ SP2+ SP1+ SP1+ X X X SP1+* X 2013 SP3 SP2+ X SP2+ SP2+ SP1+ SP1+ X X X X X 2015 SP3 SP2+ X SP2+ SP2+ SP1+ SP1+ X X X X X 2017 SP3 SP2+ SP2+ SP2+ SP1+ SP1+ X X* X* X Note for VC2003 The VC2003 runtime is not provided as a separate download and requires installing the .NET Framework 1.1 (requires IE 5.01 or later). Note for VC2010 Server 2008R2 requires SP1 if using the x64 version. Note for VC2010 SP1 MS Documentation is conflicting about whether or not 2008R2/2012 x86 is supported, or if 8/2012 or higher is even supported at all. Note for VC2012 Update 4/VC2013 MS Documentation is conflicting about the exact service pack levels and architectures supported for each OS version. Note for VC2013 For 8.1 and 2012R2, KB2883200 is required. Note for VC2017 For 8.1 and 2012R2, KB2919355 is required. For 10, build 1507 or later is required. Requirements were taken from here . Note for Windows \u215e/2012 and higher While some runtimes may not be documented as officially supported, testing shows that all the above versions appear to work.","title":"MSVC Compatibility Guide"},{"location":"development/retroarch/compilation/msvc-runtime-versions/#msvc-runtime-versions","text":"VC++ version _MSC_VER Alternative name C runtime C++ runtime 1.0 800 MSVCRT10.DLL 2.0 900 MSVCRT20.DLL 4.0 1000 MSVCRT40.DLL 4.2 1020 MSVCRT.DLL 5.0 1100 Visual Studio 97 MSVCRT.DLL MSVCP50.DLL 6.0 1200 Visual Studio 6.0, VC98 MSVCRT.DLL MSVCP60.DLL 7.0 1300 Visual Studio .NET (2002) MSVCR70.DLL MSVCP70.DLL 7.1 1310 Visual Studio .NET 2003 MSVCR71.DLL MSVCP71.DLL 8.0 1400 Visual Studio 2005 MSVCR80.DLL MSVCP80.DLL 9.0 1500 Visual Studio 2008 MSVCR90.DLL MSVCP90.DLL 10.0 1600 Visual Studio 2010 MSVCR100.DLL MSVCP100.DLL 11.0 1700 Visual Studio 2012 MSVCR110.DLL MSVCP110.DLL 12.0 1800 Visual Studio 2013 MSVCR120.DLL MSVCP120.DLL 14.0 1900 Visual Studio 2015 See notes MSVCP140.DLL 14.1* 1910* Visual Studio 2017 See notes MSVCP140.DLL Note for VC2003 The runtime does not have its own redist, it is instead only bundled with .NET Framework 1.1, or you can manually extract it from KB932298 (2007 DST Update). Note for VC2015/2017 The runtime was split into 4 external libraries: concrt140.dll, msvcp140.dll, vccorlib140.dll and vcruntime140.dll, as well as an OS-local component named ucrtbase.dll included with Windows 10 and up. Note for VC2017 The version numbers increment with each update (VC++ versions 14.1/14.11/14.12, _MSC_VER 1910/1911/1912, Visual Studio versions 15.0/15.3/15.5 etc.). And yes, the C++ runtime is still called VCP140 and not VCP141...","title":"MSVC Runtime Versions"},{"location":"development/retroarch/compilation/msvc-runtime-versions/#what-does-my-windows-version-ship-with","text":"Version NT3 95 NT4 98 2000 ME XP 2003 2003R2 Vista 2008 7 2008R2 2012 8 8.1 2012R2 10 2016 1.0 X 2.0 X X X X X X X X X X X X X X X X X X 4.0 X* X X X X X X X X X X X X X X X X 5.0 X* X X X X 6.0 X X X X X X X X X X X X X 2002 2003 X* X* 2005 X X X X X X X X X X 2008 X X X X X X X X 2010 X X X 2012 X 2013 2015 2017 Note for Windows 95 The VC40 runtime is only bundled with Windows 95B (OSR2) and up. Note for Windows 98 The VC50 runtime is not always installed, but is available on the install CD (in WIN98/WIN98_36.CAB for First Edition and 37.CAB for Second Edition). Note for Server 2003 and 2003R2 The VC2003 runtime requires installing the .NET Framework via the Windows Components Wizard after installation.","title":"What does my Windows version ship with?"},{"location":"development/retroarch/compilation/msvc-runtime-versions/#which-runtime-is-supported-by-my-windows-version","text":"From Minimum service pack levels for Microsoft VC++ Redistributable Packages : Version 95 NT4 98 2000 ME XP 2003 2003R2 Vista 2008 7 2008R2 2012 8 8.1 2012R2 10 2016 2003 X* SP6a* X* X* X* X* X* X* X* X* 2005 SP2+ SP1+ 2005 SP1 SP2+ SP1+ X X X X X X X X X X 2008 SP4 SP2+ SP1+ X X 2008 SP1 SP2+ SP1+ X X X X X X X X X X 2010 SP3 SP2+ X SP2+ SP2+ X X* 2010 SP1 SP3 SP2+ X SP2+ SP2+ X X* X* X* X* X* X* 2012 Upd. 4 SP3 SP2+ X SP2+ SP2+ SP1+ SP1+ X X X SP1+* X 2013 SP3 SP2+ X SP2+ SP2+ SP1+ SP1+ X X X X X 2015 SP3 SP2+ X SP2+ SP2+ SP1+ SP1+ X X X X X 2017 SP3 SP2+ SP2+ SP2+ SP1+ SP1+ X X* X* X Note for VC2003 The VC2003 runtime is not provided as a separate download and requires installing the .NET Framework 1.1 (requires IE 5.01 or later). Note for VC2010 Server 2008R2 requires SP1 if using the x64 version. Note for VC2010 SP1 MS Documentation is conflicting about whether or not 2008R2/2012 x86 is supported, or if 8/2012 or higher is even supported at all. Note for VC2012 Update 4/VC2013 MS Documentation is conflicting about the exact service pack levels and architectures supported for each OS version. Note for VC2013 For 8.1 and 2012R2, KB2883200 is required. Note for VC2017 For 8.1 and 2012R2, KB2919355 is required. For 10, build 1507 or later is required. Requirements were taken from here . Note for Windows \u215e/2012 and higher While some runtimes may not be documented as officially supported, testing shows that all the above versions appear to work.","title":"Which runtime is supported by my Windows version?"},{"location":"development/retroarch/compilation/osx/","text":"macOS/OSX Compilation / Development Guide \u00b6 This compilation guide will teach you how to build RetroArch for macOS/OSX. The following versions of the operating system are supported: OSX 10.6 (Snow Leopard) OSX 10.7 (Tiger) OSX 10.8 (Mountain Lion) OSX 10.9 (Mavericks) OSX 10.10 (Yosemite) OSX 10.11 (El Capitan) macOS 10.12 (Sierra) RetroArch can work on both 32bit and 64bit Intel processor-powered Macs. This video covers a quick demonstration of these subjects; Environment Configuration Building RetroArch Be sure to read instructions that are given on this page. Environment configuration \u00b6 The following software needs to be installed: XCode (Optional) NVIDIA Cg Toolkit Note You need to make sure you have the macOS 10.11 SDK or lower when compiling this software, or else the OpenGL driver might have several issues that currently cannot be fixed. RetroArch Compilation \u00b6 Fetching RetroArch \u00b6 Clone RetroArch's repository from GitHub 1 2 git clone https://github.com/libretro/RetroArch.git retroarch cd retroarch For subsequent builds you only need to pull the changes from the repo 1 2 cd retroarch git pull To update your local copy from the repository run git pull Building RetroArch separately \u00b6 Using the graphical interface \u00b6 Open Xcode. Open the following project file pkg/apple/RetroArch.xcodeproj in the Xcode IDE and build ( \u2318-B ) and run ( \u2318-R ) it there. Or you can use the command line.... Using the command line \u00b6 To build a debug build : 1 2 3 4 # Build xcodebuild -target RetroArch -configuration Debug -project pkg/apple/RetroArch.xcodeproj # Run open ./pkg/apple/build/Debug/RetroArch.app/ To build a release build : 1 2 3 4 # Build xcodebuild -target RetroArch -configuration Release -project pkg/apple/RetroArch.xcodeproj # Run open ./pkg/apple/build/Release/RetroArch.app/ Packaging RetroArch \u00b6 Additional Tips: \u00b6 Core Compilation \u00b6 Fetching Cores \u00b6 The easiest way to fetch all the cores is to use libretro-super. To get libretro-super, run: 1 2 git clone https://github.com/libretro/libretro-super.git libretro-super cd libretro-super Now you can run the following command to download the source for all cores: 1 ./libretro-fetch.sh Building Cores \u00b6 The easiest way to build all the cores (for iOS) is to use libretro-super. To build all cores for OSX, run 1 ./libretro-build.sh In case you only want to build one and/or more cores instead of all, you can specify the cores you want to build after the first command in no particular order. E.g.: 1 ./libretro-build.sh snes9x2010 fceumm Once finished, you can find the libretro cores inside directory dist/osx . Video Tutorial \u00b6","title":"OSX/macOS"},{"location":"development/retroarch/compilation/osx/#macososx-compilation-development-guide","text":"This compilation guide will teach you how to build RetroArch for macOS/OSX. The following versions of the operating system are supported: OSX 10.6 (Snow Leopard) OSX 10.7 (Tiger) OSX 10.8 (Mountain Lion) OSX 10.9 (Mavericks) OSX 10.10 (Yosemite) OSX 10.11 (El Capitan) macOS 10.12 (Sierra) RetroArch can work on both 32bit and 64bit Intel processor-powered Macs. This video covers a quick demonstration of these subjects; Environment Configuration Building RetroArch Be sure to read instructions that are given on this page.","title":"macOS/OSX Compilation / Development Guide"},{"location":"development/retroarch/compilation/osx/#environment-configuration","text":"The following software needs to be installed: XCode (Optional) NVIDIA Cg Toolkit Note You need to make sure you have the macOS 10.11 SDK or lower when compiling this software, or else the OpenGL driver might have several issues that currently cannot be fixed.","title":"Environment configuration"},{"location":"development/retroarch/compilation/osx/#retroarch-compilation","text":"","title":"RetroArch Compilation"},{"location":"development/retroarch/compilation/osx/#fetching-retroarch","text":"Clone RetroArch's repository from GitHub 1 2 git clone https://github.com/libretro/RetroArch.git retroarch cd retroarch For subsequent builds you only need to pull the changes from the repo 1 2 cd retroarch git pull To update your local copy from the repository run git pull","title":"Fetching RetroArch"},{"location":"development/retroarch/compilation/osx/#building-retroarch-separately","text":"","title":"Building RetroArch separately"},{"location":"development/retroarch/compilation/osx/#using-the-graphical-interface","text":"Open Xcode. Open the following project file pkg/apple/RetroArch.xcodeproj in the Xcode IDE and build ( \u2318-B ) and run ( \u2318-R ) it there. Or you can use the command line....","title":"Using the graphical interface"},{"location":"development/retroarch/compilation/osx/#using-the-command-line","text":"To build a debug build : 1 2 3 4 # Build xcodebuild -target RetroArch -configuration Debug -project pkg/apple/RetroArch.xcodeproj # Run open ./pkg/apple/build/Debug/RetroArch.app/ To build a release build : 1 2 3 4 # Build xcodebuild -target RetroArch -configuration Release -project pkg/apple/RetroArch.xcodeproj # Run open ./pkg/apple/build/Release/RetroArch.app/","title":"Using the command line"},{"location":"development/retroarch/compilation/osx/#packaging-retroarch","text":"","title":"Packaging RetroArch"},{"location":"development/retroarch/compilation/osx/#additional-tips","text":"","title":"Additional Tips:"},{"location":"development/retroarch/compilation/osx/#core-compilation","text":"","title":"Core Compilation"},{"location":"development/retroarch/compilation/osx/#fetching-cores","text":"The easiest way to fetch all the cores is to use libretro-super. To get libretro-super, run: 1 2 git clone https://github.com/libretro/libretro-super.git libretro-super cd libretro-super Now you can run the following command to download the source for all cores: 1 ./libretro-fetch.sh","title":"Fetching Cores"},{"location":"development/retroarch/compilation/osx/#building-cores","text":"The easiest way to build all the cores (for iOS) is to use libretro-super. To build all cores for OSX, run 1 ./libretro-build.sh In case you only want to build one and/or more cores instead of all, you can specify the cores you want to build after the first command in no particular order. E.g.: 1 ./libretro-build.sh snes9x2010 fceumm Once finished, you can find the libretro cores inside directory dist/osx .","title":"Building Cores"},{"location":"development/retroarch/compilation/osx/#video-tutorial","text":"","title":"Video Tutorial"},{"location":"development/retroarch/compilation/osxppc/","text":"OSX PowerPC Compilation / Development Guide \u00b6 This compilation guide will teach you how to build RetroArch for OSX PowerPC. The following versions of the operating system are supported: OSX 10.5 (Leopard) RetroArch can work on both 32bit and 64bit PowerPC processor-powered Macs. Environment configuration \u00b6 The following software needs to be installed: XCode (Optional) NVIDIA Cg Toolkit RetroArch Compilation \u00b6 Fetching RetroArch \u00b6 Clone RetroArch's repository from GitHub 1 2 git clone https://github.com/libretro/RetroArch.git retroarch cd retroarch Note Versions of git available for OSX PowerPC might not come with the necessary SSL/TLS support that Github now requires. If you happen to find that you can not clone or pull from Github, perform the following command: git config --global http.sslVerify false. For subsequent builds you only need to pull the changes from the repo 1 2 cd retroarch git pull To update your local copy from the repository run git pull Building RetroArch separately \u00b6 Using the graphical interface \u00b6 Open Xcode. Open the following project file pkg/apple/RetroArch_PPC.xcodeproj in the Xcode IDE and build ( \u2318-B ) and run ( \u2318-R ) it there. Or you can use the command line.... Using the command line \u00b6 To build a debug build : 1 2 3 4 # Build xcodebuild -target RetroArch -configuration Debug -project pkg/apple/RetroArch_PPC.xcodeproj # Run open ./pkg/apple/build/Debug/RetroArch.app/ To build a release build : 1 2 3 4 # Build xcodebuild -target RetroArch -configuration Release -project pkg/apple/RetroArch_PPC.xcodeproj # Run open ./pkg/apple/build/Release/RetroArch.app/ Packaging RetroArch \u00b6 Additional Tips: \u00b6 Core Compilation \u00b6 Fetching Cores \u00b6 The easiest way to fetch all the cores is to use libretro-super. Run 1 ./libretro-fetch.sh Building Cores \u00b6 The easiest way to build all the cores (for OSX PowerPC) is to use libretro-super. To build all cores for OSX, run 1 ./libretro-build.sh In case you only want to build one and/or more cores instead of all, you can specify the cores you want to build after the first command in no particular order. E.g.: 1 ./libretro-build.sh snes9x2010 fceumm Once finished, you can find the libretro cores inside directory dist/osx .","title":"OSX/PowerPC"},{"location":"development/retroarch/compilation/osxppc/#osx-powerpc-compilation-development-guide","text":"This compilation guide will teach you how to build RetroArch for OSX PowerPC. The following versions of the operating system are supported: OSX 10.5 (Leopard) RetroArch can work on both 32bit and 64bit PowerPC processor-powered Macs.","title":"OSX PowerPC Compilation / Development Guide"},{"location":"development/retroarch/compilation/osxppc/#environment-configuration","text":"The following software needs to be installed: XCode (Optional) NVIDIA Cg Toolkit","title":"Environment configuration"},{"location":"development/retroarch/compilation/osxppc/#retroarch-compilation","text":"","title":"RetroArch Compilation"},{"location":"development/retroarch/compilation/osxppc/#fetching-retroarch","text":"Clone RetroArch's repository from GitHub 1 2 git clone https://github.com/libretro/RetroArch.git retroarch cd retroarch Note Versions of git available for OSX PowerPC might not come with the necessary SSL/TLS support that Github now requires. If you happen to find that you can not clone or pull from Github, perform the following command: git config --global http.sslVerify false. For subsequent builds you only need to pull the changes from the repo 1 2 cd retroarch git pull To update your local copy from the repository run git pull","title":"Fetching RetroArch"},{"location":"development/retroarch/compilation/osxppc/#building-retroarch-separately","text":"","title":"Building RetroArch separately"},{"location":"development/retroarch/compilation/osxppc/#using-the-graphical-interface","text":"Open Xcode. Open the following project file pkg/apple/RetroArch_PPC.xcodeproj in the Xcode IDE and build ( \u2318-B ) and run ( \u2318-R ) it there. Or you can use the command line....","title":"Using the graphical interface"},{"location":"development/retroarch/compilation/osxppc/#using-the-command-line","text":"To build a debug build : 1 2 3 4 # Build xcodebuild -target RetroArch -configuration Debug -project pkg/apple/RetroArch_PPC.xcodeproj # Run open ./pkg/apple/build/Debug/RetroArch.app/ To build a release build : 1 2 3 4 # Build xcodebuild -target RetroArch -configuration Release -project pkg/apple/RetroArch_PPC.xcodeproj # Run open ./pkg/apple/build/Release/RetroArch.app/","title":"Using the command line"},{"location":"development/retroarch/compilation/osxppc/#packaging-retroarch","text":"","title":"Packaging RetroArch"},{"location":"development/retroarch/compilation/osxppc/#additional-tips","text":"","title":"Additional Tips:"},{"location":"development/retroarch/compilation/osxppc/#core-compilation","text":"","title":"Core Compilation"},{"location":"development/retroarch/compilation/osxppc/#fetching-cores","text":"The easiest way to fetch all the cores is to use libretro-super. Run 1 ./libretro-fetch.sh","title":"Fetching Cores"},{"location":"development/retroarch/compilation/osxppc/#building-cores","text":"The easiest way to build all the cores (for OSX PowerPC) is to use libretro-super. To build all cores for OSX, run 1 ./libretro-build.sh In case you only want to build one and/or more cores instead of all, you can specify the cores you want to build after the first command in no particular order. E.g.: 1 ./libretro-build.sh snes9x2010 fceumm Once finished, you can find the libretro cores inside directory dist/osx .","title":"Building Cores"},{"location":"development/retroarch/compilation/ps2/","text":"PlayStation 2 Compilation / Development Guide \u00b6 Environment configuration \u00b6 You need the homebrew PlayStation 2 SDK and toolchain installed. You can follow how to install the toolchain over here ps2toolchain Additionally you need the PS2 Graphics Synthesizer installed. You can follow how to install the GSKit over here gsKit Finally you need to install specific ports for PlayStation 2. You can follow how to install the PlayStation 2 Ports over here ps2sdk-ports RetroArch Compilation \u00b6 Fetching RetroArch \u00b6 Clone RetroArch's repository from GitHub 1 2 git clone https://github.com/libretro/RetroArch.git retroarch cd retroarch For subsequent builds you only need to pull the changes from the repo 1 2 cd retroarch git pull To update your local copy from the repository run git pull Building RetroArch separately \u00b6 To compile RetroArch (for PlayStation 2) run: make -f Makefile.ps2 Note RetroArch on PlayStation PS2 is statically linked. With statically linked RetroArch, each executable is a separate libretro core instead of the core being separately loaded from a single executable. A pre-existing libretro library needs to be present in the root directory in order to link RetroArch PS2. This file needs to be called 'libretro_ps2.a'. After a few seconds/minutes you should be able to find a retroarch_ps2.elf file under that directory. Building RetroArch in bulk \u00b6 Instead of building each core one by one, you can build all cores as a batch task. Run from the main 'retroarch' directory: 1 cd dist-scripts Note Make sure that all the libretro cores that you want to compile are inside the 'dist-scripts' directory. Once inside this directory, run : This process will also automate the packaging process for you. Packaging RetroArch \u00b6 Additional Tips: \u00b6 Core Compilation \u00b6 Fetching Cores \u00b6 The easiest way to fetch all the cores is to use libretro-super. Run 1 ./libretro-fetch.sh Building Cores \u00b6 The easiest way to build all the cores (for PlayStation Portable) is to use libretro-super. Run In case you only want to build one and/or more cores instead of all, you can specify the cores you want to build after the first command in no particular order. E.g.: Once finished, you can find the libretro cores inside directory dist/ps2 .","title":"PlayStation2"},{"location":"development/retroarch/compilation/ps2/#playstation-2-compilation-development-guide","text":"","title":"PlayStation 2 Compilation / Development Guide"},{"location":"development/retroarch/compilation/ps2/#environment-configuration","text":"You need the homebrew PlayStation 2 SDK and toolchain installed. You can follow how to install the toolchain over here ps2toolchain Additionally you need the PS2 Graphics Synthesizer installed. You can follow how to install the GSKit over here gsKit Finally you need to install specific ports for PlayStation 2. You can follow how to install the PlayStation 2 Ports over here ps2sdk-ports","title":"Environment configuration"},{"location":"development/retroarch/compilation/ps2/#retroarch-compilation","text":"","title":"RetroArch Compilation"},{"location":"development/retroarch/compilation/ps2/#fetching-retroarch","text":"Clone RetroArch's repository from GitHub 1 2 git clone https://github.com/libretro/RetroArch.git retroarch cd retroarch For subsequent builds you only need to pull the changes from the repo 1 2 cd retroarch git pull To update your local copy from the repository run git pull","title":"Fetching RetroArch"},{"location":"development/retroarch/compilation/ps2/#building-retroarch-separately","text":"To compile RetroArch (for PlayStation 2) run: make -f Makefile.ps2 Note RetroArch on PlayStation PS2 is statically linked. With statically linked RetroArch, each executable is a separate libretro core instead of the core being separately loaded from a single executable. A pre-existing libretro library needs to be present in the root directory in order to link RetroArch PS2. This file needs to be called 'libretro_ps2.a'. After a few seconds/minutes you should be able to find a retroarch_ps2.elf file under that directory.","title":"Building RetroArch separately"},{"location":"development/retroarch/compilation/ps2/#building-retroarch-in-bulk","text":"Instead of building each core one by one, you can build all cores as a batch task. Run from the main 'retroarch' directory: 1 cd dist-scripts Note Make sure that all the libretro cores that you want to compile are inside the 'dist-scripts' directory. Once inside this directory, run : This process will also automate the packaging process for you.","title":"Building RetroArch in bulk"},{"location":"development/retroarch/compilation/ps2/#packaging-retroarch","text":"","title":"Packaging RetroArch"},{"location":"development/retroarch/compilation/ps2/#additional-tips","text":"","title":"Additional Tips:"},{"location":"development/retroarch/compilation/ps2/#core-compilation","text":"","title":"Core Compilation"},{"location":"development/retroarch/compilation/ps2/#fetching-cores","text":"The easiest way to fetch all the cores is to use libretro-super. Run 1 ./libretro-fetch.sh","title":"Fetching Cores"},{"location":"development/retroarch/compilation/ps2/#building-cores","text":"The easiest way to build all the cores (for PlayStation Portable) is to use libretro-super. Run In case you only want to build one and/or more cores instead of all, you can specify the cores you want to build after the first command in no particular order. E.g.: Once finished, you can find the libretro cores inside directory dist/ps2 .","title":"Building Cores"},{"location":"development/retroarch/compilation/psp/","text":"PlayStation PSP Compilation / Development Guide \u00b6 Environment configuration \u00b6 You need the homebrew PlayStation PSP SDK and toolchain installed. RetroArch Compilation \u00b6 Fetching RetroArch \u00b6 Clone RetroArch's repository from GitHub 1 2 git clone https://github.com/libretro/RetroArch.git retroarch cd retroarch For subsequent builds you only need to pull the changes from the repo 1 2 cd retroarch git pull To update your local copy from the repository run git pull Building RetroArch separately \u00b6 First, you need to compile Salamander . To compile Salamander (for PlayStation Portable) run: 1 make -f Makefile.psp1.salamander Second, to compile RetroArch (for PlayStation Portable) run: 1 make -f Makefile.psp1 Note RetroArch on PlayStation PSP is statically linked. With statically linked RetroArch, each executable is a separate libretro core instead of the core being separately loaded from a single executable. A pre-existing libretro library needs to be present in the root directory in order to link RetroArch Vita. This file needs to be called 'libretro_psp1.a'. After a few seconds/minutes you should be able to find a retroarch_psp1.elf and retroarch_psp1.self file under that directory. Building RetroArch in bulk \u00b6 Instead of building each core one by one, you can build all cores as a batch task. Run from the main 'retroarch' directory: 1 cd dist-scripts Note Make sure that all the libretro cores that you want to compile are inside the 'dist-scripts' directory. Once inside this directory, run : 1 ./dist-cores.sh psp1 This process will also automate the packaging process for you. Packaging RetroArch \u00b6 Additional Tips: \u00b6 Core Compilation \u00b6 Fetching Cores \u00b6 The easiest way to fetch all the cores is to use libretro-super. Run 1 ./libretro-fetch.sh Building Cores \u00b6 The easiest way to build all the cores (for PlayStation Portable) is to use libretro-super. Run 1 ./libretro-build-psp1.sh In case you only want to build one and/or more cores instead of all, you can specify the cores you want to build after the first command in no particular order. E.g.: 1 ./libretro-build-psp1.sh snes9x2010 fceumm Once finished, you can find the libretro cores inside directory dist/psp1 .","title":"PlayStation Portable"},{"location":"development/retroarch/compilation/psp/#playstation-psp-compilation-development-guide","text":"","title":"PlayStation PSP Compilation / Development Guide"},{"location":"development/retroarch/compilation/psp/#environment-configuration","text":"You need the homebrew PlayStation PSP SDK and toolchain installed.","title":"Environment configuration"},{"location":"development/retroarch/compilation/psp/#retroarch-compilation","text":"","title":"RetroArch Compilation"},{"location":"development/retroarch/compilation/psp/#fetching-retroarch","text":"Clone RetroArch's repository from GitHub 1 2 git clone https://github.com/libretro/RetroArch.git retroarch cd retroarch For subsequent builds you only need to pull the changes from the repo 1 2 cd retroarch git pull To update your local copy from the repository run git pull","title":"Fetching RetroArch"},{"location":"development/retroarch/compilation/psp/#building-retroarch-separately","text":"First, you need to compile Salamander . To compile Salamander (for PlayStation Portable) run: 1 make -f Makefile.psp1.salamander Second, to compile RetroArch (for PlayStation Portable) run: 1 make -f Makefile.psp1 Note RetroArch on PlayStation PSP is statically linked. With statically linked RetroArch, each executable is a separate libretro core instead of the core being separately loaded from a single executable. A pre-existing libretro library needs to be present in the root directory in order to link RetroArch Vita. This file needs to be called 'libretro_psp1.a'. After a few seconds/minutes you should be able to find a retroarch_psp1.elf and retroarch_psp1.self file under that directory.","title":"Building RetroArch separately"},{"location":"development/retroarch/compilation/psp/#building-retroarch-in-bulk","text":"Instead of building each core one by one, you can build all cores as a batch task. Run from the main 'retroarch' directory: 1 cd dist-scripts Note Make sure that all the libretro cores that you want to compile are inside the 'dist-scripts' directory. Once inside this directory, run : 1 ./dist-cores.sh psp1 This process will also automate the packaging process for you.","title":"Building RetroArch in bulk"},{"location":"development/retroarch/compilation/psp/#packaging-retroarch","text":"","title":"Packaging RetroArch"},{"location":"development/retroarch/compilation/psp/#additional-tips","text":"","title":"Additional Tips:"},{"location":"development/retroarch/compilation/psp/#core-compilation","text":"","title":"Core Compilation"},{"location":"development/retroarch/compilation/psp/#fetching-cores","text":"The easiest way to fetch all the cores is to use libretro-super. Run 1 ./libretro-fetch.sh","title":"Fetching Cores"},{"location":"development/retroarch/compilation/psp/#building-cores","text":"The easiest way to build all the cores (for PlayStation Portable) is to use libretro-super. Run 1 ./libretro-build-psp1.sh In case you only want to build one and/or more cores instead of all, you can specify the cores you want to build after the first command in no particular order. E.g.: 1 ./libretro-build-psp1.sh snes9x2010 fceumm Once finished, you can find the libretro cores inside directory dist/psp1 .","title":"Building Cores"},{"location":"development/retroarch/compilation/psvita/","text":"PlayStation Vita/TV Compilation / Development Guide \u00b6 Environment configuration \u00b6 You need the homebrew PlayStation Vita SDK and toolchain installed. RetroArch Compilation \u00b6 Fetching RetroArch \u00b6 Clone RetroArch's repository from GitHub 1 2 git clone https://github.com/libretro/RetroArch.git retroarch cd retroarch For subsequent builds you only need to pull the changes from the repo 1 2 cd retroarch git pull To update your local copy from the repository run git pull Building RetroArch separately \u00b6 First, you need to compile Salamander . To compile Salamander (for PlayStation3) run: 1 make -f Makefile.vita.salamander Second, to compile RetroArch (for PlayStation3) run: 1 make -f Makefile.griffin platform=vita Note RetroArch on PlayStation Vita/TV is statically linked. With statically linked RetroArch, each executable is a separate libretro core instead of the core being separately loaded from a single executable. A pre-existing libretro library needs to be present in the root directory in order to link RetroArch Vita. This file needs to be called 'libretro_vita.a'. After a few seconds/minutes you should be able to find a retroarch_vita.elf and retroarch_vita.self file under that directory. Building RetroArch in bulk \u00b6 Instead of building each core one by one, you can build all cores as a batch task. Run from the main 'retroarch' directory: 1 cd dist-scripts Note Make sure that all the libretro cores that you want to compile are inside the 'dist-scripts' directory. Once inside this directory, run : 1 ./dist-cores.sh vita This process will also automate the packaging process for you. Packaging RetroArch \u00b6 Additional Tips: \u00b6 Core Compilation \u00b6 Fetching Cores \u00b6 The easiest way to fetch all the cores is to use libretro-super. Run 1 ./libretro-fetch.sh Building Cores \u00b6 The easiest way to build all the cores (for PlayStation3) is to use libretro-super. Run 1 ./libretro-build-vita.sh In case you only want to build one and/or more cores instead of all, you can specify the cores you want to build after the first command in no particular order. E.g.: 1 ./libretro-build-vita.sh snes9x2010 fceumm Once finished, you can find the libretro cores inside directory dist/vita .","title":"PlayStation Vita/TV"},{"location":"development/retroarch/compilation/psvita/#playstation-vitatv-compilation-development-guide","text":"","title":"PlayStation Vita/TV Compilation / Development Guide"},{"location":"development/retroarch/compilation/psvita/#environment-configuration","text":"You need the homebrew PlayStation Vita SDK and toolchain installed.","title":"Environment configuration"},{"location":"development/retroarch/compilation/psvita/#retroarch-compilation","text":"","title":"RetroArch Compilation"},{"location":"development/retroarch/compilation/psvita/#fetching-retroarch","text":"Clone RetroArch's repository from GitHub 1 2 git clone https://github.com/libretro/RetroArch.git retroarch cd retroarch For subsequent builds you only need to pull the changes from the repo 1 2 cd retroarch git pull To update your local copy from the repository run git pull","title":"Fetching RetroArch"},{"location":"development/retroarch/compilation/psvita/#building-retroarch-separately","text":"First, you need to compile Salamander . To compile Salamander (for PlayStation3) run: 1 make -f Makefile.vita.salamander Second, to compile RetroArch (for PlayStation3) run: 1 make -f Makefile.griffin platform=vita Note RetroArch on PlayStation Vita/TV is statically linked. With statically linked RetroArch, each executable is a separate libretro core instead of the core being separately loaded from a single executable. A pre-existing libretro library needs to be present in the root directory in order to link RetroArch Vita. This file needs to be called 'libretro_vita.a'. After a few seconds/minutes you should be able to find a retroarch_vita.elf and retroarch_vita.self file under that directory.","title":"Building RetroArch separately"},{"location":"development/retroarch/compilation/psvita/#building-retroarch-in-bulk","text":"Instead of building each core one by one, you can build all cores as a batch task. Run from the main 'retroarch' directory: 1 cd dist-scripts Note Make sure that all the libretro cores that you want to compile are inside the 'dist-scripts' directory. Once inside this directory, run : 1 ./dist-cores.sh vita This process will also automate the packaging process for you.","title":"Building RetroArch in bulk"},{"location":"development/retroarch/compilation/psvita/#packaging-retroarch","text":"","title":"Packaging RetroArch"},{"location":"development/retroarch/compilation/psvita/#additional-tips","text":"","title":"Additional Tips:"},{"location":"development/retroarch/compilation/psvita/#core-compilation","text":"","title":"Core Compilation"},{"location":"development/retroarch/compilation/psvita/#fetching-cores","text":"The easiest way to fetch all the cores is to use libretro-super. Run 1 ./libretro-fetch.sh","title":"Fetching Cores"},{"location":"development/retroarch/compilation/psvita/#building-cores","text":"The easiest way to build all the cores (for PlayStation3) is to use libretro-super. Run 1 ./libretro-build-vita.sh In case you only want to build one and/or more cores instead of all, you can specify the cores you want to build after the first command in no particular order. E.g.: 1 ./libretro-build-vita.sh snes9x2010 fceumm Once finished, you can find the libretro cores inside directory dist/vita .","title":"Building Cores"},{"location":"development/retroarch/compilation/switch-libnx/","text":"Nintendo Switch Compilation / Development Guide (libnx) \u00b6 Environment configuration \u00b6 You need the homebrew Nintendo Switch SDK libnx and DevkitA64 toolchain installed. You can find instructions on how to install it on the switchbrew wiki . Then, install all the required libraries: - use the devkitpro MSYS2 terminal on Windows - replace dkp-pacman by pacman on Linux and Mac OS dkp-pacman -Sy devkit-env devkitA64 libnx switch-tools switch-mesa switch-zlib switch-bzip2 switch-freetype switch-libpng RetroArch Compilation \u00b6 All commands must be issued in the devkitpro environment (MSYS2 on Windows). Fetching RetroArch \u00b6 Clone RetroArch's repository from GitHub git clone https://github.com/libretro/RetroArch.git retroarch cd retroarch For subsequent builds you only need to pull the changes from the repo cd retroarch git pull Fetching a core \u00b6 Each NRO of RetroArch has one and only one core, and each core is a standalone homebrew by itself. That means that building multiple cores means building RetroArch multiple times, once for each core. Clone the core you want to build from its git repository. Then, build it: make platform=libnx That will give you a file called <corename>_libretro_libnx.a , where <corename> is the name of the core you just built. Take it and copy it to the retroarch directory, and rename it to libretro_libnx.a . Building RetroArch \u00b6 Now that you have your core in the RetroArch directory, move here using cd and run this command: make -f Makefile.libnx That will output retroarch_switch.nro : this is your home built copy of RetroArch! You can then use nxlink to send the homebrew to your Switch over Wi-Fi.","title":"Nintendo Switch (libnx)"},{"location":"development/retroarch/compilation/switch-libnx/#nintendo-switch-compilation-development-guide-libnx","text":"","title":"Nintendo Switch Compilation / Development Guide (libnx)"},{"location":"development/retroarch/compilation/switch-libnx/#environment-configuration","text":"You need the homebrew Nintendo Switch SDK libnx and DevkitA64 toolchain installed. You can find instructions on how to install it on the switchbrew wiki . Then, install all the required libraries: - use the devkitpro MSYS2 terminal on Windows - replace dkp-pacman by pacman on Linux and Mac OS dkp-pacman -Sy devkit-env devkitA64 libnx switch-tools switch-mesa switch-zlib switch-bzip2 switch-freetype switch-libpng","title":"Environment configuration"},{"location":"development/retroarch/compilation/switch-libnx/#retroarch-compilation","text":"All commands must be issued in the devkitpro environment (MSYS2 on Windows).","title":"RetroArch Compilation"},{"location":"development/retroarch/compilation/switch-libnx/#fetching-retroarch","text":"Clone RetroArch's repository from GitHub git clone https://github.com/libretro/RetroArch.git retroarch cd retroarch For subsequent builds you only need to pull the changes from the repo cd retroarch git pull","title":"Fetching RetroArch"},{"location":"development/retroarch/compilation/switch-libnx/#fetching-a-core","text":"Each NRO of RetroArch has one and only one core, and each core is a standalone homebrew by itself. That means that building multiple cores means building RetroArch multiple times, once for each core. Clone the core you want to build from its git repository. Then, build it: make platform=libnx That will give you a file called <corename>_libretro_libnx.a , where <corename> is the name of the core you just built. Take it and copy it to the retroarch directory, and rename it to libretro_libnx.a .","title":"Fetching a core"},{"location":"development/retroarch/compilation/switch-libnx/#building-retroarch","text":"Now that you have your core in the RetroArch directory, move here using cd and run this command: make -f Makefile.libnx That will output retroarch_switch.nro : this is your home built copy of RetroArch! You can then use nxlink to send the homebrew to your Switch over Wi-Fi.","title":"Building RetroArch"},{"location":"development/retroarch/compilation/ubuntu/","text":"Ubuntu Compilation / Development Guide \u00b6 Environment configuration \u00b6 The easiest route to get into building RetroArch and libretro cores on Ubuntu linux is to use libretro's PPA. For stable releases you can add the PPA like this: 1 2 # add-apt-repository ppa:libretro/stable # apt-get update For development work we recommend the testing PPA instead: 1 2 # add-apt-repository ppa:libretro/testing # apt-get update You will need git and a few build tools at least to proceed which you can install by issuing the following command: 1 # apt-get install git build-essential RetroArch Compilation \u00b6 Building RetroArch \u00b6 The first step is to obtain RetroArch's source tree. 1 $ git clone https://github.com/libretro/RetroArch.git retroarch You can get RetroArch's dependenencies by running the following command: 1 # apt-get build-dep retroarch Note Depending on your configuration you may need to uncomment the deb-src repositories in /etc/apt/sources.list , /etc/apt/sources.list.d/libretro-ubuntu-testing-$version.list and then run apt-get update before running apt-get build-dep For subsequent builds you will need to pull the changes from the repo 1 2 $ cd retroarch $ git pull To compile RetroArch run the following commands inside RetroArch's source tree: 1 2 3 $ ./configure $ make clean $ make -j4 For development purposes you might want to run a debug build instead. In such case use the following commands: 1 2 3 $ ./configure $ make clean $ make DEBUG=1 GL_DEBUG=1 -j4 You can then start RetroArch by running: 1 $ ./retroarch Tip If you're building frequently you may want to add ccache to the mix to speed up the build process. Install ccache via apt and the prepend the ccache symlink directory to your build environment path as shown below. For further instructions check the documentation Install ccache : 1 # apt-get install ccache Configure paths: 1 $ export PATH=/usr/lib/ccache/bin/:$PATH Tip You can add that last line to your ~/.bashrc to avoid having to type that every time you start your working environment. Core Compilation \u00b6 Fetching Cores \u00b6 You can find the cores on libretro's GitHUB organization . We have an all-in-one tool to fetch and compile cores which you can use to streamline the process. You can obtain the tool by using these commands: 1 2 $ git clone https://github.com/libretro/libretro-super.git $ cd libretro-super Then you can fetch one or all the cores by using libretro-fetch.sh Fetch all cores: 1 $ ./libretro-fetch.sh Fetch one core: 1 $ ./libretro-fetch.sh *corename* Note Replace corename with the name of the core you want to fetch, for example gambatte Building Cores \u00b6 LibRetro Super \u00b6 The easiest way to build all the cores is to use libretro-build.sh from within libretro-super's source tree: 1 $ ./libretro-build.sh In case you only want to build one and/or more cores instead of all, you can specify the cores you want to build after the first command in no particular order: 1 $ ./libretro-build.sh snes9x2010 fceumm Once compilation has finished, you can find the libretro cores inside dist/unix . Manual Fetching and Compilation \u00b6 Get the core's source tree. As an example we'll use fceumm 1 $ git clone https://github.com/libretro/libretro-fceumm.git Then compile the core: 1 2 $ cd libretro-fceumm $ make -f Makefile.libretro Optionally strip the build product: 1 $ strip fceumm_libretro.so Most cores will build with these instructions. You might need to browse to a subdirectory in some cases.","title":"Ubuntu"},{"location":"development/retroarch/compilation/ubuntu/#ubuntu-compilation-development-guide","text":"","title":"Ubuntu Compilation / Development Guide"},{"location":"development/retroarch/compilation/ubuntu/#environment-configuration","text":"The easiest route to get into building RetroArch and libretro cores on Ubuntu linux is to use libretro's PPA. For stable releases you can add the PPA like this: 1 2 # add-apt-repository ppa:libretro/stable # apt-get update For development work we recommend the testing PPA instead: 1 2 # add-apt-repository ppa:libretro/testing # apt-get update You will need git and a few build tools at least to proceed which you can install by issuing the following command: 1 # apt-get install git build-essential","title":"Environment configuration"},{"location":"development/retroarch/compilation/ubuntu/#retroarch-compilation","text":"","title":"RetroArch Compilation"},{"location":"development/retroarch/compilation/ubuntu/#building-retroarch","text":"The first step is to obtain RetroArch's source tree. 1 $ git clone https://github.com/libretro/RetroArch.git retroarch You can get RetroArch's dependenencies by running the following command: 1 # apt-get build-dep retroarch Note Depending on your configuration you may need to uncomment the deb-src repositories in /etc/apt/sources.list , /etc/apt/sources.list.d/libretro-ubuntu-testing-$version.list and then run apt-get update before running apt-get build-dep For subsequent builds you will need to pull the changes from the repo 1 2 $ cd retroarch $ git pull To compile RetroArch run the following commands inside RetroArch's source tree: 1 2 3 $ ./configure $ make clean $ make -j4 For development purposes you might want to run a debug build instead. In such case use the following commands: 1 2 3 $ ./configure $ make clean $ make DEBUG=1 GL_DEBUG=1 -j4 You can then start RetroArch by running: 1 $ ./retroarch Tip If you're building frequently you may want to add ccache to the mix to speed up the build process. Install ccache via apt and the prepend the ccache symlink directory to your build environment path as shown below. For further instructions check the documentation Install ccache : 1 # apt-get install ccache Configure paths: 1 $ export PATH=/usr/lib/ccache/bin/:$PATH Tip You can add that last line to your ~/.bashrc to avoid having to type that every time you start your working environment.","title":"Building RetroArch"},{"location":"development/retroarch/compilation/ubuntu/#core-compilation","text":"","title":"Core Compilation"},{"location":"development/retroarch/compilation/ubuntu/#fetching-cores","text":"You can find the cores on libretro's GitHUB organization . We have an all-in-one tool to fetch and compile cores which you can use to streamline the process. You can obtain the tool by using these commands: 1 2 $ git clone https://github.com/libretro/libretro-super.git $ cd libretro-super Then you can fetch one or all the cores by using libretro-fetch.sh Fetch all cores: 1 $ ./libretro-fetch.sh Fetch one core: 1 $ ./libretro-fetch.sh *corename* Note Replace corename with the name of the core you want to fetch, for example gambatte","title":"Fetching Cores"},{"location":"development/retroarch/compilation/ubuntu/#building-cores","text":"","title":"Building Cores"},{"location":"development/retroarch/compilation/ubuntu/#libretro-super","text":"The easiest way to build all the cores is to use libretro-build.sh from within libretro-super's source tree: 1 $ ./libretro-build.sh In case you only want to build one and/or more cores instead of all, you can specify the cores you want to build after the first command in no particular order: 1 $ ./libretro-build.sh snes9x2010 fceumm Once compilation has finished, you can find the libretro cores inside dist/unix .","title":"LibRetro Super"},{"location":"development/retroarch/compilation/ubuntu/#manual-fetching-and-compilation","text":"Get the core's source tree. As an example we'll use fceumm 1 $ git clone https://github.com/libretro/libretro-fceumm.git Then compile the core: 1 2 $ cd libretro-fceumm $ make -f Makefile.libretro Optionally strip the build product: 1 $ strip fceumm_libretro.so Most cores will build with these instructions. You might need to browse to a subdirectory in some cases.","title":"Manual Fetching and Compilation"},{"location":"development/retroarch/compilation/wii/","text":"Nintendo Wii Compilation / Development Guide \u00b6 Environment configuration \u00b6 You need the homebrew Nintendo Wii SDK libogc and Devkitpro PPC toolchain installed. RetroArch Compilation \u00b6 Fetching RetroArch \u00b6 Clone RetroArch's repository from GitHub 1 2 git clone https://github.com/libretro/RetroArch.git retroarch cd retroarch For subsequent builds you only need to pull the changes from the repo 1 2 cd retroarch git pull To update your local copy from the repository run git pull Building RetroArch separately \u00b6 First, you need to compile Salamander . To compile Salamander (for Wii) run: 1 make -f Makefile.wii.salamander Rename the file retroarch-salamander_wii.dol as boot.dol. This file is the frontend launcher for the other cores (indeed files containing core and fronend). Second, to compile RetroArch for Wii (the core and the frontend), rename the compiled core as 'libretro_wii.a' (see bellow how to compile a core), put it in the RetroArch directory and run: 1 make -f Makefile.griffin platform=wii Note RetroArch on Wii is statically linked. With statically linked RetroArch, each executable is a separate libretro core instead of the core being separately loaded from a single executable. A pre-existing libretro library needs to be present in the root directory in order to link RetroArch Wii. This file needs to be called 'libretro_wii.a'. After a few seconds/minutes you should be able to find a retroarch_wii.elf and retroarch_wii.dol file under that directory. Building RetroArch in bulk \u00b6 Instead of building each core one by one, you can build all cores as a batch task. Run from the main 'retroarch' directory: 1 cd dist-scripts Note Make sure that all the libretro cores that you want to compile are inside the 'dist-scripts' directory. Once inside this directory, run : 1 ./dist-cores.sh wii This process will also automate the packaging process for you. Packaging RetroArch \u00b6 Additional Tips: \u00b6 Core Compilation \u00b6 Fetching Cores \u00b6 The easiest way to fetch all the cores is to use libretro-super. Download libretro-super from github and run 1 ./libretro-fetch.sh Building Cores \u00b6 The easiest way to build all the cores (for Wii) is to use libretro-super. If not already fetched, put the codes of the cores you want compile in the libretro-super directory and run 1 ./libretro-build-wii.sh In case you only want to build one and/or more cores instead of all, you can specify the cores you want to build after the first command in no particular order. E.g.: 1 ./libretro-build-wii.sh snes9x2010 fceumm Once finished, you can find the libretro cores inside directory dist/wii .","title":"Nintendo Wii"},{"location":"development/retroarch/compilation/wii/#nintendo-wii-compilation-development-guide","text":"","title":"Nintendo Wii Compilation / Development Guide"},{"location":"development/retroarch/compilation/wii/#environment-configuration","text":"You need the homebrew Nintendo Wii SDK libogc and Devkitpro PPC toolchain installed.","title":"Environment configuration"},{"location":"development/retroarch/compilation/wii/#retroarch-compilation","text":"","title":"RetroArch Compilation"},{"location":"development/retroarch/compilation/wii/#fetching-retroarch","text":"Clone RetroArch's repository from GitHub 1 2 git clone https://github.com/libretro/RetroArch.git retroarch cd retroarch For subsequent builds you only need to pull the changes from the repo 1 2 cd retroarch git pull To update your local copy from the repository run git pull","title":"Fetching RetroArch"},{"location":"development/retroarch/compilation/wii/#building-retroarch-separately","text":"First, you need to compile Salamander . To compile Salamander (for Wii) run: 1 make -f Makefile.wii.salamander Rename the file retroarch-salamander_wii.dol as boot.dol. This file is the frontend launcher for the other cores (indeed files containing core and fronend). Second, to compile RetroArch for Wii (the core and the frontend), rename the compiled core as 'libretro_wii.a' (see bellow how to compile a core), put it in the RetroArch directory and run: 1 make -f Makefile.griffin platform=wii Note RetroArch on Wii is statically linked. With statically linked RetroArch, each executable is a separate libretro core instead of the core being separately loaded from a single executable. A pre-existing libretro library needs to be present in the root directory in order to link RetroArch Wii. This file needs to be called 'libretro_wii.a'. After a few seconds/minutes you should be able to find a retroarch_wii.elf and retroarch_wii.dol file under that directory.","title":"Building RetroArch separately"},{"location":"development/retroarch/compilation/wii/#building-retroarch-in-bulk","text":"Instead of building each core one by one, you can build all cores as a batch task. Run from the main 'retroarch' directory: 1 cd dist-scripts Note Make sure that all the libretro cores that you want to compile are inside the 'dist-scripts' directory. Once inside this directory, run : 1 ./dist-cores.sh wii This process will also automate the packaging process for you.","title":"Building RetroArch in bulk"},{"location":"development/retroarch/compilation/wii/#packaging-retroarch","text":"","title":"Packaging RetroArch"},{"location":"development/retroarch/compilation/wii/#additional-tips","text":"","title":"Additional Tips:"},{"location":"development/retroarch/compilation/wii/#core-compilation","text":"","title":"Core Compilation"},{"location":"development/retroarch/compilation/wii/#fetching-cores","text":"The easiest way to fetch all the cores is to use libretro-super. Download libretro-super from github and run 1 ./libretro-fetch.sh","title":"Fetching Cores"},{"location":"development/retroarch/compilation/wii/#building-cores","text":"The easiest way to build all the cores (for Wii) is to use libretro-super. If not already fetched, put the codes of the cores you want compile in the libretro-super directory and run 1 ./libretro-build-wii.sh In case you only want to build one and/or more cores instead of all, you can specify the cores you want to build after the first command in no particular order. E.g.: 1 ./libretro-build-wii.sh snes9x2010 fceumm Once finished, you can find the libretro cores inside directory dist/wii .","title":"Building Cores"},{"location":"development/retroarch/compilation/wiiu/","text":"Nintendo Wii U Compilation / Development Guide \u00b6 Environment configuration \u00b6 You need the DevkitPPC(r29) toolchain installed and the DEVKITPRO and DEVKITPPC environment variables set to the respective folders. RetroArch Compilation \u00b6 Fetching RetroArch \u00b6 Clone RetroArch's repository from GitHub 1 2 git clone https://github.com/libretro/RetroArch.git retroarch cd retroarch For subsequent builds you only need to pull the changes from the repo 1 2 cd retroarch git pull To update your local copy from the repository run git pull Building RetroArch separately \u00b6 To compile RetroArch (for Wii U) run: 1 make -f Makefile.wiiu Note RetroArch on Wii U is statically linked. With statically linked RetroArch, each executable is a separate libretro core instead of the core being separately loaded from a single executable. A pre-existing libretro library needs to be present in the root directory in order to link RetroArch Wii U. This file needs to be called 'libretro_wiiu.a'. After a few seconds/minutes you should be able to find a retroarch_wiiu.elf and retroarch_wiiu.rpx file under that directory. Building RetroArch in bulk \u00b6 Instead of building each core one by one, you can build all cores as a batch task. Run from the main 'retroarch' directory: 1 cd dist-scripts Note Make sure that all the libretro cores that you want to compile are inside the 'dist-scripts' directory. you can also copy the info files and icons in the same directory to have them added to the package, and to generate the meta.xml files. Once inside this directory, run : 1 ./wiiu-cores.sh This process will also automate the packaging process for you. the output will be in pkg/wiiu . Packaging RetroArch \u00b6 Additional Tips: \u00b6 Core Compilation \u00b6 Fetching Cores \u00b6 The easiest way to fetch all the cores is to use libretro-super. Run 1 ./libretro-fetch.sh Building Cores \u00b6 The easiest way to build all the cores (for Wii U) is to use libretro-super. Run 1 ./libretro-build-wiiu.sh In case you only want to build one and/or more cores instead of all, you can specify the cores you want to build after the first command in no particular order. E.g.: 1 ./libretro-build-wiiu.sh snes9x2010 fceumm Once finished, you can find the libretro cores inside directory dist/wiiu .","title":"Nintendo Wii U"},{"location":"development/retroarch/compilation/wiiu/#nintendo-wii-u-compilation-development-guide","text":"","title":"Nintendo Wii U Compilation / Development Guide"},{"location":"development/retroarch/compilation/wiiu/#environment-configuration","text":"You need the DevkitPPC(r29) toolchain installed and the DEVKITPRO and DEVKITPPC environment variables set to the respective folders.","title":"Environment configuration"},{"location":"development/retroarch/compilation/wiiu/#retroarch-compilation","text":"","title":"RetroArch Compilation"},{"location":"development/retroarch/compilation/wiiu/#fetching-retroarch","text":"Clone RetroArch's repository from GitHub 1 2 git clone https://github.com/libretro/RetroArch.git retroarch cd retroarch For subsequent builds you only need to pull the changes from the repo 1 2 cd retroarch git pull To update your local copy from the repository run git pull","title":"Fetching RetroArch"},{"location":"development/retroarch/compilation/wiiu/#building-retroarch-separately","text":"To compile RetroArch (for Wii U) run: 1 make -f Makefile.wiiu Note RetroArch on Wii U is statically linked. With statically linked RetroArch, each executable is a separate libretro core instead of the core being separately loaded from a single executable. A pre-existing libretro library needs to be present in the root directory in order to link RetroArch Wii U. This file needs to be called 'libretro_wiiu.a'. After a few seconds/minutes you should be able to find a retroarch_wiiu.elf and retroarch_wiiu.rpx file under that directory.","title":"Building RetroArch separately"},{"location":"development/retroarch/compilation/wiiu/#building-retroarch-in-bulk","text":"Instead of building each core one by one, you can build all cores as a batch task. Run from the main 'retroarch' directory: 1 cd dist-scripts Note Make sure that all the libretro cores that you want to compile are inside the 'dist-scripts' directory. you can also copy the info files and icons in the same directory to have them added to the package, and to generate the meta.xml files. Once inside this directory, run : 1 ./wiiu-cores.sh This process will also automate the packaging process for you. the output will be in pkg/wiiu .","title":"Building RetroArch in bulk"},{"location":"development/retroarch/compilation/wiiu/#packaging-retroarch","text":"","title":"Packaging RetroArch"},{"location":"development/retroarch/compilation/wiiu/#additional-tips","text":"","title":"Additional Tips:"},{"location":"development/retroarch/compilation/wiiu/#core-compilation","text":"","title":"Core Compilation"},{"location":"development/retroarch/compilation/wiiu/#fetching-cores","text":"The easiest way to fetch all the cores is to use libretro-super. Run 1 ./libretro-fetch.sh","title":"Fetching Cores"},{"location":"development/retroarch/compilation/wiiu/#building-cores","text":"The easiest way to build all the cores (for Wii U) is to use libretro-super. Run 1 ./libretro-build-wiiu.sh In case you only want to build one and/or more cores instead of all, you can specify the cores you want to build after the first command in no particular order. E.g.: 1 ./libretro-build-wiiu.sh snes9x2010 fceumm Once finished, you can find the libretro cores inside directory dist/wiiu .","title":"Building Cores"},{"location":"development/retroarch/compilation/windows/","text":"Windows 7 and later compilation and development guide \u00b6 Warning The MinGW toolchain we use in this guide no longer supports targeting Windows Vista or earlier. Please refer to one of the MSVC guides for how to target older Windows versions with Visual Studio. This video covers quick demonstrations of these subjects; Environment Configuration Building RetroArch Packaging RetroArch Be sure to read instructions that are given in this page. Environment configuration \u00b6 We recommend MinGW-W64 from MSYS2. You can download MSYS2 installer from here . Follow the installation instructions and once finished start the MSYS2 shell. MSYS2 shell is a maintenance shell. We are going to use this shell to install the toolchain and other packages. First order of business is to update MSYS2. Start the MSYS2 Shell and run the following commands: pacman --noconfirm -Sy pacman --needed --noconfirm -S bash pacman pacman-mirrors msys2-runtime Close MSYS2 shell and start it again, and: pacman --noconfirm -Su Restart MSYS2 once again. In some cases you may find out that the shell starting scripts don't work. If so check the following Note. Warning If you are updating from a very old MSYS2 installation you may need to update your shortcuts to reflect changes in MSYS2's subsystem. If the shell no longer works properly you need to update your shortcuts with the following targets: MinGW-w64 Shell: MSYS2_ROOT\\msys2_shell.cmd -mingw64 MinGW-w32 Shell: MSYS2_ROOT\\msys2_shell.cmd -mingw32 MSYS2 Shell: MSYS2_ROOT\\msys2_shell.cmd -msys Now we can start installing the packages we actually need. For 32-bit builds: pacman -S --noconfirm --needed wget git make mingw-w64-i686-toolchain mingw-w64-i686-ntldd mingw-w64-i686-zlib mingw-w64-i686-pkg-config mingw-w64-i686-SDL2 mingw-w64-i686-libxml2 mingw-w64-i686-freetype mingw-w64-i686-python3 mingw-w64-i686-ffmpeg mingw-w64-i686-drmingw For 64-bit builds: pacman -S --noconfirm --needed wget git make mingw-w64-x86_64-toolchain mingw-w64-x86_64-ntldd mingw-w64-x86_64-zlib mingw-w64-x86_64-pkg-config mingw-w64-x86_64-SDL2 mingw-w64-x86_64-libxml2 mingw-w64-x86_64-freetype mingw-w64-x86_64-python3 mingw-w64-x86_64-ffmpeg mingw-w64-x86_64-drmingw You might want to install Qt too if you want to be able to use the desktop GUI. For 32-bit builds: pacman -S --noconfirm --needed mingw-w64-i686-qt5 mingw-w64-i686-openssl For 64-bit builds: pacman -S --noconfirm --needed mingw-w64-x86_64-qt5 mingw-w64-x86_64-openssl The NVIDIA CG toolkit package hasn't been updated for a while so you need to download that package manually and install with pacman. You can download the packages from sourceforge at the following locations: 32-bit / 64-bit . Alternatively you can use the following commands directly: For 32-bit builds: wget http://sourceforge.net/projects/msys2/files/REPOS/MINGW_GCC_4_9/i686/mingw-w64-i686-nvidia-cg-toolkit-3.1-2-any.pkg.tar.xz/download -O mingw-w64-i686-nvidia-cg-toolkit-3.1-2-any.pkg.tar.xz pacman -U mingw-w64-i686-nvidia-cg-toolkit-3.1-2-any.pkg.tar.xz For 64-bit builds: wget https://sourceforge.net/projects/mingw-w64-archlinux/files/x86_64/mingw-w64-nvidia-cg-toolkit-3.1-2-any_4.pkg.tar.xz/download -O mingw-w64-x86_64-nvidia-cg-toolkit-3.1-2-any.pkg.tar.xz pacman -U mingw-w64-x86_64-nvidia-cg-toolkit-3.1-2-any.pkg.tar.xz Once these packages are installed close MSYS2 shell and open MinGW-w32 shell or MinGW-w64 shell depending on the platform you want to build for. You'll need gcc and make: pacman -S make pacman -S gcc RetroArch Compilation \u00b6 Building RetroArch \u00b6 The first step is to obtain RetroArch's source tree. You can find the repository directly at GitHub Start the MINGW64 or the MINGW32 shell depending on what you want to compile and run the following commands: git clone https://github.com/libretro/RetroArch.git retroarch For subsequent builds you will need to pull the changes from the repo cd retroarch git pull To compile RetroArch run the following commands inside RetroArch's source tree: ./configure make clean make -j4 For development purposes you might want to run a debug build instead. In such case use the following commands: ./configure make clean make DEBUG = 1 GL_DEBUG = 1 -j4 To facilitate debugging you can get an integrated crash handler by replacing the configure step with (debug builds only): 1 ./configure --enable-drmingw After a few minutes you should be able to find retroarch.exe under that directory. To start the newly compiled retroarch you can use: ./retroarch Packaging RetroArch \u00b6 You might not be able to start your own build outside that environment. You might want to try to get all the required DLLs by running the following script in your destination RetroArch folder (not the git repo folder): for i in $( seq 3 ) ; do for bin in $( ntldd -R *exe | grep -i mingw | cut -d \">\" -f2 | cut -d \" \" -f2 ) ; do cp -vu \" $bin \" . ; done ; done If Qt is enabled for your build (detected automatically by default), the following is also needed: windeployqt --release --no-patchqt --no-translations retroarch.exe for i in $( seq 3 ) ; do for bin in $( ntldd -R imageformats/*dll | grep -i mingw | cut -d \">\" -f2 | cut -d \" \" -f2 ) ; do cp -vu \" $bin \" . ; done ; done If you really want to get the required libraries for distribution or for personal use on other devices and LDD doesn't work for you for whatever reason, then you can try Dependency Walker . Tip If you're building frequently you may want to add ccache to the mix to speed up the build process. Install ccache via the package manager and the prepend the ccache symlink directory to your build environment path as shown below. For further instructions check the documentation Install ccache for 32-bit builds: pacman -S --noconfirm --needed make mingw-w64-i686-ccache Install ccache for 64-bit builds: pacman -S --noconfirm --needed mingw-w64-x86_64-ccache Configure paths for 32-bit builds: export PATH = /mingw32/lib/ccache/bin/: $PATH Configure paths for 64-bit builds: export PATH = /mingw64/lib/ccache/bin/: $PATH Tip You can add this to /etc/profile under both the 32-bit and 64-bit setups by adding ${MINGW_MOUNT_POINT}/lib/ccache/bin to the front of the PATH variables found in MINGW32) and MINGW64) , around line 50 of profile, to ensure the proper binaries are loaded for each development environment. From our own buildbot, the times with and without ccache are the following: Without ccache : 1 2 3 real 2m7.645s user 0m2.585s sys 0m11.527s With ccache : 1 2 3 real 0m25.466s user 0m2.902s sys 0m9.952s Tip You can also strip the debug symbols of the build product to save some space. Strip retroarch : strip -s retroarch.exe Core Compilation \u00b6 Fetching Cores \u00b6 You can find the cores on libretro's GitHUB organization . We have an all-in-one tool to fetch and compile cores which you can use to streamline the process. You can obtain the tool by using these commands: git clone https://github.com/libretro/libretro-super.git cd libretro-super Then you can fetch one or all the cores by using libretro-fetch.sh Fetch all cores: ./libretro-fetch.sh Fetch one core: ./libretro-fetch.sh *corename* Note Replace corename with the name of the core you want to fetch, for example gambatte Building Cores \u00b6 libretro-super \u00b6 The easiest way to build all the cores is to use libretro-build.sh from within libretro-super's source tree: ./libretro-build.sh In case you only want to build one and/or more cores instead of all, you can specify the cores you want to build after the first command in no particular order: ./libretro-build.sh snes9x2010 fceumm Once compilation has finished, you can find the libretro cores inside dist/win . Manual Fetching and Compilation \u00b6 Get the core's source tree. As an example we'll use fceumm git clone https://github.com/libretro/libretro-fceumm.git Then compile the core: cd libretro-fceumm make -f Makefile.libretro Optionally strip the build product: strip fceumm_libretro.dll Most cores will build with these instructions. You might need to browse to a subdirectory in some cases. Video Tutorial \u00b6","title":"Windows 7 and later (MSYS2)"},{"location":"development/retroarch/compilation/windows/#windows-7-and-later-compilation-and-development-guide","text":"Warning The MinGW toolchain we use in this guide no longer supports targeting Windows Vista or earlier. Please refer to one of the MSVC guides for how to target older Windows versions with Visual Studio. This video covers quick demonstrations of these subjects; Environment Configuration Building RetroArch Packaging RetroArch Be sure to read instructions that are given in this page.","title":"Windows 7 and later compilation and development guide"},{"location":"development/retroarch/compilation/windows/#environment-configuration","text":"We recommend MinGW-W64 from MSYS2. You can download MSYS2 installer from here . Follow the installation instructions and once finished start the MSYS2 shell. MSYS2 shell is a maintenance shell. We are going to use this shell to install the toolchain and other packages. First order of business is to update MSYS2. Start the MSYS2 Shell and run the following commands: pacman --noconfirm -Sy pacman --needed --noconfirm -S bash pacman pacman-mirrors msys2-runtime Close MSYS2 shell and start it again, and: pacman --noconfirm -Su Restart MSYS2 once again. In some cases you may find out that the shell starting scripts don't work. If so check the following Note. Warning If you are updating from a very old MSYS2 installation you may need to update your shortcuts to reflect changes in MSYS2's subsystem. If the shell no longer works properly you need to update your shortcuts with the following targets: MinGW-w64 Shell: MSYS2_ROOT\\msys2_shell.cmd -mingw64 MinGW-w32 Shell: MSYS2_ROOT\\msys2_shell.cmd -mingw32 MSYS2 Shell: MSYS2_ROOT\\msys2_shell.cmd -msys Now we can start installing the packages we actually need. For 32-bit builds: pacman -S --noconfirm --needed wget git make mingw-w64-i686-toolchain mingw-w64-i686-ntldd mingw-w64-i686-zlib mingw-w64-i686-pkg-config mingw-w64-i686-SDL2 mingw-w64-i686-libxml2 mingw-w64-i686-freetype mingw-w64-i686-python3 mingw-w64-i686-ffmpeg mingw-w64-i686-drmingw For 64-bit builds: pacman -S --noconfirm --needed wget git make mingw-w64-x86_64-toolchain mingw-w64-x86_64-ntldd mingw-w64-x86_64-zlib mingw-w64-x86_64-pkg-config mingw-w64-x86_64-SDL2 mingw-w64-x86_64-libxml2 mingw-w64-x86_64-freetype mingw-w64-x86_64-python3 mingw-w64-x86_64-ffmpeg mingw-w64-x86_64-drmingw You might want to install Qt too if you want to be able to use the desktop GUI. For 32-bit builds: pacman -S --noconfirm --needed mingw-w64-i686-qt5 mingw-w64-i686-openssl For 64-bit builds: pacman -S --noconfirm --needed mingw-w64-x86_64-qt5 mingw-w64-x86_64-openssl The NVIDIA CG toolkit package hasn't been updated for a while so you need to download that package manually and install with pacman. You can download the packages from sourceforge at the following locations: 32-bit / 64-bit . Alternatively you can use the following commands directly: For 32-bit builds: wget http://sourceforge.net/projects/msys2/files/REPOS/MINGW_GCC_4_9/i686/mingw-w64-i686-nvidia-cg-toolkit-3.1-2-any.pkg.tar.xz/download -O mingw-w64-i686-nvidia-cg-toolkit-3.1-2-any.pkg.tar.xz pacman -U mingw-w64-i686-nvidia-cg-toolkit-3.1-2-any.pkg.tar.xz For 64-bit builds: wget https://sourceforge.net/projects/mingw-w64-archlinux/files/x86_64/mingw-w64-nvidia-cg-toolkit-3.1-2-any_4.pkg.tar.xz/download -O mingw-w64-x86_64-nvidia-cg-toolkit-3.1-2-any.pkg.tar.xz pacman -U mingw-w64-x86_64-nvidia-cg-toolkit-3.1-2-any.pkg.tar.xz Once these packages are installed close MSYS2 shell and open MinGW-w32 shell or MinGW-w64 shell depending on the platform you want to build for. You'll need gcc and make: pacman -S make pacman -S gcc","title":"Environment configuration"},{"location":"development/retroarch/compilation/windows/#retroarch-compilation","text":"","title":"RetroArch Compilation"},{"location":"development/retroarch/compilation/windows/#building-retroarch","text":"The first step is to obtain RetroArch's source tree. You can find the repository directly at GitHub Start the MINGW64 or the MINGW32 shell depending on what you want to compile and run the following commands: git clone https://github.com/libretro/RetroArch.git retroarch For subsequent builds you will need to pull the changes from the repo cd retroarch git pull To compile RetroArch run the following commands inside RetroArch's source tree: ./configure make clean make -j4 For development purposes you might want to run a debug build instead. In such case use the following commands: ./configure make clean make DEBUG = 1 GL_DEBUG = 1 -j4 To facilitate debugging you can get an integrated crash handler by replacing the configure step with (debug builds only): 1 ./configure --enable-drmingw After a few minutes you should be able to find retroarch.exe under that directory. To start the newly compiled retroarch you can use: ./retroarch","title":"Building RetroArch"},{"location":"development/retroarch/compilation/windows/#packaging-retroarch","text":"You might not be able to start your own build outside that environment. You might want to try to get all the required DLLs by running the following script in your destination RetroArch folder (not the git repo folder): for i in $( seq 3 ) ; do for bin in $( ntldd -R *exe | grep -i mingw | cut -d \">\" -f2 | cut -d \" \" -f2 ) ; do cp -vu \" $bin \" . ; done ; done If Qt is enabled for your build (detected automatically by default), the following is also needed: windeployqt --release --no-patchqt --no-translations retroarch.exe for i in $( seq 3 ) ; do for bin in $( ntldd -R imageformats/*dll | grep -i mingw | cut -d \">\" -f2 | cut -d \" \" -f2 ) ; do cp -vu \" $bin \" . ; done ; done If you really want to get the required libraries for distribution or for personal use on other devices and LDD doesn't work for you for whatever reason, then you can try Dependency Walker . Tip If you're building frequently you may want to add ccache to the mix to speed up the build process. Install ccache via the package manager and the prepend the ccache symlink directory to your build environment path as shown below. For further instructions check the documentation Install ccache for 32-bit builds: pacman -S --noconfirm --needed make mingw-w64-i686-ccache Install ccache for 64-bit builds: pacman -S --noconfirm --needed mingw-w64-x86_64-ccache Configure paths for 32-bit builds: export PATH = /mingw32/lib/ccache/bin/: $PATH Configure paths for 64-bit builds: export PATH = /mingw64/lib/ccache/bin/: $PATH Tip You can add this to /etc/profile under both the 32-bit and 64-bit setups by adding ${MINGW_MOUNT_POINT}/lib/ccache/bin to the front of the PATH variables found in MINGW32) and MINGW64) , around line 50 of profile, to ensure the proper binaries are loaded for each development environment. From our own buildbot, the times with and without ccache are the following: Without ccache : 1 2 3 real 2m7.645s user 0m2.585s sys 0m11.527s With ccache : 1 2 3 real 0m25.466s user 0m2.902s sys 0m9.952s Tip You can also strip the debug symbols of the build product to save some space. Strip retroarch : strip -s retroarch.exe","title":"Packaging RetroArch"},{"location":"development/retroarch/compilation/windows/#core-compilation","text":"","title":"Core Compilation"},{"location":"development/retroarch/compilation/windows/#fetching-cores","text":"You can find the cores on libretro's GitHUB organization . We have an all-in-one tool to fetch and compile cores which you can use to streamline the process. You can obtain the tool by using these commands: git clone https://github.com/libretro/libretro-super.git cd libretro-super Then you can fetch one or all the cores by using libretro-fetch.sh Fetch all cores: ./libretro-fetch.sh Fetch one core: ./libretro-fetch.sh *corename* Note Replace corename with the name of the core you want to fetch, for example gambatte","title":"Fetching Cores"},{"location":"development/retroarch/compilation/windows/#building-cores","text":"","title":"Building Cores"},{"location":"development/retroarch/compilation/windows/#libretro-super","text":"The easiest way to build all the cores is to use libretro-build.sh from within libretro-super's source tree: ./libretro-build.sh In case you only want to build one and/or more cores instead of all, you can specify the cores you want to build after the first command in no particular order: ./libretro-build.sh snes9x2010 fceumm Once compilation has finished, you can find the libretro cores inside dist/win .","title":"libretro-super"},{"location":"development/retroarch/compilation/windows/#manual-fetching-and-compilation","text":"Get the core's source tree. As an example we'll use fceumm git clone https://github.com/libretro/libretro-fceumm.git Then compile the core: cd libretro-fceumm make -f Makefile.libretro Optionally strip the build product: strip fceumm_libretro.dll Most cores will build with these instructions. You might need to browse to a subdirectory in some cases.","title":"Manual Fetching and Compilation"},{"location":"development/retroarch/compilation/windows/#video-tutorial","text":"","title":"Video Tutorial"},{"location":"development/retroarch/compilation/windows2000-msvc-cmdline/","text":"Windows (2000 and later) Command-line Compilation / Development Guide \u00b6 Environment configuration \u00b6 To compile RetroArch on the command-line targeting Windows 2000 or later, we will use a combination of the MSYS2 shell and Microsoft Visual C++ 2008. This guide assumes the host OS is Windows Vista or later, as MSYS2 cannot be installed on anything older. Prerequisites: Visual C++ 2008 Express (or Pro) RetroArch Compilation \u00b6 Building RetroArch \u00b6 First you will need the MSYS2 distribution. You can download the MSYS2 installer from here . Follow the installation instructions and once finished start the MSYS2 shell. First we need to install the make package: 1 pacman -S make Then we need to obtain RetroArch's source tree. You can clone the repository directly from GitHub : 1 git clone https://github.com/libretro/RetroArch.git retroarch For subsequent builds you will need to pull the changes from the repo 1 2 cd retroarch git pull To compile RetroArch, run: 1 make -f Makefile.griffin platform=windows_msvc2008_x86 If you do not want to compile in DirectX support, you can add HAVE_DIRECTX=0 to the end of the command line. Currently it is necessary to disable DirectX support when targeting NT4. Finished \u00b6 After the build is finished you should be able to find retroarch.exe in the current directory. To start the newly compiled retroarch, copy the .exe file to a new folder where its configuration files and folders will be automatically created on first run. Running the .exe file inside of the source directory is not recommended as it will overwrite existing files.","title":"MSVC Commandline"},{"location":"development/retroarch/compilation/windows2000-msvc-cmdline/#windows-2000-and-later-command-line-compilation-development-guide","text":"","title":"Windows (2000 and later) Command-line Compilation / Development Guide"},{"location":"development/retroarch/compilation/windows2000-msvc-cmdline/#environment-configuration","text":"To compile RetroArch on the command-line targeting Windows 2000 or later, we will use a combination of the MSYS2 shell and Microsoft Visual C++ 2008. This guide assumes the host OS is Windows Vista or later, as MSYS2 cannot be installed on anything older. Prerequisites: Visual C++ 2008 Express (or Pro)","title":"Environment configuration"},{"location":"development/retroarch/compilation/windows2000-msvc-cmdline/#retroarch-compilation","text":"","title":"RetroArch Compilation"},{"location":"development/retroarch/compilation/windows2000-msvc-cmdline/#building-retroarch","text":"First you will need the MSYS2 distribution. You can download the MSYS2 installer from here . Follow the installation instructions and once finished start the MSYS2 shell. First we need to install the make package: 1 pacman -S make Then we need to obtain RetroArch's source tree. You can clone the repository directly from GitHub : 1 git clone https://github.com/libretro/RetroArch.git retroarch For subsequent builds you will need to pull the changes from the repo 1 2 cd retroarch git pull To compile RetroArch, run: 1 make -f Makefile.griffin platform=windows_msvc2008_x86 If you do not want to compile in DirectX support, you can add HAVE_DIRECTX=0 to the end of the command line. Currently it is necessary to disable DirectX support when targeting NT4.","title":"Building RetroArch"},{"location":"development/retroarch/compilation/windows2000-msvc-cmdline/#finished","text":"After the build is finished you should be able to find retroarch.exe in the current directory. To start the newly compiled retroarch, copy the .exe file to a new folder where its configuration files and folders will be automatically created on first run. Running the .exe file inside of the source directory is not recommended as it will overwrite existing files.","title":"Finished"},{"location":"development/retroarch/compilation/windows2000/","text":"Windows (2000 and later) Compilation / Development Guide \u00b6 Environment configuration \u00b6 To compile RetroArch targeting Windows 2000 or later, we will use Microsoft Visual C++ 2008. This is the last version of Visual C++ that can target 2000. Prerequisites: Visual C++ 2008 Express (or Pro) RetroArch Compilation \u00b6 Building RetroArch \u00b6 Note Setting up a working git shell is beyond the scope of this document. The first step is to obtain RetroArch's source tree. You can clone the repository directly from GitHub 1 git clone https://github.com/libretro/RetroArch.git retroarch For subsequent builds you will need to pull the changes from the repo 1 2 cd retroarch git pull To compile RetroArch, first open the solution file located at pkg/msvc/RetroArch-msvc2008.sln with Visual C++ 2008. Next we select the desired solution configuration: The choices are: 1 2 3 4 Debug Debug NoAccel Release Release NoAccel For development purposes you can use the Debug configurations, otherwise use Release. The \"NoAccel\" versions do not include Direct3D or OpenGL support (but keeps DirectInput and DirectSound support). Now press F7 to build the solution, or go to Build -> Build Solution. After the build is finished you should be able to find RetroArch-msvc2008.exe in the pkg/msvc/msvc-2008/<configuration> directory, where <configuration> is the one you chose earlier such as Debug or Release. To start the newly compiled retroarch you can press F5 in Visual C++ or simply navigate to the .exe file and run it there.","title":"MSVC IDE"},{"location":"development/retroarch/compilation/windows2000/#windows-2000-and-later-compilation-development-guide","text":"","title":"Windows (2000 and later) Compilation / Development Guide"},{"location":"development/retroarch/compilation/windows2000/#environment-configuration","text":"To compile RetroArch targeting Windows 2000 or later, we will use Microsoft Visual C++ 2008. This is the last version of Visual C++ that can target 2000. Prerequisites: Visual C++ 2008 Express (or Pro)","title":"Environment configuration"},{"location":"development/retroarch/compilation/windows2000/#retroarch-compilation","text":"","title":"RetroArch Compilation"},{"location":"development/retroarch/compilation/windows2000/#building-retroarch","text":"Note Setting up a working git shell is beyond the scope of this document. The first step is to obtain RetroArch's source tree. You can clone the repository directly from GitHub 1 git clone https://github.com/libretro/RetroArch.git retroarch For subsequent builds you will need to pull the changes from the repo 1 2 cd retroarch git pull To compile RetroArch, first open the solution file located at pkg/msvc/RetroArch-msvc2008.sln with Visual C++ 2008. Next we select the desired solution configuration: The choices are: 1 2 3 4 Debug Debug NoAccel Release Release NoAccel For development purposes you can use the Debug configurations, otherwise use Release. The \"NoAccel\" versions do not include Direct3D or OpenGL support (but keeps DirectInput and DirectSound support). Now press F7 to build the solution, or go to Build -> Build Solution. After the build is finished you should be able to find RetroArch-msvc2008.exe in the pkg/msvc/msvc-2008/<configuration> directory, where <configuration> is the one you chose earlier such as Debug or Release. To start the newly compiled retroarch you can press F5 in Visual C++ or simply navigate to the .exe file and run it there.","title":"Building RetroArch"},{"location":"development/retroarch/compilation/windows95-msvc-cmdline/","text":"Windows (95/98/NT4) Command-line Compilation / Development Guide \u00b6 Environment configuration \u00b6 To compile RetroArch on the command-line targeting Windows 95, Windows 98 or Windows NT4, we will use a combination of the MSYS2 shell and Microsoft Visual Studio .NET 2003. This guide assumes the host OS is Windows Vista or later, as MSYS2 cannot be installed on anything older. Prerequisites: Visual Studio .NET 2003 Windows Server 2003 SP1 Platform SDK Note Windows 95 does not support DirectX 9.0, and NT4 does not support DirectX higher than 3.0a. Note In lieu of having to install the full Visual Studio suite, a minimal toolchain can be created by copying the Common7 and Vc7 folders from an installation on another machine (usually located at C:\\Program Files (x86)\\Microsoft Visual Studio .NET 2003 ). For this example we will use a root folder of C:\\mini-msvc to hold everything, and those two folders from the MSVC installation will be copied into a directory under the root folder called msvc2003 . Note The same thing can be done with the Platform SDK, just copy the Include and Lib folders from an existing installation (usually located in C:\\Program Files (x86)\\Microsoft Platform SDK ) into a folder in the root such as plat2003sp1 . RetroArch Compilation \u00b6 Building RetroArch \u00b6 First you will need the MSYS2 distribution. You can download the MSYS2 installer from here . Follow the installation instructions and once finished start the MSYS2 shell. First we need to install the make package: 1 pacman -S make Then we need to obtain RetroArch's source tree. You can clone the repository directly from GitHub : 1 git clone https://github.com/libretro/RetroArch.git retroarch For subsequent builds you will need to pull the changes from the repo 1 2 cd retroarch git pull To compile RetroArch, run: 1 make -f Makefile.griffin platform=windows_msvc2003_x86 DirectX support is disabled by default since 95/NT do not support DirectX 9.0, but if you will only be running on higher versions of Windows, you can re-enable it by adding HAVE_DIRECTX=1 to the end of the command line. Minimal Toolchain \u00b6 If you are only using a minimal toolchain as described above, you can instead specify the location of the msvc2003 and plat2003sp1 folders like this: 1 make -f Makefile.griffin platform=windows_msvc2003_x86 VS71COMNTOOLS=\"c:\\\\mini-msvc\\\\msvc2003\\\\Common7\\\\Tools\\\\\" INETSDK=\"c:\\\\mini-msvc\\\\plat2003sp1\" Note The trailing slash at the end of the COMNTOOLS variable is mandatory. Also, any of the paths can optionally be left out to use the system version instead. Finished \u00b6 After the build is finished you should be able to find retroarch.exe in the current directory. To start the newly compiled retroarch, copy the .exe file to a new folder where its configuration files and folders will be automatically created on first run. Running the .exe file inside of the source directory is not recommended as it will overwrite existing files.","title":"MSVC Commandline"},{"location":"development/retroarch/compilation/windows95-msvc-cmdline/#windows-9598nt4-command-line-compilation-development-guide","text":"","title":"Windows (95/98/NT4) Command-line Compilation / Development Guide"},{"location":"development/retroarch/compilation/windows95-msvc-cmdline/#environment-configuration","text":"To compile RetroArch on the command-line targeting Windows 95, Windows 98 or Windows NT4, we will use a combination of the MSYS2 shell and Microsoft Visual Studio .NET 2003. This guide assumes the host OS is Windows Vista or later, as MSYS2 cannot be installed on anything older. Prerequisites: Visual Studio .NET 2003 Windows Server 2003 SP1 Platform SDK Note Windows 95 does not support DirectX 9.0, and NT4 does not support DirectX higher than 3.0a. Note In lieu of having to install the full Visual Studio suite, a minimal toolchain can be created by copying the Common7 and Vc7 folders from an installation on another machine (usually located at C:\\Program Files (x86)\\Microsoft Visual Studio .NET 2003 ). For this example we will use a root folder of C:\\mini-msvc to hold everything, and those two folders from the MSVC installation will be copied into a directory under the root folder called msvc2003 . Note The same thing can be done with the Platform SDK, just copy the Include and Lib folders from an existing installation (usually located in C:\\Program Files (x86)\\Microsoft Platform SDK ) into a folder in the root such as plat2003sp1 .","title":"Environment configuration"},{"location":"development/retroarch/compilation/windows95-msvc-cmdline/#retroarch-compilation","text":"","title":"RetroArch Compilation"},{"location":"development/retroarch/compilation/windows95-msvc-cmdline/#building-retroarch","text":"First you will need the MSYS2 distribution. You can download the MSYS2 installer from here . Follow the installation instructions and once finished start the MSYS2 shell. First we need to install the make package: 1 pacman -S make Then we need to obtain RetroArch's source tree. You can clone the repository directly from GitHub : 1 git clone https://github.com/libretro/RetroArch.git retroarch For subsequent builds you will need to pull the changes from the repo 1 2 cd retroarch git pull To compile RetroArch, run: 1 make -f Makefile.griffin platform=windows_msvc2003_x86 DirectX support is disabled by default since 95/NT do not support DirectX 9.0, but if you will only be running on higher versions of Windows, you can re-enable it by adding HAVE_DIRECTX=1 to the end of the command line.","title":"Building RetroArch"},{"location":"development/retroarch/compilation/windows95-msvc-cmdline/#minimal-toolchain","text":"If you are only using a minimal toolchain as described above, you can instead specify the location of the msvc2003 and plat2003sp1 folders like this: 1 make -f Makefile.griffin platform=windows_msvc2003_x86 VS71COMNTOOLS=\"c:\\\\mini-msvc\\\\msvc2003\\\\Common7\\\\Tools\\\\\" INETSDK=\"c:\\\\mini-msvc\\\\plat2003sp1\" Note The trailing slash at the end of the COMNTOOLS variable is mandatory. Also, any of the paths can optionally be left out to use the system version instead.","title":"Minimal Toolchain"},{"location":"development/retroarch/compilation/windows95-msvc-cmdline/#finished","text":"After the build is finished you should be able to find retroarch.exe in the current directory. To start the newly compiled retroarch, copy the .exe file to a new folder where its configuration files and folders will be automatically created on first run. Running the .exe file inside of the source directory is not recommended as it will overwrite existing files.","title":"Finished"},{"location":"development/retroarch/compilation/windows98-msvc-cmdline/","text":"Windows (98 SE/ME/2000) Command-line Compilation / Development Guide \u00b6 Environment configuration \u00b6 To compile RetroArch on the command-line targeting Windows NT4, Windows 98SE, Windows Millenium Edition or Windows 2000, we will use a combination of the MSYS2 shell and Microsoft Visual C++ 2005. This guide assumes the host OS is Windows Vista or later, as MSYS2 cannot be installed on anything older. Prerequisites: DirectX SDK February 2005 (any version up to December 2006 should work to target 98SE) Visual C++ 2005 Express (or Pro) Windows Server 2003 SP1 Platform SDK Note Windows 98 Second Edition is supported, but First Edition has not been tested. If you do try to target it, make sure that your DirectX SDK is no newer than July 2004. Note In lieu of having to install the full Visual Studio suite, a minimal toolchain can be created by copying the Common7 and VC folders from an installation on another machine (usually located at C:\\Program Files (x86)\\Microsoft Visual Studio 8 ). For this example we will use a root folder of C:\\mini-msvc to hold everything, and those two folders from the MSVC installation will be copied into a directory under the root folder called msvc2005 . Note The same thing can be done with the DirectX and Platform SDKs, just copy the Include and Lib folders from an existing installation (usually located at C:\\Program Files (x86) in Microsoft DirectX SDK (June 2010) and Microsoft Platform SDK respectively) into folders in the root such as dx9_june2010 and plat2003sp1 . RetroArch Compilation \u00b6 Building RetroArch \u00b6 First you will need the MSYS2 distribution. You can download the MSYS2 installer from here . Follow the installation instructions and once finished start the MSYS2 shell. First we need to install the make package: 1 pacman -S make Then we need to obtain RetroArch's source tree. You can clone the repository directly from GitHub : 1 git clone https://github.com/libretro/RetroArch.git retroarch For subsequent builds you will need to pull the changes from the repo 1 2 cd retroarch git pull To compile RetroArch, run: 1 make -f Makefile.griffin platform=windows_msvc2005_x86 If you do not want to compile in DirectX support, you can add HAVE_DIRECTX=0 to the end of the command line. Currently it is necessary to disable DirectX support when targeting NT4. Minimal Toolchain \u00b6 If you are only using a minimal toolchain as described above, you can instead specify the location of the folders msvc2005 , dx9_feb2005 and plat2003sp1 like this: 1 make -f Makefile.griffin platform=windows_msvc2005_x86 VS80COMNTOOLS=\"c:\\\\mini-msvc\\\\msvc2005\\\\Common7\\\\Tools\\\\\" INETSDK=\"c:\\\\mini-msvc\\\\plat2003sp1\" DXSDK_DIR=\"c:\\\\mini-msvc\\\\dx9_feb2005\" Note The trailing slash at the end of the COMNTOOLS variable is mandatory. Also, any of the paths can optionally be left out to use the system version instead. Finished \u00b6 After the build is finished you should be able to find retroarch.exe in the current directory. To start the newly compiled retroarch, copy the .exe file to a new folder where its configuration files and folders will be automatically created on first run. Running the .exe file inside of the source directory is not recommended as it will overwrite existing files.","title":"MSVC Commandline"},{"location":"development/retroarch/compilation/windows98-msvc-cmdline/#windows-98-seme2000-command-line-compilation-development-guide","text":"","title":"Windows (98 SE/ME/2000) Command-line Compilation / Development Guide"},{"location":"development/retroarch/compilation/windows98-msvc-cmdline/#environment-configuration","text":"To compile RetroArch on the command-line targeting Windows NT4, Windows 98SE, Windows Millenium Edition or Windows 2000, we will use a combination of the MSYS2 shell and Microsoft Visual C++ 2005. This guide assumes the host OS is Windows Vista or later, as MSYS2 cannot be installed on anything older. Prerequisites: DirectX SDK February 2005 (any version up to December 2006 should work to target 98SE) Visual C++ 2005 Express (or Pro) Windows Server 2003 SP1 Platform SDK Note Windows 98 Second Edition is supported, but First Edition has not been tested. If you do try to target it, make sure that your DirectX SDK is no newer than July 2004. Note In lieu of having to install the full Visual Studio suite, a minimal toolchain can be created by copying the Common7 and VC folders from an installation on another machine (usually located at C:\\Program Files (x86)\\Microsoft Visual Studio 8 ). For this example we will use a root folder of C:\\mini-msvc to hold everything, and those two folders from the MSVC installation will be copied into a directory under the root folder called msvc2005 . Note The same thing can be done with the DirectX and Platform SDKs, just copy the Include and Lib folders from an existing installation (usually located at C:\\Program Files (x86) in Microsoft DirectX SDK (June 2010) and Microsoft Platform SDK respectively) into folders in the root such as dx9_june2010 and plat2003sp1 .","title":"Environment configuration"},{"location":"development/retroarch/compilation/windows98-msvc-cmdline/#retroarch-compilation","text":"","title":"RetroArch Compilation"},{"location":"development/retroarch/compilation/windows98-msvc-cmdline/#building-retroarch","text":"First you will need the MSYS2 distribution. You can download the MSYS2 installer from here . Follow the installation instructions and once finished start the MSYS2 shell. First we need to install the make package: 1 pacman -S make Then we need to obtain RetroArch's source tree. You can clone the repository directly from GitHub : 1 git clone https://github.com/libretro/RetroArch.git retroarch For subsequent builds you will need to pull the changes from the repo 1 2 cd retroarch git pull To compile RetroArch, run: 1 make -f Makefile.griffin platform=windows_msvc2005_x86 If you do not want to compile in DirectX support, you can add HAVE_DIRECTX=0 to the end of the command line. Currently it is necessary to disable DirectX support when targeting NT4.","title":"Building RetroArch"},{"location":"development/retroarch/compilation/windows98-msvc-cmdline/#minimal-toolchain","text":"If you are only using a minimal toolchain as described above, you can instead specify the location of the folders msvc2005 , dx9_feb2005 and plat2003sp1 like this: 1 make -f Makefile.griffin platform=windows_msvc2005_x86 VS80COMNTOOLS=\"c:\\\\mini-msvc\\\\msvc2005\\\\Common7\\\\Tools\\\\\" INETSDK=\"c:\\\\mini-msvc\\\\plat2003sp1\" DXSDK_DIR=\"c:\\\\mini-msvc\\\\dx9_feb2005\" Note The trailing slash at the end of the COMNTOOLS variable is mandatory. Also, any of the paths can optionally be left out to use the system version instead.","title":"Minimal Toolchain"},{"location":"development/retroarch/compilation/windows98-msvc-cmdline/#finished","text":"After the build is finished you should be able to find retroarch.exe in the current directory. To start the newly compiled retroarch, copy the .exe file to a new folder where its configuration files and folders will be automatically created on first run. Running the .exe file inside of the source directory is not recommended as it will overwrite existing files.","title":"Finished"},{"location":"development/retroarch/compilation/windows98/","text":"Windows (98/2000) Compilation / Development Guide \u00b6 Environment configuration \u00b6 To compile RetroArch targeting Windows 98 and 2000, we will use Microsoft Visual C++ 2005. This is the last version of Visual C++ that can target 98/2000. This guide assumes the host OS is Windows 2000 Professional. VC2005 does run on Windows XP and Vista but this has not been tested with RetroArch. Prerequisites: Windows 2000 Service Pack 4 Windows 2000 Update Rollup 1 Internet Explorer 6 Internet Explorer 6 Service Pack 1 (required by VC2005) DirectX SDK February 2005 (versions after this date will not install on Windows 2000) Windows Server 2003 SP1 Platform SDK Visual C++ 2005 Express (or Pro) Note Windows 98 Second Edition is supported, but First Edition has not been tested. If you do try to target it, make sure that your DirectX SDK is no newer than July 2004. RetroArch Compilation \u00b6 Building RetroArch \u00b6 Note Setting up a working git shell is beyond the scope of this document. msysgit 1.8.5.2 is known to work locally but is unable to communicate with any remote servers on Windows 2000, and the github website does not load in IE6 either. The first step is to obtain RetroArch's source tree. You can clone the repository directly from GitHub 1 git clone https://github.com/libretro/RetroArch.git retroarch For subsequent builds you will need to pull the changes from the repo 1 2 cd retroarch git pull To compile RetroArch, first open the solution file located at pkg/msvc/RetroArch-msvc2005.sln with Visual C++ 2005. Next we select the desired solution configuration: The choices are: 1 2 3 4 Debug Debug NoAccel Release Release NoAccel For development purposes you can use the Debug configurations, otherwise use Release. The \"NoAccel\" versions do not include Direct3D or OpenGL support (but keeps DirectInput and DirectSound support). Now press F7 to build the solution, or go to Build -> Build Solution. After the build is finished you should be able to find RetroArch-msvc2005.exe in the pkg/msvc/msvc-2005/<configuration> directory, where <configuration> is the one you chose earlier such as Debug or Release. To start the newly compiled retroarch you can press F5 in Visual C++ or simply navigate to the .exe file and run it there.","title":"MSVC IDE"},{"location":"development/retroarch/compilation/windows98/#windows-982000-compilation-development-guide","text":"","title":"Windows (98/2000) Compilation / Development Guide"},{"location":"development/retroarch/compilation/windows98/#environment-configuration","text":"To compile RetroArch targeting Windows 98 and 2000, we will use Microsoft Visual C++ 2005. This is the last version of Visual C++ that can target 98/2000. This guide assumes the host OS is Windows 2000 Professional. VC2005 does run on Windows XP and Vista but this has not been tested with RetroArch. Prerequisites: Windows 2000 Service Pack 4 Windows 2000 Update Rollup 1 Internet Explorer 6 Internet Explorer 6 Service Pack 1 (required by VC2005) DirectX SDK February 2005 (versions after this date will not install on Windows 2000) Windows Server 2003 SP1 Platform SDK Visual C++ 2005 Express (or Pro) Note Windows 98 Second Edition is supported, but First Edition has not been tested. If you do try to target it, make sure that your DirectX SDK is no newer than July 2004.","title":"Environment configuration"},{"location":"development/retroarch/compilation/windows98/#retroarch-compilation","text":"","title":"RetroArch Compilation"},{"location":"development/retroarch/compilation/windows98/#building-retroarch","text":"Note Setting up a working git shell is beyond the scope of this document. msysgit 1.8.5.2 is known to work locally but is unable to communicate with any remote servers on Windows 2000, and the github website does not load in IE6 either. The first step is to obtain RetroArch's source tree. You can clone the repository directly from GitHub 1 git clone https://github.com/libretro/RetroArch.git retroarch For subsequent builds you will need to pull the changes from the repo 1 2 cd retroarch git pull To compile RetroArch, first open the solution file located at pkg/msvc/RetroArch-msvc2005.sln with Visual C++ 2005. Next we select the desired solution configuration: The choices are: 1 2 3 4 Debug Debug NoAccel Release Release NoAccel For development purposes you can use the Debug configurations, otherwise use Release. The \"NoAccel\" versions do not include Direct3D or OpenGL support (but keeps DirectInput and DirectSound support). Now press F7 to build the solution, or go to Build -> Build Solution. After the build is finished you should be able to find RetroArch-msvc2005.exe in the pkg/msvc/msvc-2005/<configuration> directory, where <configuration> is the one you chose earlier such as Debug or Release. To start the newly compiled retroarch you can press F5 in Visual C++ or simply navigate to the .exe file and run it there.","title":"Building RetroArch"},{"location":"development/retroarch/compilation/windowsNT351-msvc-cmdline/","text":"Windows (NT3.51) Command-line Compilation / Development Guide \u00b6 Environment configuration \u00b6 To compile RetroArch on the command-line targeting Windows NT3.51, we will use a combination of the MSYS2 shell and Microsoft Visual C++ 6. This guide assumes the host OS is Windows Vista or later, as MSYS2 cannot be installed on anything older. Prerequisites: Visual C++ 6 Windows Server 2003 SP1 Platform SDK Note In lieu of having to install the full Visual Studio suite, a minimal toolchain can be created by copying the Common and VC98 folders from an installation on another machine (usually located at C:\\Program Files (x86)\\Microsoft Visual Studio ). For this example we will use a root folder of C:\\mini-msvc to hold everything, and those two folders from the MSVC installation will be copied into a directory under the root folder called msvc6 . Note The same thing can be done with the Platform SDK, just copy the Include and Lib folders from an existing installation (usually located in C:\\Program Files (x86)\\Microsoft Platform SDK ) into a folder in the root such as plat2003sp1 . RetroArch Compilation \u00b6 Building RetroArch \u00b6 First you will need the MSYS2 distribution. You can download the MSYS2 installer from here . Follow the installation instructions and once finished start the MSYS2 shell. First we need to install the make package: 1 pacman -S make Then we need to obtain RetroArch's source tree. You can clone the repository directly from GitHub : 1 git clone https://github.com/libretro/RetroArch.git retroarch For subsequent builds you will need to pull the changes from the repo 1 2 cd retroarch git pull To compile RetroArch, run: 1 make -f Makefile.griffin platform=windows_msvc6_x86 Minimal Toolchain \u00b6 If you are only using a minimal toolchain as described above, you can instead specify the location of the msvc6 and plat2003sp1 folders like this: 1 make -f Makefile.griffin platform=windows_msvc6_x86 VCDIR=\"c:\\\\mini-msvc\\\\msvc6\\\\VC98\" INETSDK=\"c:\\\\mini-msvc\\\\plat2003sp1\" Also, any of the paths can optionally be left out to use the system version instead. Finished \u00b6 After the build is finished you should be able to find retroarch.exe in the current directory. To start the newly compiled retroarch, copy the .exe file to a new folder where its configuration files and folders will be automatically created on first run. Running the .exe file inside of the source directory is not recommended as it will overwrite existing files.","title":"MSVC Commandline"},{"location":"development/retroarch/compilation/windowsNT351-msvc-cmdline/#windows-nt351-command-line-compilation-development-guide","text":"","title":"Windows (NT3.51) Command-line Compilation / Development Guide"},{"location":"development/retroarch/compilation/windowsNT351-msvc-cmdline/#environment-configuration","text":"To compile RetroArch on the command-line targeting Windows NT3.51, we will use a combination of the MSYS2 shell and Microsoft Visual C++ 6. This guide assumes the host OS is Windows Vista or later, as MSYS2 cannot be installed on anything older. Prerequisites: Visual C++ 6 Windows Server 2003 SP1 Platform SDK Note In lieu of having to install the full Visual Studio suite, a minimal toolchain can be created by copying the Common and VC98 folders from an installation on another machine (usually located at C:\\Program Files (x86)\\Microsoft Visual Studio ). For this example we will use a root folder of C:\\mini-msvc to hold everything, and those two folders from the MSVC installation will be copied into a directory under the root folder called msvc6 . Note The same thing can be done with the Platform SDK, just copy the Include and Lib folders from an existing installation (usually located in C:\\Program Files (x86)\\Microsoft Platform SDK ) into a folder in the root such as plat2003sp1 .","title":"Environment configuration"},{"location":"development/retroarch/compilation/windowsNT351-msvc-cmdline/#retroarch-compilation","text":"","title":"RetroArch Compilation"},{"location":"development/retroarch/compilation/windowsNT351-msvc-cmdline/#building-retroarch","text":"First you will need the MSYS2 distribution. You can download the MSYS2 installer from here . Follow the installation instructions and once finished start the MSYS2 shell. First we need to install the make package: 1 pacman -S make Then we need to obtain RetroArch's source tree. You can clone the repository directly from GitHub : 1 git clone https://github.com/libretro/RetroArch.git retroarch For subsequent builds you will need to pull the changes from the repo 1 2 cd retroarch git pull To compile RetroArch, run: 1 make -f Makefile.griffin platform=windows_msvc6_x86","title":"Building RetroArch"},{"location":"development/retroarch/compilation/windowsNT351-msvc-cmdline/#minimal-toolchain","text":"If you are only using a minimal toolchain as described above, you can instead specify the location of the msvc6 and plat2003sp1 folders like this: 1 make -f Makefile.griffin platform=windows_msvc6_x86 VCDIR=\"c:\\\\mini-msvc\\\\msvc6\\\\VC98\" INETSDK=\"c:\\\\mini-msvc\\\\plat2003sp1\" Also, any of the paths can optionally be left out to use the system version instead.","title":"Minimal Toolchain"},{"location":"development/retroarch/compilation/windowsNT351-msvc-cmdline/#finished","text":"After the build is finished you should be able to find retroarch.exe in the current directory. To start the newly compiled retroarch, copy the .exe file to a new folder where its configuration files and folders will be automatically created on first run. Running the .exe file inside of the source directory is not recommended as it will overwrite existing files.","title":"Finished"},{"location":"development/retroarch/compilation/windowsXP-msvc-cmdline/","text":"Windows (XP and later) Command-line Compilation / Development Guide \u00b6 Environment configuration \u00b6 To compile RetroArch on the command-line targeting Windows XP or later, we will use a combination of the MSYS2 shell and Microsoft Visual Studio 2010. This guide assumes the host OS is Windows Vista or later, as MSYS2 cannot be installed on anything older. Prerequisites: DirectX SDK June 2010 Visual Studio 2010 Express (or Pro) Note The Express version does not come with a 64-bit compiler. Visual Studio 2010 Service Pack 1 (needed for the multi-language support in RetroArch) Note In lieu of having to install the full Visual Studio suite, a minimal toolchain can be created by copying the Common7 and VC folders from an installation on another machine (usually located at C:\\Program Files (x86)\\Microsoft Visual Studio 10.0 ). For this example we will use a root folder of C:\\mini-msvc to hold everything, and those two folders from the MSVC installation will be copied into a directory under the root folder called msvc2010 . Note The same thing can be done with the DirectX SDK, just copy the Include and Lib folders from an existing installation (usually located at C:\\Program Files (x86)\\Microsoft DirectX SDK (June 2010) ) into a folder in the root such as dx9_june2010 . RetroArch Compilation \u00b6 Building RetroArch \u00b6 First you will need the MSYS2 distribution. You can download the MSYS2 installer from here . Follow the installation instructions and once finished start the MSYS2 shell. First we need to install the make package: 1 pacman -S make Then we need to obtain RetroArch's source tree. You can clone the repository directly from GitHub : 1 git clone https://github.com/libretro/RetroArch.git retroarch For subsequent builds you will need to pull the changes from the repo 1 2 cd retroarch git pull To compile RetroArch, run: 1 make -f Makefile.griffin platform=windows_msvc2010_x86 Replace x86 with x64 if you would like a 64-bit build instead of 32-bit. If you do not want to compile in DirectX support, you can add HAVE_DIRECTX=0 to the end of the command line. Minimal Toolchain \u00b6 If you are only using a minimal toolchain as described above, you can instead specify the location of the msvc2010 and dx9_june2010 folders like this: 1 make -f Makefile.griffin platform=windows_msvc2010_x86 VS100COMNTOOLS=\"c:\\\\mini-msvc\\\\msvc2010\\\\Common7\\\\Tools\\\\\" DXSDK_DIR=\"c:\\\\mini-msvc\\\\dx9_june2010\" Note The trailing slash at the end of the COMNTOOLS variable is mandatory. Also, any of the paths can optionally be left out to use the system version instead. Finished \u00b6 After the build is finished you should be able to find retroarch.exe in the current directory. To start the newly compiled retroarch, copy the .exe file to a new folder where its configuration files and folders will be automatically created on first run. Running the .exe file inside of the source directory is not recommended as it will overwrite existing files.","title":"MSVC Commandline"},{"location":"development/retroarch/compilation/windowsXP-msvc-cmdline/#windows-xp-and-later-command-line-compilation-development-guide","text":"","title":"Windows (XP and later) Command-line Compilation / Development Guide"},{"location":"development/retroarch/compilation/windowsXP-msvc-cmdline/#environment-configuration","text":"To compile RetroArch on the command-line targeting Windows XP or later, we will use a combination of the MSYS2 shell and Microsoft Visual Studio 2010. This guide assumes the host OS is Windows Vista or later, as MSYS2 cannot be installed on anything older. Prerequisites: DirectX SDK June 2010 Visual Studio 2010 Express (or Pro) Note The Express version does not come with a 64-bit compiler. Visual Studio 2010 Service Pack 1 (needed for the multi-language support in RetroArch) Note In lieu of having to install the full Visual Studio suite, a minimal toolchain can be created by copying the Common7 and VC folders from an installation on another machine (usually located at C:\\Program Files (x86)\\Microsoft Visual Studio 10.0 ). For this example we will use a root folder of C:\\mini-msvc to hold everything, and those two folders from the MSVC installation will be copied into a directory under the root folder called msvc2010 . Note The same thing can be done with the DirectX SDK, just copy the Include and Lib folders from an existing installation (usually located at C:\\Program Files (x86)\\Microsoft DirectX SDK (June 2010) ) into a folder in the root such as dx9_june2010 .","title":"Environment configuration"},{"location":"development/retroarch/compilation/windowsXP-msvc-cmdline/#retroarch-compilation","text":"","title":"RetroArch Compilation"},{"location":"development/retroarch/compilation/windowsXP-msvc-cmdline/#building-retroarch","text":"First you will need the MSYS2 distribution. You can download the MSYS2 installer from here . Follow the installation instructions and once finished start the MSYS2 shell. First we need to install the make package: 1 pacman -S make Then we need to obtain RetroArch's source tree. You can clone the repository directly from GitHub : 1 git clone https://github.com/libretro/RetroArch.git retroarch For subsequent builds you will need to pull the changes from the repo 1 2 cd retroarch git pull To compile RetroArch, run: 1 make -f Makefile.griffin platform=windows_msvc2010_x86 Replace x86 with x64 if you would like a 64-bit build instead of 32-bit. If you do not want to compile in DirectX support, you can add HAVE_DIRECTX=0 to the end of the command line.","title":"Building RetroArch"},{"location":"development/retroarch/compilation/windowsXP-msvc-cmdline/#minimal-toolchain","text":"If you are only using a minimal toolchain as described above, you can instead specify the location of the msvc2010 and dx9_june2010 folders like this: 1 make -f Makefile.griffin platform=windows_msvc2010_x86 VS100COMNTOOLS=\"c:\\\\mini-msvc\\\\msvc2010\\\\Common7\\\\Tools\\\\\" DXSDK_DIR=\"c:\\\\mini-msvc\\\\dx9_june2010\" Note The trailing slash at the end of the COMNTOOLS variable is mandatory. Also, any of the paths can optionally be left out to use the system version instead.","title":"Minimal Toolchain"},{"location":"development/retroarch/compilation/windowsXP-msvc-cmdline/#finished","text":"After the build is finished you should be able to find retroarch.exe in the current directory. To start the newly compiled retroarch, copy the .exe file to a new folder where its configuration files and folders will be automatically created on first run. Running the .exe file inside of the source directory is not recommended as it will overwrite existing files.","title":"Finished"},{"location":"development/retroarch/compilation/windowsXP/","text":"Windows (XP and later) Compilation / Development Guide \u00b6 Environment configuration \u00b6 To compile RetroArch targeting Windows XP or later, we will use Microsoft Visual Studio 2010. This guide assumes the host OS is Windows XP. Prerequisites: Windows XP Service Pack 3 (requires SP1 or SP2 installed first) DirectX SDK June 2010 Visual Studio 2010 Express (or Pro) Visual Studio 2010 Service Pack 1 (needed for the multi-language support in RetroArch) RetroArch Compilation \u00b6 Building RetroArch \u00b6 The first step is to obtain RetroArch's source tree. If you need a git shell to work in, msysgit 1.8.5.2 is known to work. You can clone the repository directly from GitHub : 1 git clone https://github.com/libretro/RetroArch.git retroarch For subsequent builds you will need to pull the changes from the repo 1 2 cd retroarch git pull To compile RetroArch, first open the solution file located at pkg/msvc/RetroArch-msvc2010.sln with Visual Studio 2010. Next we select the desired solution configuration: The choices are: 1 2 3 4 Debug Debug Cg Release Release Cg For development purposes you can use the Debug configurations, otherwise use Release. The \"Cg\" versions also include support for Cg shaders used with the OpenGL video driver. These will require a separate installation of the Nvidia Cg Toolkit . Now press F7 to build the solution, or go to Build -> Build Solution. After the build is finished you should be able to find RetroArch-msvc2005.exe in the pkg/msvc/<configuration> directory, where <configuration> is the one you chose earlier such as Debug or Release. To start the newly compiled retroarch you can press F5 in Visual C++ or simply navigate to the .exe file and run it there.","title":"MSVC IDE"},{"location":"development/retroarch/compilation/windowsXP/#windows-xp-and-later-compilation-development-guide","text":"","title":"Windows (XP and later) Compilation / Development Guide"},{"location":"development/retroarch/compilation/windowsXP/#environment-configuration","text":"To compile RetroArch targeting Windows XP or later, we will use Microsoft Visual Studio 2010. This guide assumes the host OS is Windows XP. Prerequisites: Windows XP Service Pack 3 (requires SP1 or SP2 installed first) DirectX SDK June 2010 Visual Studio 2010 Express (or Pro) Visual Studio 2010 Service Pack 1 (needed for the multi-language support in RetroArch)","title":"Environment configuration"},{"location":"development/retroarch/compilation/windowsXP/#retroarch-compilation","text":"","title":"RetroArch Compilation"},{"location":"development/retroarch/compilation/windowsXP/#building-retroarch","text":"The first step is to obtain RetroArch's source tree. If you need a git shell to work in, msysgit 1.8.5.2 is known to work. You can clone the repository directly from GitHub : 1 git clone https://github.com/libretro/RetroArch.git retroarch For subsequent builds you will need to pull the changes from the repo 1 2 cd retroarch git pull To compile RetroArch, first open the solution file located at pkg/msvc/RetroArch-msvc2010.sln with Visual Studio 2010. Next we select the desired solution configuration: The choices are: 1 2 3 4 Debug Debug Cg Release Release Cg For development purposes you can use the Debug configurations, otherwise use Release. The \"Cg\" versions also include support for Cg shaders used with the OpenGL video driver. These will require a separate installation of the Nvidia Cg Toolkit . Now press F7 to build the solution, or go to Build -> Build Solution. After the build is finished you should be able to find RetroArch-msvc2005.exe in the pkg/msvc/<configuration> directory, where <configuration> is the one you chose earlier such as Debug or Release. To start the newly compiled retroarch you can press F5 in Visual C++ or simply navigate to the .exe file and run it there.","title":"Building RetroArch"},{"location":"development/retroarch/input/overlay/","text":"Overlays \u00b6 RetroArch supports overlay images for use with hardware accelerated drivers. The purpose of this is to allow some kind of input interface that is mouse/touch oriented. The overlay images are displayed with transparency over the regular game image, and the user is able to trigger input by pressing on certain parts of the overlay. Since the overlay is a series of images, the user should be able to fully configure the look and functionality of this overlay. This allows skinners and themers to go wild. Libretro overlay repositories \u00b6 The Libretro Organization hosts a repositories on Github that contains a compilation of overlays made with the Overlay Specification. Interactive overlays are managed within: https://github.com/libretro/common-overlays Decorative border overlays are managed within: https://github.com/libretro/overlay-borders Configuration \u00b6 The overlay is described in a config file (.cfg). The config file uses the same config file syntax as RetroArch itself. The overlay system supports use of multiple overlays that can be switched out on the fly. Input is not only restricted to gamepad input, but can also work with any input that is bindable in RetroArch, e.g. save states, rewind, load state, etc. The config file describes: Which full-screen overlay images to use (.png, .tga, etc). The hitbox for each input event, i.e. \"size\" of the button. Which image should be shown over the input descriptors individually (optional). Where on the screen the entire overlay should be displayed. Overlay images \u00b6 First we configure how many overlays we use. Every overlay can have one overlay which fills the entire rectangle (overlay%u_rect), but is optional. The full-rect overlay is supported for compatibility with older format. It is less flexible than per-button overlays and is discouraged. 1 2 3 overlays = 2 overlay0_overlay = overlay_img0.png # Optional overlay1_overlay = overlay_img1.png # Optional The paths are relative to where the overlay config is loaded from. If the path is absolute, absolute paths will be used. On Unix-like systems ~/ is recognized as $HOME/. Screen placement \u00b6 By default, the overlay image will be stretched out to fill the whole game image. However, for some overlays, this is not practical. It is possible to set the placement using for example: 1 overlay0_rect = \"0.2,0.3,0.5,0.4\" We assume that the game screen has normalized coordinates in X and Y that span from [0, 0] in the top-left corner to [1, 1] in the lower-right corner. This will render the overlay to x = 0.2, y = 0.3 with size width = 0.5, height = 0.4. The default (stretch to full screen) could be described as such: 1 overlay0_rect = \"0.0,0.0,1.0,1.0\" Full-screen vs. full-viewport overlays \u00b6 By default, overlays will be stretched out to fill game viewport. However, in some cases the aspect ratio of the game causes there to remain large black borders around the game image. It is possible to stretch the overlay to full screen (instead of viewport) by specifying this option: 1 overlay0_full_screen = true Coordinate descriptors \u00b6 We must also describe where on the overlay image buttons can be found for each overlay. E.g.: 1 2 3 4 overlay0_descs = 3 # Three buttons for this overlay in total overlay0_desc0 = \"a,32,64,radial,10,20\" overlay0_desc1 = \"start,100,50,rect,80,10\" overlay0_desc2 = \"overlay_next,200,180,radial,40,40\" The format is: 1 \"button,position_x,position_y,hitbox_type,range_x,range_y\" button corresponds to the input event being generated. The names are the same as in the general input config, e.g. input_player1_start would translate to start here. overlay_next is a special bind designed to swap to the next overlay, or wrap around to the first one. Button nul means no input. For an up-to-date view of what buttons are called, check the input_config_key_map variable in: https://github.com/libretro/RetroArch/blob/master/input/input_keymaps.c . position_x and position_y are the x and y coordinates in pixels of the source image for the center of the button. It is possible to use normalized coordinates as well. This is necessary when a full-screen overlay is not used. overlay0_desc0_normalized = true will force normalized coordinates. overlay0_normalized = true sets all descriptors to true unless overridden specifically. hitbox_type describes which type of shape the button has. radial (circle, ellipsis) and rect (rectangular) shapes are supported. range_x and range_y describe the size of the button. The semantics differ slightly for radial and rect hitbox types. For radial shape, range_x and range_y describe the radius in x and y directions in pixels of the source image. For rect shape, the range_x and range_y values represent the distance from center to the edge of the rect in terms of pixels of the source image. E.g. a range_x of 20 would mean the width of the rectangular is 40 pixels in total. A special type of button is analog_left and analog_right. These translate to analog sticks. These buttons must have hitbox type radial. It is possible to configure where saturation kicks in using overlay%u_desc%u_saturate_pct. E.g. a value of 0.75 means the 75% inner part contains the entire analog range. Outside the 75% it will be fully saturated. Using per-button overlays \u00b6 It is possible to use individual overlays per button. The given image will be displayed with same size as the hitbox in the input descriptor. 1 overlay0_desc0_overlay = button.png Let overlay buttons move around when pressed \u00b6 For especially overlay buttons which map to analogs, it is useful to allow an image to follow the movement of the finger. To enable an overlay to follow the finger movement within its bounding area use the movable attribute: 1 2 overlay0_desc0_overlay = analog.png # Need some per-descriptor overlay overlay0_desc0_movable = true # Overlay image will now move around Let buttons light up when they are pressed \u00b6 When using individial overlays per button it will make sense to have buttons light up when they are pressed. To do this, the alpha value per-button will be multiplied by a factor. 1 overlay0_desc0_alpha_mod = 2.0 # Alpha is multiplied 2x when pressed. To set a default across all descriptors for an overlay, you can do so: 1 overlay0_alpha_mod = 2.0 Let buttons have bigger hitbox when they are pressed \u00b6 When pressed, you can make the hitboxes larger while the button is pressed: 1 2 overlay0_desc0_range_mod = 1.5 # For the particular descriptor overlay0_range_mod = 1.5 # Default for all descriptors Triggering multiple buttons with one desc \u00b6 It's possible to trigger multiple buttons (e.g. diagonals) with one overlay desc. 1 overlay0_desc0 = \"left|up,32,64,radial,10,20\" will trigger both left and up at same time. Go to arbitrary overlay index \u00b6 To build some kind of menu system, one would need the ability for overlay_next to refer to any overlay. To do this, two extra things must be configured: 1 2 3 4 5 overlay2_overlay = \"some_overlay.png\" overlay2_name = \"overview_overlay\" # A name which can be referred to. Must be set if it is to be refered to. overlay0_desc0 = \"overlay_next,200,180,radial,40,40\" overlay0_desc0_next_target = \"overview_overlay\" # When this overlay_next is pressed, it will go to index 2 directly, instead of the default 1.","title":"Input Overlays"},{"location":"development/retroarch/input/overlay/#overlays","text":"RetroArch supports overlay images for use with hardware accelerated drivers. The purpose of this is to allow some kind of input interface that is mouse/touch oriented. The overlay images are displayed with transparency over the regular game image, and the user is able to trigger input by pressing on certain parts of the overlay. Since the overlay is a series of images, the user should be able to fully configure the look and functionality of this overlay. This allows skinners and themers to go wild.","title":"Overlays"},{"location":"development/retroarch/input/overlay/#libretro-overlay-repositories","text":"The Libretro Organization hosts a repositories on Github that contains a compilation of overlays made with the Overlay Specification. Interactive overlays are managed within: https://github.com/libretro/common-overlays Decorative border overlays are managed within: https://github.com/libretro/overlay-borders","title":"Libretro overlay repositories"},{"location":"development/retroarch/input/overlay/#configuration","text":"The overlay is described in a config file (.cfg). The config file uses the same config file syntax as RetroArch itself. The overlay system supports use of multiple overlays that can be switched out on the fly. Input is not only restricted to gamepad input, but can also work with any input that is bindable in RetroArch, e.g. save states, rewind, load state, etc. The config file describes: Which full-screen overlay images to use (.png, .tga, etc). The hitbox for each input event, i.e. \"size\" of the button. Which image should be shown over the input descriptors individually (optional). Where on the screen the entire overlay should be displayed.","title":"Configuration"},{"location":"development/retroarch/input/overlay/#overlay-images","text":"First we configure how many overlays we use. Every overlay can have one overlay which fills the entire rectangle (overlay%u_rect), but is optional. The full-rect overlay is supported for compatibility with older format. It is less flexible than per-button overlays and is discouraged. 1 2 3 overlays = 2 overlay0_overlay = overlay_img0.png # Optional overlay1_overlay = overlay_img1.png # Optional The paths are relative to where the overlay config is loaded from. If the path is absolute, absolute paths will be used. On Unix-like systems ~/ is recognized as $HOME/.","title":"Overlay images"},{"location":"development/retroarch/input/overlay/#screen-placement","text":"By default, the overlay image will be stretched out to fill the whole game image. However, for some overlays, this is not practical. It is possible to set the placement using for example: 1 overlay0_rect = \"0.2,0.3,0.5,0.4\" We assume that the game screen has normalized coordinates in X and Y that span from [0, 0] in the top-left corner to [1, 1] in the lower-right corner. This will render the overlay to x = 0.2, y = 0.3 with size width = 0.5, height = 0.4. The default (stretch to full screen) could be described as such: 1 overlay0_rect = \"0.0,0.0,1.0,1.0\"","title":"Screen placement"},{"location":"development/retroarch/input/overlay/#full-screen-vs-full-viewport-overlays","text":"By default, overlays will be stretched out to fill game viewport. However, in some cases the aspect ratio of the game causes there to remain large black borders around the game image. It is possible to stretch the overlay to full screen (instead of viewport) by specifying this option: 1 overlay0_full_screen = true","title":"Full-screen vs. full-viewport overlays"},{"location":"development/retroarch/input/overlay/#coordinate-descriptors","text":"We must also describe where on the overlay image buttons can be found for each overlay. E.g.: 1 2 3 4 overlay0_descs = 3 # Three buttons for this overlay in total overlay0_desc0 = \"a,32,64,radial,10,20\" overlay0_desc1 = \"start,100,50,rect,80,10\" overlay0_desc2 = \"overlay_next,200,180,radial,40,40\" The format is: 1 \"button,position_x,position_y,hitbox_type,range_x,range_y\" button corresponds to the input event being generated. The names are the same as in the general input config, e.g. input_player1_start would translate to start here. overlay_next is a special bind designed to swap to the next overlay, or wrap around to the first one. Button nul means no input. For an up-to-date view of what buttons are called, check the input_config_key_map variable in: https://github.com/libretro/RetroArch/blob/master/input/input_keymaps.c . position_x and position_y are the x and y coordinates in pixels of the source image for the center of the button. It is possible to use normalized coordinates as well. This is necessary when a full-screen overlay is not used. overlay0_desc0_normalized = true will force normalized coordinates. overlay0_normalized = true sets all descriptors to true unless overridden specifically. hitbox_type describes which type of shape the button has. radial (circle, ellipsis) and rect (rectangular) shapes are supported. range_x and range_y describe the size of the button. The semantics differ slightly for radial and rect hitbox types. For radial shape, range_x and range_y describe the radius in x and y directions in pixels of the source image. For rect shape, the range_x and range_y values represent the distance from center to the edge of the rect in terms of pixels of the source image. E.g. a range_x of 20 would mean the width of the rectangular is 40 pixels in total. A special type of button is analog_left and analog_right. These translate to analog sticks. These buttons must have hitbox type radial. It is possible to configure where saturation kicks in using overlay%u_desc%u_saturate_pct. E.g. a value of 0.75 means the 75% inner part contains the entire analog range. Outside the 75% it will be fully saturated.","title":"Coordinate descriptors"},{"location":"development/retroarch/input/overlay/#using-per-button-overlays","text":"It is possible to use individual overlays per button. The given image will be displayed with same size as the hitbox in the input descriptor. 1 overlay0_desc0_overlay = button.png","title":"Using per-button overlays"},{"location":"development/retroarch/input/overlay/#let-overlay-buttons-move-around-when-pressed","text":"For especially overlay buttons which map to analogs, it is useful to allow an image to follow the movement of the finger. To enable an overlay to follow the finger movement within its bounding area use the movable attribute: 1 2 overlay0_desc0_overlay = analog.png # Need some per-descriptor overlay overlay0_desc0_movable = true # Overlay image will now move around","title":"Let overlay buttons move around when pressed"},{"location":"development/retroarch/input/overlay/#let-buttons-light-up-when-they-are-pressed","text":"When using individial overlays per button it will make sense to have buttons light up when they are pressed. To do this, the alpha value per-button will be multiplied by a factor. 1 overlay0_desc0_alpha_mod = 2.0 # Alpha is multiplied 2x when pressed. To set a default across all descriptors for an overlay, you can do so: 1 overlay0_alpha_mod = 2.0","title":"Let buttons light up when they are pressed"},{"location":"development/retroarch/input/overlay/#let-buttons-have-bigger-hitbox-when-they-are-pressed","text":"When pressed, you can make the hitboxes larger while the button is pressed: 1 2 overlay0_desc0_range_mod = 1.5 # For the particular descriptor overlay0_range_mod = 1.5 # Default for all descriptors","title":"Let buttons have bigger hitbox when they are pressed"},{"location":"development/retroarch/input/overlay/#triggering-multiple-buttons-with-one-desc","text":"It's possible to trigger multiple buttons (e.g. diagonals) with one overlay desc. 1 overlay0_desc0 = \"left|up,32,64,radial,10,20\" will trigger both left and up at same time.","title":"Triggering multiple buttons with one desc"},{"location":"development/retroarch/input/overlay/#go-to-arbitrary-overlay-index","text":"To build some kind of menu system, one would need the ability for overlay_next to refer to any overlay. To do this, two extra things must be configured: 1 2 3 4 5 overlay2_overlay = \"some_overlay.png\" overlay2_name = \"overview_overlay\" # A name which can be referred to. Must be set if it is to be refered to. overlay0_desc0 = \"overlay_next,200,180,radial,40,40\" overlay0_desc0_next_target = \"overview_overlay\" # When this overlay_next is pressed, it will go to index 2 directly, instead of the default 1.","title":"Go to arbitrary overlay index"},{"location":"development/retroarch/input/parallel-port-joypads/","text":"Parallel port joypads \u00b6 Linux parport joypad driver \u00b6 RetroArch supports parallel port joypads on Linux via the \"parport\" joypad driver. It uses an extended version of the Linux Multisystem 2-button joystick protocol. Function Pin Register Bit Active Up 2 Data 0 Low Down 3 Data 1 Low Left 4 Data 2 Low Right 5 Data 3 Low A 6 Data 4 Low B 7 Data 5 Low Start 8 Data 6 Low Select 9 Data 7 Low Menu toggle 10 Status 6 Low X 11 Status 7 Low* Y 12 Status 5 Low L1 13 Status 4 Low R1 15 Status 3 Low (*) Pin is hardware inverted, but RetroArch inverts it back again so the same pullup scheme may be used for all pins. Pin 1 is set high so it can be used for pullups. RetroArch does not perform debouncing, and so long as the button settling time is less than the frame time no bouncing will be observed. This replicates the latching behavior common in old games consoles. For optimum latency and jitter a high performance debouncing routine should be implemented in the controller hardware. Parallel port hardware does not provide a way to detect non-connected pins. To avoid rendering the menu usable with spurious button presses, RetroArch checks each pin on startup and assumes any active pin is not connected. Avoid holding joypad buttons while starting RetroArch or those buttons will be disabled.","title":"Parallel Port Joypads"},{"location":"development/retroarch/input/parallel-port-joypads/#parallel-port-joypads","text":"","title":"Parallel port joypads"},{"location":"development/retroarch/input/parallel-port-joypads/#linux-parport-joypad-driver","text":"RetroArch supports parallel port joypads on Linux via the \"parport\" joypad driver. It uses an extended version of the Linux Multisystem 2-button joystick protocol. Function Pin Register Bit Active Up 2 Data 0 Low Down 3 Data 1 Low Left 4 Data 2 Low Right 5 Data 3 Low A 6 Data 4 Low B 7 Data 5 Low Start 8 Data 6 Low Select 9 Data 7 Low Menu toggle 10 Status 6 Low X 11 Status 7 Low* Y 12 Status 5 Low L1 13 Status 4 Low R1 15 Status 3 Low (*) Pin is hardware inverted, but RetroArch inverts it back again so the same pullup scheme may be used for all pins. Pin 1 is set high so it can be used for pullups. RetroArch does not perform debouncing, and so long as the button settling time is less than the frame time no bouncing will be observed. This replicates the latching behavior common in old games consoles. For optimum latency and jitter a high performance debouncing routine should be implemented in the controller hardware. Parallel port hardware does not provide a way to detect non-connected pins. To avoid rendering the menu usable with spurious button presses, RetroArch checks each pin on startup and assumes any active pin is not connected. Avoid holding joypad buttons while starting RetroArch or those buttons will be disabled.","title":"Linux parport joypad driver"},{"location":"development/shader/cg-shaders/","text":"Developing Legacy Cg Shaders \u00b6 Cg Shaders are deprecated Cg has been discontinued for years and is closed source. Developers cannot use Cg for newer APIs such as Vulkan, D3D12, and Metal. Cg cross-compilation to GLSL is unmaintainable. We cannot do the Cg transform in runtime on mobile due to lack of open source Cg runtime. New Slang Shader Specification \u00b6 Unless you are developing shaders for a platform that cannot support the newer Slang standard, please consider developing a Slang shader instead. Example Cg/HLSL program \u00b6 If you were to process an image on a CPU, you would most likely do something like this: for ( unsigned y = 0 ; y < height ; y ++ ) { for ( unsigned x = 0 ; x < width ; x ++ ) out_pixel [ y ][ x ] = process_pixel ( in_pixel [ y ][ x ], y , x ); } We quickly realize that this is highly serial and slow. We see that out_pixel[y][x] isn\u2019t dependent on out_pixel[y + k][x + k] , so we see that we can parallelize quite a bit. Essentially, we only need to implement process_pixel() as a single function, which is called thousands, even millions of time every frame. The only purpose in life for process_pixel() is to process an input, and produce an output. No state is needed, thus, a \u201cpure\u201d function in computer science terms. For the Cg program, we need to implement two different functions. main_vertex() takes care of transforming every incoming vertex from camera space down to clip space. This essentially means projection of 3D (coordinates on GPU) down to 2D (your screen). Since we\u2019re dealing with old school emulators here, which are already 2D, the vertex shading is very trivial. Vertex shaders get various coordinates as input, and uniforms. Every vertex emitted by the emulator is run through main_vertex which calculates the final output position. For our emulators this is just 4 times, since we\u2019re rendering a quad on the screen. 3D games would obviously have a lot more vertices. While coordinates differ for each invocation, uniforms are constant through-out every call. Think of it as a global variable that you\u2019re not allowed to change. Vertex shading can almost be ignored altogether, but since the vertex shader is run only 4 times, and the fragment shader is run millions of times per frame, it is a good idea to precalculate values in vertex shader that can later be used in fragment shader. There are some limitiations to this which will be mentioned later. main_fragment() takes care of calculating a pixel color for every single out-put pixel on the screen. If you\u2019re playing at 1080p, the fragment shader will have to be run 1920 * 1080 times! This is obviously straining on the GPU unless the shader is written efficiently. Obviously, main_fragment is where the real action happens. For many shaders we can stick with a \u201cdummy\u201d vertex shader which does some very simple stuff. The fragment shader receives a handle to a texture (the game frame itself), and the texture coordinate for the current pixel, and a bunch of uniforms. A fragment shader\u2019s final output is a color, simple as that. Processing ends here. Shader Hello World \u00b6 We\u2019ll start off with the basic vertex shader. No fancy things are being done. You\u2019ll see a similiar vertex shader in most of the Cg programs out there in the wild. void main_vertex ( float4 pos : POSITION , out float4 out_pos : POSITION , uniform float4x4 modelViewProj , float4 color : COLOR , out float4 out_color : COLOR , float2 tex : TEXCOORD , out float2 out_tex : TEXCOORD ) { out_pos = mul ( modelViewProj , pos ); out_color = color ; out_tex = tex ; } This looks vaguely familiar to C, and it is. Cg stands for \u201cC for graphics\u201d after all. We notice some things are happening, notable some new types. Cg types \u00b6 Float \u00b6 float4 is a vector type. It contains 4 elements. It could be colors, positions, whatever. It's used for vector processing which the GPUs are extremely efficient at. Semantics \u00b6 We see various semantics. The POSITION semantic means that the variable is tied to vertex coordinates. We see that we have an input POSITION , and an output (out) POSITION . We thus transform the input to the output with a matrix multiply with the current model-view projection. Since this matrix is the same for every vertex, it is a uniform. Remember that the variable names DO matter. modelViewProj has to be called exactly that, as the emulator will pass the MVP to this uniform. It is in the specification. Since we have semantics for the POSITION , etc, we can call them whatever we want, as the Cg environment figures out what the variables mean. The transformation happens here: out_pos = mul ( modelViewProj , pos ); The COLOR semantic isn\u2019t very interesting for us, but the example code in nVidias Cg documentation includes it, so we just follow along. TEXCOORD is the texture coordinate we get from the emulator, and generally we just pass it to the fragment shader directly. The coordinate will then be linearly interpolated across the fragments. More complex shaders can output (almost) as many variables they want, that will be linearily interpolated for free to the fragment shader. We also need a fragment shader to go along with the vertex shader, and here's a basic shader that only outputs the pixel as-is. This is pretty much the result you\u2019d get if you didn\u2019t run any shader (fixed-function) at all. float4 main_fragment ( uniform sampler2D s0 : TEXUNIT0 , float2 tex : TEXCOORD ) : COLOR { return tex2D ( s0 , tex ) ; } This is arguably simpler than the vertex shader. Important to notice are: sampler2D is a handle to a texture in Cg. The semantic here is TEXUNIT0 , which means that it refers to the texture in texture unit 0. This is also part of the specification. float2 tex : TEXCOORD is the interpolated coordinate we received from the vertex shader. tex2D(s0, tex); simply does texture lookup and returns a COLOR , which is emitted to the framebuffer. Practically every fragment does more than one texture lookup. For example, classic pixel shaders look at the neighbor pixels as well to determine the output. But where is the neighbor pixel? We\u2019ll revise the fragment shader and try to make a really blurry shader to demonstrate. We now need to pull up some uniforms. We need to know how to modify our tex coordinates so that it points to a neighbor pixel. struct input { float2 video_size ; float2 texture_size ; float2 output_size ; float frame_count ; }; float4 main_fragment ( uniform sampler2D s0 : TEXUNIT0 , uniform input IN , float2 tex : TEXCOORD ) : COLOR { float4 result = float4 ( 0. 0 ) ; float dx = 1.0 / IN . texture_size . x ; float dy = 1.0 / IN . texture_size . y ; // Grab some of the neighboring pixels and blend together for a very mushy blur. result += tex2D ( s0 , tex + float2 ( \u2212 dx , \u2212 dy )); result += tex2D ( s0 , tex + float2 ( dx , \u2212 dy )); result += tex2D ( s0 , tex + float2 ( 0.0 , 0.0 )); result += tex2D ( s0 , tex + float2 ( \u2212 dx , 0.0 )); return result / 4. 0 ; } Here we use IN.texture_size to determine the the size of the texture. Since GL maps the whole texture to the interval [0.0, 1.0] , 1.0 / IN.texture_size means we get the offset for a single pixel, simple enough. Almost every shader uses this. We can calculate these offsets in vertex shader to improve performance since the coordinates are linearily interpolated anyways, but that is for another time. Putting it together \u00b6 The final runnable product is a single .cg file with the main_vertex and main_fragment functions added together. Not very complicated. For the icing on the cake, you should add a license header. /* Stupid blur shader. * Author : Your friendly neighbor. * License : We don't have those things! */ struct input { float2 video_size ; float2 texture_size ; float2 output_size ; float frame_count ; }; void main_vertex ( float4 pos : POSITION , out float4 out_pos : POSITION , uniform float4x4 modelViewProj , float4 color : COLOR , out float4 out_color : COLOR , float2 tex : TEXCOORD , out float2 out_tex : TEXCOORD ) { out_pos = mul ( modelViewProj , pos ); out_color = color ; out_tex = tex ; } float4 main_fragment ( uniform sampler2D s0 : TEXUNIT0 , uniform input IN , float2 tex : TEXCOORD ) : COLOR { float4 result = float4 ( 0. 0 ) ; float dx = 1.0 / IN . texture_size . x ; float dy = 1.0 / IN . texture_size . y ; // Grab some of the neighboring pixels and blend // together f o r a very mushy blur. result += tex2D ( s0 , tex + float2 ( \u2212 dx , \u2212 dy )); result += tex2D ( s0 , tex + float2 ( dx , \u2212 dy )); result += tex2D ( s0 , tex + float2 ( 0.0 , 0.0 )); result += tex2D ( s0 , tex + float2 ( \u2212 dx , 0.0 )); return result / 4.0 ; } Result \u00b6 As you can see, it\u2019s not a practical shader, but it shows the blurring effect to the extreme. Shader file format \u00b6 # begins a comment; the rest of the line is ignored. Format is: key = value . There can be as many spaces as you like in between Values can be wrapped inside \" for multiword strings ( foo = \"hai u\" ) #include includes a config file Path is relative to where config file was loaded unless an absolute path is chosen Key/value pairs from an #include are read-only and cannot be modified Cg shader spec \u00b6 This spec is for the Cg shading language developed by nVidia. It wraps around OpenGL to make shaders written in Cg quite portable. Shaders written in Cg can also be used with Direct3D and PlayStation3. Cg shaders are also compatible with basic HLSL if some considerations are taken into account. They can even be automatically compiled into GLSL shaders, which makes Cg shaders a true \u201cwrite once, run everywhere\u201d shader format. We encourage new shaders targeting Libretro frontends to be written in this format. RetroArch supports both single-pass Cg shaders as well as multi-pass shaders and uses a custom Cg preset format ( .cgp ). Another example Cg shader \u00b6 void main_vertex ( float4 position : POSITION , out float4 oPosition : POSITION , uniform float4x4 modelViewProj , float2 tex : TEXCOORD , out float2 oTex : TEXCOORD ) { oPosition = mul ( modelViewProj , position ); oTex = tex ; } float4 main_fragment ( float2 tex : TEXCOORD , uniform sampler2D s0 : TEXUNIT0 ) : COLOR { return tex2D ( s0 , tex ); } Example Cg preset \u00b6 shaders = 2 shader0 = 4 xBR - v3 .9 . cg scale_type0 = source scale0 = 4.0 filter_linear0 = false shader1 = dummy . cg filter_linear1 = true Entry points: \u00b6 Vertex: main_vertex Fragment: main_fragment Texture unit \u00b6 All shaders work on texture unit 0 (the default). 2D textures must be used. Power-of-two sized textures are recommended for optimal visual quality. The shaders must deal with the actual picture data not filling out the entire texture. Incoming texture coordinates and uniforms provide this information. The texture coordinate origin is defined to be top-left oriented. A texture coordinate of (0, 0) will always refer to the top-left pixel of the visible frame. This is opposite of what most graphical APIs expect. The implementation must always ensure that this ordering is held for any texture that the shader has access to. Note Every texture bound for a shader must have black border mode set. Sampling a texel outside the given texture coordinates must always return a pixel with RGBA values (0, 0, 0, 0) . Uniforms \u00b6 Some parameters will need to be passed to all shaders, both vertex and fragment program. A generic entry point for fragment shader will look like: float4 main_fragment ( float2 tex : TEXCOORD0 , uniform input IN , uniform sampler2D s_p : TEXUNIT0 ) : COLOR {} The input is a struct: struct input { float2 video_size ; float2 texture_size ; float2 output_size ; float frame_count ; float frame_direction ; }; TEXCOORD0 : Texture coordinates for the current input frame will be passed in TEXCOORD0 . ( TEXCOORD is a valid alias for TEXCOORD0 ). COLOR0 : Although legal, no data of interest is passed here. You cannot assume anything about data in this stream. IN.video_size : The size of the actual video data in the texture, e.g for a SNES this will be generally (256, 224) for normal resolution frames. IN.texture_size : This is the size of the texture itself. Optimally power-of-two sized. IN.output_size : The size of the video output. This is the size of the viewport shown on screen. IN.frame_count : A counter of the frame number. This increases with 1 every frame. This value is really an integer, but needs to be float for CGs lack of integer uniforms. IN.frame_direction : A number telling which direction the frames are flowing. For regular playing, this value should be 1.0 . While the game is rewinding, this value should be -1.0 . modelViewProj : This uniform needs to be set in vertex shader. It is a uniform for the current MVP transform. Pre-filtering \u00b6 Most of these shaders are intended to be used with a non-filtered input. Nearest-neighbor filtering on the textures themselves are preferred. Some shaders, like scanline will most likely prefer bilinear texture filtering. Cg meta-shader format \u00b6 Rationale \u00b6 The .cg files themselves contain no metadata necessary to perform advanced filtering. They also cannot process an effect in multiple passes, which is necessary for some effects. The CgFX format does exist, but it would need current shaders to be rewritten to a HLSL-esque format. It also suffers a problem mentioned below. Rather than putting everything into one file (XML shader format), this format is config file based. This greatly helps testing shader combinations as there is no need to rearrange code in one big file. Another plus with this approach is that a large library of .cg files can be used to combine many shaders without needing to redundantly copy code over. It also helps testing as it is possible to unit-test every pass separately completely seamless. Format \u00b6 The meta-shader format is based around the idea of a config file with the format: key = value . Values with spaces need to be wrapped in quotes: key = \"value stuff\". No .ini sections or similar are allowed. Meta-shaders may include comments, prefixed by the \"#\" character, both on their own in an otherwise empty line or at the end of a key = value pair. The meta-format has four purposes: Combine several standalone .cg shaders into a multipass shader. Define scaling parameters for each pass. I.e., a HQ2x shader might want to output with a scale of exactly 2x. Control filtering of textures. Many shaders will want nearest-neighbor filtering, and some will want linear. Define external lookup textures. Shaders can access external textures found in .tga files. Parameters \u00b6 shaders (int) \u00b6 This param defines how many .cg shaders will be loaded. This value must be at least one. The path to these shaders will be found as a string in parameters shader0, shader1, ... shaderN, and so on. The path is relative to the directory the meta-shader was loaded from. filter_linearN (boolean) \u00b6 This parameter defines how the texture of the result of pass N will be filtered. N = 0 (pass 0) is the raw input frame, N = 1 is result of the first pass, etc. (A boolean value here might be true / false / 1 / 0 ). Should this value not be defined, the filtering option is implementation-defined. float_framebufferN (boolean) \u00b6 This parameters defines if shader N should render to a 32-bit floating point buffer. This only takes effect if shaderN is actually rendered to an FBO. This is useful for shaders which have to store FBO values outside [0, 1] range. frame_count_modN (int) \u00b6 This positive parameter defines which modulo to apply to IN.frame_count . IN.frame_count will take the value frame_count % frame_count_modN . scale_typeN (string) \u00b6 This can be set to one of these values: - source : Output size of shader pass N is relative to the input size as found in IN.video_size . Value is float . - viewport : Output size of shader pass N is relative to the size of the window viewport. Value is float . This value can change over time if the user resizes their window! - absolute : Output size is statically defined to a certain size. Useful for hi-res blenders or similiar. If no scale type is assumed, it is assumed that it is set to source with scaleN set to 1.0 . It is possible to set scale_type_xN and scale_type_yN to specialize the scaling type in either direction. scale_typeN however overrides both of these. Exceptions If no scale_type is set for the very last shader, it is assumed to output at the full resolution rather than assuming a scale of 1.0x , and bypasses any frame-buffer object rendering. If there is only one shader, it is also considered to be the very last shader. If any scale option is defined, it has to go through a frame-buffer object, and subsequently rendered to screen. The filtering option used when stretching is implementation defined. It is encouraged to not have any scaling parameters in last pass if you care about the filtering option here. In first pass, should no scaling factor be defined, the implementation is free to choose a fitting scale. This means, that for a single pass shader, it is allowed for the implementation to set a scale, render to FBO, and stretch. (Rule above). scaleN , scale_xN , scale_yN (float/int) \u00b6 These values control the scaling params from scale_typeN . The values may be either floating or int depending on the type. scaleN controls both scaling type in horizontal and vertical directions. If scaleN is defined, scale_xN and scale_yN have no effect. scale_xN and scale_yN controls scaling properties for the directions separately. Should only one of these be defined, the other direction will assume a source scale with value 1.0 , i.e. no change in resolution. Should scale_type_xN and scale_type_yN be set to different values, the use of scaleN is undefined (i.e. if X-type is absolute (takes int ), and Y-type is source (takes float ).) textures (multiple strings) \u00b6 The textures param defines one or more lookup textures IDs. Several IDs are delimited with ; such as textures = \"foo;bar\" . These IDs serves as the names for a Cg sampler uniform, such as uniform sampler2D foo; and uniform sampler2D bar; The path of the textures can be found in the IDs, i.e. foo = image0.tga and bar = image1.tga . The paths of these textures are relative to the directory the meta-shader was loaded from. It is also possible to control the filtering options of the lookup texture as a boolean option in ID_linear = true/false . For example foo_linear = false will force nearest neighbor filtering for texture foo . Note If ID_linear is not set, it is assumed to be linearily filtered. The textures will be loaded \"as-is\", and coordinates (0, 0) , (0, 1) , (1, 0) , (1, 1) will correspond to the corners of the texture. Since the texture coordinates of the texture in TEXUNIT0 might not be as convenient, the texture coordinates for all lookup textures will be found in TEXCOORD1 . Warning You cannot assume which texture unit the lookup textures will be bound to! The implementation only guarantees to be able to load plain top-left non-RLE .tga files. It may provide possibilities to load .png and other popular formats. Multipass \u00b6 It is sometimes feasible to process an effect in several steps. shaders = 2 shader0 = pass1 . cg shader1 = pass2 . cg scale_type0 = source scale0 = 2.0 filter_linear0 = true filter_linear1 = false During multi-pass rendering, some additional uniforms are available. With multi-pass rendering, it is possible to utilize the resulting output for every pass that came before it, including the unfiltered input. This allows for an additive approach to shading rather than serial style. The unfiltered input can be found in the ORIG struct: uniform sampler2D ORIG.texture : Texture handle. Must not be set to a predefined texture unit. uniform float2 ORIG.video_size : The video size of original frame. uniform float2 ORIG.texture_size : The texture size of original frame. in float2 ORIG.tex_coord : An attribute input holding the texturecoordinates of original frame. PASS%u : This struct holds the same data as the ORIG struct, although the result of passes {1, 2, 3 ...}, i.e. PASS1.texture holds the result of the first shader pass. If rendering pass N , passes {1, ..., N-2} are available. ( N-1 being input in the regular IN structure). PREV : This struct holds the same data as the ORIG struct, and corresponds to the raw input image from the previous frame. Useful for motion blur. PREV1..6 : Similar struct as PREV , but holds the data for passes further back in time. PREV1 is the frame before PREV , PREV2 the frame before that again, and so on. This allows up to 8-tap motion blur.","title":"Cg Shader Development (deprecated)"},{"location":"development/shader/cg-shaders/#developing-legacy-cg-shaders","text":"Cg Shaders are deprecated Cg has been discontinued for years and is closed source. Developers cannot use Cg for newer APIs such as Vulkan, D3D12, and Metal. Cg cross-compilation to GLSL is unmaintainable. We cannot do the Cg transform in runtime on mobile due to lack of open source Cg runtime.","title":"Developing Legacy Cg Shaders"},{"location":"development/shader/cg-shaders/#new-slang-shader-specification","text":"Unless you are developing shaders for a platform that cannot support the newer Slang standard, please consider developing a Slang shader instead.","title":"New Slang Shader Specification"},{"location":"development/shader/cg-shaders/#example-cghlsl-program","text":"If you were to process an image on a CPU, you would most likely do something like this: for ( unsigned y = 0 ; y < height ; y ++ ) { for ( unsigned x = 0 ; x < width ; x ++ ) out_pixel [ y ][ x ] = process_pixel ( in_pixel [ y ][ x ], y , x ); } We quickly realize that this is highly serial and slow. We see that out_pixel[y][x] isn\u2019t dependent on out_pixel[y + k][x + k] , so we see that we can parallelize quite a bit. Essentially, we only need to implement process_pixel() as a single function, which is called thousands, even millions of time every frame. The only purpose in life for process_pixel() is to process an input, and produce an output. No state is needed, thus, a \u201cpure\u201d function in computer science terms. For the Cg program, we need to implement two different functions. main_vertex() takes care of transforming every incoming vertex from camera space down to clip space. This essentially means projection of 3D (coordinates on GPU) down to 2D (your screen). Since we\u2019re dealing with old school emulators here, which are already 2D, the vertex shading is very trivial. Vertex shaders get various coordinates as input, and uniforms. Every vertex emitted by the emulator is run through main_vertex which calculates the final output position. For our emulators this is just 4 times, since we\u2019re rendering a quad on the screen. 3D games would obviously have a lot more vertices. While coordinates differ for each invocation, uniforms are constant through-out every call. Think of it as a global variable that you\u2019re not allowed to change. Vertex shading can almost be ignored altogether, but since the vertex shader is run only 4 times, and the fragment shader is run millions of times per frame, it is a good idea to precalculate values in vertex shader that can later be used in fragment shader. There are some limitiations to this which will be mentioned later. main_fragment() takes care of calculating a pixel color for every single out-put pixel on the screen. If you\u2019re playing at 1080p, the fragment shader will have to be run 1920 * 1080 times! This is obviously straining on the GPU unless the shader is written efficiently. Obviously, main_fragment is where the real action happens. For many shaders we can stick with a \u201cdummy\u201d vertex shader which does some very simple stuff. The fragment shader receives a handle to a texture (the game frame itself), and the texture coordinate for the current pixel, and a bunch of uniforms. A fragment shader\u2019s final output is a color, simple as that. Processing ends here.","title":"Example Cg/HLSL program"},{"location":"development/shader/cg-shaders/#shader-hello-world","text":"We\u2019ll start off with the basic vertex shader. No fancy things are being done. You\u2019ll see a similiar vertex shader in most of the Cg programs out there in the wild. void main_vertex ( float4 pos : POSITION , out float4 out_pos : POSITION , uniform float4x4 modelViewProj , float4 color : COLOR , out float4 out_color : COLOR , float2 tex : TEXCOORD , out float2 out_tex : TEXCOORD ) { out_pos = mul ( modelViewProj , pos ); out_color = color ; out_tex = tex ; } This looks vaguely familiar to C, and it is. Cg stands for \u201cC for graphics\u201d after all. We notice some things are happening, notable some new types.","title":"Shader Hello World"},{"location":"development/shader/cg-shaders/#cg-types","text":"","title":"Cg types"},{"location":"development/shader/cg-shaders/#float","text":"float4 is a vector type. It contains 4 elements. It could be colors, positions, whatever. It's used for vector processing which the GPUs are extremely efficient at.","title":"Float"},{"location":"development/shader/cg-shaders/#semantics","text":"We see various semantics. The POSITION semantic means that the variable is tied to vertex coordinates. We see that we have an input POSITION , and an output (out) POSITION . We thus transform the input to the output with a matrix multiply with the current model-view projection. Since this matrix is the same for every vertex, it is a uniform. Remember that the variable names DO matter. modelViewProj has to be called exactly that, as the emulator will pass the MVP to this uniform. It is in the specification. Since we have semantics for the POSITION , etc, we can call them whatever we want, as the Cg environment figures out what the variables mean. The transformation happens here: out_pos = mul ( modelViewProj , pos ); The COLOR semantic isn\u2019t very interesting for us, but the example code in nVidias Cg documentation includes it, so we just follow along. TEXCOORD is the texture coordinate we get from the emulator, and generally we just pass it to the fragment shader directly. The coordinate will then be linearly interpolated across the fragments. More complex shaders can output (almost) as many variables they want, that will be linearily interpolated for free to the fragment shader. We also need a fragment shader to go along with the vertex shader, and here's a basic shader that only outputs the pixel as-is. This is pretty much the result you\u2019d get if you didn\u2019t run any shader (fixed-function) at all. float4 main_fragment ( uniform sampler2D s0 : TEXUNIT0 , float2 tex : TEXCOORD ) : COLOR { return tex2D ( s0 , tex ) ; } This is arguably simpler than the vertex shader. Important to notice are: sampler2D is a handle to a texture in Cg. The semantic here is TEXUNIT0 , which means that it refers to the texture in texture unit 0. This is also part of the specification. float2 tex : TEXCOORD is the interpolated coordinate we received from the vertex shader. tex2D(s0, tex); simply does texture lookup and returns a COLOR , which is emitted to the framebuffer. Practically every fragment does more than one texture lookup. For example, classic pixel shaders look at the neighbor pixels as well to determine the output. But where is the neighbor pixel? We\u2019ll revise the fragment shader and try to make a really blurry shader to demonstrate. We now need to pull up some uniforms. We need to know how to modify our tex coordinates so that it points to a neighbor pixel. struct input { float2 video_size ; float2 texture_size ; float2 output_size ; float frame_count ; }; float4 main_fragment ( uniform sampler2D s0 : TEXUNIT0 , uniform input IN , float2 tex : TEXCOORD ) : COLOR { float4 result = float4 ( 0. 0 ) ; float dx = 1.0 / IN . texture_size . x ; float dy = 1.0 / IN . texture_size . y ; // Grab some of the neighboring pixels and blend together for a very mushy blur. result += tex2D ( s0 , tex + float2 ( \u2212 dx , \u2212 dy )); result += tex2D ( s0 , tex + float2 ( dx , \u2212 dy )); result += tex2D ( s0 , tex + float2 ( 0.0 , 0.0 )); result += tex2D ( s0 , tex + float2 ( \u2212 dx , 0.0 )); return result / 4. 0 ; } Here we use IN.texture_size to determine the the size of the texture. Since GL maps the whole texture to the interval [0.0, 1.0] , 1.0 / IN.texture_size means we get the offset for a single pixel, simple enough. Almost every shader uses this. We can calculate these offsets in vertex shader to improve performance since the coordinates are linearily interpolated anyways, but that is for another time.","title":"Semantics"},{"location":"development/shader/cg-shaders/#putting-it-together","text":"The final runnable product is a single .cg file with the main_vertex and main_fragment functions added together. Not very complicated. For the icing on the cake, you should add a license header. /* Stupid blur shader. * Author : Your friendly neighbor. * License : We don't have those things! */ struct input { float2 video_size ; float2 texture_size ; float2 output_size ; float frame_count ; }; void main_vertex ( float4 pos : POSITION , out float4 out_pos : POSITION , uniform float4x4 modelViewProj , float4 color : COLOR , out float4 out_color : COLOR , float2 tex : TEXCOORD , out float2 out_tex : TEXCOORD ) { out_pos = mul ( modelViewProj , pos ); out_color = color ; out_tex = tex ; } float4 main_fragment ( uniform sampler2D s0 : TEXUNIT0 , uniform input IN , float2 tex : TEXCOORD ) : COLOR { float4 result = float4 ( 0. 0 ) ; float dx = 1.0 / IN . texture_size . x ; float dy = 1.0 / IN . texture_size . y ; // Grab some of the neighboring pixels and blend // together f o r a very mushy blur. result += tex2D ( s0 , tex + float2 ( \u2212 dx , \u2212 dy )); result += tex2D ( s0 , tex + float2 ( dx , \u2212 dy )); result += tex2D ( s0 , tex + float2 ( 0.0 , 0.0 )); result += tex2D ( s0 , tex + float2 ( \u2212 dx , 0.0 )); return result / 4.0 ; }","title":"Putting it together"},{"location":"development/shader/cg-shaders/#result","text":"As you can see, it\u2019s not a practical shader, but it shows the blurring effect to the extreme.","title":"Result"},{"location":"development/shader/cg-shaders/#shader-file-format","text":"# begins a comment; the rest of the line is ignored. Format is: key = value . There can be as many spaces as you like in between Values can be wrapped inside \" for multiword strings ( foo = \"hai u\" ) #include includes a config file Path is relative to where config file was loaded unless an absolute path is chosen Key/value pairs from an #include are read-only and cannot be modified","title":"Shader file format"},{"location":"development/shader/cg-shaders/#cg-shader-spec","text":"This spec is for the Cg shading language developed by nVidia. It wraps around OpenGL to make shaders written in Cg quite portable. Shaders written in Cg can also be used with Direct3D and PlayStation3. Cg shaders are also compatible with basic HLSL if some considerations are taken into account. They can even be automatically compiled into GLSL shaders, which makes Cg shaders a true \u201cwrite once, run everywhere\u201d shader format. We encourage new shaders targeting Libretro frontends to be written in this format. RetroArch supports both single-pass Cg shaders as well as multi-pass shaders and uses a custom Cg preset format ( .cgp ).","title":"Cg shader spec"},{"location":"development/shader/cg-shaders/#another-example-cg-shader","text":"void main_vertex ( float4 position : POSITION , out float4 oPosition : POSITION , uniform float4x4 modelViewProj , float2 tex : TEXCOORD , out float2 oTex : TEXCOORD ) { oPosition = mul ( modelViewProj , position ); oTex = tex ; } float4 main_fragment ( float2 tex : TEXCOORD , uniform sampler2D s0 : TEXUNIT0 ) : COLOR { return tex2D ( s0 , tex ); }","title":"Another example Cg shader"},{"location":"development/shader/cg-shaders/#example-cg-preset","text":"shaders = 2 shader0 = 4 xBR - v3 .9 . cg scale_type0 = source scale0 = 4.0 filter_linear0 = false shader1 = dummy . cg filter_linear1 = true","title":"Example Cg preset"},{"location":"development/shader/cg-shaders/#entry-points","text":"Vertex: main_vertex Fragment: main_fragment","title":"Entry points:"},{"location":"development/shader/cg-shaders/#texture-unit","text":"All shaders work on texture unit 0 (the default). 2D textures must be used. Power-of-two sized textures are recommended for optimal visual quality. The shaders must deal with the actual picture data not filling out the entire texture. Incoming texture coordinates and uniforms provide this information. The texture coordinate origin is defined to be top-left oriented. A texture coordinate of (0, 0) will always refer to the top-left pixel of the visible frame. This is opposite of what most graphical APIs expect. The implementation must always ensure that this ordering is held for any texture that the shader has access to. Note Every texture bound for a shader must have black border mode set. Sampling a texel outside the given texture coordinates must always return a pixel with RGBA values (0, 0, 0, 0) .","title":"Texture unit"},{"location":"development/shader/cg-shaders/#uniforms","text":"Some parameters will need to be passed to all shaders, both vertex and fragment program. A generic entry point for fragment shader will look like: float4 main_fragment ( float2 tex : TEXCOORD0 , uniform input IN , uniform sampler2D s_p : TEXUNIT0 ) : COLOR {} The input is a struct: struct input { float2 video_size ; float2 texture_size ; float2 output_size ; float frame_count ; float frame_direction ; }; TEXCOORD0 : Texture coordinates for the current input frame will be passed in TEXCOORD0 . ( TEXCOORD is a valid alias for TEXCOORD0 ). COLOR0 : Although legal, no data of interest is passed here. You cannot assume anything about data in this stream. IN.video_size : The size of the actual video data in the texture, e.g for a SNES this will be generally (256, 224) for normal resolution frames. IN.texture_size : This is the size of the texture itself. Optimally power-of-two sized. IN.output_size : The size of the video output. This is the size of the viewport shown on screen. IN.frame_count : A counter of the frame number. This increases with 1 every frame. This value is really an integer, but needs to be float for CGs lack of integer uniforms. IN.frame_direction : A number telling which direction the frames are flowing. For regular playing, this value should be 1.0 . While the game is rewinding, this value should be -1.0 . modelViewProj : This uniform needs to be set in vertex shader. It is a uniform for the current MVP transform.","title":"Uniforms"},{"location":"development/shader/cg-shaders/#pre-filtering","text":"Most of these shaders are intended to be used with a non-filtered input. Nearest-neighbor filtering on the textures themselves are preferred. Some shaders, like scanline will most likely prefer bilinear texture filtering.","title":"Pre-filtering"},{"location":"development/shader/cg-shaders/#cg-meta-shader-format","text":"","title":"Cg meta-shader format"},{"location":"development/shader/cg-shaders/#rationale","text":"The .cg files themselves contain no metadata necessary to perform advanced filtering. They also cannot process an effect in multiple passes, which is necessary for some effects. The CgFX format does exist, but it would need current shaders to be rewritten to a HLSL-esque format. It also suffers a problem mentioned below. Rather than putting everything into one file (XML shader format), this format is config file based. This greatly helps testing shader combinations as there is no need to rearrange code in one big file. Another plus with this approach is that a large library of .cg files can be used to combine many shaders without needing to redundantly copy code over. It also helps testing as it is possible to unit-test every pass separately completely seamless.","title":"Rationale"},{"location":"development/shader/cg-shaders/#format","text":"The meta-shader format is based around the idea of a config file with the format: key = value . Values with spaces need to be wrapped in quotes: key = \"value stuff\". No .ini sections or similar are allowed. Meta-shaders may include comments, prefixed by the \"#\" character, both on their own in an otherwise empty line or at the end of a key = value pair. The meta-format has four purposes: Combine several standalone .cg shaders into a multipass shader. Define scaling parameters for each pass. I.e., a HQ2x shader might want to output with a scale of exactly 2x. Control filtering of textures. Many shaders will want nearest-neighbor filtering, and some will want linear. Define external lookup textures. Shaders can access external textures found in .tga files.","title":"Format"},{"location":"development/shader/cg-shaders/#parameters","text":"","title":"Parameters"},{"location":"development/shader/cg-shaders/#shaders-int","text":"This param defines how many .cg shaders will be loaded. This value must be at least one. The path to these shaders will be found as a string in parameters shader0, shader1, ... shaderN, and so on. The path is relative to the directory the meta-shader was loaded from.","title":"shaders (int)"},{"location":"development/shader/cg-shaders/#filter_linearn-boolean","text":"This parameter defines how the texture of the result of pass N will be filtered. N = 0 (pass 0) is the raw input frame, N = 1 is result of the first pass, etc. (A boolean value here might be true / false / 1 / 0 ). Should this value not be defined, the filtering option is implementation-defined.","title":"filter_linearN (boolean)"},{"location":"development/shader/cg-shaders/#float_framebuffern-boolean","text":"This parameters defines if shader N should render to a 32-bit floating point buffer. This only takes effect if shaderN is actually rendered to an FBO. This is useful for shaders which have to store FBO values outside [0, 1] range.","title":"float_framebufferN (boolean)"},{"location":"development/shader/cg-shaders/#frame_count_modn-int","text":"This positive parameter defines which modulo to apply to IN.frame_count . IN.frame_count will take the value frame_count % frame_count_modN .","title":"frame_count_modN (int)"},{"location":"development/shader/cg-shaders/#scale_typen-string","text":"This can be set to one of these values: - source : Output size of shader pass N is relative to the input size as found in IN.video_size . Value is float . - viewport : Output size of shader pass N is relative to the size of the window viewport. Value is float . This value can change over time if the user resizes their window! - absolute : Output size is statically defined to a certain size. Useful for hi-res blenders or similiar. If no scale type is assumed, it is assumed that it is set to source with scaleN set to 1.0 . It is possible to set scale_type_xN and scale_type_yN to specialize the scaling type in either direction. scale_typeN however overrides both of these. Exceptions If no scale_type is set for the very last shader, it is assumed to output at the full resolution rather than assuming a scale of 1.0x , and bypasses any frame-buffer object rendering. If there is only one shader, it is also considered to be the very last shader. If any scale option is defined, it has to go through a frame-buffer object, and subsequently rendered to screen. The filtering option used when stretching is implementation defined. It is encouraged to not have any scaling parameters in last pass if you care about the filtering option here. In first pass, should no scaling factor be defined, the implementation is free to choose a fitting scale. This means, that for a single pass shader, it is allowed for the implementation to set a scale, render to FBO, and stretch. (Rule above).","title":"scale_typeN (string)"},{"location":"development/shader/cg-shaders/#scalen-scale_xn-scale_yn-floatint","text":"These values control the scaling params from scale_typeN . The values may be either floating or int depending on the type. scaleN controls both scaling type in horizontal and vertical directions. If scaleN is defined, scale_xN and scale_yN have no effect. scale_xN and scale_yN controls scaling properties for the directions separately. Should only one of these be defined, the other direction will assume a source scale with value 1.0 , i.e. no change in resolution. Should scale_type_xN and scale_type_yN be set to different values, the use of scaleN is undefined (i.e. if X-type is absolute (takes int ), and Y-type is source (takes float ).)","title":"scaleN, scale_xN, scale_yN (float/int)"},{"location":"development/shader/cg-shaders/#textures-multiple-strings","text":"The textures param defines one or more lookup textures IDs. Several IDs are delimited with ; such as textures = \"foo;bar\" . These IDs serves as the names for a Cg sampler uniform, such as uniform sampler2D foo; and uniform sampler2D bar; The path of the textures can be found in the IDs, i.e. foo = image0.tga and bar = image1.tga . The paths of these textures are relative to the directory the meta-shader was loaded from. It is also possible to control the filtering options of the lookup texture as a boolean option in ID_linear = true/false . For example foo_linear = false will force nearest neighbor filtering for texture foo . Note If ID_linear is not set, it is assumed to be linearily filtered. The textures will be loaded \"as-is\", and coordinates (0, 0) , (0, 1) , (1, 0) , (1, 1) will correspond to the corners of the texture. Since the texture coordinates of the texture in TEXUNIT0 might not be as convenient, the texture coordinates for all lookup textures will be found in TEXCOORD1 . Warning You cannot assume which texture unit the lookup textures will be bound to! The implementation only guarantees to be able to load plain top-left non-RLE .tga files. It may provide possibilities to load .png and other popular formats.","title":"textures (multiple strings)"},{"location":"development/shader/cg-shaders/#multipass","text":"It is sometimes feasible to process an effect in several steps. shaders = 2 shader0 = pass1 . cg shader1 = pass2 . cg scale_type0 = source scale0 = 2.0 filter_linear0 = true filter_linear1 = false During multi-pass rendering, some additional uniforms are available. With multi-pass rendering, it is possible to utilize the resulting output for every pass that came before it, including the unfiltered input. This allows for an additive approach to shading rather than serial style. The unfiltered input can be found in the ORIG struct: uniform sampler2D ORIG.texture : Texture handle. Must not be set to a predefined texture unit. uniform float2 ORIG.video_size : The video size of original frame. uniform float2 ORIG.texture_size : The texture size of original frame. in float2 ORIG.tex_coord : An attribute input holding the texturecoordinates of original frame. PASS%u : This struct holds the same data as the ORIG struct, although the result of passes {1, 2, 3 ...}, i.e. PASS1.texture holds the result of the first shader pass. If rendering pass N , passes {1, ..., N-2} are available. ( N-1 being input in the regular IN structure). PREV : This struct holds the same data as the ORIG struct, and corresponds to the raw input image from the previous frame. Useful for motion blur. PREV1..6 : Similar struct as PREV , but holds the data for passes further back in time. PREV1 is the frame before PREV , PREV2 the frame before that again, and so on. This allows up to 8-tap motion blur.","title":"Multipass"},{"location":"development/shader/content-aware-shaders/","text":"Content-aware shaders \u00b6 Content-aware shaders grab data from the core state itself, such as emulator RAM data. This is only implemented for SNES so far, but the idea is quite extendable and portable. The basic idea is that we capture RAM data in a certain way (semantic if you will) from the SNES, and pass it as a uniform to the shader. The shader can thus act on game state in interesting ways. As a tool to show this feature, we\u2019ll focus on replicating the simple tech demo shown on YouTube . What happens is that when Mario jumps in the water, the screen gets a \"watery\" effect applied to it, with a rain lookup texture, and a wavy effect. When he jumps out of the water, the water effect slowly fades away. We thus need to know two things: Is Mario currently in water or not? If not, how long time was it since he jumped out? Since shaders do not have state associated with it, we have to let the environment provide the state we need in a certain way. We\u2019ll call this concept a semantic. To capture a RAM value directly, we can use the \"capture\" semantic. To record the time when the RAM value last changed, we can use the \"transition\" semantic. We obviously also need to know where in RAM we can find this information. Luckily, the folks over at SMW Central know the answer . We see: $7E :0075 , byte , Flag , Player is in water flag. #$00 = No; #$01 = Yes. Bank $7E and $7F are mapped to WRAM $0000-$FFFF and $10000-$1FFFF respectively. Thus, our WRAM address is $0075 . In the config file, we can now set up the uniforms we\u2019ll want to be captured. imports = \"mario_water ; mario_water_time\" mario_water_semantic = capture # Capture the RAM value as\u2212is. mario_water_wram = 0075 # This value is hex! mario_water_time_semantic = transition # Capture the frame count when this variable last changed. # Use with IN. frame_count , to create a fade\u2212out effect. mario_water_time_wram = 0075 The amount of possible \"semantics\" are practically endless. It might be worthwhile to attempt some possibility to run custom code that keeps track of the shader uniforms in more sophisticated ways later on. Do note that there is also a %s_mask value which will let you bitmask the RAM value to check for bit-flags more easily. Now that we got that part down, let's work on the shader design. In the fragment shader we simply render both the full water effect, and the \u00abnormal\u00bb texture, and let a \"blend\" variable decide. We can say that 1.0 is full water effect, 0.0 is no effect. We can start working on our vertex shader. We will do something useful here for once. struct input { float frame_count ; }; void main_vertex ( float4 pos : POSITION , out float4 out_pos : POSITION , uniform float4x4 modelViewProj , float4 color : COLOR , out float4 out_color : COLOR , float2 tex : TEXCOORD0 , out float2 out_tex : TEXCOORD0 , float2 tex1 : TEXCOORD1 , out float2 out_tex1 : TEXCOORD1 , // Even if the data should have been int, Cg doesn't seem to support integer uniforms uniform float mario_water , uniform float mario_water_time , uniform input IN , // Blend factor is passed to fragment shader. We'll output the same value in every vertex, // so every fragment will get the same value for blend_factor since there is nothing to interpolate. out float blend_factor ) { out_pos = mul ( modelViewProj , pos ); out_color = color ; out_tex = tex ; out_tex1 = tex1 ; float transition_time = 0.5 * ( IN . frame_count mario_water_time ) / 60.0 ; // If Mario is in the water ( $0075 != 0), it's always 1... if ( mario_water > 0.0 ) blend_factor = 1.0 ; // Fade out from 1.0 towards 0.0 as transition_time grows larger. else blend_factor = exp ( \u2212 transition_time ); } All fine and dandy so far, now we just need to use this blend_factor in our fragment shader somehow... Let\u2019s move on to the fragment shader where we blend. float apply_wave ( float2 pos , float2 src , float cnt ) { float2 diff = pos \u2212 src ; float dist = 300.0 * sqrt ( dot ( diff , diff )); dist \u2212 = 0.15 \u2217 cnt ; return sin ( dist ); } // Fancy stuff to create a wave. float4 water_texture ( float4 output , float2 scale , float cnt ) { float res = apply_wave ( scale , src0 , cnt ) ; res += apply_wave ( scale , src1 , cnt ) ; res += apply_wave ( scale , src2 , cnt ) ; res += apply_wave ( scale , src3 , cnt ) ; res += apply_wave ( scale , src4 , cnt ) ; res += apply_wave ( scale , src5 , cnt ) ; res += apply_wave ( scale , src6 , cnt ) ; return output * ( 0.95 + 0.012 * res ) ; } float4 main_fragment ( uniform input IN , float2 tex : TEXCOORD0 , uniform sampler2D s0 : TEXUNIT0 , uniform sampler2D rain , float2 tex1 : TEXCOORD1 , in float blend_factor // Passed from vertex ) : COLOR { float4 water_tex = water_texture ( tex2D ( s0 , tex ), tex1 , IN . frame_count ); float4 normal_tex = tex2D ( s0 , tex ); float4 rain_tex = tex2D ( rain , tex1 ); // First , blend normal and water texture together , // then add the rain texture with alpha blending on top return lerp ( lerp ( normal_tex , water_tex , blend_factor ), rain_tex , rain_tex . a * blend_factor * 0. 5 ); } RetroArch config file \u00b6 shaders = 1 shader0 = mario.cg filter_linear0 = true imports = \"mario_water;mario_water_time\" mario_water_semantic = capture mario_water_time_semantic = transition mario_water_wram = 0075 mario_water_time_wram = 0075 textures = rain rain = rain.tga rain_linear = true How to test when developing for RetroArch \u00b6 To develop these kinds of shaders, I\u2019d recommend using RetroArch w/Cg support, and a debugging tool for your emulator of choice to peek at RAM values (build it for bSNES yourself with options=debugger ). After written, the shader should translate nicely over to RetroArch with some slight changes to the config. Results \u00b6 Here are some screenshots of the mario effect (in Super Mario World SNES) we developed. Obviously this is a very simple example showing what can be done. The imagination is the limit here. Prior to Mario jumping in water \u00b6 After Mario jumps in water \u00b6","title":"Content-Aware Shaders"},{"location":"development/shader/content-aware-shaders/#content-aware-shaders","text":"Content-aware shaders grab data from the core state itself, such as emulator RAM data. This is only implemented for SNES so far, but the idea is quite extendable and portable. The basic idea is that we capture RAM data in a certain way (semantic if you will) from the SNES, and pass it as a uniform to the shader. The shader can thus act on game state in interesting ways. As a tool to show this feature, we\u2019ll focus on replicating the simple tech demo shown on YouTube . What happens is that when Mario jumps in the water, the screen gets a \"watery\" effect applied to it, with a rain lookup texture, and a wavy effect. When he jumps out of the water, the water effect slowly fades away. We thus need to know two things: Is Mario currently in water or not? If not, how long time was it since he jumped out? Since shaders do not have state associated with it, we have to let the environment provide the state we need in a certain way. We\u2019ll call this concept a semantic. To capture a RAM value directly, we can use the \"capture\" semantic. To record the time when the RAM value last changed, we can use the \"transition\" semantic. We obviously also need to know where in RAM we can find this information. Luckily, the folks over at SMW Central know the answer . We see: $7E :0075 , byte , Flag , Player is in water flag. #$00 = No; #$01 = Yes. Bank $7E and $7F are mapped to WRAM $0000-$FFFF and $10000-$1FFFF respectively. Thus, our WRAM address is $0075 . In the config file, we can now set up the uniforms we\u2019ll want to be captured. imports = \"mario_water ; mario_water_time\" mario_water_semantic = capture # Capture the RAM value as\u2212is. mario_water_wram = 0075 # This value is hex! mario_water_time_semantic = transition # Capture the frame count when this variable last changed. # Use with IN. frame_count , to create a fade\u2212out effect. mario_water_time_wram = 0075 The amount of possible \"semantics\" are practically endless. It might be worthwhile to attempt some possibility to run custom code that keeps track of the shader uniforms in more sophisticated ways later on. Do note that there is also a %s_mask value which will let you bitmask the RAM value to check for bit-flags more easily. Now that we got that part down, let's work on the shader design. In the fragment shader we simply render both the full water effect, and the \u00abnormal\u00bb texture, and let a \"blend\" variable decide. We can say that 1.0 is full water effect, 0.0 is no effect. We can start working on our vertex shader. We will do something useful here for once. struct input { float frame_count ; }; void main_vertex ( float4 pos : POSITION , out float4 out_pos : POSITION , uniform float4x4 modelViewProj , float4 color : COLOR , out float4 out_color : COLOR , float2 tex : TEXCOORD0 , out float2 out_tex : TEXCOORD0 , float2 tex1 : TEXCOORD1 , out float2 out_tex1 : TEXCOORD1 , // Even if the data should have been int, Cg doesn't seem to support integer uniforms uniform float mario_water , uniform float mario_water_time , uniform input IN , // Blend factor is passed to fragment shader. We'll output the same value in every vertex, // so every fragment will get the same value for blend_factor since there is nothing to interpolate. out float blend_factor ) { out_pos = mul ( modelViewProj , pos ); out_color = color ; out_tex = tex ; out_tex1 = tex1 ; float transition_time = 0.5 * ( IN . frame_count mario_water_time ) / 60.0 ; // If Mario is in the water ( $0075 != 0), it's always 1... if ( mario_water > 0.0 ) blend_factor = 1.0 ; // Fade out from 1.0 towards 0.0 as transition_time grows larger. else blend_factor = exp ( \u2212 transition_time ); } All fine and dandy so far, now we just need to use this blend_factor in our fragment shader somehow... Let\u2019s move on to the fragment shader where we blend. float apply_wave ( float2 pos , float2 src , float cnt ) { float2 diff = pos \u2212 src ; float dist = 300.0 * sqrt ( dot ( diff , diff )); dist \u2212 = 0.15 \u2217 cnt ; return sin ( dist ); } // Fancy stuff to create a wave. float4 water_texture ( float4 output , float2 scale , float cnt ) { float res = apply_wave ( scale , src0 , cnt ) ; res += apply_wave ( scale , src1 , cnt ) ; res += apply_wave ( scale , src2 , cnt ) ; res += apply_wave ( scale , src3 , cnt ) ; res += apply_wave ( scale , src4 , cnt ) ; res += apply_wave ( scale , src5 , cnt ) ; res += apply_wave ( scale , src6 , cnt ) ; return output * ( 0.95 + 0.012 * res ) ; } float4 main_fragment ( uniform input IN , float2 tex : TEXCOORD0 , uniform sampler2D s0 : TEXUNIT0 , uniform sampler2D rain , float2 tex1 : TEXCOORD1 , in float blend_factor // Passed from vertex ) : COLOR { float4 water_tex = water_texture ( tex2D ( s0 , tex ), tex1 , IN . frame_count ); float4 normal_tex = tex2D ( s0 , tex ); float4 rain_tex = tex2D ( rain , tex1 ); // First , blend normal and water texture together , // then add the rain texture with alpha blending on top return lerp ( lerp ( normal_tex , water_tex , blend_factor ), rain_tex , rain_tex . a * blend_factor * 0. 5 ); }","title":"Content-aware shaders"},{"location":"development/shader/content-aware-shaders/#retroarch-config-file","text":"shaders = 1 shader0 = mario.cg filter_linear0 = true imports = \"mario_water;mario_water_time\" mario_water_semantic = capture mario_water_time_semantic = transition mario_water_wram = 0075 mario_water_time_wram = 0075 textures = rain rain = rain.tga rain_linear = true","title":"RetroArch config file"},{"location":"development/shader/content-aware-shaders/#how-to-test-when-developing-for-retroarch","text":"To develop these kinds of shaders, I\u2019d recommend using RetroArch w/Cg support, and a debugging tool for your emulator of choice to peek at RAM values (build it for bSNES yourself with options=debugger ). After written, the shader should translate nicely over to RetroArch with some slight changes to the config.","title":"How to test when developing for RetroArch"},{"location":"development/shader/content-aware-shaders/#results","text":"Here are some screenshots of the mario effect (in Super Mario World SNES) we developed. Obviously this is a very simple example showing what can be done. The imagination is the limit here.","title":"Results"},{"location":"development/shader/content-aware-shaders/#prior-to-mario-jumping-in-water","text":"","title":"Prior to Mario jumping in water"},{"location":"development/shader/content-aware-shaders/#after-mario-jumps-in-water","text":"","title":"After Mario jumps in water"},{"location":"development/shader/glsl-shaders/","text":"Developing GLSL Shaders \u00b6 Like Cg shaders, GLSL shaders represents a single pass, and requires a preset file to describe how multiple shaders are combined. The extension is .glsl . As GLSL shaders are normally placed in two different files ( vertex , fragment ), making it impractical to select in a menu. This is worked around by using compiler defines in order to be equivalent to Cg shaders. Example GLSL shader \u00b6 Note GLSL shaders must be modern style, and using ruby prefix is discouraged. varying vec2 tex_coord ; #if defined(VERTEX) attribute vec2 TexCoord ; attribute vec2 VertexCoord ; uniform mat4 MVPMatrix ; void main () { gl_Position = MVPMatrix * vec4 ( VertexCoord , 0.0 , 1.0 ); tex_coord = TexCoord ; } #elif defined(FRAGMENT) uniform sampler2D Texture ; void main () { gl_FragColor = texture2D ( Texture , tex_coord ); } #endif GLSL presets \u00b6 Like Cg shaders, there is a GLSL preset format. Instead of .cgp extension, .glslp extension is used. The format is exactly the same, just replace .cg shaders with .glsl . To convert a .cgp preset, rename to .glslp and replace all references to .cg shaders with .glsl . Converting from Cg shaders \u00b6 GLSL shaders are mostly considered a compatibility format. It is possible to compile Cg shaders into GLSL shaders automatically using our cg2glsl script . It can convert single shaders as well as batch conversion. Shader converstion relies on nVidia's cgc tool found in the nvidia-cg-toolkit package.","title":"GLSL Shader Development"},{"location":"development/shader/glsl-shaders/#developing-glsl-shaders","text":"Like Cg shaders, GLSL shaders represents a single pass, and requires a preset file to describe how multiple shaders are combined. The extension is .glsl . As GLSL shaders are normally placed in two different files ( vertex , fragment ), making it impractical to select in a menu. This is worked around by using compiler defines in order to be equivalent to Cg shaders.","title":"Developing GLSL Shaders"},{"location":"development/shader/glsl-shaders/#example-glsl-shader","text":"Note GLSL shaders must be modern style, and using ruby prefix is discouraged. varying vec2 tex_coord ; #if defined(VERTEX) attribute vec2 TexCoord ; attribute vec2 VertexCoord ; uniform mat4 MVPMatrix ; void main () { gl_Position = MVPMatrix * vec4 ( VertexCoord , 0.0 , 1.0 ); tex_coord = TexCoord ; } #elif defined(FRAGMENT) uniform sampler2D Texture ; void main () { gl_FragColor = texture2D ( Texture , tex_coord ); } #endif","title":"Example GLSL shader"},{"location":"development/shader/glsl-shaders/#glsl-presets","text":"Like Cg shaders, there is a GLSL preset format. Instead of .cgp extension, .glslp extension is used. The format is exactly the same, just replace .cg shaders with .glsl . To convert a .cgp preset, rename to .glslp and replace all references to .cg shaders with .glsl .","title":"GLSL presets"},{"location":"development/shader/glsl-shaders/#converting-from-cg-shaders","text":"GLSL shaders are mostly considered a compatibility format. It is possible to compile Cg shaders into GLSL shaders automatically using our cg2glsl script . It can convert single shaders as well as batch conversion. Shader converstion relies on nVidia's cgc tool found in the nvidia-cg-toolkit package.","title":"Converting from Cg shaders"},{"location":"development/shader/shader-lookup-textures/","text":"Shader lookup textures \u00b6 A popular feature among RetroArch users the ability to access external textures. This means we have several samplers available for use. In the config file, we define the textures as so: textures = \" foo ; bar\" foo = path_foo.png bar = bar_foo.png foo_linear = true # Linear filtering for foo. bar_linear = true # Linear filtering for bar. RetroArch PS3 uses PNG as the main format, RetroArch can use whatever if Imlib2 support is compiled in. If not, it\u2019s restricted to lop-left ordered, non-RLE TGA. From here on, foo and bar can be found as uniforms in the shaders. The texture coordinates for the lookup texture will be found in TEXCOORD1 . This can simply be passed along with TEXCOORD0 in the vertex shader as we did with TEXCOORD0 . Here we make a fragment shader that blends in two background picture at a reduced opacity. Do NOT assign lookup textures to a certain TEXUNIT , Cg will assign a fitting texture unit to the sampler. float4 main_fragment ( uniform sampler2D s0 : TEXUNIT0 , uniform sampler2D foo , uniform sampler2D bar , float2 tex : TEXCOORD0 , float2 tex_lut : TEXCOORD1 ) : COLOR { float4 bg_sum = ( tex2D ( foo , tex_lut ) + tex2D ( bar , tex_lut )) * 0.15 ; return lerp ( tex2D ( s0 , tex ), bg_sum , bg_sum . a ); // Alpha blending. } Results: a shader for drawing a background border \u00b6","title":"Shader Lookup Textures"},{"location":"development/shader/shader-lookup-textures/#shader-lookup-textures","text":"A popular feature among RetroArch users the ability to access external textures. This means we have several samplers available for use. In the config file, we define the textures as so: textures = \" foo ; bar\" foo = path_foo.png bar = bar_foo.png foo_linear = true # Linear filtering for foo. bar_linear = true # Linear filtering for bar. RetroArch PS3 uses PNG as the main format, RetroArch can use whatever if Imlib2 support is compiled in. If not, it\u2019s restricted to lop-left ordered, non-RLE TGA. From here on, foo and bar can be found as uniforms in the shaders. The texture coordinates for the lookup texture will be found in TEXCOORD1 . This can simply be passed along with TEXCOORD0 in the vertex shader as we did with TEXCOORD0 . Here we make a fragment shader that blends in two background picture at a reduced opacity. Do NOT assign lookup textures to a certain TEXUNIT , Cg will assign a fitting texture unit to the sampler. float4 main_fragment ( uniform sampler2D s0 : TEXUNIT0 , uniform sampler2D foo , uniform sampler2D bar , float2 tex : TEXCOORD0 , float2 tex_lut : TEXCOORD1 ) : COLOR { float4 bg_sum = ( tex2D ( foo , tex_lut ) + tex2D ( bar , tex_lut )) * 0.15 ; return lerp ( tex2D ( s0 , tex ), bg_sum , bg_sum . a ); // Alpha blending. }","title":"Shader lookup textures"},{"location":"development/shader/shader-lookup-textures/#results-a-shader-for-drawing-a-background-border","text":"","title":"Results: a shader for drawing a background border"},{"location":"development/shader/shader-overview/","text":"Shader Development Overview \u00b6 Available shader types \u00b6 As the reference libretro frotnend, RetroArch supports three shader languages: Shader Language Video Context Drivers Slang Vulkan, GL 2.x (legacy desktop), GL 3.x+ (modern desktop), GLES2 (legacy mobile), GLES3 (modern mobile), HLSL (Planned), Metal (Planned) GLSL GL Shading Language, OpenGL, OpenGL ES, and EGL contexts including KMS mode in Linux) Cg (deprecated) HLSL/GLSL, nVidia XML (discontinued) GLSL When possible, it is recommended to use Slang shaders for supporting the widest variety of modern systems. RetroArch is able to stack these shaders to create a combined effect. These complex effects are saved with a special extension: .slangp for Slang .glslp for GLSL .cpg for Cg Common Shaders Repository \u00b6 The Libretro organization hosts a repository on Github that contains a compilation of shaders. Users can contribute their own shaders to this repository by doing a Pull Request. Shader development: The rendering pipeline \u00b6 With shaders you are able to take control over a large chunk of the GPUs inner workings by writing your own programs that are uploaded and run on the GPU. In the old days, GPUs were a big black box that was highly configurable using endless amount of API calls. In more modern times, rather than giving you endless amounts of buttons, you are expected to implement the few \u00abbuttons\u00bb you actually need, and have a streamlined API. The rendering pipeline is somewhat complex, but we can in general simplify it to: Vertex processing Rasterization Fragment processing Framebuffer blend Shader developers can take control of what happens during vertex processing, and fragment processing. Frontend development: Rendering the shader chain \u00b6 With all these options, the rendering pipeline can become somewhat complex. The meta-shader format greatly utilizes the possibility of off-screen rendering to achieve its effects. In OpenGL usually this is referred to as frame-buffer objects, and in HLSL as render targets. This feature will be referred to as FBO from here. FBO texture is assumed to be a texture bound to the FBO. As long as the visual result is approximately identical, the implementation does not have to employ FBO. With multiple passes our chain looks like this conceptually: |Source image| ---> |Shader 0| ---> |FBO 0| ---> |Shader 1| ---> |FBO 1| ---> |Shader 2| ---> (Back buffer) In the case that Shader 2 has set some scaling params, we need to first render to an FBO before stretching it to the back buffer. |Source image| ---> ... |Shader 2| ---> |FBO 2| ---> (Back buffer) Scaling parameters determine the sizes of the FBOs. For visual fidelity it is recommended that power-of-two sized textures are bound to them. This is due to floating point inaccuracies that become far more apparent when not using power-of-two textures. If the absolute maximum size of the source image is known, then it is possible to preallocate the FBOs. Do note that the size of FBOn is determined by dimensions of FBOn-1 when \"source\" scale is used, not the source image size! Of course, FBO0 would use source image size, as there is no FBO-1 . For example, with SNES there is a maximum width of 512 and height of 478 . If a source relative scale of 3.0x is desired for first pass, it is thus safe to allocate a FBO with size of 2048x2048 . However, most frames will just use a tiny fraction of this texture. With \"viewport\" scale it might be necessary to reallocate the FBO in run-time if the user resizes the window. Shader compatibility with RetroArch video drivers \u00b6 In RetroArch, the following table specifies which shader types work with what video contexts: Context Driver GLSL CG HLSL Slang Android Y N N Y CGL Y N N N D3D N Y N (Possible) Y DRM Y N N N Emscripten Y N N N GDI N N N N KHR N N N Y Mali Y N N N Opendingux Y N N N OSMesa Y N N N PS3 N Y N N QNX Y N N N SDL N N N N VC Y N N N Vivante Y N N N Wayland Y N N Y WGL Y N N Y X Y Y N Y XEGL Y N N N Warning Attempting to load unsupported shader types may result in segmentation faults because the context drivers currently do not have the behavior to declare which types of shaders it supports.","title":"Shader Development Overview"},{"location":"development/shader/shader-overview/#shader-development-overview","text":"","title":"Shader Development Overview"},{"location":"development/shader/shader-overview/#available-shader-types","text":"As the reference libretro frotnend, RetroArch supports three shader languages: Shader Language Video Context Drivers Slang Vulkan, GL 2.x (legacy desktop), GL 3.x+ (modern desktop), GLES2 (legacy mobile), GLES3 (modern mobile), HLSL (Planned), Metal (Planned) GLSL GL Shading Language, OpenGL, OpenGL ES, and EGL contexts including KMS mode in Linux) Cg (deprecated) HLSL/GLSL, nVidia XML (discontinued) GLSL When possible, it is recommended to use Slang shaders for supporting the widest variety of modern systems. RetroArch is able to stack these shaders to create a combined effect. These complex effects are saved with a special extension: .slangp for Slang .glslp for GLSL .cpg for Cg","title":"Available shader types"},{"location":"development/shader/shader-overview/#common-shaders-repository","text":"The Libretro organization hosts a repository on Github that contains a compilation of shaders. Users can contribute their own shaders to this repository by doing a Pull Request.","title":"Common Shaders Repository"},{"location":"development/shader/shader-overview/#shader-development-the-rendering-pipeline","text":"With shaders you are able to take control over a large chunk of the GPUs inner workings by writing your own programs that are uploaded and run on the GPU. In the old days, GPUs were a big black box that was highly configurable using endless amount of API calls. In more modern times, rather than giving you endless amounts of buttons, you are expected to implement the few \u00abbuttons\u00bb you actually need, and have a streamlined API. The rendering pipeline is somewhat complex, but we can in general simplify it to: Vertex processing Rasterization Fragment processing Framebuffer blend Shader developers can take control of what happens during vertex processing, and fragment processing.","title":"Shader development: The rendering pipeline"},{"location":"development/shader/shader-overview/#frontend-development-rendering-the-shader-chain","text":"With all these options, the rendering pipeline can become somewhat complex. The meta-shader format greatly utilizes the possibility of off-screen rendering to achieve its effects. In OpenGL usually this is referred to as frame-buffer objects, and in HLSL as render targets. This feature will be referred to as FBO from here. FBO texture is assumed to be a texture bound to the FBO. As long as the visual result is approximately identical, the implementation does not have to employ FBO. With multiple passes our chain looks like this conceptually: |Source image| ---> |Shader 0| ---> |FBO 0| ---> |Shader 1| ---> |FBO 1| ---> |Shader 2| ---> (Back buffer) In the case that Shader 2 has set some scaling params, we need to first render to an FBO before stretching it to the back buffer. |Source image| ---> ... |Shader 2| ---> |FBO 2| ---> (Back buffer) Scaling parameters determine the sizes of the FBOs. For visual fidelity it is recommended that power-of-two sized textures are bound to them. This is due to floating point inaccuracies that become far more apparent when not using power-of-two textures. If the absolute maximum size of the source image is known, then it is possible to preallocate the FBOs. Do note that the size of FBOn is determined by dimensions of FBOn-1 when \"source\" scale is used, not the source image size! Of course, FBO0 would use source image size, as there is no FBO-1 . For example, with SNES there is a maximum width of 512 and height of 478 . If a source relative scale of 3.0x is desired for first pass, it is thus safe to allocate a FBO with size of 2048x2048 . However, most frames will just use a tiny fraction of this texture. With \"viewport\" scale it might be necessary to reallocate the FBO in run-time if the user resizes the window.","title":"Frontend development: Rendering the shader chain"},{"location":"development/shader/shader-overview/#shader-compatibility-with-retroarch-video-drivers","text":"In RetroArch, the following table specifies which shader types work with what video contexts: Context Driver GLSL CG HLSL Slang Android Y N N Y CGL Y N N N D3D N Y N (Possible) Y DRM Y N N N Emscripten Y N N N GDI N N N N KHR N N N Y Mali Y N N N Opendingux Y N N N OSMesa Y N N N PS3 N Y N N QNX Y N N N SDL N N N N VC Y N N N Vivante Y N N N Wayland Y N N Y WGL Y N N Y X Y Y N Y XEGL Y N N N Warning Attempting to load unsupported shader types may result in segmentation faults because the context drivers currently do not have the behavior to declare which types of shaders it supports.","title":"Shader compatibility with RetroArch video drivers"},{"location":"development/shader/slang-shaders/","text":"Developing Slang Shaders \u00b6 Target shader languages \u00b6 Vulkan GL 2.x (legacy desktop) GL 3.x+ (modern desktop) GLES2 (legacy mobile) GLES3 (modern mobile) HLSL Metal Design principle: Avoid mandating high-level features which do not work for GLES2. RetroArch runs on GL, GL2, and GLES2. GL and GL2 are only relevant from a legacy standpoint, but GLES2 a relevant target platform today and having GLES2 compatibility makes GL2 very easy. We therefore avoid a design which deliberately ruins GLES2 compatibility. However, we also do not want to artificially limit ourselves to shader features which are only available in GLES2. There are many shader builtins, for example, which only work in GLES3/GL3 and we should not hold back support in these cases. Why a new spec? \u00b6 The previous RetroArch shader subsystem in RetroArch is quite mature with a large body of shaders written for it. While it has served us well, it was not forward-compatible. The current state of writing high-level shading languages that work everywhere is challenging. Up until now, we have relied on nVidia Cg to serve as a basic foundation for shaders, but Cg has been discontinued for years and is closed source. Developers cannot use Cg for newer APIs such as Vulkan, D3D12, and Metal. Cg cross-compilation to GLSL is unmaintainable. We cannot do the Cg transform in runtime on mobile due to lack of open source Cg runtime. Another alternative was to write straight-up GLSL, but this too has serious drawbacks. All the different GL versions and GLSL variants are different enough that it becomes painful to write portable GLSL code that works without modification. Examples include: varying/attribute vs in/out (legacy vs modern) precision qualifiers (GLSL vs ESSL) texture2D vs texture (legacy vs modern) Lack of standard support for #include to reduce copy-pasta The fundamental issue is that GLSL shaders are dependent on the runtime GL version, which makes it difficult to test all shader variants. We did not want to litter every shader with heaps of #ifdefs everywhere to combat this problem. We also wanted to avoid having to write pseudo-GLSL with some text-based replacement behind the scenes. Vulkan GLSL as the portable solution \u00b6 Fortunately, there is now a forward looking and promising solution to our problems. Vulkan GLSL is a GLSL dialect designed for Vulkan and SPIR-V intermediate representation. We can use whatever GLSL version we want when writing shaders, as it is decoupled from the GL runtime. In runtime, we can have a vendor-neutral mature compiler, https://github.com/KhronosGroup/glslang which compiles our Vulkan GLSL to SPIR-V. Using https://github.com/KhronosGroup/SPIRV-Cross , we can then do reflection on the SPIR-V binary to deduce our filter chain layout. We can also disassemble back to our desired GLSL dialect in the GL backend based on which GL version we're running, which effectively means we can completely sidestep all our current problems with a pure GLSL based shading system. Another upside is that we no longer have to deal with vendor-specific quirks in the GLSL frontend. A common problem when people write for nVidia is that people mistakingly use float2 / float3 / float4 types from Cg/HLSL, which is supported as an extension in their GLSL frontend. Why not SPIR-V directly? \u00b6 This was considered, but there are several convenience problems with having a shading spec around pure SPIR-V. The first problem is metadata. In GLSL, we can quite easily extend with custom #pragmas or similar, but there is no trivial way to do this in SPIR-V outside writing custom tools to emit special metadata as debug information or similar with OpSource. We could also have this metadata outside in a separate file, but juggling more files means more churn, which we should try to avoid. The other problem is convenience. If RetroArch only accepts SPIR-V, we would need an explicit build step outside RetroArch first before we could test a shader. This gets very annoying during shader development, so it is clear that we need to support GLSL anyways, making SPIR-V support kinda redundant. The main argument for supporting SPIR-V would be to allow new shading languages to be used. This is a reasonable thing to consider, which is why the goal is to not design ourselves into a corner where it's only Vulkan GLSL that can possibly work down the line. We are open to the idea that new shading languages that target SPIR-V will emerge. High level Overview \u00b6 The RetroArch shader format outlines a filter chain/graph, a series of shader passes which operate on previously generated data to produce a final result. The goal is for every individual pass to access information from all previous shader passes, even across frames, easily. The filter chain specifies a number of shader passes to be executed one after the other. Each pass renders a full-screen quad to a texture of a certain resolution and format. The resolution can be dependent on external information. All filter chains begin at an input texture, which is created by a libretro core or similar. All filter chains terminate by rendering to the \"backbuffer\". The backbuffer is somewhat special since the resolution of it cannot be controlled by the shader. It can also not be fed back into the filter chain later because the frontend (here RetroArch) will render UI elements and such on top of the final pass output. Let's first look at what we mean by filter chains and how far we can expand this idea. Simplest filter chain \u00b6 The simplest filter chain we can specify is a single pass. (Input) -> [ Shader Pass #0 ] -> (Backbuffer) In this case there are no offscreen render targets necessary since our input is rendered directly to screen. Multiple passes \u00b6 A trivial extension is to keep our straight line view of the world where each pass looks at the previous output. (Input) -> [ Shader Pass #0 ] -> (Framebuffer) -> [ Shader Pass #1 ] -> (Backbuffer) Framebuffer here might have a different resolution than both Input and Backbuffer. A very common scenario for this is separable filters where we first scale horizontally, then vertically. Multiple passes and multiple inputs \u00b6 There is no reason why we should restrict ourselves to a straight-line view. /------------------------------------------------\\ / v (Input) -> [ Shader Pass #0 ] -> (Framebuffer #0) -> [ Shader Pass #1 ] -> (Backbuffer) In this scenario, we have two inputs to shader pass #1 , both the original, untouched input as well as the result of a pass in-between. All the inputs to a pass can have different resolutions. We have a way to query the resolution of individual textures to allow highly controlled sampling. We are now at a point where we can express an arbitrarily complex filter graph, but we can do better. For certain effects, time (or rather, results from earlier frames) can be an important factor. Multiple passes, multiple inputs, with history \u00b6 We now extend our filter graph, where we also have access to information from earlier frames. Note that this is still a causal filter system. Frame N: (Input N, Input N - 1, Input N - 2) -> [ Shader Pass #0 ] -> (Framebuffer N, Framebuffer N - 1, Input N - 3) -> [ Shader Pass #1 ] -> (Backbuffer) Frame N - 1: (Input N - 1, Input N - 2, Input N - 3) -> [ Shader Pass #0 ] -> (Framebuffer N - 1, Framebuffer N - 2, Input N - 4) -> [ Shader Pass #1 ] -> (Backbuffer) Frame N - 2: (Input N - 2, Input N - 3, Input N - 4) -> [ Shader Pass #0 ] -> (Framebuffer N - 2, Framebuffer N - 3, Input N - 5) -> [ Shader Pass #1 ] -> (Backbuffer) For framebuffers we can read the previous frame's framebuffer. We don't really need more than one frame of history since we have a feedback effect in place. Just like IIR filters, the \"response\" of such a feedback in the filter graph gives us essentially \"infinite\" history back in time, although it is mostly useful for long-lasting blurs and ghosting effects. Supporting more than one frame of feedback would also be extremely memory intensive since framebuffers tend to be much higher resolution than their input counterparts. One frame is also a nice \"clean\" limit. Once we go beyond just 1, the floodgate opens to arbitrary numbers, which we would want to avoid. It is also possible to fake as many feedback frames of history we want anyways, since we can copy a feedback frame to a separate pass anyways which effectively creates a \"shift register\" of feedback framebuffers in memory. Input textures can have arbitrary number of textures as history (just limited by memory). They cannot feedback since the filter chain cannot render into it, so it effectively is finite response (FIR). For the very first frames, frames with frame N < 0 are transparent black (all values 0 ). No POT padding \u00b6 No texture in the filter chain is padded at any time. It is possible for resolutions in the filter chain to vary over time which is common with certain emulated systems. In this scenarios, the textures and framebuffers are simply resized appropriately. Older frames still keep their old resolution in the brief moment that the resolution is changing. It is very important that shaders do not blindly sample with nearest filter with any scale factor. If naive nearest neighbor sampling is to be used, shaders must make sure that the filter chain is configured with integer scaling factors so that ambiguous texel-edge sampling is avoided. Deduce shader inputs by reflection \u00b6 We want to have as much useful information in the shader source as possible. We want to avoid having to explicitly write out metadata in shaders whereever we can. The biggest hurdle to overcome is how we describe our pipeline layout. The pipeline layout contains information about how we access resources such as uniforms and textures. There are three main types of inputs in this shader system: Texture samplers (sampler2D) Look-up textures for static input data Uniform data describing dimensions of textures Uniform ancillary data for render target dimensions, backbuffer target dimensions, frame count, etc Uniform user-defined parameters Uniform MVP for vertex shader Deduction by name \u00b6 There are two main approaches to deduce what a sampler2D uniform wants to sample from. The first way is to explicitly state somewhere else what that particular sampler needs, e.g. uniform sampler2D geeWhatAmI; // Metadata somewhere else SAMPLER geeWhatAmI = Input[-2]; // Input frame from 2 frames ago The other approach is to have built-in identifiers which correspond to certain textures. // Source here being defined as the texture from previous framebuffer pass or the input texture if this is the first pass in the chain. uniform sampler2D Source; In SPIR-V, we can use OpName to describe these names, so we do not require the original Vulkan GLSL source to perform this reflection. We use this approach throughout the specification. An identifier is mapped to an internal meaning (semantic). The shader backend looks at these semantics and constructs a filter chain based on all shaders in the chain. Identifiers can also have user defined meaning, either as an alias to existing identifiers or mapping to user defined parameters. Combining vertex and fragment into a single shader file \u00b6 One strength of Cg is its ability to contain multiple shader stages in the same .cg file. This is very convenient since we always want to consider vertex and fragment together. This is especially needed when trying to mix and match shaders in a GUI window for example. We don't want to require users to load first a vertex shader, then fragment manually. GLSL however does not support this out of the box. This means we need to define a light-weight system for preprocessing one GLSL source file into multiple stages. Should we make vertex optional? \u00b6 In most cases, the vertex shader will remain the same. This leaves us with the option to provide a \"default\" vertex stage if the shader stage is not defined. #include support \u00b6 With complex filter chains there is a lot of opportunity to reuse code. We therefore want light support for the #include directive. User parameter support \u00b6 Since we already have a \"preprocessor\" of sorts, we can also trivially extend this idea with user parameters. In the shader source we can specify which uniform inputs are user controlled, GUI visible name, their effective range, etc. Lookup textures \u00b6 A handy feature to have is reading from lookup textures. We can specify that some sampler inputs are loaded from a PNG file on disk as a plain RGBA8 texture. Do we want to support complex reinterpretation? \u00b6 There could be valid use cases for supporting other formats than plain RGBA8_UNORM . SRGB and UINT might be valid cases as well and maybe even 2x16-bit, 1x32-bit integer formats. Lookup buffers \u00b6 Do we want to support lookup buffers as UBOs as well? This wouldn't be doable in GLES2, but it could be useful as a more modern feature. If the LUT is small enough, we could realize it via plain old uniforms as well perhaps. This particular feature could be very interesting for generic polyphase lookup banks with different LUT files for different filters. Slang specification \u00b6 This part of the spec considers how Vulkan GLSL shaders are written. The frontend uses the glslang frontend to compile GLSL sources. This ensures that we do not end up with vendor-specific extensions. The #version string should be as recent as possible, e.g. #version 450 or #version 310 es . It is recommended to use 310 es since it allows mediump which can help on mobile. Note After the Vulkan GLSL is turned into SPIR-V, the original #version string does not matter anymore. Warning SPIR-V cannot be generated from legacy shader versions such as #version 100 (ES 2.0) or #version 120 (GL 2.1). The frontend will use reflection on the resulting SPIR-V file in order to deduce what each element in the UBO or what each texture means. The main types of data passed to shaders are read-only and can be classified as: uniform sampler2D : This is used for input textures, framebuffer results and lookup-textures. uniform Block { }; : This is used for any constant data which is passed to the shader. layout(push_constant) uniform Push {} name; : This is used for any push constant data which is passed to the shader. Resource usage rules \u00b6 Certain rules must be adhered to in order to make it easier for the frontend to dynamically set up bindings to resources. All resources must be using descriptor set #0 , or don't use layout(set = #N) at all. layout(binding = #N) must be declared for all UBO s and sampler2D s. All resources must use different bindings. There can be only one UBO. There can be only use push constant block. It is possible to have one regular UBO and one push constant UBO. If a UBO is used in both vertex and fragment, their binding number must match. If a UBO is used in both vertex and fragment, members with the same name must have the same offset/binary interface. This problem is easily avoided by having the same UBO visible to both vertex and fragment as \"common\" code. If a push constant block is used in both vertex and fragment, members with the same name must have the same offset/binary interface. sampler2D cannot be used in vertex, although the size parameters of samplers can be used in vertex. Other resource types such as SSBOs, images, atomic counters, etc, etc, are not allowed. Every member of the UBOs and push constant blocks as well as every texture must be meaningful to the frontend in some way, or an error is generated. Initial pre-process of slang files \u00b6 The very first line of a .slang file must contain a #version statement. The first process which takes place is dealing with #include statements. A slang file is preprocessed by scanning through the slang and resolving all #include statements. The include process does not consider any preprocessor defines or conditional expressions. The include path must always be relative, and it will be relative to the file path of the current file. Nested includes are allowed, but includes in a cycle are undefined as preprocessor guards are not considered. E.g.: #include \"common.inc\" After includes have been resolved, the frontend scans through all lines of the shader and considers #pragma statements. These pragmas build up ancillary reflection information and otherwise meaningful metadata. #pragma stage \u00b6 This pragma controls which part of a .slang file are visible to certain shader stages. Currently, two variants of this pragma are supported: #pragma stage vertex #pragma stage fragment If no #pragma stage has been encountered yet, lines of code in a shader belong to all shader stages. If a #pragma stage statement has been encountered, that stage is considered active, and the following lines of shader code will only be used when building source for that particular shader stage. A new #pragma stage can override which stage is active. #pragma name \u00b6 This pragma lets a shader set its identifier. This identifier can be used to create simple aliases for other passes. E.g.: #pragma name HorizontalPass #pragma format \u00b6 This pragma controls the format of the framebuffer which this shader will render to. The default render target format is R8G8B8A8_UNORM . Supported render target formats are listed below. From a portability perspective, please be aware that GLES2 has abysmal render target format support, and GLES3/GL3 may have restricted floating point render target support. If rendering to uint/int formats, make sure your fragment shader output target is uint/int. 8-bit \u00b6 R8_UNORM R8_UINT R8_SINT R8G8_UNORM R8G8_UINT R8G8_SINT R8G8B8A8_UNORM R8G8B8A8_UINT R8G8B8A8_SINT R8G8B8A8_SRGB 10-bit \u00b6 A2B10G10R10_UNORM_PACK32 A2B10G10R10_UINT_PACK32 16-bit \u00b6 R16_UINT R16_SINT R16_SFLOAT R16G16_UINT R16G16_SINT R16G16_SFLOAT R16G16B16A16_UINT R16G16B16A16_SINT R16G16B16A16_SFLOAT 32-bit \u00b6 R32_UINT R32_SINT R32_SFLOAT R32G32_UINT R32G32_SINT R32G32_SFLOAT R32G32B32A32_UINT R32G32B32A32_SINT R32G32B32A32_SFLOAT E.g.: #pragma format R16_SFLOAT #pragma parameter \u00b6 Shader parameters allow shaders to take user-defined inputs as uniform values. This makes shaders more configurable. The format is: #pragma parameter IDENTIFIER \"DESCRIPTION\" INITIAL MINIMUM MAXIMUM [STEP] The step parameter is optional. INITIAL , MINIMUM , and MAXIMUM are floating point values. IDENTIFIER is the meaningful string which is the name of the uniform which will be used in a UBO or push constant block. DESCRIPTION is a string which is human readable representation of IDENTIFIER. E.g: layout(push_constant) uniform Push { float DummyVariable; } registers; #pragma parameter DummyVariable \"This is a dummy variable\" 1.0 0.2 2.0 0.1 I/O interface variables \u00b6 The slang shader spec specifies two vertex inputs and one fragment output. Varyings between vertex and fragment shaders are user-defined. Vertex inputs \u00b6 Two attributes are provided and must be present in a shader. It is only the layout(location = #N) which is actually significant. The particular names of input and output variables are ignored, but should be consistent for readability. layout(location = 0) in vec4 Position; \u00b6 This attribute is a 2D position in the form vec4(x, y, 0.0, 1.0); . Shaders should not try to extract meaning from the x, y. gl_Position must be assigned as: gl_Position = MVP * Position; layout(location = 1) in vec2 TexCoord; \u00b6 The texture coordinate is semantically such that (0.0, 0.0) is top-left and (1.0, 1.0) is bottom right. If TexCoord is passed to a varying unmodified, the interpolated varying will be uv = 0.5 / OutputSize when rendering the upper left pixel as expected and uv = 1.0 - 0.5 / OutputSize when rendering the bottom-right pixel. Vertex/Fragment interface \u00b6 Vertex outputs and fragment inputs link by location, and not name. E.g.: // Vertex layout(location = 0) out vec4 varying; // Fragment layout(location = 0) in vec4 some_other_name; will still link fine, although using same names are encouraged for readability. Fragment outputs \u00b6 layout(location = 0) out vec4 FragColor; \u00b6 Fragment shaders must have a single output to location = 0 . Multiple render targets are not allowed. The type of the output depends on the render target format. int / uint type must be used if UINT / INT render target formats are used; otherwise float type. Builtin variables \u00b6 Builtin texture variables \u00b6 The input of textures get their meaning from their name. Original : This accesses the input of the filter chain, accessible from any pass. Source : This accesses the input from previous shader pass, or Original if accessed in the first pass of the filter chain. OriginalHistory# : This accesses the input # frames back in time. There is no limit on #, except larger numbers will consume more VRAM. OriginalHistory0 is an alias for Original , OriginalHistory1 is the previous frame and so on. PassOutput# : This accesses the output from pass # in this frame. PassOutput# must be causal, it is an error to access PassOutputN in pass M if N >= M . PassOutput# will typically be aliased to a more readable value. PassFeedback# : This accesses PassOutput# from the previous frame. Any pass can read the feedback of any feedback, since it is causal. PassFeedback# will typically be aliased to a more readable value. User# : This accesses look-up textures. However, the direct use of User# is discouraged and should always be accessed via aliases. Builtin texture size uniform variables \u00b6 If a member of a UBO or a push constant block is called ???Size# where ???# is the name of a texture variable, that member must be a vec4 , which will receive these values: X : Horizontal size of texture Y : Vertical size of texture Z : 1.0 / (Horizontal size of texture) W : 1.0 / (Vertical size of texture) It is valid to use a size variable without declaring the texture itself. This is useful for vertex shading. It is valid (although probably not useful) for a variable to be present in both a push constant block and a UBO block at the same time. Builtin uniform variables \u00b6 Other than uniforms related to textures, there are other special uniforms available. These builtin variables may be part of a UBO block and/or a push constant block. MVP : mat4 model view projection matrix. OutputSize : a vec4(x, y, 1.0 / x, 1.0 / y) variable describing the render target size (x, y) for this pass. FinalViewportSize : a vec4(x, y, 1.0 / x, 1.0 / y) variable describing the render target size for the final pass. Accessible from any pass. FrameCount : an uint variable taking a value which increases by one every frame. This value could be pre-wrapped by modulo if specified in preset. This is useful for creating time-dependent effects. FrameDirection : an int variable which indicates whether the content is currently being rewinded. Has a value of -1 while rewinding, otherwise 1 . Aliases \u00b6 Aliases can give meaning to arbitrary names in a slang file. This is mostly relevant for LUT textures, shader parameters and accessing other passes by name. If a shader pass has a #pragma name NAME associated with it, meaning is given to the shader: NAME is a sampler2D . NAMESize is a vec4 size uniform associated with NAME . NAMEFeedback is a sampler2D for the previous frame. NAMEFeedbackSize is a vec4 size uniform associated with NAMEFeedback . Example slang shader \u00b6 #version 450 // 450 or 310 es are recommended layout(set = 0, binding = 0, std140) uniform UBO { mat4 MVP; vec4 SourceSize; // Not used here, but doesn't hurt float ColorMod; }; #pragma name StockShader #pragma format R8G8B8A8_UNORM #pragma parameter ColorMod \"Color intensity\" 1.0 0.1 2.0 0.1 #pragma stage vertex layout(location = 0) in vec4 Position; layout(location = 1) in vec2 TexCoord; layout(location = 0) out vec2 vTexCoord; void main() { gl_Position = MVP * Position; vTexCoord = TexCoord; } #pragma stage fragment layout(location = 0) in vec2 vTexCoord; layout(location = 0) out vec4 FragColor; layout(binding = 1) uniform sampler2D Source; void main() { FragColor = texture(Source, vTexCoord) * ColorMod; } Push constants vs uniform blocks \u00b6 Push constants are fast-access uniform data which on some GPUs will improve performance over plain UBOs. It is encouraged to use push constant data as much as possible. layout(push_constant) uniform Push { vec4 SourceSize; vec4 FinalViewportSize; } registers; However, be aware that there is a limit to how large push constant blocks can be used. Vulkan puts a minimum required size of 128 bytes, which equals 8 vec4 s. It is an error to use more than 128 bytes. If you're running out of space, you can move the MVP to a UBO instead, which frees up 64 bytes. Always prioritize push constants for data used in fragment shaders as there are many more fragment threads than vertex. Also note that like UBOs, the push constant space is shared across vertex and fragment. If you need more than 8 vec4 s, you can spill uniforms over to plain UBOs, but more than 8 vec4 s should be quite rare in practice. E.g.: layout(binding = 0, std140) uniform UBO { mat4 MVP; // Only used in vertex vec4 SpilledUniform; } global; layout(push_constant) uniform Push { vec4 SourceSize; vec4 BlurPassSize; // ... } registers; Samplers \u00b6 Which samplers are used for textures are specified by the preset format. The sampler remains constant throughout the frame, there is currently no way to select samplers on a frame-by-frame basic. This is mostly to make it possible to use the spec in GLES2 as GLES2 has no concept of separate samplers and images. sRGB \u00b6 The input to the filter chain will not be of an sRGB format. This is due to many reasons, the main one being that it is very difficult for the frontend to get \"free\" passthrough of sRGB. It is possible to have a first pass which linearizes the input to a proper sRGB render target. In this way, custom gammas can be used as well. Similarly, the final pass will not be an sRGB backbuffer for similar reasons. Caveats \u00b6 Frag Coord \u00b6 TexCoord also replaces gl_FragCoord . Do not use gl_FragCoord as it doesn't consider the viewports correctly. If you need gl_FragCoord use vTexCoord * OutputSize.xy instead. Derivatives \u00b6 Be careful with derivatives of vTexCoord . The screen might have been rotated by the vertex shader, which will also rotate the derivatives, especially in the final pass which hits the backbuffer. However, derivatives are fortunately never really needed, since w = 1 (we render flat 2D quads), which means derivatives of varyings are constant. You can do some trivial replacements which will be faster and more robust. dFdx(vTexCoord) = vec2(OutputSize.z, 0.0); dFdy(vTexCoord) = vec2(0.0, OutputSize.w); fwidth(vTexCoord) = max(OutputSize.z, OutputSize.w); To avoid issues with rotation or unexpected derivatives in case derivatives are really needed, off-screen passes will not have rotation and dFdx and dFdy will behave as expected. Correctly sampling textures \u00b6 A common mistake made by shaders is that they aren't careful enough about sampling textures correctly. There are three major cases to consider: | Bilinear sampling | If bilinear is used, it is always safe to sample a texture. | | Nearest, with integer scale | If the OutputSize / InputSize is integer, the interpolated vTexCoord will always fall inside the texel safely, so no special precautions have to be used. For very particular shaders which rely on nearest neighbor sampling, using integer scale to a framebuffer and upscaling that with more stable upscaling filters like bicubic for example is usually a great choice. | Nearest, with non-integer scale | Sometimes, it is necessary to upscale images to the backbuffer which have an arbitrary size. Bilinear is not always good enough here, so we must deal with a complicated case. If we interpolate vTexCoord over a frame with non-integer scale, it is possible that we end up just between two texels. Nearest neighbor will have to find a texel which is nearest, but there is no clear \"nearest\" texel. In this scenario, we end up having lots of failure cases which are typically observed as weird glitches in the image which change based on the resolution. To correctly sample nearest textures with non-integer scale, we must pre-quantize our texture coordinates. Here's a snippet which lets us safely sample a nearest filtered texture and emulate bilinear filtering. vec2 uv = vTexCoord * global.SourceSize.xy - 0.5; // Shift by 0.5 since the texel sampling points are in the texel center. vec2 a = fract(uv); vec2 tex = (floor(uv) + 0.5) * global.SourceSize.zw; // Build a sampling point which is in the center of the texel. // Sample the bilinear footprint. vec4 t0 = textureLodOffset(Source, tex, 0.0, ivec2(0, 0)); vec4 t1 = textureLodOffset(Source, tex, 0.0, ivec2(1, 0)); vec4 t2 = textureLodOffset(Source, tex, 0.0, ivec2(0, 1)); vec4 t3 = textureLodOffset(Source, tex, 0.0, ivec2(1, 1)); // Bilinear filter. vec4 result = mix(mix(t0, t1, a.x), mix(t2, t3, a.x), a.y); The concept of splitting up the integer texel along with the fractional texel helps us safely do arbitrary non-integer scaling safely. The uv variable could also be passed pre-computed from vertex to avoid the extra computation in fragment. Preset format (.slangp) \u00b6 The present format is essentially unchanged from the old .cgp and .glslp, except the new preset format is called .slangp. Porting guide from legacy Cg spec \u00b6 Common functions \u00b6 mul(mat, vec) -> mat * vec lerp() -> mix() ddx() -> dFdx() ddy() -> dFdy() tex2D() -> texture() frac() -> fract() Types \u00b6 floatN -> vecN boolN -> bvecN intN -> ivecN uintN -> uvecN float4x4 -> mat4 Builtin uniforms and misc \u00b6 modelViewProj -> MVP IN.video_size -> SourceSize.xy IN.texture_size -> SourceSize.xy (no POT shenanigans, so they are the same) IN.output_size -> OutputSize.xy IN.frame_count -> FrameCount (uint instead of float) *.tex_coord -> TexCoord (no POT shenanigans, so they are all the same) *.lut_tex_coord -> TexCoord ORIG -> Original PASS# -> PassOutput# PASSPREV# -> No direct analog, PassOutput(CurrentPass - #), but prefer aliases Cg semantics \u00b6 POSITION -> gl_Position float2 texcoord : TEXCOORD0 -> layout(location = 1) in vec2 TexCoord; float4 varying : TEXCOORD# -> layout(location = #) out vec4 varying; uniform float4x4 modelViewProj -> uniform UBO { mat4 MVP; }; Output structs should be flattened into separate varyings. E.g. instead of struct VertexData { float pos : POSITION; float4 tex0 : TEXCOORD0; float4 tex1 : TEXCOORD1; }; void main_vertex(out VertexData vout) { vout.pos = ...; vout.tex0 = ...; vout.tex1 = ...; } void main_fragment(in VertexData vout) { ... } do this #pragma stage vertex layout(location = 0) out vec4 tex0; layout(location = 1) out vec4 tex1; void main() { gl_Position = ...; tex0 = ...; tex1 = ...; } #pragma stage fragment layout(location = 0) in vec4 tex0; layout(location = 1) in vec4 tex1; void main() { } Instead of returning a float4 from main_fragment, have an output in fragment: layout(location = 0) out vec4 FragColor;","title":"Slang Shader Development"},{"location":"development/shader/slang-shaders/#developing-slang-shaders","text":"","title":"Developing Slang Shaders"},{"location":"development/shader/slang-shaders/#target-shader-languages","text":"Vulkan GL 2.x (legacy desktop) GL 3.x+ (modern desktop) GLES2 (legacy mobile) GLES3 (modern mobile) HLSL Metal Design principle: Avoid mandating high-level features which do not work for GLES2. RetroArch runs on GL, GL2, and GLES2. GL and GL2 are only relevant from a legacy standpoint, but GLES2 a relevant target platform today and having GLES2 compatibility makes GL2 very easy. We therefore avoid a design which deliberately ruins GLES2 compatibility. However, we also do not want to artificially limit ourselves to shader features which are only available in GLES2. There are many shader builtins, for example, which only work in GLES3/GL3 and we should not hold back support in these cases.","title":"Target shader languages"},{"location":"development/shader/slang-shaders/#why-a-new-spec","text":"The previous RetroArch shader subsystem in RetroArch is quite mature with a large body of shaders written for it. While it has served us well, it was not forward-compatible. The current state of writing high-level shading languages that work everywhere is challenging. Up until now, we have relied on nVidia Cg to serve as a basic foundation for shaders, but Cg has been discontinued for years and is closed source. Developers cannot use Cg for newer APIs such as Vulkan, D3D12, and Metal. Cg cross-compilation to GLSL is unmaintainable. We cannot do the Cg transform in runtime on mobile due to lack of open source Cg runtime. Another alternative was to write straight-up GLSL, but this too has serious drawbacks. All the different GL versions and GLSL variants are different enough that it becomes painful to write portable GLSL code that works without modification. Examples include: varying/attribute vs in/out (legacy vs modern) precision qualifiers (GLSL vs ESSL) texture2D vs texture (legacy vs modern) Lack of standard support for #include to reduce copy-pasta The fundamental issue is that GLSL shaders are dependent on the runtime GL version, which makes it difficult to test all shader variants. We did not want to litter every shader with heaps of #ifdefs everywhere to combat this problem. We also wanted to avoid having to write pseudo-GLSL with some text-based replacement behind the scenes.","title":"Why a new spec?"},{"location":"development/shader/slang-shaders/#vulkan-glsl-as-the-portable-solution","text":"Fortunately, there is now a forward looking and promising solution to our problems. Vulkan GLSL is a GLSL dialect designed for Vulkan and SPIR-V intermediate representation. We can use whatever GLSL version we want when writing shaders, as it is decoupled from the GL runtime. In runtime, we can have a vendor-neutral mature compiler, https://github.com/KhronosGroup/glslang which compiles our Vulkan GLSL to SPIR-V. Using https://github.com/KhronosGroup/SPIRV-Cross , we can then do reflection on the SPIR-V binary to deduce our filter chain layout. We can also disassemble back to our desired GLSL dialect in the GL backend based on which GL version we're running, which effectively means we can completely sidestep all our current problems with a pure GLSL based shading system. Another upside is that we no longer have to deal with vendor-specific quirks in the GLSL frontend. A common problem when people write for nVidia is that people mistakingly use float2 / float3 / float4 types from Cg/HLSL, which is supported as an extension in their GLSL frontend.","title":"Vulkan GLSL as the portable solution"},{"location":"development/shader/slang-shaders/#why-not-spir-v-directly","text":"This was considered, but there are several convenience problems with having a shading spec around pure SPIR-V. The first problem is metadata. In GLSL, we can quite easily extend with custom #pragmas or similar, but there is no trivial way to do this in SPIR-V outside writing custom tools to emit special metadata as debug information or similar with OpSource. We could also have this metadata outside in a separate file, but juggling more files means more churn, which we should try to avoid. The other problem is convenience. If RetroArch only accepts SPIR-V, we would need an explicit build step outside RetroArch first before we could test a shader. This gets very annoying during shader development, so it is clear that we need to support GLSL anyways, making SPIR-V support kinda redundant. The main argument for supporting SPIR-V would be to allow new shading languages to be used. This is a reasonable thing to consider, which is why the goal is to not design ourselves into a corner where it's only Vulkan GLSL that can possibly work down the line. We are open to the idea that new shading languages that target SPIR-V will emerge.","title":"Why not SPIR-V directly?"},{"location":"development/shader/slang-shaders/#high-level-overview","text":"The RetroArch shader format outlines a filter chain/graph, a series of shader passes which operate on previously generated data to produce a final result. The goal is for every individual pass to access information from all previous shader passes, even across frames, easily. The filter chain specifies a number of shader passes to be executed one after the other. Each pass renders a full-screen quad to a texture of a certain resolution and format. The resolution can be dependent on external information. All filter chains begin at an input texture, which is created by a libretro core or similar. All filter chains terminate by rendering to the \"backbuffer\". The backbuffer is somewhat special since the resolution of it cannot be controlled by the shader. It can also not be fed back into the filter chain later because the frontend (here RetroArch) will render UI elements and such on top of the final pass output. Let's first look at what we mean by filter chains and how far we can expand this idea.","title":"High level Overview"},{"location":"development/shader/slang-shaders/#simplest-filter-chain","text":"The simplest filter chain we can specify is a single pass. (Input) -> [ Shader Pass #0 ] -> (Backbuffer) In this case there are no offscreen render targets necessary since our input is rendered directly to screen.","title":"Simplest filter chain"},{"location":"development/shader/slang-shaders/#multiple-passes","text":"A trivial extension is to keep our straight line view of the world where each pass looks at the previous output. (Input) -> [ Shader Pass #0 ] -> (Framebuffer) -> [ Shader Pass #1 ] -> (Backbuffer) Framebuffer here might have a different resolution than both Input and Backbuffer. A very common scenario for this is separable filters where we first scale horizontally, then vertically.","title":"Multiple passes"},{"location":"development/shader/slang-shaders/#multiple-passes-and-multiple-inputs","text":"There is no reason why we should restrict ourselves to a straight-line view. /------------------------------------------------\\ / v (Input) -> [ Shader Pass #0 ] -> (Framebuffer #0) -> [ Shader Pass #1 ] -> (Backbuffer) In this scenario, we have two inputs to shader pass #1 , both the original, untouched input as well as the result of a pass in-between. All the inputs to a pass can have different resolutions. We have a way to query the resolution of individual textures to allow highly controlled sampling. We are now at a point where we can express an arbitrarily complex filter graph, but we can do better. For certain effects, time (or rather, results from earlier frames) can be an important factor.","title":"Multiple passes and multiple inputs"},{"location":"development/shader/slang-shaders/#multiple-passes-multiple-inputs-with-history","text":"We now extend our filter graph, where we also have access to information from earlier frames. Note that this is still a causal filter system. Frame N: (Input N, Input N - 1, Input N - 2) -> [ Shader Pass #0 ] -> (Framebuffer N, Framebuffer N - 1, Input N - 3) -> [ Shader Pass #1 ] -> (Backbuffer) Frame N - 1: (Input N - 1, Input N - 2, Input N - 3) -> [ Shader Pass #0 ] -> (Framebuffer N - 1, Framebuffer N - 2, Input N - 4) -> [ Shader Pass #1 ] -> (Backbuffer) Frame N - 2: (Input N - 2, Input N - 3, Input N - 4) -> [ Shader Pass #0 ] -> (Framebuffer N - 2, Framebuffer N - 3, Input N - 5) -> [ Shader Pass #1 ] -> (Backbuffer) For framebuffers we can read the previous frame's framebuffer. We don't really need more than one frame of history since we have a feedback effect in place. Just like IIR filters, the \"response\" of such a feedback in the filter graph gives us essentially \"infinite\" history back in time, although it is mostly useful for long-lasting blurs and ghosting effects. Supporting more than one frame of feedback would also be extremely memory intensive since framebuffers tend to be much higher resolution than their input counterparts. One frame is also a nice \"clean\" limit. Once we go beyond just 1, the floodgate opens to arbitrary numbers, which we would want to avoid. It is also possible to fake as many feedback frames of history we want anyways, since we can copy a feedback frame to a separate pass anyways which effectively creates a \"shift register\" of feedback framebuffers in memory. Input textures can have arbitrary number of textures as history (just limited by memory). They cannot feedback since the filter chain cannot render into it, so it effectively is finite response (FIR). For the very first frames, frames with frame N < 0 are transparent black (all values 0 ).","title":"Multiple passes, multiple inputs, with history"},{"location":"development/shader/slang-shaders/#no-pot-padding","text":"No texture in the filter chain is padded at any time. It is possible for resolutions in the filter chain to vary over time which is common with certain emulated systems. In this scenarios, the textures and framebuffers are simply resized appropriately. Older frames still keep their old resolution in the brief moment that the resolution is changing. It is very important that shaders do not blindly sample with nearest filter with any scale factor. If naive nearest neighbor sampling is to be used, shaders must make sure that the filter chain is configured with integer scaling factors so that ambiguous texel-edge sampling is avoided.","title":"No POT padding"},{"location":"development/shader/slang-shaders/#deduce-shader-inputs-by-reflection","text":"We want to have as much useful information in the shader source as possible. We want to avoid having to explicitly write out metadata in shaders whereever we can. The biggest hurdle to overcome is how we describe our pipeline layout. The pipeline layout contains information about how we access resources such as uniforms and textures. There are three main types of inputs in this shader system: Texture samplers (sampler2D) Look-up textures for static input data Uniform data describing dimensions of textures Uniform ancillary data for render target dimensions, backbuffer target dimensions, frame count, etc Uniform user-defined parameters Uniform MVP for vertex shader","title":"Deduce shader inputs by reflection"},{"location":"development/shader/slang-shaders/#deduction-by-name","text":"There are two main approaches to deduce what a sampler2D uniform wants to sample from. The first way is to explicitly state somewhere else what that particular sampler needs, e.g. uniform sampler2D geeWhatAmI; // Metadata somewhere else SAMPLER geeWhatAmI = Input[-2]; // Input frame from 2 frames ago The other approach is to have built-in identifiers which correspond to certain textures. // Source here being defined as the texture from previous framebuffer pass or the input texture if this is the first pass in the chain. uniform sampler2D Source; In SPIR-V, we can use OpName to describe these names, so we do not require the original Vulkan GLSL source to perform this reflection. We use this approach throughout the specification. An identifier is mapped to an internal meaning (semantic). The shader backend looks at these semantics and constructs a filter chain based on all shaders in the chain. Identifiers can also have user defined meaning, either as an alias to existing identifiers or mapping to user defined parameters.","title":"Deduction by name"},{"location":"development/shader/slang-shaders/#combining-vertex-and-fragment-into-a-single-shader-file","text":"One strength of Cg is its ability to contain multiple shader stages in the same .cg file. This is very convenient since we always want to consider vertex and fragment together. This is especially needed when trying to mix and match shaders in a GUI window for example. We don't want to require users to load first a vertex shader, then fragment manually. GLSL however does not support this out of the box. This means we need to define a light-weight system for preprocessing one GLSL source file into multiple stages.","title":"Combining vertex and fragment into a single shader file"},{"location":"development/shader/slang-shaders/#should-we-make-vertex-optional","text":"In most cases, the vertex shader will remain the same. This leaves us with the option to provide a \"default\" vertex stage if the shader stage is not defined.","title":"Should we make vertex optional?"},{"location":"development/shader/slang-shaders/#include-support","text":"With complex filter chains there is a lot of opportunity to reuse code. We therefore want light support for the #include directive.","title":"#include support"},{"location":"development/shader/slang-shaders/#user-parameter-support","text":"Since we already have a \"preprocessor\" of sorts, we can also trivially extend this idea with user parameters. In the shader source we can specify which uniform inputs are user controlled, GUI visible name, their effective range, etc.","title":"User parameter support"},{"location":"development/shader/slang-shaders/#lookup-textures","text":"A handy feature to have is reading from lookup textures. We can specify that some sampler inputs are loaded from a PNG file on disk as a plain RGBA8 texture.","title":"Lookup textures"},{"location":"development/shader/slang-shaders/#do-we-want-to-support-complex-reinterpretation","text":"There could be valid use cases for supporting other formats than plain RGBA8_UNORM . SRGB and UINT might be valid cases as well and maybe even 2x16-bit, 1x32-bit integer formats.","title":"Do we want to support complex reinterpretation?"},{"location":"development/shader/slang-shaders/#lookup-buffers","text":"Do we want to support lookup buffers as UBOs as well? This wouldn't be doable in GLES2, but it could be useful as a more modern feature. If the LUT is small enough, we could realize it via plain old uniforms as well perhaps. This particular feature could be very interesting for generic polyphase lookup banks with different LUT files for different filters.","title":"Lookup buffers"},{"location":"development/shader/slang-shaders/#slang-specification","text":"This part of the spec considers how Vulkan GLSL shaders are written. The frontend uses the glslang frontend to compile GLSL sources. This ensures that we do not end up with vendor-specific extensions. The #version string should be as recent as possible, e.g. #version 450 or #version 310 es . It is recommended to use 310 es since it allows mediump which can help on mobile. Note After the Vulkan GLSL is turned into SPIR-V, the original #version string does not matter anymore. Warning SPIR-V cannot be generated from legacy shader versions such as #version 100 (ES 2.0) or #version 120 (GL 2.1). The frontend will use reflection on the resulting SPIR-V file in order to deduce what each element in the UBO or what each texture means. The main types of data passed to shaders are read-only and can be classified as: uniform sampler2D : This is used for input textures, framebuffer results and lookup-textures. uniform Block { }; : This is used for any constant data which is passed to the shader. layout(push_constant) uniform Push {} name; : This is used for any push constant data which is passed to the shader.","title":"Slang specification"},{"location":"development/shader/slang-shaders/#resource-usage-rules","text":"Certain rules must be adhered to in order to make it easier for the frontend to dynamically set up bindings to resources. All resources must be using descriptor set #0 , or don't use layout(set = #N) at all. layout(binding = #N) must be declared for all UBO s and sampler2D s. All resources must use different bindings. There can be only one UBO. There can be only use push constant block. It is possible to have one regular UBO and one push constant UBO. If a UBO is used in both vertex and fragment, their binding number must match. If a UBO is used in both vertex and fragment, members with the same name must have the same offset/binary interface. This problem is easily avoided by having the same UBO visible to both vertex and fragment as \"common\" code. If a push constant block is used in both vertex and fragment, members with the same name must have the same offset/binary interface. sampler2D cannot be used in vertex, although the size parameters of samplers can be used in vertex. Other resource types such as SSBOs, images, atomic counters, etc, etc, are not allowed. Every member of the UBOs and push constant blocks as well as every texture must be meaningful to the frontend in some way, or an error is generated.","title":"Resource usage rules"},{"location":"development/shader/slang-shaders/#initial-pre-process-of-slang-files","text":"The very first line of a .slang file must contain a #version statement. The first process which takes place is dealing with #include statements. A slang file is preprocessed by scanning through the slang and resolving all #include statements. The include process does not consider any preprocessor defines or conditional expressions. The include path must always be relative, and it will be relative to the file path of the current file. Nested includes are allowed, but includes in a cycle are undefined as preprocessor guards are not considered. E.g.: #include \"common.inc\" After includes have been resolved, the frontend scans through all lines of the shader and considers #pragma statements. These pragmas build up ancillary reflection information and otherwise meaningful metadata.","title":"Initial pre-process of slang files"},{"location":"development/shader/slang-shaders/#pragma-stage","text":"This pragma controls which part of a .slang file are visible to certain shader stages. Currently, two variants of this pragma are supported: #pragma stage vertex #pragma stage fragment If no #pragma stage has been encountered yet, lines of code in a shader belong to all shader stages. If a #pragma stage statement has been encountered, that stage is considered active, and the following lines of shader code will only be used when building source for that particular shader stage. A new #pragma stage can override which stage is active.","title":"#pragma stage"},{"location":"development/shader/slang-shaders/#pragma-name","text":"This pragma lets a shader set its identifier. This identifier can be used to create simple aliases for other passes. E.g.: #pragma name HorizontalPass","title":"#pragma name"},{"location":"development/shader/slang-shaders/#pragma-format","text":"This pragma controls the format of the framebuffer which this shader will render to. The default render target format is R8G8B8A8_UNORM . Supported render target formats are listed below. From a portability perspective, please be aware that GLES2 has abysmal render target format support, and GLES3/GL3 may have restricted floating point render target support. If rendering to uint/int formats, make sure your fragment shader output target is uint/int.","title":"#pragma format"},{"location":"development/shader/slang-shaders/#8-bit","text":"R8_UNORM R8_UINT R8_SINT R8G8_UNORM R8G8_UINT R8G8_SINT R8G8B8A8_UNORM R8G8B8A8_UINT R8G8B8A8_SINT R8G8B8A8_SRGB","title":"8-bit"},{"location":"development/shader/slang-shaders/#10-bit","text":"A2B10G10R10_UNORM_PACK32 A2B10G10R10_UINT_PACK32","title":"10-bit"},{"location":"development/shader/slang-shaders/#16-bit","text":"R16_UINT R16_SINT R16_SFLOAT R16G16_UINT R16G16_SINT R16G16_SFLOAT R16G16B16A16_UINT R16G16B16A16_SINT R16G16B16A16_SFLOAT","title":"16-bit"},{"location":"development/shader/slang-shaders/#32-bit","text":"R32_UINT R32_SINT R32_SFLOAT R32G32_UINT R32G32_SINT R32G32_SFLOAT R32G32B32A32_UINT R32G32B32A32_SINT R32G32B32A32_SFLOAT E.g.: #pragma format R16_SFLOAT","title":"32-bit"},{"location":"development/shader/slang-shaders/#pragma-parameter","text":"Shader parameters allow shaders to take user-defined inputs as uniform values. This makes shaders more configurable. The format is: #pragma parameter IDENTIFIER \"DESCRIPTION\" INITIAL MINIMUM MAXIMUM [STEP] The step parameter is optional. INITIAL , MINIMUM , and MAXIMUM are floating point values. IDENTIFIER is the meaningful string which is the name of the uniform which will be used in a UBO or push constant block. DESCRIPTION is a string which is human readable representation of IDENTIFIER. E.g: layout(push_constant) uniform Push { float DummyVariable; } registers; #pragma parameter DummyVariable \"This is a dummy variable\" 1.0 0.2 2.0 0.1","title":"#pragma parameter"},{"location":"development/shader/slang-shaders/#io-interface-variables","text":"The slang shader spec specifies two vertex inputs and one fragment output. Varyings between vertex and fragment shaders are user-defined.","title":"I/O interface variables"},{"location":"development/shader/slang-shaders/#vertex-inputs","text":"Two attributes are provided and must be present in a shader. It is only the layout(location = #N) which is actually significant. The particular names of input and output variables are ignored, but should be consistent for readability.","title":"Vertex inputs"},{"location":"development/shader/slang-shaders/#layoutlocation-0-in-vec4-position","text":"This attribute is a 2D position in the form vec4(x, y, 0.0, 1.0); . Shaders should not try to extract meaning from the x, y. gl_Position must be assigned as: gl_Position = MVP * Position;","title":"layout(location = 0) in vec4 Position;"},{"location":"development/shader/slang-shaders/#layoutlocation-1-in-vec2-texcoord","text":"The texture coordinate is semantically such that (0.0, 0.0) is top-left and (1.0, 1.0) is bottom right. If TexCoord is passed to a varying unmodified, the interpolated varying will be uv = 0.5 / OutputSize when rendering the upper left pixel as expected and uv = 1.0 - 0.5 / OutputSize when rendering the bottom-right pixel.","title":"layout(location = 1) in vec2 TexCoord;"},{"location":"development/shader/slang-shaders/#vertexfragment-interface","text":"Vertex outputs and fragment inputs link by location, and not name. E.g.: // Vertex layout(location = 0) out vec4 varying; // Fragment layout(location = 0) in vec4 some_other_name; will still link fine, although using same names are encouraged for readability.","title":"Vertex/Fragment interface"},{"location":"development/shader/slang-shaders/#fragment-outputs","text":"","title":"Fragment outputs"},{"location":"development/shader/slang-shaders/#layoutlocation-0-out-vec4-fragcolor","text":"Fragment shaders must have a single output to location = 0 . Multiple render targets are not allowed. The type of the output depends on the render target format. int / uint type must be used if UINT / INT render target formats are used; otherwise float type.","title":"layout(location = 0) out vec4 FragColor;"},{"location":"development/shader/slang-shaders/#builtin-variables","text":"","title":"Builtin variables"},{"location":"development/shader/slang-shaders/#builtin-texture-variables","text":"The input of textures get their meaning from their name. Original : This accesses the input of the filter chain, accessible from any pass. Source : This accesses the input from previous shader pass, or Original if accessed in the first pass of the filter chain. OriginalHistory# : This accesses the input # frames back in time. There is no limit on #, except larger numbers will consume more VRAM. OriginalHistory0 is an alias for Original , OriginalHistory1 is the previous frame and so on. PassOutput# : This accesses the output from pass # in this frame. PassOutput# must be causal, it is an error to access PassOutputN in pass M if N >= M . PassOutput# will typically be aliased to a more readable value. PassFeedback# : This accesses PassOutput# from the previous frame. Any pass can read the feedback of any feedback, since it is causal. PassFeedback# will typically be aliased to a more readable value. User# : This accesses look-up textures. However, the direct use of User# is discouraged and should always be accessed via aliases.","title":"Builtin texture variables"},{"location":"development/shader/slang-shaders/#builtin-texture-size-uniform-variables","text":"If a member of a UBO or a push constant block is called ???Size# where ???# is the name of a texture variable, that member must be a vec4 , which will receive these values: X : Horizontal size of texture Y : Vertical size of texture Z : 1.0 / (Horizontal size of texture) W : 1.0 / (Vertical size of texture) It is valid to use a size variable without declaring the texture itself. This is useful for vertex shading. It is valid (although probably not useful) for a variable to be present in both a push constant block and a UBO block at the same time.","title":"Builtin texture size uniform variables"},{"location":"development/shader/slang-shaders/#builtin-uniform-variables","text":"Other than uniforms related to textures, there are other special uniforms available. These builtin variables may be part of a UBO block and/or a push constant block. MVP : mat4 model view projection matrix. OutputSize : a vec4(x, y, 1.0 / x, 1.0 / y) variable describing the render target size (x, y) for this pass. FinalViewportSize : a vec4(x, y, 1.0 / x, 1.0 / y) variable describing the render target size for the final pass. Accessible from any pass. FrameCount : an uint variable taking a value which increases by one every frame. This value could be pre-wrapped by modulo if specified in preset. This is useful for creating time-dependent effects. FrameDirection : an int variable which indicates whether the content is currently being rewinded. Has a value of -1 while rewinding, otherwise 1 .","title":"Builtin uniform variables"},{"location":"development/shader/slang-shaders/#aliases","text":"Aliases can give meaning to arbitrary names in a slang file. This is mostly relevant for LUT textures, shader parameters and accessing other passes by name. If a shader pass has a #pragma name NAME associated with it, meaning is given to the shader: NAME is a sampler2D . NAMESize is a vec4 size uniform associated with NAME . NAMEFeedback is a sampler2D for the previous frame. NAMEFeedbackSize is a vec4 size uniform associated with NAMEFeedback .","title":"Aliases"},{"location":"development/shader/slang-shaders/#example-slang-shader","text":"#version 450 // 450 or 310 es are recommended layout(set = 0, binding = 0, std140) uniform UBO { mat4 MVP; vec4 SourceSize; // Not used here, but doesn't hurt float ColorMod; }; #pragma name StockShader #pragma format R8G8B8A8_UNORM #pragma parameter ColorMod \"Color intensity\" 1.0 0.1 2.0 0.1 #pragma stage vertex layout(location = 0) in vec4 Position; layout(location = 1) in vec2 TexCoord; layout(location = 0) out vec2 vTexCoord; void main() { gl_Position = MVP * Position; vTexCoord = TexCoord; } #pragma stage fragment layout(location = 0) in vec2 vTexCoord; layout(location = 0) out vec4 FragColor; layout(binding = 1) uniform sampler2D Source; void main() { FragColor = texture(Source, vTexCoord) * ColorMod; }","title":"Example slang shader"},{"location":"development/shader/slang-shaders/#push-constants-vs-uniform-blocks","text":"Push constants are fast-access uniform data which on some GPUs will improve performance over plain UBOs. It is encouraged to use push constant data as much as possible. layout(push_constant) uniform Push { vec4 SourceSize; vec4 FinalViewportSize; } registers; However, be aware that there is a limit to how large push constant blocks can be used. Vulkan puts a minimum required size of 128 bytes, which equals 8 vec4 s. It is an error to use more than 128 bytes. If you're running out of space, you can move the MVP to a UBO instead, which frees up 64 bytes. Always prioritize push constants for data used in fragment shaders as there are many more fragment threads than vertex. Also note that like UBOs, the push constant space is shared across vertex and fragment. If you need more than 8 vec4 s, you can spill uniforms over to plain UBOs, but more than 8 vec4 s should be quite rare in practice. E.g.: layout(binding = 0, std140) uniform UBO { mat4 MVP; // Only used in vertex vec4 SpilledUniform; } global; layout(push_constant) uniform Push { vec4 SourceSize; vec4 BlurPassSize; // ... } registers;","title":"Push constants vs uniform blocks"},{"location":"development/shader/slang-shaders/#samplers","text":"Which samplers are used for textures are specified by the preset format. The sampler remains constant throughout the frame, there is currently no way to select samplers on a frame-by-frame basic. This is mostly to make it possible to use the spec in GLES2 as GLES2 has no concept of separate samplers and images.","title":"Samplers"},{"location":"development/shader/slang-shaders/#srgb","text":"The input to the filter chain will not be of an sRGB format. This is due to many reasons, the main one being that it is very difficult for the frontend to get \"free\" passthrough of sRGB. It is possible to have a first pass which linearizes the input to a proper sRGB render target. In this way, custom gammas can be used as well. Similarly, the final pass will not be an sRGB backbuffer for similar reasons.","title":"sRGB"},{"location":"development/shader/slang-shaders/#caveats","text":"","title":"Caveats"},{"location":"development/shader/slang-shaders/#frag-coord","text":"TexCoord also replaces gl_FragCoord . Do not use gl_FragCoord as it doesn't consider the viewports correctly. If you need gl_FragCoord use vTexCoord * OutputSize.xy instead.","title":"Frag Coord"},{"location":"development/shader/slang-shaders/#derivatives","text":"Be careful with derivatives of vTexCoord . The screen might have been rotated by the vertex shader, which will also rotate the derivatives, especially in the final pass which hits the backbuffer. However, derivatives are fortunately never really needed, since w = 1 (we render flat 2D quads), which means derivatives of varyings are constant. You can do some trivial replacements which will be faster and more robust. dFdx(vTexCoord) = vec2(OutputSize.z, 0.0); dFdy(vTexCoord) = vec2(0.0, OutputSize.w); fwidth(vTexCoord) = max(OutputSize.z, OutputSize.w); To avoid issues with rotation or unexpected derivatives in case derivatives are really needed, off-screen passes will not have rotation and dFdx and dFdy will behave as expected.","title":"Derivatives"},{"location":"development/shader/slang-shaders/#correctly-sampling-textures","text":"A common mistake made by shaders is that they aren't careful enough about sampling textures correctly. There are three major cases to consider: | Bilinear sampling | If bilinear is used, it is always safe to sample a texture. | | Nearest, with integer scale | If the OutputSize / InputSize is integer, the interpolated vTexCoord will always fall inside the texel safely, so no special precautions have to be used. For very particular shaders which rely on nearest neighbor sampling, using integer scale to a framebuffer and upscaling that with more stable upscaling filters like bicubic for example is usually a great choice. | Nearest, with non-integer scale | Sometimes, it is necessary to upscale images to the backbuffer which have an arbitrary size. Bilinear is not always good enough here, so we must deal with a complicated case. If we interpolate vTexCoord over a frame with non-integer scale, it is possible that we end up just between two texels. Nearest neighbor will have to find a texel which is nearest, but there is no clear \"nearest\" texel. In this scenario, we end up having lots of failure cases which are typically observed as weird glitches in the image which change based on the resolution. To correctly sample nearest textures with non-integer scale, we must pre-quantize our texture coordinates. Here's a snippet which lets us safely sample a nearest filtered texture and emulate bilinear filtering. vec2 uv = vTexCoord * global.SourceSize.xy - 0.5; // Shift by 0.5 since the texel sampling points are in the texel center. vec2 a = fract(uv); vec2 tex = (floor(uv) + 0.5) * global.SourceSize.zw; // Build a sampling point which is in the center of the texel. // Sample the bilinear footprint. vec4 t0 = textureLodOffset(Source, tex, 0.0, ivec2(0, 0)); vec4 t1 = textureLodOffset(Source, tex, 0.0, ivec2(1, 0)); vec4 t2 = textureLodOffset(Source, tex, 0.0, ivec2(0, 1)); vec4 t3 = textureLodOffset(Source, tex, 0.0, ivec2(1, 1)); // Bilinear filter. vec4 result = mix(mix(t0, t1, a.x), mix(t2, t3, a.x), a.y); The concept of splitting up the integer texel along with the fractional texel helps us safely do arbitrary non-integer scaling safely. The uv variable could also be passed pre-computed from vertex to avoid the extra computation in fragment.","title":"Correctly sampling textures"},{"location":"development/shader/slang-shaders/#preset-format-slangp","text":"The present format is essentially unchanged from the old .cgp and .glslp, except the new preset format is called .slangp.","title":"Preset format (.slangp)"},{"location":"development/shader/slang-shaders/#porting-guide-from-legacy-cg-spec","text":"","title":"Porting guide from legacy Cg spec"},{"location":"development/shader/slang-shaders/#common-functions","text":"mul(mat, vec) -> mat * vec lerp() -> mix() ddx() -> dFdx() ddy() -> dFdy() tex2D() -> texture() frac() -> fract()","title":"Common functions"},{"location":"development/shader/slang-shaders/#types","text":"floatN -> vecN boolN -> bvecN intN -> ivecN uintN -> uvecN float4x4 -> mat4","title":"Types"},{"location":"development/shader/slang-shaders/#builtin-uniforms-and-misc","text":"modelViewProj -> MVP IN.video_size -> SourceSize.xy IN.texture_size -> SourceSize.xy (no POT shenanigans, so they are the same) IN.output_size -> OutputSize.xy IN.frame_count -> FrameCount (uint instead of float) *.tex_coord -> TexCoord (no POT shenanigans, so they are all the same) *.lut_tex_coord -> TexCoord ORIG -> Original PASS# -> PassOutput# PASSPREV# -> No direct analog, PassOutput(CurrentPass - #), but prefer aliases","title":"Builtin uniforms and misc"},{"location":"development/shader/slang-shaders/#cg-semantics","text":"POSITION -> gl_Position float2 texcoord : TEXCOORD0 -> layout(location = 1) in vec2 TexCoord; float4 varying : TEXCOORD# -> layout(location = #) out vec4 varying; uniform float4x4 modelViewProj -> uniform UBO { mat4 MVP; }; Output structs should be flattened into separate varyings. E.g. instead of struct VertexData { float pos : POSITION; float4 tex0 : TEXCOORD0; float4 tex1 : TEXCOORD1; }; void main_vertex(out VertexData vout) { vout.pos = ...; vout.tex0 = ...; vout.tex1 = ...; } void main_fragment(in VertexData vout) { ... } do this #pragma stage vertex layout(location = 0) out vec4 tex0; layout(location = 1) out vec4 tex1; void main() { gl_Position = ...; tex0 = ...; tex1 = ...; } #pragma stage fragment layout(location = 0) in vec4 tex0; layout(location = 1) in vec4 tex1; void main() { } Instead of returning a float4 from main_fragment, have an output in fragment: layout(location = 0) out vec4 FragColor;","title":"Cg semantics"},{"location":"development/shader/xml-shaders/","text":"XML Shaders (Discontinued) \u00b6 Warning XML shaders have been discontinued and are no longer available in RetroArch. This page should be considered only for historical reference. History \u00b6 XML shaders were originally implemented in bSNES as single pass GLSL shaders. The extension is .shader and is marked up with XML. These shaders were written against the fixed-function pipeline and is now referred to as a legacy XML shaders by RetroArch. The prefix ofruby originates from bSNES\u2019 driver module, ruby::. Example legacy XML shader \u00b6 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!-- Blank shader --> <shader language=\"GLSL\"> <fragment><![CDATA[ uniform sampler2D rubyTexture; void main() { gl_FragColor = texture2D(rubyTexture, gl_TexCoord[0].xy); } ]]></fragment> </shader> RetroArch implemented this legacy shader spec to be compatible with many shaders written at the time. It is also referred to as v1.0 XML shaders. This specification was then extended to support multi-pass, scaling arguments, etc, which resulted in v1.1 XML shaders (spec here). It is still legacy as it uses fixed-function features. RetroArch implements v1.1 XML shaders, and some more features to be feature equivalent with the Cg shader implementation. bSNES did not implement v1.1 and adoption of this spec was slowed down. Modern XML shaders \u00b6 Legacy XML shaders used fixed function, and they would therefore never work with modern GL (GLES, GL3.x+). To fix this, RetroArch extended the XML shader spec. Fixed function cruft like gl_ModelViewProjectionMatrix, gl_MultiTexCoord0 and gl_Vertex was replaced with uniforms and attribute streams. The modern XML shader spec in RetroArch focuses on being compatible with GLES2 (and compatible with GL 3.x+ as well). The ruby prefix was later deprecated and you could use TexCoord, VertexCoord etc. For compatibility reasons, the ruby prefix is still accepted. Example modern shader \u00b6 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <shader language=\"GLSL\" style=\"GLES2\"> <vertex><![CDATA[ attribute vec2 rubyTexCoord; attribute vec2 rubyVertexCoord; uniform mat4 rubyMVPMatrix; varying vec2 tex_coord; void main() { gl_Position = rubyMVPMatrix * vec4(rubyVertexCoord, 0.0, 1.0); tex_coord = rubyTexCoord; } ]]></vertex> <fragment><![CDATA[ uniform sampler2D rubyTexture; varying vec2 tex_coord; void main() { gl_FragColor = texture2D(rubyTexture, tex_coord); } ]]></fragment> </shader> Moving off XML shaders \u00b6 XML shaders as a whole are deprecated in RetroArch, and will not be selectable in RGUI. You can still use them via video_shader config option. To use GLSL in RetroArch, the new GLSL shaders format is used, which mirrors the Cg shaders implementation quite well. The new GLSL shaders only support modern style, no fixed function. To convert XML shaders into straight GLSL, see GLSL shaders.","title":"XML Shader Development (discontinued)"},{"location":"development/shader/xml-shaders/#xml-shaders-discontinued","text":"Warning XML shaders have been discontinued and are no longer available in RetroArch. This page should be considered only for historical reference.","title":"XML Shaders (Discontinued)"},{"location":"development/shader/xml-shaders/#history","text":"XML shaders were originally implemented in bSNES as single pass GLSL shaders. The extension is .shader and is marked up with XML. These shaders were written against the fixed-function pipeline and is now referred to as a legacy XML shaders by RetroArch. The prefix ofruby originates from bSNES\u2019 driver module, ruby::.","title":"History"},{"location":"development/shader/xml-shaders/#example-legacy-xml-shader","text":"<?xml version=\"1.0\" encoding=\"UTF-8\"?> <!-- Blank shader --> <shader language=\"GLSL\"> <fragment><![CDATA[ uniform sampler2D rubyTexture; void main() { gl_FragColor = texture2D(rubyTexture, gl_TexCoord[0].xy); } ]]></fragment> </shader> RetroArch implemented this legacy shader spec to be compatible with many shaders written at the time. It is also referred to as v1.0 XML shaders. This specification was then extended to support multi-pass, scaling arguments, etc, which resulted in v1.1 XML shaders (spec here). It is still legacy as it uses fixed-function features. RetroArch implements v1.1 XML shaders, and some more features to be feature equivalent with the Cg shader implementation. bSNES did not implement v1.1 and adoption of this spec was slowed down.","title":"Example legacy XML shader"},{"location":"development/shader/xml-shaders/#modern-xml-shaders","text":"Legacy XML shaders used fixed function, and they would therefore never work with modern GL (GLES, GL3.x+). To fix this, RetroArch extended the XML shader spec. Fixed function cruft like gl_ModelViewProjectionMatrix, gl_MultiTexCoord0 and gl_Vertex was replaced with uniforms and attribute streams. The modern XML shader spec in RetroArch focuses on being compatible with GLES2 (and compatible with GL 3.x+ as well). The ruby prefix was later deprecated and you could use TexCoord, VertexCoord etc. For compatibility reasons, the ruby prefix is still accepted.","title":"Modern XML shaders"},{"location":"development/shader/xml-shaders/#example-modern-shader","text":"<?xml version=\"1.0\" encoding=\"UTF-8\"?> <shader language=\"GLSL\" style=\"GLES2\"> <vertex><![CDATA[ attribute vec2 rubyTexCoord; attribute vec2 rubyVertexCoord; uniform mat4 rubyMVPMatrix; varying vec2 tex_coord; void main() { gl_Position = rubyMVPMatrix * vec4(rubyVertexCoord, 0.0, 1.0); tex_coord = rubyTexCoord; } ]]></vertex> <fragment><![CDATA[ uniform sampler2D rubyTexture; varying vec2 tex_coord; void main() { gl_FragColor = texture2D(rubyTexture, tex_coord); } ]]></fragment> </shader>","title":"Example modern shader"},{"location":"development/shader/xml-shaders/#moving-off-xml-shaders","text":"XML shaders as a whole are deprecated in RetroArch, and will not be selectable in RGUI. You can still use them via video_shader config option. To use GLSL in RetroArch, the new GLSL shaders format is used, which mirrors the Cg shaders implementation quite well. The new GLSL shaders only support modern style, no fixed function. To convert XML shaders into straight GLSL, see GLSL shaders.","title":"Moving off XML shaders"},{"location":"guides/accessibility/","text":"Accessibility \u00b6 What is Accessibility \u00b6 Accessibility features allow people with disabilities to access various types of software. In the case of RetroArch, the accessibility feature allows blind users to navigate the menus of RetroArch using the OS Narrator. Combined with the AI Service's Speech and Narrator modes, this can open up a large number of video games to blind players that couldn't play them beforehand. Windows, MacOS, and Linux are the supported platforms. How to enable Accessibility \u00b6 While Accessibility has been available in RetroArch since v1.8.2, it is turned off by default. One can turn it on from the in-RetroArch menu in one of two ways. For the XMB theme (default before v1.8.5) by pressing: right, up seven times, enter (or x on Linux), and then right, or for the Ozone theme (default v1.8.5 and later) by pressing: left, down, right, up seven times, entery (x on linux), and then right. Otherwise, running the RetroArch executable with the --accessibility flag will override the configuration setting, and turn on accessibility. For blind users, the command is as follows: \"retroarch, space, two dashes, accessibility\" For a complete guide on using Retroarch with accessibility features, see This guide OS requirements \u00b6 RetroArch uses the OS narrator to speak out text. On Windows, this is the Microsoft Narrator, on MacOS, it is the \"say\" command, and on linux, it is the \"espeak\" command. If the narrator is not speaking any text, you can try installing the additional voice packs for your system language Windows voice install guide MacOS voice install guide On Ubuntu Linux, you can install espeak by running sudo apt-get install espeak in a terminal window, and sudo apt-get install espeak-data to install additional language voice packs. AI Service Text-to-Speech \u00b6 To use the AI Service with the Accessibility narrator, see the AI Service doc page .","title":"Quick Start"},{"location":"guides/accessibility/#accessibility","text":"","title":"Accessibility"},{"location":"guides/accessibility/#what-is-accessibility","text":"Accessibility features allow people with disabilities to access various types of software. In the case of RetroArch, the accessibility feature allows blind users to navigate the menus of RetroArch using the OS Narrator. Combined with the AI Service's Speech and Narrator modes, this can open up a large number of video games to blind players that couldn't play them beforehand. Windows, MacOS, and Linux are the supported platforms.","title":"What is Accessibility"},{"location":"guides/accessibility/#how-to-enable-accessibility","text":"While Accessibility has been available in RetroArch since v1.8.2, it is turned off by default. One can turn it on from the in-RetroArch menu in one of two ways. For the XMB theme (default before v1.8.5) by pressing: right, up seven times, enter (or x on Linux), and then right, or for the Ozone theme (default v1.8.5 and later) by pressing: left, down, right, up seven times, entery (x on linux), and then right. Otherwise, running the RetroArch executable with the --accessibility flag will override the configuration setting, and turn on accessibility. For blind users, the command is as follows: \"retroarch, space, two dashes, accessibility\" For a complete guide on using Retroarch with accessibility features, see This guide","title":"How to enable Accessibility"},{"location":"guides/accessibility/#os-requirements","text":"RetroArch uses the OS narrator to speak out text. On Windows, this is the Microsoft Narrator, on MacOS, it is the \"say\" command, and on linux, it is the \"espeak\" command. If the narrator is not speaking any text, you can try installing the additional voice packs for your system language Windows voice install guide MacOS voice install guide On Ubuntu Linux, you can install espeak by running sudo apt-get install espeak in a terminal window, and sudo apt-get install espeak-data to install additional language voice packs.","title":"OS requirements"},{"location":"guides/accessibility/#ai-service-text-to-speech","text":"To use the AI Service with the Accessibility narrator, see the AI Service doc page .","title":"AI Service Text-to-Speech"},{"location":"guides/ai-service/","text":"RetroArch AI Service \u00b6 What is the AI Service \u00b6 This feature allows users to play games written in a foreign language, or add text voice-overs automatically. This uses OCR (optical character recognition), machine translation, and text-to-speech. While these technologies can't provide the same level of accuracy as curated content, it can go quite far. Machine translation can give a good gist of what's being said, especially for some language pairs, and text-to-speech can be of great benefit for accessibility. How it works \u00b6 When a user presses the AI Service hotkey, RetroArch will grab the screen of the game being played and send it to the service endpoint listed in the configuration. When the service returns, RetroArch will then either write the translated image to the screen or say the text, depending on the configuration. The main supported service to use is the vgtranslate project: ( https://gitlab.com/spherebeaker/vgtranslate ). This project is a python server you can run locally (or on your network) and uses Google Cloud OCR, and Google Text-to-Speech APIs with the Google Cloud keys you provide. Other supported services are in the Alternative Services section. How to set it up \u00b6 First, go to Settings->Input->Hotkey Binds, and assign a key for the AI Service. Next, go to Settings->AI Service and modify the configuration options as follows. If AI Service Output is Image Mode , then when you press the AI Service hotkey, RetroArch will grab the game screen and display translated textbox over the screen when it's available, and pressing the hotkey again will clear the translated textbox. If AI Service Pause Toggle is ON then it will pause while doing so, and pressing the AI Service hotkey again will unpause the game and continue as normal. This mode is recommended when you want the text on the screen to be translated and written back on the screen where it was found. When AI Service Output is Speech Mode , then RetroArch speak the text on the screen instead, and will use an AI text-to-speech algorithm. This speech however will only play while the core is unpaused (for technical reasons). However, if in Narrator Mode the AI Service will use the OS's narrator, which will speak the text even while unpaused (assuming that accessibility is enabled). However, Narrator Mode is only supported on Windows, Linux, and Macos. The AI Service URL points to where the translation service you're using is located. In the case of running vgtranslate yourself, this URL would be http://localhost:4404 . For more instructions on how to set up vgtranslate on your system, see ( https://gitlab.com/spherebeaker/vgtranslate/blob/master/README.md ). If you have issues running vgtranslate, or don't want to run the service yourself, see the \"Alternative Services\" section. AI Service Enabled should be set to on. If Source Language is set to Don't care , then the service will attempt to auto-detect the language on the screen. Setting it to a specific language will increase accuracy, and restrict translation to only text in the source language specified. Finally, Target Language is the language to translate into. If set to Don't care then it will translate into English. See the vgtranslate docs for more information. Supported Cores \u00b6 Since RetroArch v1.8.0, all cores should now be supported if your build has menu widgets. If not, then only software cores will be supported. Alternative Services \u00b6 If you have issues setting up the vgtranslate service, or don't want to run a local service yourself, you can use a service someone else has set up. One example is the ZTranslate service ( https://ztranslate.net/docs/service ). In this case, you can use the following url for AI Service URL : http://ztranslate.net/service?api_key=<YOUR_ZTRANSLATE_API_KEY> This requires registering an account with ztranslate.net to get an API key. Due to uploading of the screen cap to the server, latency will likely be a bit higher than using a vgtranslate service running locally. See the ztranslate docs for more information. Alternative Translators \u00b6 There are some other options for translating game screens that don't require a special build of RetroArch and should work with hardware buffer cores. Here are some: ZTranslate \u00b6 ZTranslate uses a standalone client app for Windows or Linux that grabs the screen of the window currently in focus and displays a translated version in the ZTranslate client window. Besides automatic translation (which needs a ztranslate.net api key), it also supports package-based translations, which is like a translation patch for a rom, but for game screens instead. For more information see https://ztranslate.net/docs RetroArch-AI-with-IoTEdge \u00b6 RetroArch-AI-with-IoTEdge uses IoTEdge and Azure Cognitive Services Containers (requires microsoft Azure account) to translate RetroArch screenshots and display them on a Lakka device. For more information see https://github.com/toolboc/RetroArch-AI-with-IoTEdge/blob/master/README.md","title":"AI Service"},{"location":"guides/ai-service/#retroarch-ai-service","text":"","title":"RetroArch AI Service"},{"location":"guides/ai-service/#what-is-the-ai-service","text":"This feature allows users to play games written in a foreign language, or add text voice-overs automatically. This uses OCR (optical character recognition), machine translation, and text-to-speech. While these technologies can't provide the same level of accuracy as curated content, it can go quite far. Machine translation can give a good gist of what's being said, especially for some language pairs, and text-to-speech can be of great benefit for accessibility.","title":"What is the AI Service"},{"location":"guides/ai-service/#how-it-works","text":"When a user presses the AI Service hotkey, RetroArch will grab the screen of the game being played and send it to the service endpoint listed in the configuration. When the service returns, RetroArch will then either write the translated image to the screen or say the text, depending on the configuration. The main supported service to use is the vgtranslate project: ( https://gitlab.com/spherebeaker/vgtranslate ). This project is a python server you can run locally (or on your network) and uses Google Cloud OCR, and Google Text-to-Speech APIs with the Google Cloud keys you provide. Other supported services are in the Alternative Services section.","title":"How it works"},{"location":"guides/ai-service/#how-to-set-it-up","text":"First, go to Settings->Input->Hotkey Binds, and assign a key for the AI Service. Next, go to Settings->AI Service and modify the configuration options as follows. If AI Service Output is Image Mode , then when you press the AI Service hotkey, RetroArch will grab the game screen and display translated textbox over the screen when it's available, and pressing the hotkey again will clear the translated textbox. If AI Service Pause Toggle is ON then it will pause while doing so, and pressing the AI Service hotkey again will unpause the game and continue as normal. This mode is recommended when you want the text on the screen to be translated and written back on the screen where it was found. When AI Service Output is Speech Mode , then RetroArch speak the text on the screen instead, and will use an AI text-to-speech algorithm. This speech however will only play while the core is unpaused (for technical reasons). However, if in Narrator Mode the AI Service will use the OS's narrator, which will speak the text even while unpaused (assuming that accessibility is enabled). However, Narrator Mode is only supported on Windows, Linux, and Macos. The AI Service URL points to where the translation service you're using is located. In the case of running vgtranslate yourself, this URL would be http://localhost:4404 . For more instructions on how to set up vgtranslate on your system, see ( https://gitlab.com/spherebeaker/vgtranslate/blob/master/README.md ). If you have issues running vgtranslate, or don't want to run the service yourself, see the \"Alternative Services\" section. AI Service Enabled should be set to on. If Source Language is set to Don't care , then the service will attempt to auto-detect the language on the screen. Setting it to a specific language will increase accuracy, and restrict translation to only text in the source language specified. Finally, Target Language is the language to translate into. If set to Don't care then it will translate into English. See the vgtranslate docs for more information.","title":"How to set it up"},{"location":"guides/ai-service/#supported-cores","text":"Since RetroArch v1.8.0, all cores should now be supported if your build has menu widgets. If not, then only software cores will be supported.","title":"Supported Cores"},{"location":"guides/ai-service/#alternative-services","text":"If you have issues setting up the vgtranslate service, or don't want to run a local service yourself, you can use a service someone else has set up. One example is the ZTranslate service ( https://ztranslate.net/docs/service ). In this case, you can use the following url for AI Service URL : http://ztranslate.net/service?api_key=<YOUR_ZTRANSLATE_API_KEY> This requires registering an account with ztranslate.net to get an API key. Due to uploading of the screen cap to the server, latency will likely be a bit higher than using a vgtranslate service running locally. See the ztranslate docs for more information.","title":"Alternative Services"},{"location":"guides/ai-service/#alternative-translators","text":"There are some other options for translating game screens that don't require a special build of RetroArch and should work with hardware buffer cores. Here are some:","title":"Alternative Translators"},{"location":"guides/ai-service/#ztranslate","text":"ZTranslate uses a standalone client app for Windows or Linux that grabs the screen of the window currently in focus and displays a translated version in the ZTranslate client window. Besides automatic translation (which needs a ztranslate.net api key), it also supports package-based translations, which is like a translation patch for a rom, but for game screens instead. For more information see https://ztranslate.net/docs","title":"ZTranslate"},{"location":"guides/ai-service/#retroarch-ai-with-iotedge","text":"RetroArch-AI-with-IoTEdge uses IoTEdge and Azure Cognitive Services Containers (requires microsoft Azure account) to translate RetroArch screenshots and display them on a Lakka device. For more information see https://github.com/toolboc/RetroArch-AI-with-IoTEdge/blob/master/README.md","title":"RetroArch-AI-with-IoTEdge"},{"location":"guides/arcade-getting-started/","text":"Getting started with arcade emulation \u00b6 Arcade emulation requires a different planning approach than console emulation. Arcade emulator terminology can also differ from the terms used in other kinds of emulation. Process \u00b6 Choose an arcade emulator to match your system Use the correct version romsets for that emulator The libretro core ecosystem includes a variety of arcade emulators, each with specific strengths and each requiring its own distinct version of arcade \"romsets\" which the emulator supports. Every arcade emulator core is optimized for different hardware and different games. This guide is intended to help you decide which core to use and find out what romset version is required for that emulator. Step 1: Choose an arcade emulator to match your system \u00b6 There are two families of multi-system arcade emulators available as libretro cores: FinalBurn and MAME. These emulators are in turn available in multiple versions to allow users to best match a core to their system. There are two principle criteria which affect arcade emulator core choice: Frontend integration Processor performance requirements versus supported game library Frontend integration \u00b6 Among the libretro arcade cores, FinalBurn Neo and MAME 2003-Plus have the closest integration with the libretro frontend API. In practice, this means that more functionality is accessible through libretro frontends like RetroArch in areas like configuration, control mapping, fast forward and rewind, screenshots, etc. . Processor performance requirements versus supported game library \u00b6 As the years have passed, emulators have become able to recreate arcade games with more and more accuracy to the original system. Arcade emulators have also added support for emulating more games over time. Particularly with MAME cores, increasing emulation accuracy requires increasing amounts of processing power, meaning that cores based on more recent emulators require greater processor power than cores based on older versions. Ultra low-power devices \u00b6 For purposes of this guide, ultra low-power devices are those such as the Raspberry Pi 0 as well as older smartphones and tablets. Recommended MAME Emulator Recommended FinalBurn Emulator Primary recommendation MAME 2000 FB Alpha 2012 Secondary recommendation MAME 2003-Plus FinalBurn Neo Note Secondary recommendations do not run at full speed on all systems in this category, but may allow the user to play games which are not available via the primary recommendation. Low-power devices \u00b6 For purposes of this guide, low power devices include: Single board computers like the Raspberry Pi2 and Raspberry Pi3, Odroid-XU\u00be, and Amlogic S905 boxes Consoles like the original XBox, the PlayStation 3, Wii, WiiU, and Switch Modern smartphones and tablets Desktop and laptop computers with processors from the Pentium 4/Athlon XP generation to the Sandy Bridge/K10 generation. Recommended MAME Emulator Recommended FinalBurn Emulator Primary recommendation MAME 2003-Plus FinalBurn Neo Secondary recommendation MAME 2010, MAME 2016 N/A Note Secondary recommendations do not run at full speed on all systems in this category, but may allow the user to play games which are not available via the primary recommendation. Full-power devices \u00b6 Users with modern desktop and laptop processors, and other full power systems, have the greatest flexibility in terms of which arcade emulator cores to use. Step 2: Use the correct version romsets for that emulator \u00b6 For best results, start with a full ROM collection with a version that matches the emulator you're using. In general, you will only get good results with a full collection of arcade romsets for your chosen emulator. Starting with individual arcade romset zip files is unlikely to work because individual romsets are often not tagged with what MAME version they are built for. Also, individual romset zip files may not include BIOS ROMs, \"Parent\" romsets, necessary audio sample files, etc. Tip Full Non-Merged romsets are widely available for all of the \"historic\" MAME cores. Full Non-Merged romsets are the simplest romset format to get started with because each romset zip contains all necessary files for one game. Emulator Required ROM Version ClrMamePro dat file FB Neo FBNeo (latest version) here FB Alpha 2012 FBA 0.2.97.24 N/A MAME 2000 MAME 0.37b5 N/A MAME 2003 MAME 0.78 N/A MAME 2003-Plus MAME 2003-Plus (latest version) N/A MAME 2010 MAME 0.139 N/A MAME 2015 MAME 0.160 N/A MAME 2016 MAME 0.174 N/A MAME (latest version) MAME (latest version) N/A Warning: Keep arcade romsets zipped Unlike emulating some other systems, arcade romsets should remained zipped when used. If you extract arcade romsets, they won't work. Arcade ROM terminology \u00b6 ROM, ROM set, and romset : Arcade games are packaged as zip files, most of which are composed of more than one individual 'ROM' file. That is why some resources refer to an individual arcade game as a ROM (like people use to describe a zipped game cartridge ROM) while other resources refer to an individual game as a ROM set or romset. ROM version or romset version : Each version of an arcade emulator must be used with ROMs that have the same exact version number. For example, MAME 0.37b5 ROMs are required by the MAME 2000 emulator, but will not work correctly with the MAME 2010 emulator, which requires MAME 0.139 ROMs. Sample : Some games require an additional zip file with recorded sounds or music in order for audio to work correctly. The path where these samples should be copied varies from emulator to emulator. CHD : Some MAME games require data from an internal hard drive, CD-ROM, laserdisk, or other media in order to be emulated -- those forms of media are packaged as CHD files. CHD files should be copied to subfolders within the folder where the MAME ROM zips have been installed. In addition to having a version number, arcade ROMs can be formatted four ways: Full Non-merged : All romsets can be used standalone because each zip contains all the files needed to run that game, including any ROMs from 'parent' ROM sets and BIOS sets. !!! ClrMamePro users To rebuild Full Non-Merged romsets, use Non-Merged mode and deselect Separate BIOS sets via the Advanced button in the Rebuild and Scanner menus. ClrMamePro may display BIOS sets as missing in scans with these settings, but that is because all of the BIOS files will be distributed directly to the game romsets that need them. Non-merged ROM : All romsets can be used standalone because each zip contains all the files needed to run that game, including any files from 'parent romsets'. The only exceptions are games which use BIOS ROMs, which are formatted as 'Split' and must be kept in the same folder as the game romset which uses it. Split : Some romsets that are considered clones, translations, or bootlegs also require a \"parent\" romset to run. In some cases the parent is not the most popular or best working version of the game, however. For example, in a Split set pacman.zip (a clone), will not work without puckman.zip (its parent). Merged : Clones are merged into the parent romset zip, meaning that more than one game is stored per file. Merged romsets are not supported by libretro cores. RetroArch Playlist Scanner Support \u00b6 The RetroArch content database supports arcade romsets in Full Non-Merged and Split formats. In order to be recognized by the scanner, Full Non-Merged and Split romsets must also be processed by TorrentZip to standardize their CRC . Credits The arcade cabinets image is based on an image by Rob DiCaterino, licensed for reuse under a Creative Commons (CC BY 2.0) License. Original image and license: https://www.flickr.com/photos/goodrob13/17385639015/","title":"Getting Started with Arcade Emulation"},{"location":"guides/arcade-getting-started/#getting-started-with-arcade-emulation","text":"Arcade emulation requires a different planning approach than console emulation. Arcade emulator terminology can also differ from the terms used in other kinds of emulation.","title":"Getting started with arcade emulation"},{"location":"guides/arcade-getting-started/#process","text":"Choose an arcade emulator to match your system Use the correct version romsets for that emulator The libretro core ecosystem includes a variety of arcade emulators, each with specific strengths and each requiring its own distinct version of arcade \"romsets\" which the emulator supports. Every arcade emulator core is optimized for different hardware and different games. This guide is intended to help you decide which core to use and find out what romset version is required for that emulator.","title":"Process"},{"location":"guides/arcade-getting-started/#step-1-choose-an-arcade-emulator-to-match-your-system","text":"There are two families of multi-system arcade emulators available as libretro cores: FinalBurn and MAME. These emulators are in turn available in multiple versions to allow users to best match a core to their system. There are two principle criteria which affect arcade emulator core choice: Frontend integration Processor performance requirements versus supported game library","title":"Step 1: Choose an arcade emulator to match your system"},{"location":"guides/arcade-getting-started/#frontend-integration","text":"Among the libretro arcade cores, FinalBurn Neo and MAME 2003-Plus have the closest integration with the libretro frontend API. In practice, this means that more functionality is accessible through libretro frontends like RetroArch in areas like configuration, control mapping, fast forward and rewind, screenshots, etc. .","title":"Frontend integration"},{"location":"guides/arcade-getting-started/#processor-performance-requirements-versus-supported-game-library","text":"As the years have passed, emulators have become able to recreate arcade games with more and more accuracy to the original system. Arcade emulators have also added support for emulating more games over time. Particularly with MAME cores, increasing emulation accuracy requires increasing amounts of processing power, meaning that cores based on more recent emulators require greater processor power than cores based on older versions.","title":"Processor performance requirements versus supported game library"},{"location":"guides/arcade-getting-started/#ultra-low-power-devices","text":"For purposes of this guide, ultra low-power devices are those such as the Raspberry Pi 0 as well as older smartphones and tablets. Recommended MAME Emulator Recommended FinalBurn Emulator Primary recommendation MAME 2000 FB Alpha 2012 Secondary recommendation MAME 2003-Plus FinalBurn Neo Note Secondary recommendations do not run at full speed on all systems in this category, but may allow the user to play games which are not available via the primary recommendation.","title":"Ultra low-power devices"},{"location":"guides/arcade-getting-started/#low-power-devices","text":"For purposes of this guide, low power devices include: Single board computers like the Raspberry Pi2 and Raspberry Pi3, Odroid-XU\u00be, and Amlogic S905 boxes Consoles like the original XBox, the PlayStation 3, Wii, WiiU, and Switch Modern smartphones and tablets Desktop and laptop computers with processors from the Pentium 4/Athlon XP generation to the Sandy Bridge/K10 generation. Recommended MAME Emulator Recommended FinalBurn Emulator Primary recommendation MAME 2003-Plus FinalBurn Neo Secondary recommendation MAME 2010, MAME 2016 N/A Note Secondary recommendations do not run at full speed on all systems in this category, but may allow the user to play games which are not available via the primary recommendation.","title":"Low-power devices"},{"location":"guides/arcade-getting-started/#full-power-devices","text":"Users with modern desktop and laptop processors, and other full power systems, have the greatest flexibility in terms of which arcade emulator cores to use.","title":"Full-power devices"},{"location":"guides/arcade-getting-started/#step-2-use-the-correct-version-romsets-for-that-emulator","text":"For best results, start with a full ROM collection with a version that matches the emulator you're using. In general, you will only get good results with a full collection of arcade romsets for your chosen emulator. Starting with individual arcade romset zip files is unlikely to work because individual romsets are often not tagged with what MAME version they are built for. Also, individual romset zip files may not include BIOS ROMs, \"Parent\" romsets, necessary audio sample files, etc. Tip Full Non-Merged romsets are widely available for all of the \"historic\" MAME cores. Full Non-Merged romsets are the simplest romset format to get started with because each romset zip contains all necessary files for one game. Emulator Required ROM Version ClrMamePro dat file FB Neo FBNeo (latest version) here FB Alpha 2012 FBA 0.2.97.24 N/A MAME 2000 MAME 0.37b5 N/A MAME 2003 MAME 0.78 N/A MAME 2003-Plus MAME 2003-Plus (latest version) N/A MAME 2010 MAME 0.139 N/A MAME 2015 MAME 0.160 N/A MAME 2016 MAME 0.174 N/A MAME (latest version) MAME (latest version) N/A Warning: Keep arcade romsets zipped Unlike emulating some other systems, arcade romsets should remained zipped when used. If you extract arcade romsets, they won't work.","title":"Step 2: Use the correct version romsets for that emulator"},{"location":"guides/arcade-getting-started/#arcade-rom-terminology","text":"ROM, ROM set, and romset : Arcade games are packaged as zip files, most of which are composed of more than one individual 'ROM' file. That is why some resources refer to an individual arcade game as a ROM (like people use to describe a zipped game cartridge ROM) while other resources refer to an individual game as a ROM set or romset. ROM version or romset version : Each version of an arcade emulator must be used with ROMs that have the same exact version number. For example, MAME 0.37b5 ROMs are required by the MAME 2000 emulator, but will not work correctly with the MAME 2010 emulator, which requires MAME 0.139 ROMs. Sample : Some games require an additional zip file with recorded sounds or music in order for audio to work correctly. The path where these samples should be copied varies from emulator to emulator. CHD : Some MAME games require data from an internal hard drive, CD-ROM, laserdisk, or other media in order to be emulated -- those forms of media are packaged as CHD files. CHD files should be copied to subfolders within the folder where the MAME ROM zips have been installed. In addition to having a version number, arcade ROMs can be formatted four ways: Full Non-merged : All romsets can be used standalone because each zip contains all the files needed to run that game, including any ROMs from 'parent' ROM sets and BIOS sets. !!! ClrMamePro users To rebuild Full Non-Merged romsets, use Non-Merged mode and deselect Separate BIOS sets via the Advanced button in the Rebuild and Scanner menus. ClrMamePro may display BIOS sets as missing in scans with these settings, but that is because all of the BIOS files will be distributed directly to the game romsets that need them. Non-merged ROM : All romsets can be used standalone because each zip contains all the files needed to run that game, including any files from 'parent romsets'. The only exceptions are games which use BIOS ROMs, which are formatted as 'Split' and must be kept in the same folder as the game romset which uses it. Split : Some romsets that are considered clones, translations, or bootlegs also require a \"parent\" romset to run. In some cases the parent is not the most popular or best working version of the game, however. For example, in a Split set pacman.zip (a clone), will not work without puckman.zip (its parent). Merged : Clones are merged into the parent romset zip, meaning that more than one game is stored per file. Merged romsets are not supported by libretro cores.","title":"Arcade ROM terminology"},{"location":"guides/arcade-getting-started/#retroarch-playlist-scanner-support","text":"The RetroArch content database supports arcade romsets in Full Non-Merged and Split formats. In order to be recognized by the scanner, Full Non-Merged and Split romsets must also be processed by TorrentZip to standardize their CRC . Credits The arcade cabinets image is based on an image by Rob DiCaterino, licensed for reuse under a Creative Commons (CC BY 2.0) License. Original image and license: https://www.flickr.com/photos/goodrob13/17385639015/","title":"RetroArch Playlist Scanner Support"},{"location":"guides/build-ios/","text":"iOS/tvOS Installation Guide \u00b6 The following is a non-developer guide to install RetroArch on non-jailbroken iOS devices. We're going to try to improve the process and possibly include the iOS cores in a download, but until then, here is a way to build RetroArch to get it running on your iPhone, iPad, or Apple TV. Note You can find latest built in here Building From Source using Xcode \u00b6 This is probably the most straightforward way to install RetroArch without having to resort to 3 rd party tools. It does however require: a Mac capable of running the latest Xcode Xcode an Apple ID Get Xcode \u00b6 Download Xcode from the Mac App Store. Clone the RetroArch repository \u00b6 Open Terminal (it's in Applications/Utilities) and run the following command: git clone https://github.com/libretro/RetroArch.git Download the Emulator Cores \u00b6 Emulator cores are needed to use RetroArch as they contain the code that drives the emulation of the system of the game you want to play. Normally you'd compile the cores, but since you're not a developer, I'll provide a link to my personal set of precompiled cores for iOS: Download Cores from Mega.nz Extract the Cores \u00b6 Unzip the above archive of cores into the following directory in the RetroArch project: pkg/apple/iOS/modules . The core files should have the extension of .dylib . Open RetroArch in Xcode \u00b6 Open the Xcode project located at pkg/apple/iOS/RetroArch_iOS11.xcodeproj Sign in with your Apple ID \u00b6 Open Xcode Preferences (Xcode -> Preferences) Click the \"Accounts\" tab Hit the \"+\" at the bottom left and choose \"Apple ID\" and sign in with your Apple ID Once you\u2019ve successfully logged in, a new \"Personal Team\" with the role \"Free\" will appear beneath your Apple ID. Xcode Project Setup \u00b6 You'll need to assign the Developer credentials you just created above to the RetroArch project before you can run it on your device. Click on the project name, select the target you're interested in (RetroArchiOS11 for iOS, RetroArch TV) and change the \"Team\" to the role you created above. Then choose your run target (RetroArch iOS Release for iOS, RetroArch tvOS for AppleTV) and build and run: Using RetroArch \u00b6 On the iPhone and iPad, you'll be presented with a touch interface. If you have an mFi controller, you can control the interface that way as well. On the Apple TV, you'll be shown the \"XMB\" (PS3-like) interface. You need to use an mFi controller with an Apple TV. The Siri Remote is not supported yet. When you first start RetroArch, you'll notice that you're missing images. You'll want to run the Online Updater: From the main menu, choose \"Online Updater\" Choose: Update Core Info Files Update Assets Update Databases Update Overlays Update GLSL Shaders Do not choose \"Core Updater\"! That will not work on iOS. Changing the Menu Interface \u00b6 If you want more visual flair in the interface, you can change it by going to \"Settings\" -> \"Driver\" -> \"Menu Driver\". You might need to restart to see it take effect. Transferring ROMs \u00b6 iOS \u00b6 Use a 3 rd party utility like iFunBox or iExplorer to transfer ROM files to the RetroArch app directory. Apple TV \u00b6 When you start RetroArch, you'll be presented with a screen with a web address that you can access on your computer to transfer files to the RetroArch app directory on your Apple TV.","title":"iOS/tvOS Build"},{"location":"guides/build-ios/#iostvos-installation-guide","text":"The following is a non-developer guide to install RetroArch on non-jailbroken iOS devices. We're going to try to improve the process and possibly include the iOS cores in a download, but until then, here is a way to build RetroArch to get it running on your iPhone, iPad, or Apple TV. Note You can find latest built in here","title":"iOS/tvOS Installation Guide"},{"location":"guides/build-ios/#building-from-source-using-xcode","text":"This is probably the most straightforward way to install RetroArch without having to resort to 3 rd party tools. It does however require: a Mac capable of running the latest Xcode Xcode an Apple ID","title":"Building From Source using Xcode"},{"location":"guides/build-ios/#get-xcode","text":"Download Xcode from the Mac App Store.","title":"Get Xcode"},{"location":"guides/build-ios/#clone-the-retroarch-repository","text":"Open Terminal (it's in Applications/Utilities) and run the following command: git clone https://github.com/libretro/RetroArch.git","title":"Clone the RetroArch repository"},{"location":"guides/build-ios/#download-the-emulator-cores","text":"Emulator cores are needed to use RetroArch as they contain the code that drives the emulation of the system of the game you want to play. Normally you'd compile the cores, but since you're not a developer, I'll provide a link to my personal set of precompiled cores for iOS: Download Cores from Mega.nz","title":"Download the Emulator Cores"},{"location":"guides/build-ios/#extract-the-cores","text":"Unzip the above archive of cores into the following directory in the RetroArch project: pkg/apple/iOS/modules . The core files should have the extension of .dylib .","title":"Extract the Cores"},{"location":"guides/build-ios/#open-retroarch-in-xcode","text":"Open the Xcode project located at pkg/apple/iOS/RetroArch_iOS11.xcodeproj","title":"Open RetroArch in Xcode"},{"location":"guides/build-ios/#sign-in-with-your-apple-id","text":"Open Xcode Preferences (Xcode -> Preferences) Click the \"Accounts\" tab Hit the \"+\" at the bottom left and choose \"Apple ID\" and sign in with your Apple ID Once you\u2019ve successfully logged in, a new \"Personal Team\" with the role \"Free\" will appear beneath your Apple ID.","title":"Sign in with your Apple ID"},{"location":"guides/build-ios/#xcode-project-setup","text":"You'll need to assign the Developer credentials you just created above to the RetroArch project before you can run it on your device. Click on the project name, select the target you're interested in (RetroArchiOS11 for iOS, RetroArch TV) and change the \"Team\" to the role you created above. Then choose your run target (RetroArch iOS Release for iOS, RetroArch tvOS for AppleTV) and build and run:","title":"Xcode Project Setup"},{"location":"guides/build-ios/#using-retroarch","text":"On the iPhone and iPad, you'll be presented with a touch interface. If you have an mFi controller, you can control the interface that way as well. On the Apple TV, you'll be shown the \"XMB\" (PS3-like) interface. You need to use an mFi controller with an Apple TV. The Siri Remote is not supported yet. When you first start RetroArch, you'll notice that you're missing images. You'll want to run the Online Updater: From the main menu, choose \"Online Updater\" Choose: Update Core Info Files Update Assets Update Databases Update Overlays Update GLSL Shaders Do not choose \"Core Updater\"! That will not work on iOS.","title":"Using RetroArch"},{"location":"guides/build-ios/#changing-the-menu-interface","text":"If you want more visual flair in the interface, you can change it by going to \"Settings\" -> \"Driver\" -> \"Menu Driver\". You might need to restart to see it take effect.","title":"Changing the Menu Interface"},{"location":"guides/build-ios/#transferring-roms","text":"","title":"Transferring ROMs"},{"location":"guides/build-ios/#ios","text":"Use a 3 rd party utility like iFunBox or iExplorer to transfer ROM files to the RetroArch app directory.","title":"iOS"},{"location":"guides/build-ios/#apple-tv","text":"When you start RetroArch, you'll be presented with a screen with a web address that you can access on your computer to transfer files to the RetroArch app directory on your Apple TV.","title":"Apple TV"},{"location":"guides/change-directories/","text":"Directory configuration \u00b6 Next step you might want to consider is setting directories for RetroArch, this can help get the best experience possible. Although the defaults will suit most users, if you want to configure custom BIOS's or change the save location, you will have to change directories. From the RetroArch settings: \u00b6 Navigate to Settings Navigate to Directories Select the directory you want to changed Navigate to the desired location using the file browser From a text editor: \u00b6 Close RetroArch Find your retroarch config folder Tip If you are having trouble locating your retroarch config folder, check back in the Directories setting, take a mental note of what appears on the Config directory, this should lead you to a retroarch folder. If all hope is lost do a system-wide search for retroarch.cfg Open retroarch.cfg After the = sign, make changes then save. Paths to consider changing: \u00b6 Cores \u00b6 This is the location for all your cores. To install them using the user interface , this setting needs to point to a writeable directory. Note The Ubuntu PPA does not point this to a user-writable directory because cores are modified by the package manager. If you want to change it manually, you might want to change this directory from \"retroarch.cfg\" with a text editor since the RetroArch file browser doesn't show hidden folders by default. libretro_directory = is what you need to change in the config file. Some distributions use ~/.config/retroarch/cores/ System/BIOS \u00b6 This is where you specify the location for all your BIOS's, by default RetroArch looks for BIOS in your \"Starting directory\" folder. It is not suggested that you dump all BIOS files in the \"Starting directory\". Note Some emulators (Example: PS1 and PSP) will require BIOS files to even function. It is suggested that this be changed to a folder named \"system\" under your retroarch config folder. If you can't be bothered to try and find this config folder (since it varies from OS), and you want to skip having to use a text editor, choose another location that the BIOS files will be. Note You might want to change this directory from \"retroarch.cfg\" with a text editor since the RetroArch file browser doesn't show hidden folders by default. system_directory = is what you need to change in the config file. File Browser \u00b6 Another one you'll want to consider changing. This will be the starting directory when you select \"Load Content\" and it can be very handy to have this set to your ROM folder. Although this probably isn't needed since RetroArch has an import feature, it doesn't hurt to have this set anyway. Savefile and Savestate \u00b6 Last one you should consider changing are the save locations, by default it will place them in the same folder as your ROMS. If you care about organisation you should change these to another folder.","title":"Directory Configuration"},{"location":"guides/change-directories/#directory-configuration","text":"Next step you might want to consider is setting directories for RetroArch, this can help get the best experience possible. Although the defaults will suit most users, if you want to configure custom BIOS's or change the save location, you will have to change directories.","title":"Directory configuration"},{"location":"guides/change-directories/#from-the-retroarch-settings","text":"Navigate to Settings Navigate to Directories Select the directory you want to changed Navigate to the desired location using the file browser","title":"From the RetroArch settings:"},{"location":"guides/change-directories/#from-a-text-editor","text":"Close RetroArch Find your retroarch config folder Tip If you are having trouble locating your retroarch config folder, check back in the Directories setting, take a mental note of what appears on the Config directory, this should lead you to a retroarch folder. If all hope is lost do a system-wide search for retroarch.cfg Open retroarch.cfg After the = sign, make changes then save.","title":"From a text editor:"},{"location":"guides/change-directories/#paths-to-consider-changing","text":"","title":"Paths to consider changing:"},{"location":"guides/change-directories/#cores","text":"This is the location for all your cores. To install them using the user interface , this setting needs to point to a writeable directory. Note The Ubuntu PPA does not point this to a user-writable directory because cores are modified by the package manager. If you want to change it manually, you might want to change this directory from \"retroarch.cfg\" with a text editor since the RetroArch file browser doesn't show hidden folders by default. libretro_directory = is what you need to change in the config file. Some distributions use ~/.config/retroarch/cores/","title":"Cores"},{"location":"guides/change-directories/#systembios","text":"This is where you specify the location for all your BIOS's, by default RetroArch looks for BIOS in your \"Starting directory\" folder. It is not suggested that you dump all BIOS files in the \"Starting directory\". Note Some emulators (Example: PS1 and PSP) will require BIOS files to even function. It is suggested that this be changed to a folder named \"system\" under your retroarch config folder. If you can't be bothered to try and find this config folder (since it varies from OS), and you want to skip having to use a text editor, choose another location that the BIOS files will be. Note You might want to change this directory from \"retroarch.cfg\" with a text editor since the RetroArch file browser doesn't show hidden folders by default. system_directory = is what you need to change in the config file.","title":"System/BIOS"},{"location":"guides/change-directories/#file-browser","text":"Another one you'll want to consider changing. This will be the starting directory when you select \"Load Content\" and it can be very handy to have this set to your ROM folder. Although this probably isn't needed since RetroArch has an import feature, it doesn't hurt to have this set anyway.","title":"File Browser"},{"location":"guides/change-directories/#savefile-and-savestate","text":"Last one you should consider changing are the save locations, by default it will place them in the same folder as your ROMS. If you care about organisation you should change these to another folder.","title":"Savefile and Savestate"},{"location":"guides/cheat-codes/","text":"RetroArch cheat and rumble codes \u00b6 RetroArch uses two methods of applying cheat codes: Emulator Handled are codes that are sent to the emulator/core and it is up to the emulator/core to apply them. RetroArch Handled are codes that RetroArch itself handles by directly scanning/manipulating the emulator/core memory area. Adding a new cheat code \u00b6 If you have a code that doesn't exist in the cheat database that you want to add manually, perform the following steps: Load the game in question and open the \"Cheats\" menu from the Quick Menu. Select either \"Add New Code to Top\" or \"Add New Code to Bottom\". Navigate to the newly added cheat code line and press enter to bring up the cheat code details. Select the \"Code\" menu item and press enter. A popup text-entry screen will appear. Type in your new code and press enter. Optionally perform the same steps for the \"Description\" menu item to edit the description. Ensure the \"Enabled\" field is set to on. Navigate back one level to the cheats menu and select \"Apply Changes\". RetroArch new cheat code searching \u00b6 RetroArch now has the ability to search for and create new cheat codes. The following is an overview for finding new cheats: Start game Go to Quick Menu -> Cheats -> Start or Continue Cheat Search Use left/right on \"Start or Restart Cheat Search\" to select a bit-size appropriate to the console you are using and the value your are searching. For example, if you are playing Castlevania:SOTN on the PS1 and you want to search for the health value, then that's a value that can be greater than 255 (0xFF), but it's unlikely that the game developers anticipated a value larger than 65535 (0xFFFF) so set the search to 16-bit. An alternate example - if you are playing Space Invaders on Atari 2600 and you want to search for the number of lives, then that's a value that could possibly be stored in just 2-bits of data (max number of lives = 3) and since the Atari 2600 only has a very small memory space, it's entirely possible that the memory location for the number of lives is only partially stored in a single byte while the rest of that same byte may store other important data that should not be touched. Set the size to 2-bit. Select \"Start or Restart Cheat Search\" once you have selected the bit size Go back to the game and lose a life Go back to the quick menu and select \"Search Memory For Values ... Less Than Before\" because when you started the search you had one more life than you do now. You could also try \"Search Memory For Values ... Equals To Before-1\". The number of matches should go down. If the number of matches is still too great to peruse, then perform actions 5 and 6 repeatedly until the number of matches is something you feel comfortable trying (e.g. 10). If you run out of lives, just reset the game or restore a save state. Then your lives will likely be greater than the last time you checked, so select \"Search Memory For Values ... Greater Than Before\" Once you have a manageable list, select \"Add the ## Matches to Your List\" Go back one menu to see the codes that have been added. Try turning just one on at a time to see if it has the desired effect. If not, turn it off and try the next one. One of them should be the location in memory that stores your number of lives and enabling the cheat in its default state will result in that memory location being overwritten by the cheat value continuously and voila infinite lives. Alternately, you can \"Search Memory For Values ... Equal to ###\" if you know the exact number (e.g. the number of hit points you have in an RPG). RetroArch cheat code spanning/sliding/repeating \u00b6 You can also use the \"Number of Iterations\", \"Value Increase Each Iteration\", and \"Address Increase Each Iteration\" options to create a single code that affects a wide range of memory values. This is useful for things like unlocking all levels, giving yourself 1 of every item, setting all of your RPG stats to 999, etc. Usually when you have found a cheat for a specific item (e.g. your strength attribute in an RPG), similarly themed values are found in the same memory area. For example, if the strength attribute was found at memory address 0x0000AB04 then the dexterity attribute might be at 0x0000AB08, intelligence at 0x0000AB0C, etc. This feature is also useful for experimenting. If you found your strength attribute at memory address 0x0000AB04, then you might increase the number of iterations by 20 to see what changes in the game and if any of those changes are desirable. Note that experimenting like this has a good chance of crashing your game, so have a save state prepared before blindly attempting to write to memory. Settings example: Your game has the following values/memory addresses : 0x0000AB04 - Strength 0x0000AB08 - Dexterity 0x0000AB0C - Constitution 0x0000AB10 - Intelligence A single code can update all of those values: Memory Search Size - 32 bit Memory Address - 0x0000AB04 Value - 900 (0x00000384) Number of Iterations - 4 Value Increase Each Iteration - 5 Address Increase Each Iteration - 1 The starting address is 0x0000AB04 which will be set to value 900. Then for each of the 4 (Number of Iterations) iterations, it will add 1 of the \"Memory Search Size\" (1 * 32 bits = 4 bytes) to the address and 5 to the value and then set that as well. The final result will have updated these 4 memory locations to be: 0x0000AB04 - Strength = 900 0x0000AB08 - Dexterity = 905 0x0000AB0C - Constitution = 910 0x0000AB10 - Intelligence = 915 The \"Value Increase Each Iteration\" would normally be 0 in the above scenario but was used for illustrative purposes. RetroArch rumble codes \u00b6 RetroArch also has the ability to make your controller rumble when changes in the emulator/core memory occur. It is based off of the same RetroArch-handled cheat codes described above. For example, after finding the memory location for the number of lives in a game (via the cheat searching interface) you can set it up such that every time the value decreases (lose a life) the controller rumbles. Rumble tested with X360 controller, input driver dinput, joypad driver xinput. Available rumble controls: Rumble when memory value changes Rumble when memory value does not change Rumble when memory value decreases Rumble when memory value increases Rumble when memory value = value Rumble when memory value != value Rumble when memory value < value Rumble when memory value > value Rumble when memory value decreases by a specific amount Rumble when memory value increases by a specific amount Video Tutorial \u00b6","title":"Cheat/Rumble Codes"},{"location":"guides/cheat-codes/#retroarch-cheat-and-rumble-codes","text":"RetroArch uses two methods of applying cheat codes: Emulator Handled are codes that are sent to the emulator/core and it is up to the emulator/core to apply them. RetroArch Handled are codes that RetroArch itself handles by directly scanning/manipulating the emulator/core memory area.","title":"RetroArch cheat and rumble codes"},{"location":"guides/cheat-codes/#adding-a-new-cheat-code","text":"If you have a code that doesn't exist in the cheat database that you want to add manually, perform the following steps: Load the game in question and open the \"Cheats\" menu from the Quick Menu. Select either \"Add New Code to Top\" or \"Add New Code to Bottom\". Navigate to the newly added cheat code line and press enter to bring up the cheat code details. Select the \"Code\" menu item and press enter. A popup text-entry screen will appear. Type in your new code and press enter. Optionally perform the same steps for the \"Description\" menu item to edit the description. Ensure the \"Enabled\" field is set to on. Navigate back one level to the cheats menu and select \"Apply Changes\".","title":"Adding a new cheat code"},{"location":"guides/cheat-codes/#retroarch-new-cheat-code-searching","text":"RetroArch now has the ability to search for and create new cheat codes. The following is an overview for finding new cheats: Start game Go to Quick Menu -> Cheats -> Start or Continue Cheat Search Use left/right on \"Start or Restart Cheat Search\" to select a bit-size appropriate to the console you are using and the value your are searching. For example, if you are playing Castlevania:SOTN on the PS1 and you want to search for the health value, then that's a value that can be greater than 255 (0xFF), but it's unlikely that the game developers anticipated a value larger than 65535 (0xFFFF) so set the search to 16-bit. An alternate example - if you are playing Space Invaders on Atari 2600 and you want to search for the number of lives, then that's a value that could possibly be stored in just 2-bits of data (max number of lives = 3) and since the Atari 2600 only has a very small memory space, it's entirely possible that the memory location for the number of lives is only partially stored in a single byte while the rest of that same byte may store other important data that should not be touched. Set the size to 2-bit. Select \"Start or Restart Cheat Search\" once you have selected the bit size Go back to the game and lose a life Go back to the quick menu and select \"Search Memory For Values ... Less Than Before\" because when you started the search you had one more life than you do now. You could also try \"Search Memory For Values ... Equals To Before-1\". The number of matches should go down. If the number of matches is still too great to peruse, then perform actions 5 and 6 repeatedly until the number of matches is something you feel comfortable trying (e.g. 10). If you run out of lives, just reset the game or restore a save state. Then your lives will likely be greater than the last time you checked, so select \"Search Memory For Values ... Greater Than Before\" Once you have a manageable list, select \"Add the ## Matches to Your List\" Go back one menu to see the codes that have been added. Try turning just one on at a time to see if it has the desired effect. If not, turn it off and try the next one. One of them should be the location in memory that stores your number of lives and enabling the cheat in its default state will result in that memory location being overwritten by the cheat value continuously and voila infinite lives. Alternately, you can \"Search Memory For Values ... Equal to ###\" if you know the exact number (e.g. the number of hit points you have in an RPG).","title":"RetroArch new cheat code searching"},{"location":"guides/cheat-codes/#retroarch-cheat-code-spanningslidingrepeating","text":"You can also use the \"Number of Iterations\", \"Value Increase Each Iteration\", and \"Address Increase Each Iteration\" options to create a single code that affects a wide range of memory values. This is useful for things like unlocking all levels, giving yourself 1 of every item, setting all of your RPG stats to 999, etc. Usually when you have found a cheat for a specific item (e.g. your strength attribute in an RPG), similarly themed values are found in the same memory area. For example, if the strength attribute was found at memory address 0x0000AB04 then the dexterity attribute might be at 0x0000AB08, intelligence at 0x0000AB0C, etc. This feature is also useful for experimenting. If you found your strength attribute at memory address 0x0000AB04, then you might increase the number of iterations by 20 to see what changes in the game and if any of those changes are desirable. Note that experimenting like this has a good chance of crashing your game, so have a save state prepared before blindly attempting to write to memory. Settings example: Your game has the following values/memory addresses : 0x0000AB04 - Strength 0x0000AB08 - Dexterity 0x0000AB0C - Constitution 0x0000AB10 - Intelligence A single code can update all of those values: Memory Search Size - 32 bit Memory Address - 0x0000AB04 Value - 900 (0x00000384) Number of Iterations - 4 Value Increase Each Iteration - 5 Address Increase Each Iteration - 1 The starting address is 0x0000AB04 which will be set to value 900. Then for each of the 4 (Number of Iterations) iterations, it will add 1 of the \"Memory Search Size\" (1 * 32 bits = 4 bytes) to the address and 5 to the value and then set that as well. The final result will have updated these 4 memory locations to be: 0x0000AB04 - Strength = 900 0x0000AB08 - Dexterity = 905 0x0000AB0C - Constitution = 910 0x0000AB10 - Intelligence = 915 The \"Value Increase Each Iteration\" would normally be 0 in the above scenario but was used for illustrative purposes.","title":"RetroArch cheat code spanning/sliding/repeating"},{"location":"guides/cheat-codes/#retroarch-rumble-codes","text":"RetroArch also has the ability to make your controller rumble when changes in the emulator/core memory occur. It is based off of the same RetroArch-handled cheat codes described above. For example, after finding the memory location for the number of lives in a game (via the cheat searching interface) you can set it up such that every time the value decreases (lose a life) the controller rumbles. Rumble tested with X360 controller, input driver dinput, joypad driver xinput. Available rumble controls: Rumble when memory value changes Rumble when memory value does not change Rumble when memory value decreases Rumble when memory value increases Rumble when memory value = value Rumble when memory value != value Rumble when memory value < value Rumble when memory value > value Rumble when memory value decreases by a specific amount Rumble when memory value increases by a specific amount","title":"RetroArch rumble codes"},{"location":"guides/cheat-codes/#video-tutorial","text":"","title":"Video Tutorial"},{"location":"guides/cli-intro/","text":"RetroArch CLI \u00b6 RetroArch can be utilized via its robust graphical interfaces as well as a powerful command-line interface (CLI). Getting familiar with the command-line helps you understand the design principles of RetroArch. Note: please be aware of whether your system uses DOS/Windows style paths with backslashes \\ or Unix-style paths with forward slashes: / . Loading a ROM and libretro core (Unix-style path) \u00b6 1 retroarch -L /path/to/libretro/core.so game.rom Loading a ROM and libretro core with flatpak \u00b6 1 2 retroarch -L /path/to/libretro/core.so game.rom flatpak run org.libretro.RetroArch/x86_64/stable -L /home/MYUSERNAME/.var/app/org.libretro.RetroArch/config/retroarch/cores/nestopia_libretro.so Tetris.nes Verbose logging output \u00b6 To get a better idea on what's going on, use the --verbose flag. If you want to report a bug, it is vital that this log is included. Using a config file \u00b6 By default, RetroArch looks for a config in various places depending on OS: Linux/OSX : $XDG_CONFIG_HOME/retroarch/retroarch.cfg , then ~/.config/retroarch/retroarch.cfg , then ~/.retroarch.cfg , and finally, as a fallback, /etc/retroarch.cfg . Windows : retroarch.cfg in same folder as retroarch.exe , then %APPDATA%\\retroarch.cfg . To override this, use retroarch --config customconfig.cfg . If you have some special options you want to store in separate config files, you can use retroarch --config baseconfig.cfg --appendconfig specialconfig.cfg . Be sure to pass --menu as well if you aren't loading content directly from the command-line, or RetroArch will close immediately after launching. See man-page and/or --help for detail. Other essential CLI flags \u00b6 retroarch --help \u00b6 Use the --help help flag to display RetroArch's built-in CLI documentation. You'll probably discover some features you didn't think about. retroarch --features \u00b6 If you're unsure if a particular feature is compiled in, execute retroarch --features","title":"Command-Line Interface (CLI)"},{"location":"guides/cli-intro/#retroarch-cli","text":"RetroArch can be utilized via its robust graphical interfaces as well as a powerful command-line interface (CLI). Getting familiar with the command-line helps you understand the design principles of RetroArch. Note: please be aware of whether your system uses DOS/Windows style paths with backslashes \\ or Unix-style paths with forward slashes: / .","title":"RetroArch CLI"},{"location":"guides/cli-intro/#loading-a-rom-and-libretro-core-unix-style-path","text":"1 retroarch -L /path/to/libretro/core.so game.rom","title":"Loading a ROM and libretro core (Unix-style path)"},{"location":"guides/cli-intro/#loading-a-rom-and-libretro-core-with-flatpak","text":"1 2 retroarch -L /path/to/libretro/core.so game.rom flatpak run org.libretro.RetroArch/x86_64/stable -L /home/MYUSERNAME/.var/app/org.libretro.RetroArch/config/retroarch/cores/nestopia_libretro.so Tetris.nes","title":"Loading a ROM and libretro core with flatpak"},{"location":"guides/cli-intro/#verbose-logging-output","text":"To get a better idea on what's going on, use the --verbose flag. If you want to report a bug, it is vital that this log is included.","title":"Verbose logging output"},{"location":"guides/cli-intro/#using-a-config-file","text":"By default, RetroArch looks for a config in various places depending on OS: Linux/OSX : $XDG_CONFIG_HOME/retroarch/retroarch.cfg , then ~/.config/retroarch/retroarch.cfg , then ~/.retroarch.cfg , and finally, as a fallback, /etc/retroarch.cfg . Windows : retroarch.cfg in same folder as retroarch.exe , then %APPDATA%\\retroarch.cfg . To override this, use retroarch --config customconfig.cfg . If you have some special options you want to store in separate config files, you can use retroarch --config baseconfig.cfg --appendconfig specialconfig.cfg . Be sure to pass --menu as well if you aren't loading content directly from the command-line, or RetroArch will close immediately after launching. See man-page and/or --help for detail.","title":"Using a config file"},{"location":"guides/cli-intro/#other-essential-cli-flags","text":"","title":"Other essential CLI flags"},{"location":"guides/cli-intro/#retroarch-help","text":"Use the --help help flag to display RetroArch's built-in CLI documentation. You'll probably discover some features you didn't think about.","title":"retroarch --help"},{"location":"guides/cli-intro/#retroarch-features","text":"If you're unsure if a particular feature is compiled in, execute retroarch --features","title":"retroarch --features"},{"location":"guides/download-cores/","text":"Cores \u00b6 Cores are essentially other programs and games that run through RetroArch. RetroArch requires cores to run any content. Tip Many game console may have multiple emulator cores, the question of which one is the best may come up. Emulators can be designed to be more accurate at the cost of a performance hit, check out the Emulation General Wiki for a good look at what will suit your needs and hardware. Installing cores through RetroArch interface \u00b6 Tip If you do not see the \"Core Updater\" option, you may have installed RetroArch using a package manager. If so, see Installing cores through package manager (Ubuntu PPA only) . Otherwise, to enable it: Navigate to Settings Navigate to User Interface Navigate to Views Enable Show Core Updater Navigate to Online Updater Navigate to Select Core Updater Select the core you want to download Note If you're using the Ubuntu PPA version of RetroArch and have enabled \"Show Core Updater\" manually, your changes will not be reflected unless your the Cores directory setting is set to a writable location in the Directory Cofiguration . Installing cores through package manager (Ubuntu PPA only) \u00b6 Note Installing RetroArch through the Ubuntu PPA will disable the \"Core Updater\" option in RetroArch's interface, therefore core installation needs to happen through the Ubuntu package manager. Open a terminal Start typing sudo apt-get install libretro- Press tab a few times until all available possibilities show, press space to expand the list. Now type the full name of the core you want to install Example: sudo apt-get install libretro-nestopia Press enter and follow the process to install","title":"Installing Cores"},{"location":"guides/download-cores/#cores","text":"Cores are essentially other programs and games that run through RetroArch. RetroArch requires cores to run any content. Tip Many game console may have multiple emulator cores, the question of which one is the best may come up. Emulators can be designed to be more accurate at the cost of a performance hit, check out the Emulation General Wiki for a good look at what will suit your needs and hardware.","title":"Cores"},{"location":"guides/download-cores/#installing-cores-through-retroarch-interface","text":"Tip If you do not see the \"Core Updater\" option, you may have installed RetroArch using a package manager. If so, see Installing cores through package manager (Ubuntu PPA only) . Otherwise, to enable it: Navigate to Settings Navigate to User Interface Navigate to Views Enable Show Core Updater Navigate to Online Updater Navigate to Select Core Updater Select the core you want to download Note If you're using the Ubuntu PPA version of RetroArch and have enabled \"Show Core Updater\" manually, your changes will not be reflected unless your the Cores directory setting is set to a writable location in the Directory Cofiguration .","title":"Installing cores through RetroArch interface"},{"location":"guides/download-cores/#installing-cores-through-package-manager-ubuntu-ppa-only","text":"Note Installing RetroArch through the Ubuntu PPA will disable the \"Core Updater\" option in RetroArch's interface, therefore core installation needs to happen through the Ubuntu package manager. Open a terminal Start typing sudo apt-get install libretro- Press tab a few times until all available possibilities show, press space to expand the list. Now type the full name of the core you want to install Example: sudo apt-get install libretro-nestopia Press enter and follow the process to install","title":"Installing cores through package manager (Ubuntu PPA only)"},{"location":"guides/file-browser/","text":"File Browser \u00b6 For this part of the setup guide we will be teaching you how to use RetroArch's file browser. The browser is rather basic, although it isn't too hard to get used to it. Change default directory \u00b6 To make your content easier to get to, you should change the default directory. This would be a good first use of the file browser. Move to the settings tab then find Directory , then move to File Browser . The first screen should show the storage devices move to the one that contain your game content and press enter. Note On Windows it will display drive letters (like C:/ and D:/), However a system like Linux doesn't work in the same way and will only display the root. Most Android users should select /storage/emulated/0 if they want internal storage. You have now entered the main part of the file browser. Beneath the first two options will be all your folders. Navigate your file system until you are inside your content folder then select <Use this directory> . Tip On GNU/Linux, other hard drives are usually stored under /media/ or /mnt/ . You should now be back in the settings menu with the File browser set to the folder you wanted.","title":"File Browser"},{"location":"guides/file-browser/#file-browser","text":"For this part of the setup guide we will be teaching you how to use RetroArch's file browser. The browser is rather basic, although it isn't too hard to get used to it.","title":"File Browser"},{"location":"guides/file-browser/#change-default-directory","text":"To make your content easier to get to, you should change the default directory. This would be a good first use of the file browser. Move to the settings tab then find Directory , then move to File Browser . The first screen should show the storage devices move to the one that contain your game content and press enter. Note On Windows it will display drive letters (like C:/ and D:/), However a system like Linux doesn't work in the same way and will only display the root. Most Android users should select /storage/emulated/0 if they want internal storage. You have now entered the main part of the file browser. Beneath the first two options will be all your folders. Navigate your file system until you are inside your content folder then select <Use this directory> . Tip On GNU/Linux, other hard drives are usually stored under /media/ or /mnt/ . You should now be back in the settings menu with the File browser set to the folder you wanted.","title":"Change default directory"},{"location":"guides/generating-retroarch-logs/","text":"What are logs? Why are they so important? \u00b6 RetroArch and its underlying libretro technology is designed to run on many different combinations of hardware, operating system, libretro core, and content. It is not possible for a volunteer-based open source project to test all possible combinations. The answer to this dilemma involves \"logs\", which RetroArch and other libretro software use to record essential information about your system and its function that other users and volunteers need in order to help troubleshoot problems and improve compatibility with new systems. Generating Logs \u00b6 Generating Logs via Menu \u00b6 First We'll need to activate the Advanced Settings: 1. Go to settings 2. Enter at \"User Interface\" 3. Activate \"Show Advanced Settings\" Next We'll activate the logging option: 1. Go to settings if you weren't there 2. Enter at \"Logging\" 3. Activate \"Log to File\" 4.(optional) Costumize Core & Frontend Logging Level & if you want timestamps or performance counters on your log 5. Acttivate \"Logging Verbosity\" Generating Logs in Lakka \u00b6 Please see the Troubleshooting Lakka doc . Generating Logs in Linux \u00b6 RetroArch logs \u00b6 Open a terminal. Navigate to the RetroArch folder with the cd command. Start retroarch in 'verbose' mode with this command: retroarch --menu --verbose >> retroarch.log 2>&1 Once you exit RetroArch, a file called retroarch.log should be stored in your home directory. Graphic card logs \u00b6 lspci -nnk | grep -A 3 VGA will give information about your graphic card. Audio device logs \u00b6 aplay -L enumerates audio devices which have been detected. Input device logs \u00b6 lsusb lists all devices attached via USB dmesg displays all messages from the kernel ring buffer which typically is holding the messages generated by the Linux kernel from the boot process. The dmesg log lists each hardware device that the kernel detected along with information on how the device was configured by the system. Generating Logs in Windows \u00b6 If you installed RetroArch: Open the Windows start menu Search and open RetroArch (log to file) Once you exit RetroArch, a file called retroarch-log.txt should be stored in the RetroArch folder, in order to retrieve it: Open the windows start menu Search and open RetroArch Data Folder Find retroarch-log.txt If you haven't installed RetroArch and have a folder with it: Tip You can hold shift then right click on the folder that contains retroarch.exe Select Open PowerShell window here . Then jump to step 3. Open a console window with the cmd command, found either in the Start Menu or through use of the Windows \"Run\" menu. Navigate to the RetroArch folder using the cd command. Launch RetroArch with this commandline: .\\retroarch.exe --log-file .\\retroarch-log.txt -v Once you exit RetroArch, a file called retroarch-log.txt should be stored in the folder. Generating Logs in OS X \u00b6 Open a console window with the OS X \"Terminal\" app. Navigate to the RetroArch folder using the cd command. Launch RetroArch with this commandline: retroarch --menu --verbose --log-file ~/retroarch.log Once you exit RetroArch, a file called retroarch.log should be stored in your home directory. Generating Logs in Android \u00b6 There is a range of variation in the logging systems available to Android device depending on the combination of hardware and operating system in use. There are two general approaches to generating logs in Android: tethering to a PC via a USB cable or using a logcat app. Generating Logs via USB Tether \u00b6 Prerequisites : * Linux, Windows or Mac PC * USB cable for your device Instructions : Install your device driver for using adb on your PC from http://developer.android.com/tools/extras/oem-usb.html Download the adb executable for your OS -- it can be downloaded as part of the full Android SDK , but you might also be able to find the adb executable individually. Connect your Android device to the PC via USB cable. Enable the developer options on the Android. Enable USB debugging on the Android. Open a command prompt (Windows) or terminal (Linux/OS X) and navigate to the directory where the adb executable is located using the cd command. On Windows: Windows Key + R > type cmd > press Enter. On OS X: Type Terminal into Spotlight and open it. Alternately, on Windows: Go to the directory where you downloaded the adb executable, Shift+Right Click and select Open Console (or similar) | On Linux / OS X: Right Click in the directory and select Open Terminal here Type in your console window: adb devices to verify your device is properly connected. If your device is selected, type in adb logcat to show the logcat, aka stacktrace. Reproduce your issue on your device. Paste the contents of your console window into a Github Gist to share on the forums or github. Based on Stackexchange posts by Leandros and Nicolas Raoul. Generating Logs via Android App \u00b6 Gathering log files in Android requires a third-party app that can interface with the logcat system. Many free apps are available via Android's \"Play Store\" system. Generating Logs in iOS \u00b6 At the moment there are no logging docs available for iOS. Please feel free to post about your situation in the libretro forums. Generating Logs with Nintendo Switch \u00b6 You need to have your console and your PC on the same local network. You need to have nxlink installed on your PC to generate logs. The devkitpro environment has it, see the switchbrew wiki for instructions on how to install it. Run the homebrew menu on your console, and press the Y button to open the netloader prompt. Take the NRO of the core you want to launch on your PC. Open a terminal and type this command in : nxlink /path/to/your/core.nro -s Where /path/to/your/core.nro is the path to the core you want to generate logs from, on your PC. Be careful as it will overwrite any homebrew with the same name on your SD card ! That will send the homebrew and run it on your console. Logs will be shown on the terminal you ran the command from. If you want to redirect logs to the file libnx.logs , use this command instead : nxlink /path/to/your/core.nro -s > libnx.logs 2>&1 Generating Logs with other Nintendo Consoles \u00b6 At the moment there are no logging docs available for other Nintendo consoles. Please feel free to post about your situation in the libretro forums. Generating Logs with PlayStation Consoles \u00b6 At the moment there are no logging docs available for PlayStation consoles. Please feel free to post about your situation in the libretro forums. Posting Logs in the Forum and Github \u00b6 Generally, log files are lengthy which make them difficult to read when they're pasted directly into a post on the forums or github. If your log file is more than six or seven lines long, you will be asked to post a link to it instead. One free and straightforward system for posting and sharing logs is Github Gist . You can paste the contents of a log file, or the log file itself, into the Gist website. After you log has been added to the Gist, press the Create Public Gist button to create a shareable link.","title":"Generating Logs"},{"location":"guides/generating-retroarch-logs/#what-are-logs-why-are-they-so-important","text":"RetroArch and its underlying libretro technology is designed to run on many different combinations of hardware, operating system, libretro core, and content. It is not possible for a volunteer-based open source project to test all possible combinations. The answer to this dilemma involves \"logs\", which RetroArch and other libretro software use to record essential information about your system and its function that other users and volunteers need in order to help troubleshoot problems and improve compatibility with new systems.","title":"What are logs? Why are they so important?"},{"location":"guides/generating-retroarch-logs/#generating-logs","text":"","title":"Generating Logs"},{"location":"guides/generating-retroarch-logs/#generating-logs-via-menu","text":"First We'll need to activate the Advanced Settings: 1. Go to settings 2. Enter at \"User Interface\" 3. Activate \"Show Advanced Settings\" Next We'll activate the logging option: 1. Go to settings if you weren't there 2. Enter at \"Logging\" 3. Activate \"Log to File\" 4.(optional) Costumize Core & Frontend Logging Level & if you want timestamps or performance counters on your log 5. Acttivate \"Logging Verbosity\"","title":"Generating Logs via Menu"},{"location":"guides/generating-retroarch-logs/#generating-logs-in-lakka","text":"Please see the Troubleshooting Lakka doc .","title":"Generating Logs in Lakka"},{"location":"guides/generating-retroarch-logs/#generating-logs-in-linux","text":"","title":"Generating Logs in Linux"},{"location":"guides/generating-retroarch-logs/#retroarch-logs","text":"Open a terminal. Navigate to the RetroArch folder with the cd command. Start retroarch in 'verbose' mode with this command: retroarch --menu --verbose >> retroarch.log 2>&1 Once you exit RetroArch, a file called retroarch.log should be stored in your home directory.","title":"RetroArch logs"},{"location":"guides/generating-retroarch-logs/#graphic-card-logs","text":"lspci -nnk | grep -A 3 VGA will give information about your graphic card.","title":"Graphic card logs"},{"location":"guides/generating-retroarch-logs/#audio-device-logs","text":"aplay -L enumerates audio devices which have been detected.","title":"Audio device logs"},{"location":"guides/generating-retroarch-logs/#input-device-logs","text":"lsusb lists all devices attached via USB dmesg displays all messages from the kernel ring buffer which typically is holding the messages generated by the Linux kernel from the boot process. The dmesg log lists each hardware device that the kernel detected along with information on how the device was configured by the system.","title":"Input device logs"},{"location":"guides/generating-retroarch-logs/#generating-logs-in-windows","text":"If you installed RetroArch: Open the Windows start menu Search and open RetroArch (log to file) Once you exit RetroArch, a file called retroarch-log.txt should be stored in the RetroArch folder, in order to retrieve it: Open the windows start menu Search and open RetroArch Data Folder Find retroarch-log.txt If you haven't installed RetroArch and have a folder with it: Tip You can hold shift then right click on the folder that contains retroarch.exe Select Open PowerShell window here . Then jump to step 3. Open a console window with the cmd command, found either in the Start Menu or through use of the Windows \"Run\" menu. Navigate to the RetroArch folder using the cd command. Launch RetroArch with this commandline: .\\retroarch.exe --log-file .\\retroarch-log.txt -v Once you exit RetroArch, a file called retroarch-log.txt should be stored in the folder.","title":"Generating Logs in Windows"},{"location":"guides/generating-retroarch-logs/#generating-logs-in-os-x","text":"Open a console window with the OS X \"Terminal\" app. Navigate to the RetroArch folder using the cd command. Launch RetroArch with this commandline: retroarch --menu --verbose --log-file ~/retroarch.log Once you exit RetroArch, a file called retroarch.log should be stored in your home directory.","title":"Generating Logs in OS X"},{"location":"guides/generating-retroarch-logs/#generating-logs-in-android","text":"There is a range of variation in the logging systems available to Android device depending on the combination of hardware and operating system in use. There are two general approaches to generating logs in Android: tethering to a PC via a USB cable or using a logcat app.","title":"Generating Logs in Android"},{"location":"guides/generating-retroarch-logs/#generating-logs-via-usb-tether","text":"Prerequisites : * Linux, Windows or Mac PC * USB cable for your device Instructions : Install your device driver for using adb on your PC from http://developer.android.com/tools/extras/oem-usb.html Download the adb executable for your OS -- it can be downloaded as part of the full Android SDK , but you might also be able to find the adb executable individually. Connect your Android device to the PC via USB cable. Enable the developer options on the Android. Enable USB debugging on the Android. Open a command prompt (Windows) or terminal (Linux/OS X) and navigate to the directory where the adb executable is located using the cd command. On Windows: Windows Key + R > type cmd > press Enter. On OS X: Type Terminal into Spotlight and open it. Alternately, on Windows: Go to the directory where you downloaded the adb executable, Shift+Right Click and select Open Console (or similar) | On Linux / OS X: Right Click in the directory and select Open Terminal here Type in your console window: adb devices to verify your device is properly connected. If your device is selected, type in adb logcat to show the logcat, aka stacktrace. Reproduce your issue on your device. Paste the contents of your console window into a Github Gist to share on the forums or github. Based on Stackexchange posts by Leandros and Nicolas Raoul.","title":"Generating Logs via USB Tether"},{"location":"guides/generating-retroarch-logs/#generating-logs-via-android-app","text":"Gathering log files in Android requires a third-party app that can interface with the logcat system. Many free apps are available via Android's \"Play Store\" system.","title":"Generating Logs via Android App"},{"location":"guides/generating-retroarch-logs/#generating-logs-in-ios","text":"At the moment there are no logging docs available for iOS. Please feel free to post about your situation in the libretro forums.","title":"Generating Logs in iOS"},{"location":"guides/generating-retroarch-logs/#generating-logs-with-nintendo-switch","text":"You need to have your console and your PC on the same local network. You need to have nxlink installed on your PC to generate logs. The devkitpro environment has it, see the switchbrew wiki for instructions on how to install it. Run the homebrew menu on your console, and press the Y button to open the netloader prompt. Take the NRO of the core you want to launch on your PC. Open a terminal and type this command in : nxlink /path/to/your/core.nro -s Where /path/to/your/core.nro is the path to the core you want to generate logs from, on your PC. Be careful as it will overwrite any homebrew with the same name on your SD card ! That will send the homebrew and run it on your console. Logs will be shown on the terminal you ran the command from. If you want to redirect logs to the file libnx.logs , use this command instead : nxlink /path/to/your/core.nro -s > libnx.logs 2>&1","title":"Generating Logs with Nintendo Switch"},{"location":"guides/generating-retroarch-logs/#generating-logs-with-other-nintendo-consoles","text":"At the moment there are no logging docs available for other Nintendo consoles. Please feel free to post about your situation in the libretro forums.","title":"Generating Logs with other Nintendo Consoles"},{"location":"guides/generating-retroarch-logs/#generating-logs-with-playstation-consoles","text":"At the moment there are no logging docs available for PlayStation consoles. Please feel free to post about your situation in the libretro forums.","title":"Generating Logs with PlayStation Consoles"},{"location":"guides/generating-retroarch-logs/#posting-logs-in-the-forum-and-github","text":"Generally, log files are lengthy which make them difficult to read when they're pasted directly into a post on the forums or github. If your log file is more than six or seven lines long, you will be asked to post a link to it instead. One free and straightforward system for posting and sharing logs is Github Gist . You can paste the contents of a log file, or the log file itself, into the Gist website. After you log has been added to the Gist, press the Create Public Gist button to create a shareable link.","title":"Posting Logs in the Forum and Github"},{"location":"guides/import-content/","text":"Importing Content \u00b6 Warning This guide assumes that you already have obtained the content legally, RetroArch does not provide users with copyright content. This guide uses the \"scan\" functionality to import your games into RetroArch's playlists sorted by console. The scan is recursive so you can organise your collection into sub-folders or potentially scan your whole computer. Step 1: Download database \u00b6 In order to have RetroArch recognise your games, you need to have a database of all the titles. From the RetroArch main menu select \"Online Updater\", then choose \"Update Databases\" Wait for this to finish downloading Step 2: Scan and import \u00b6 From the RetroArch Main Menu navigate to \"Import content\". You will be met by three options, \"Scan Directory\" , \"Scan File\" and \"Manual Scan\". To import a collection of Contents, you should select \"Scan Directory\". Using the file browser, navigate to the folder with your Content collection and select \" \" . If you like to import single file, you can use \"Scan File\" then navigate to file and select it. You can also \"Manual Scan\" it scan based on content file names and does not require content to match database. Please be patient while it scans, large collections could take a few minutes. Step 3: Add box art \u00b6 This is optional, but some games have box art that can make the menu more prettier, head back to the main menu, select \"Online Updater\", then choose \"Playlist Thumbnails Updater\". Here you need to select the console you want to download. Please be patient, these take quite some time to download, especially on a slow internet connection.","title":"Importing Content"},{"location":"guides/import-content/#importing-content","text":"Warning This guide assumes that you already have obtained the content legally, RetroArch does not provide users with copyright content. This guide uses the \"scan\" functionality to import your games into RetroArch's playlists sorted by console. The scan is recursive so you can organise your collection into sub-folders or potentially scan your whole computer.","title":"Importing Content"},{"location":"guides/import-content/#step-1-download-database","text":"In order to have RetroArch recognise your games, you need to have a database of all the titles. From the RetroArch main menu select \"Online Updater\", then choose \"Update Databases\" Wait for this to finish downloading","title":"Step 1: Download database"},{"location":"guides/import-content/#step-2-scan-and-import","text":"From the RetroArch Main Menu navigate to \"Import content\". You will be met by three options, \"Scan Directory\" , \"Scan File\" and \"Manual Scan\". To import a collection of Contents, you should select \"Scan Directory\". Using the file browser, navigate to the folder with your Content collection and select \" \" . If you like to import single file, you can use \"Scan File\" then navigate to file and select it. You can also \"Manual Scan\" it scan based on content file names and does not require content to match database. Please be patient while it scans, large collections could take a few minutes.","title":"Step 2: Scan and import"},{"location":"guides/import-content/#step-3-add-box-art","text":"This is optional, but some games have box art that can make the menu more prettier, head back to the main menu, select \"Online Updater\", then choose \"Playlist Thumbnails Updater\". Here you need to select the console you want to download. Please be patient, these take quite some time to download, especially on a slow internet connection.","title":"Step 3: Add box art"},{"location":"guides/input-and-controls/","text":"Getting started: Input and controls \u00b6 RetroPad Concept \u00b6 RetroArch controls map real-world controller buttons to a virtual controller called a \"RetroPad\". A RetroPad does not exist in real life, it's a concept only within RetroArch. A RetroPad has an ABXY layout like a SNES gamepad plus four shoulder buttons and dual analog sticks like a Sony DualShock. You don't have to map all of the RetroPad buttons to a real world button. If your real controller has less buttons than a DualShock, then the virtual RetroPad also has less buttons, that's perfectly fine. Gamepad setup \u00b6 RetroArch is intended to be easily controlled with a gamepad. RetroArch and libretro provide ability to configure a gamepad once for many cores instead of having to configure each core individually. However, RetroArch also provides the freedom to configure specific cores and even individual games differently if the user wants. Gamepad autoconfiguration \u00b6 Many gamepads should work out of the box via the RetroArch autoconfiguration profile database. If the gamepad can be autoconfigured the OSD will inform you of the autoconfiguration event. Manual RetroPad binding Not all gamepads have autoconfigs. If that is the case for your gamepad, please refer to the Manual RetroPad binding section below. Keyboard controls \u00b6 RetroArch provides a remappable set of bindings between a keyboard and the RetroPad abstraction as well as between a keyboard and RetroArch's hotkeys. Please refer to Default RetroArch keyboard bindings in this doc as a reference. Cores with direct keyboard input \u00b6 Please be aware that some cores, for example arcade emulator cores and vintage computer emulator cores, can also be configured to directly read the keyboard or controls that use a keyboard interface. If you are using a core configured for direct keyboard access, it is recommended that users unbind the RetroArch keyboard-to-RetroPad and hotkey bindings or use the Game Focus mode to disable those bindings while using the keyboard device. Otherwise, keyboard input may result in multiple conflicting simultaneous actions by the core. Tip Controls with keyboard interfaces can also benefit from defining a Hotkey Enable button in RetroArch which is required to be held down in order to activate the other hotkeys. Manual RetroPad binding \u00b6 If your gamepad does not have an autoconfiguration or if you would like to change its default RetroPad binding, use the Input settings menu. Navigate to Settings Navigate to Input Navigate to Input User 1 Binds Select User 1 Bind All Press the buttons as required Tip If you have several different controller types you may want to use the User 1 Save Autoconfig followed by User 1 Bind Default All options after binding in order to achieve hotplug functionality Controls for multi-player \u00b6 If you want to set-up local multi-player with games that supports it: Navigate to Settings Navigate to Input Here you will find the option to set binds for multiple users, \"Input User 1 Binds\", \"Input User 2 Binds\" and so on. So lets set-up User 1's controller: Navigate to Input User 1 Binds Select User 1 Device Index From here using the left/right buttons, select which currently plugged-in controller will be assigned to what player. While here you should also bind the controls to this player by pressing them on the assigned controller, Select User 1 Bind All to do this. After you finish, go back, select Input User 2 Binds and repeat for user 2. Hotkeys \u00b6 Hotkeys are combinations of buttons you can press in order to access options such as saving, loading, and exiting games. Hotkey binds can be configured at Settings \u2192 Input \u2192 Input Hotkey Binds . If you map Enable Hotkeys to a button, it will require that button to be held in order to trigger any hotkeys. Remapping controls for individual cores or content \u00b6 Core Controls Remapping alters how the core receives input rather than how the gamepad is coded, for example you can tell an individual core to switch button A and B on the RetroPad for gameplay, but you can still use \"A\" to select in the RetroArch menu and \"B\" to go back. This is opposed to changing the gamepad bindings in RetroArch itself which would swap \"A\" and \"B\" in the core but would also make \"B\" select and \"A\" back in the RetroArch menu. How to remap the controls for a single core or game: Start content with the core for which you want to remap controls Go to Quick Menu and then Controls Configure the buttons the way you want Select Save Core Remap File OR, if you want to save this remapping for the current game only, select Save Game Remap File Default RetroArch keyboard bindings \u00b6 Keyboard gameplay controls \u00b6 User 1 Keyboard Default RetroPad Mapping Menu controls \u00b6 The keyboard inputs shown here are active only when Settings \u2192 Input \u2192 Unified Menu Controls is disabled (default). Otherwise, only Retropad inputs are used. Keyboard Input Retropad Input Menu Action Move cursor up Move cursor down Move cursor left Move cursor right Scroll one page up Scroll one page down Return to the previous screen Select Item - Scan content Search Help - Remove highlighted input bind Reset to default - Exit RetroArch Hotkey controls \u00b6 Hotkey binds can be configured at Settings \u2192 Input \u2192 'Input Hotkey Binds'. If you map Enable Hotkeys to a key, it will require that key to be held in order to trigger any hotkeys. This can be useful in avoiding keyboard mapping conflicts between RetroArch and cores cores that use the keyboard for input. Tip Hotkeys can also be mapped to RetroPad buttons. Keyboard Input In-Game Action Rewind Pause Reset Next shader Previous shader Netplay toggle play/spectate Menu toggle Save state Load state Increase current state slot Decrease current state slot Take screenshot Mute Show on-screen keyboard Grab mouse Volume Up Volume Down Fast forward toggle Fast forward hold Movie record Frame advance Slow motion Fullscreen toggle Switch GUI Platform-specific controls \u00b6 Nintendo Switch \u00b6 USB keyboards and mice: All keyboards seem to work. Not all mice seem to work. Mouse compatibility sheet . Touch mouse emulation: The Switch touchscreen can be used for mouse control like a laptop touchpad. The following gestures are supported. Touch Input Effect single finger drag move the mouse pointer (indirectly like on a touchpad) single short tap left mouse click dual finger short tap* right mouse click dual finger drag drag'n'drop (left mouse button is held down) three finger drag drag'n'drop (right mouse button is held down) *: hold one finger, short tap with another","title":"Input and Controls"},{"location":"guides/input-and-controls/#getting-started-input-and-controls","text":"","title":"Getting started: Input and controls"},{"location":"guides/input-and-controls/#retropad-concept","text":"RetroArch controls map real-world controller buttons to a virtual controller called a \"RetroPad\". A RetroPad does not exist in real life, it's a concept only within RetroArch. A RetroPad has an ABXY layout like a SNES gamepad plus four shoulder buttons and dual analog sticks like a Sony DualShock. You don't have to map all of the RetroPad buttons to a real world button. If your real controller has less buttons than a DualShock, then the virtual RetroPad also has less buttons, that's perfectly fine.","title":"RetroPad Concept"},{"location":"guides/input-and-controls/#gamepad-setup","text":"RetroArch is intended to be easily controlled with a gamepad. RetroArch and libretro provide ability to configure a gamepad once for many cores instead of having to configure each core individually. However, RetroArch also provides the freedom to configure specific cores and even individual games differently if the user wants.","title":"Gamepad setup"},{"location":"guides/input-and-controls/#gamepad-autoconfiguration","text":"Many gamepads should work out of the box via the RetroArch autoconfiguration profile database. If the gamepad can be autoconfigured the OSD will inform you of the autoconfiguration event. Manual RetroPad binding Not all gamepads have autoconfigs. If that is the case for your gamepad, please refer to the Manual RetroPad binding section below.","title":"Gamepad autoconfiguration"},{"location":"guides/input-and-controls/#keyboard-controls","text":"RetroArch provides a remappable set of bindings between a keyboard and the RetroPad abstraction as well as between a keyboard and RetroArch's hotkeys. Please refer to Default RetroArch keyboard bindings in this doc as a reference.","title":"Keyboard controls"},{"location":"guides/input-and-controls/#cores-with-direct-keyboard-input","text":"Please be aware that some cores, for example arcade emulator cores and vintage computer emulator cores, can also be configured to directly read the keyboard or controls that use a keyboard interface. If you are using a core configured for direct keyboard access, it is recommended that users unbind the RetroArch keyboard-to-RetroPad and hotkey bindings or use the Game Focus mode to disable those bindings while using the keyboard device. Otherwise, keyboard input may result in multiple conflicting simultaneous actions by the core. Tip Controls with keyboard interfaces can also benefit from defining a Hotkey Enable button in RetroArch which is required to be held down in order to activate the other hotkeys.","title":"Cores with direct keyboard input"},{"location":"guides/input-and-controls/#manual-retropad-binding","text":"If your gamepad does not have an autoconfiguration or if you would like to change its default RetroPad binding, use the Input settings menu. Navigate to Settings Navigate to Input Navigate to Input User 1 Binds Select User 1 Bind All Press the buttons as required Tip If you have several different controller types you may want to use the User 1 Save Autoconfig followed by User 1 Bind Default All options after binding in order to achieve hotplug functionality","title":"Manual RetroPad binding"},{"location":"guides/input-and-controls/#controls-for-multi-player","text":"If you want to set-up local multi-player with games that supports it: Navigate to Settings Navigate to Input Here you will find the option to set binds for multiple users, \"Input User 1 Binds\", \"Input User 2 Binds\" and so on. So lets set-up User 1's controller: Navigate to Input User 1 Binds Select User 1 Device Index From here using the left/right buttons, select which currently plugged-in controller will be assigned to what player. While here you should also bind the controls to this player by pressing them on the assigned controller, Select User 1 Bind All to do this. After you finish, go back, select Input User 2 Binds and repeat for user 2.","title":"Controls for multi-player"},{"location":"guides/input-and-controls/#hotkeys","text":"Hotkeys are combinations of buttons you can press in order to access options such as saving, loading, and exiting games. Hotkey binds can be configured at Settings \u2192 Input \u2192 Input Hotkey Binds . If you map Enable Hotkeys to a button, it will require that button to be held in order to trigger any hotkeys.","title":"Hotkeys"},{"location":"guides/input-and-controls/#remapping-controls-for-individual-cores-or-content","text":"Core Controls Remapping alters how the core receives input rather than how the gamepad is coded, for example you can tell an individual core to switch button A and B on the RetroPad for gameplay, but you can still use \"A\" to select in the RetroArch menu and \"B\" to go back. This is opposed to changing the gamepad bindings in RetroArch itself which would swap \"A\" and \"B\" in the core but would also make \"B\" select and \"A\" back in the RetroArch menu. How to remap the controls for a single core or game: Start content with the core for which you want to remap controls Go to Quick Menu and then Controls Configure the buttons the way you want Select Save Core Remap File OR, if you want to save this remapping for the current game only, select Save Game Remap File","title":"Remapping controls for individual cores or content"},{"location":"guides/input-and-controls/#default-retroarch-keyboard-bindings","text":"","title":"Default RetroArch keyboard bindings"},{"location":"guides/input-and-controls/#keyboard-gameplay-controls","text":"User 1 Keyboard Default RetroPad Mapping","title":"Keyboard gameplay controls"},{"location":"guides/input-and-controls/#menu-controls","text":"The keyboard inputs shown here are active only when Settings \u2192 Input \u2192 Unified Menu Controls is disabled (default). Otherwise, only Retropad inputs are used. Keyboard Input Retropad Input Menu Action Move cursor up Move cursor down Move cursor left Move cursor right Scroll one page up Scroll one page down Return to the previous screen Select Item - Scan content Search Help - Remove highlighted input bind Reset to default - Exit RetroArch","title":"Menu controls"},{"location":"guides/input-and-controls/#hotkey-controls","text":"Hotkey binds can be configured at Settings \u2192 Input \u2192 'Input Hotkey Binds'. If you map Enable Hotkeys to a key, it will require that key to be held in order to trigger any hotkeys. This can be useful in avoiding keyboard mapping conflicts between RetroArch and cores cores that use the keyboard for input. Tip Hotkeys can also be mapped to RetroPad buttons. Keyboard Input In-Game Action Rewind Pause Reset Next shader Previous shader Netplay toggle play/spectate Menu toggle Save state Load state Increase current state slot Decrease current state slot Take screenshot Mute Show on-screen keyboard Grab mouse Volume Up Volume Down Fast forward toggle Fast forward hold Movie record Frame advance Slow motion Fullscreen toggle Switch GUI","title":"Hotkey controls"},{"location":"guides/input-and-controls/#platform-specific-controls","text":"","title":"Platform-specific controls"},{"location":"guides/input-and-controls/#nintendo-switch","text":"USB keyboards and mice: All keyboards seem to work. Not all mice seem to work. Mouse compatibility sheet . Touch mouse emulation: The Switch touchscreen can be used for mouse control like a laptop touchpad. The following gestures are supported. Touch Input Effect single finger drag move the mouse pointer (indirectly like on a touchpad) single short tap left mouse click dual finger short tap* right mouse click dual finger drag drag'n'drop (left mouse button is held down) three finger drag drag'n'drop (right mouse button is held down) *: hold one finger, short tap with another","title":"Nintendo Switch"},{"location":"guides/input-joypad-drivers/","text":"RetroArch input and joypad drivers \u00b6 RetroArch makes use of two input systems in order to support the full range of input devices available across RetroArch's supported platforms. Input Drivers provide access to keyboards, mice, and mouse-like devices such as lightguns, spinners, steering wheels, etc. Joypad Drivers provide access to gamepads and joysticks. Absolute mouse devices in the tables below refers to input drivers which support mouse-like devices such as light guns, air mice, and Wiimotes that use 'absolute' coordinate systems. Certain input drivers only support mouse devices with 'relative' coordinate systems. Linux \u00b6 udev is the most full-featured Input Driver and Joypad Driver for Linux. Linux Input Drivers linuxraw sdl2 udev wayland Linux Joypad Drivers hid linuxraw sdl2 udev xinput udev input driver \u00b6 udev is the newest input driver and uses the evdev joypad interface at /dev/input . It supports hotplugging and force feedback (if supported by device). udev reads evdev events directly and supports keyboard callback, mice, and touchpads. libudev is used to discover devices and support hotplugging. Features \u00b6 Multi-mouse Absolute mice Yes Yes Required packages \u00b6 TThe libudev and libxkbdcommon packages are required. udev does not require X, but udev does depend on X11 keyboard layout files being installed. Setting up udev permissions \u00b6 Most Linux distributions prevent users from capturing keyboard/mouse information by default. Only root and users in the group \"input\" are able to access raw input. This is a security feature in case the system is used by multiple users. The easiest way to gain access to this input is to: Step 1: Add your user to the group \"input\" with the command: sudo usermod -a -G input `whoami` Step 2: Log out, and then log back in If adding your user to the input group does not succeed, you may also set up a udev rule which makes this input accessible to non-root users: Step 1: Add to /etc/udev/rules.d/99-evdev.rules the following text: KERNEL==\"event*\", NAME=\"input/%k\", MODE=\"666\" Step 2: Reload the rules with sudo udevadm control --reload-rules . Step 3: Reboot linuxraw input driver \u00b6 The older linuxraw driver is available which uses the legacy joystick API at /dev/input/js* . The linuxraw driver requires an active TTY in order to read keyboard events. Features \u00b6 Multi-mouse Absolute mice No Yes wayland input driver \u00b6 Features \u00b6 Multi-mouse Absolute mice - - sdl2 input driver \u00b6 Features \u00b6 Multi-mouse Absolute mice* No No hid joypad driver \u00b6 Features \u00b6 Rumble - linuxraw joypad driver \u00b6 Features \u00b6 Rumble - sdl2 joypad driver \u00b6 Features \u00b6 Rumble Yes udev joypad driver \u00b6 Features \u00b6 Rumble Yes xinput joypad driver \u00b6 Features \u00b6 Rumble Yes Windows \u00b6 Windows Input Drivers dinput raw sdl2 Windows Joypad Drivers dinput hid sdl2 xinput raw input driver \u00b6 Features \u00b6 Multi-mouse Absolute mice Yes Yes dinput input driver \u00b6 Features \u00b6 Multi-mouse Absolute mice No No sdl2 input driver \u00b6 -To be written- Features \u00b6 Multi-mouse Absolute mice - - dinput joypad driver \u00b6 Features \u00b6 Rumble No hid joypad driver \u00b6 Features \u00b6 Rumble - sdl2 joypad driver \u00b6 Features \u00b6 Rumble Yes xinput joypad driver \u00b6 Features \u00b6 Rumble Yes Android \u00b6 Android Input Drivers android linuxraw udev Android Joypad Drivers android hid udev android input driver \u00b6 Features \u00b6 Multi-mouse Absolute mice - - linuxraw input driver \u00b6 Features \u00b6 Multi-mouse Absolute mice No Yes udev input driver \u00b6 Features \u00b6 Multi-mouse Absolute mice Yes No android joypad driver \u00b6 Features \u00b6 Rumble - hid joypad driver \u00b6 Features \u00b6 Rumble - udev joypad driver \u00b6 Features \u00b6 Rumble Yes OS X \u00b6 OS X Input Drivers cocoa OS X Joypad Drivers hid cocoa input driver \u00b6 -To be written- Features \u00b6 Multi-mouse Absolute mice - - hid joypad driver \u00b6 Features \u00b6 Rumble - sdl2 joypad driver \u00b6 Features \u00b6 Rumble Yes DOS \u00b6 DOS input driver \u00b6 Features \u00b6 Multi-mouse Absolute mice - - DOS joypad driver \u00b6 Features \u00b6 Rumble -","title":"Input and Joypad Drivers"},{"location":"guides/input-joypad-drivers/#retroarch-input-and-joypad-drivers","text":"RetroArch makes use of two input systems in order to support the full range of input devices available across RetroArch's supported platforms. Input Drivers provide access to keyboards, mice, and mouse-like devices such as lightguns, spinners, steering wheels, etc. Joypad Drivers provide access to gamepads and joysticks. Absolute mouse devices in the tables below refers to input drivers which support mouse-like devices such as light guns, air mice, and Wiimotes that use 'absolute' coordinate systems. Certain input drivers only support mouse devices with 'relative' coordinate systems.","title":"RetroArch input and joypad drivers"},{"location":"guides/input-joypad-drivers/#linux","text":"udev is the most full-featured Input Driver and Joypad Driver for Linux. Linux Input Drivers linuxraw sdl2 udev wayland Linux Joypad Drivers hid linuxraw sdl2 udev xinput","title":"Linux"},{"location":"guides/input-joypad-drivers/#udev-input-driver","text":"udev is the newest input driver and uses the evdev joypad interface at /dev/input . It supports hotplugging and force feedback (if supported by device). udev reads evdev events directly and supports keyboard callback, mice, and touchpads. libudev is used to discover devices and support hotplugging.","title":"udev input driver"},{"location":"guides/input-joypad-drivers/#features","text":"Multi-mouse Absolute mice Yes Yes","title":"Features"},{"location":"guides/input-joypad-drivers/#required-packages","text":"TThe libudev and libxkbdcommon packages are required. udev does not require X, but udev does depend on X11 keyboard layout files being installed.","title":"Required packages"},{"location":"guides/input-joypad-drivers/#setting-up-udev-permissions","text":"Most Linux distributions prevent users from capturing keyboard/mouse information by default. Only root and users in the group \"input\" are able to access raw input. This is a security feature in case the system is used by multiple users. The easiest way to gain access to this input is to: Step 1: Add your user to the group \"input\" with the command: sudo usermod -a -G input `whoami` Step 2: Log out, and then log back in If adding your user to the input group does not succeed, you may also set up a udev rule which makes this input accessible to non-root users: Step 1: Add to /etc/udev/rules.d/99-evdev.rules the following text: KERNEL==\"event*\", NAME=\"input/%k\", MODE=\"666\" Step 2: Reload the rules with sudo udevadm control --reload-rules . Step 3: Reboot","title":"Setting up udev permissions"},{"location":"guides/input-joypad-drivers/#linuxraw-input-driver","text":"The older linuxraw driver is available which uses the legacy joystick API at /dev/input/js* . The linuxraw driver requires an active TTY in order to read keyboard events.","title":"linuxraw input driver"},{"location":"guides/input-joypad-drivers/#features_1","text":"Multi-mouse Absolute mice No Yes","title":"Features"},{"location":"guides/input-joypad-drivers/#wayland-input-driver","text":"","title":"wayland input driver"},{"location":"guides/input-joypad-drivers/#features_2","text":"Multi-mouse Absolute mice - -","title":"Features"},{"location":"guides/input-joypad-drivers/#sdl2-input-driver","text":"","title":"sdl2 input driver"},{"location":"guides/input-joypad-drivers/#features_3","text":"Multi-mouse Absolute mice* No No","title":"Features"},{"location":"guides/input-joypad-drivers/#hid-joypad-driver","text":"","title":"hid joypad driver"},{"location":"guides/input-joypad-drivers/#features_4","text":"Rumble -","title":"Features"},{"location":"guides/input-joypad-drivers/#linuxraw-joypad-driver","text":"","title":"linuxraw joypad driver"},{"location":"guides/input-joypad-drivers/#features_5","text":"Rumble -","title":"Features"},{"location":"guides/input-joypad-drivers/#sdl2-joypad-driver","text":"","title":"sdl2 joypad driver"},{"location":"guides/input-joypad-drivers/#features_6","text":"Rumble Yes","title":"Features"},{"location":"guides/input-joypad-drivers/#udev-joypad-driver","text":"","title":"udev joypad driver"},{"location":"guides/input-joypad-drivers/#features_7","text":"Rumble Yes","title":"Features"},{"location":"guides/input-joypad-drivers/#xinput-joypad-driver","text":"","title":"xinput joypad driver"},{"location":"guides/input-joypad-drivers/#features_8","text":"Rumble Yes","title":"Features"},{"location":"guides/input-joypad-drivers/#windows","text":"Windows Input Drivers dinput raw sdl2 Windows Joypad Drivers dinput hid sdl2 xinput","title":"Windows"},{"location":"guides/input-joypad-drivers/#raw-input-driver","text":"","title":"raw input driver"},{"location":"guides/input-joypad-drivers/#features_9","text":"Multi-mouse Absolute mice Yes Yes","title":"Features"},{"location":"guides/input-joypad-drivers/#dinput-input-driver","text":"","title":"dinput input driver"},{"location":"guides/input-joypad-drivers/#features_10","text":"Multi-mouse Absolute mice No No","title":"Features"},{"location":"guides/input-joypad-drivers/#sdl2-input-driver_1","text":"-To be written-","title":"sdl2 input driver"},{"location":"guides/input-joypad-drivers/#features_11","text":"Multi-mouse Absolute mice - -","title":"Features"},{"location":"guides/input-joypad-drivers/#dinput-joypad-driver","text":"","title":"dinput joypad driver"},{"location":"guides/input-joypad-drivers/#features_12","text":"Rumble No","title":"Features"},{"location":"guides/input-joypad-drivers/#hid-joypad-driver_1","text":"","title":"hid joypad driver"},{"location":"guides/input-joypad-drivers/#features_13","text":"Rumble -","title":"Features"},{"location":"guides/input-joypad-drivers/#sdl2-joypad-driver_1","text":"","title":"sdl2 joypad driver"},{"location":"guides/input-joypad-drivers/#features_14","text":"Rumble Yes","title":"Features"},{"location":"guides/input-joypad-drivers/#xinput-joypad-driver_1","text":"","title":"xinput joypad driver"},{"location":"guides/input-joypad-drivers/#features_15","text":"Rumble Yes","title":"Features"},{"location":"guides/input-joypad-drivers/#android","text":"Android Input Drivers android linuxraw udev Android Joypad Drivers android hid udev","title":"Android"},{"location":"guides/input-joypad-drivers/#android-input-driver","text":"","title":"android input driver"},{"location":"guides/input-joypad-drivers/#features_16","text":"Multi-mouse Absolute mice - -","title":"Features"},{"location":"guides/input-joypad-drivers/#linuxraw-input-driver_1","text":"","title":"linuxraw input driver"},{"location":"guides/input-joypad-drivers/#features_17","text":"Multi-mouse Absolute mice No Yes","title":"Features"},{"location":"guides/input-joypad-drivers/#udev-input-driver_1","text":"","title":"udev input driver"},{"location":"guides/input-joypad-drivers/#features_18","text":"Multi-mouse Absolute mice Yes No","title":"Features"},{"location":"guides/input-joypad-drivers/#android-joypad-driver","text":"","title":"android joypad driver"},{"location":"guides/input-joypad-drivers/#features_19","text":"Rumble -","title":"Features"},{"location":"guides/input-joypad-drivers/#hid-joypad-driver_2","text":"","title":"hid joypad driver"},{"location":"guides/input-joypad-drivers/#features_20","text":"Rumble -","title":"Features"},{"location":"guides/input-joypad-drivers/#udev-joypad-driver_1","text":"","title":"udev joypad driver"},{"location":"guides/input-joypad-drivers/#features_21","text":"Rumble Yes","title":"Features"},{"location":"guides/input-joypad-drivers/#os-x","text":"OS X Input Drivers cocoa OS X Joypad Drivers hid","title":"OS X"},{"location":"guides/input-joypad-drivers/#cocoa-input-driver","text":"-To be written-","title":"cocoa input driver"},{"location":"guides/input-joypad-drivers/#features_22","text":"Multi-mouse Absolute mice - -","title":"Features"},{"location":"guides/input-joypad-drivers/#hid-joypad-driver_3","text":"","title":"hid joypad driver"},{"location":"guides/input-joypad-drivers/#features_23","text":"Rumble -","title":"Features"},{"location":"guides/input-joypad-drivers/#sdl2-joypad-driver_2","text":"","title":"sdl2 joypad driver"},{"location":"guides/input-joypad-drivers/#features_24","text":"Rumble Yes","title":"Features"},{"location":"guides/input-joypad-drivers/#dos","text":"","title":"DOS"},{"location":"guides/input-joypad-drivers/#dos-input-driver","text":"","title":"DOS input driver"},{"location":"guides/input-joypad-drivers/#features_25","text":"Multi-mouse Absolute mice - -","title":"Features"},{"location":"guides/input-joypad-drivers/#dos-joypad-driver","text":"","title":"DOS joypad driver"},{"location":"guides/input-joypad-drivers/#features_26","text":"Rumble -","title":"Features"},{"location":"guides/install-3ds2ds/","text":"Downloading, Installing and Updating RetroArch for both 3DS and 2DS Family \u00b6 Prerequisites \u00b6 CFW You must have custom firmware to run RetroArch on your 3DS or 2DS. Installer You can either use FBI installer or Rosalina Menu from Luma . Warning Hardware or software changes on your device may damage your device. Downloading and installing \u00b6 There are multiple ways of downloading RetroArch for your 3DS or 2DS. Installation \u00b6 You can either choose Nightlies or Stable bundle, you can find a bundle with RetroArch, all the cores and all the assets here - pick the latest version, go to nintendo/3ds and download RetroArch_3dsx.7z or RetroArch_cia.7z . For Nightlies here - pick the latest version(based on date), and download ...RetroArch_3dsx.7z or ...RetroArch_cia.7z . Just extract RetroArch folder to the root of your SD card RetroArch.cia anywhere else, to install cores use FBI installer . Go to the RetroArch folder and open the Cores folder. Select and install the Cores you want to use. For example; install pcsx_rearmed_libretro.cia for Playstation 1 Roms. Reduce Core and Content loading times \u00b6 By default, all Cores are installed in the directory /RetroArch/Cores . With this configuration, RetroArch Cores on 3DS take nearly 30 seconds to start, as each Core in /RetroArch/Cores must be initialized - including Cores which may not be needed. The same delay is experienced when loading Content (games) as well; roughly 30 seconds to finish loading. Slow MicroSD random access/transfer speeds on the 3DS may be a likely cause. To reduce loading time for Cores and Content to under 5 seconds each, complete the following steps: Determine Cores to be used . These Cores will remain in the /RetroArch/Cores directory. Create directory for unused cores . A directory name such as /RetroArch/Cores-Notused could be created for unused Cores. Move the unused Cores . Finally, move unused Cores from /RetroArch/Cores to /RetroArch/Cores-Notused After moving unused Cores as outlined above, RetroArch Cores should start in about 5 seconds. Content should load in about 5 seconds as well. As additional Cores are needed, simply move them from /RetroArch/Cores-Notused to /RetroArch/Cores . This ensures only the required Cores are initialized by RetroArch, minimizing start times for Cores and Content. Additional Notes for MAME Cores \u00b6 MAME Content numbers in the thousands of items for MAME Cores. To help reduce loading time for MAME Content, consider creating two directories for MAME Content. This ensures frequently loaded Content is able to start faster. A directory for favorite MAME Content , containing Content which will be loaded often. A directory for all remaining MAME Content , containing Content which would be loaded infrequently. This approach will work fine as long as the MAME Content romset is a Full Non-Merged romset . If the romset is not Full Non-Merged , then all MAME content will need to remain in the same directory. Full Non-Merged romsets are the simplest romset format to get started with because each romset zip contains all necessary files for one game. For more information, please refer to Getting started with arcade emulation . Control Configuration for MAME Cores \u00b6 Much of the Content loaded by the RetroArch MAME Cores uses a Vertical display perspective for the top 3DS screen, requiring the user to rotate the 3DS counter-clockwise in order to properly see the game content and access the game controls. When using Content in this configuration, the default controls won't be suitable (as the controls are typically configured for Horizontal display perspective ). One approach to address the issue is to configure Global Options for controls, which would apply to the majority of games (such as Vertical display perspective ). For games which have a different layout ( Horizontal display perspective ), the MAME menu may be used to configure a game controller configuration for that specific Content. A simple configuration example follows, in case the majority of Content uses a Vertical configuration. Load RetroArch , then: Bind a Menu hotkey From Main Menu navigate to Settings->Input->Hotkeys . Scroll down to Menu Toggle Gamepad Combo or Menu (Toggle) and configure as desired, to display the Menu within Content. Configure Global Control for Vertical Content From Main Menu navigate to Settings->Input->Port 1 Controls . Configure as desired. Configure In-Game Control for a piece of Horizontal Content Load the content, then press the defined Hotkey to display the Quick Menu . Scroll down and select Options , then scroll down to select Display MAME menu ; change to ON , then resume content. On the MAME menu select Input (this game) and adjust the settings as desired. Finally, use the previous steps to set Display MAME menu back to OFF . Controls are now set properly for the game. Following the above ensures all Content may use the proper control configuration. Video Tutorial \u00b6","title":"3DS/2DS Family"},{"location":"guides/install-3ds2ds/#downloading-installing-and-updating-retroarch-for-both-3ds-and-2ds-family","text":"","title":"Downloading, Installing and Updating RetroArch for both 3DS and 2DS Family"},{"location":"guides/install-3ds2ds/#prerequisites","text":"CFW You must have custom firmware to run RetroArch on your 3DS or 2DS. Installer You can either use FBI installer or Rosalina Menu from Luma . Warning Hardware or software changes on your device may damage your device.","title":"Prerequisites"},{"location":"guides/install-3ds2ds/#downloading-and-installing","text":"There are multiple ways of downloading RetroArch for your 3DS or 2DS.","title":"Downloading and installing"},{"location":"guides/install-3ds2ds/#installation","text":"You can either choose Nightlies or Stable bundle, you can find a bundle with RetroArch, all the cores and all the assets here - pick the latest version, go to nintendo/3ds and download RetroArch_3dsx.7z or RetroArch_cia.7z . For Nightlies here - pick the latest version(based on date), and download ...RetroArch_3dsx.7z or ...RetroArch_cia.7z . Just extract RetroArch folder to the root of your SD card RetroArch.cia anywhere else, to install cores use FBI installer . Go to the RetroArch folder and open the Cores folder. Select and install the Cores you want to use. For example; install pcsx_rearmed_libretro.cia for Playstation 1 Roms.","title":"Installation"},{"location":"guides/install-3ds2ds/#reduce-core-and-content-loading-times","text":"By default, all Cores are installed in the directory /RetroArch/Cores . With this configuration, RetroArch Cores on 3DS take nearly 30 seconds to start, as each Core in /RetroArch/Cores must be initialized - including Cores which may not be needed. The same delay is experienced when loading Content (games) as well; roughly 30 seconds to finish loading. Slow MicroSD random access/transfer speeds on the 3DS may be a likely cause. To reduce loading time for Cores and Content to under 5 seconds each, complete the following steps: Determine Cores to be used . These Cores will remain in the /RetroArch/Cores directory. Create directory for unused cores . A directory name such as /RetroArch/Cores-Notused could be created for unused Cores. Move the unused Cores . Finally, move unused Cores from /RetroArch/Cores to /RetroArch/Cores-Notused After moving unused Cores as outlined above, RetroArch Cores should start in about 5 seconds. Content should load in about 5 seconds as well. As additional Cores are needed, simply move them from /RetroArch/Cores-Notused to /RetroArch/Cores . This ensures only the required Cores are initialized by RetroArch, minimizing start times for Cores and Content.","title":"Reduce Core and Content loading times"},{"location":"guides/install-3ds2ds/#additional-notes-for-mame-cores","text":"MAME Content numbers in the thousands of items for MAME Cores. To help reduce loading time for MAME Content, consider creating two directories for MAME Content. This ensures frequently loaded Content is able to start faster. A directory for favorite MAME Content , containing Content which will be loaded often. A directory for all remaining MAME Content , containing Content which would be loaded infrequently. This approach will work fine as long as the MAME Content romset is a Full Non-Merged romset . If the romset is not Full Non-Merged , then all MAME content will need to remain in the same directory. Full Non-Merged romsets are the simplest romset format to get started with because each romset zip contains all necessary files for one game. For more information, please refer to Getting started with arcade emulation .","title":"Additional Notes for MAME Cores"},{"location":"guides/install-3ds2ds/#control-configuration-for-mame-cores","text":"Much of the Content loaded by the RetroArch MAME Cores uses a Vertical display perspective for the top 3DS screen, requiring the user to rotate the 3DS counter-clockwise in order to properly see the game content and access the game controls. When using Content in this configuration, the default controls won't be suitable (as the controls are typically configured for Horizontal display perspective ). One approach to address the issue is to configure Global Options for controls, which would apply to the majority of games (such as Vertical display perspective ). For games which have a different layout ( Horizontal display perspective ), the MAME menu may be used to configure a game controller configuration for that specific Content. A simple configuration example follows, in case the majority of Content uses a Vertical configuration. Load RetroArch , then: Bind a Menu hotkey From Main Menu navigate to Settings->Input->Hotkeys . Scroll down to Menu Toggle Gamepad Combo or Menu (Toggle) and configure as desired, to display the Menu within Content. Configure Global Control for Vertical Content From Main Menu navigate to Settings->Input->Port 1 Controls . Configure as desired. Configure In-Game Control for a piece of Horizontal Content Load the content, then press the defined Hotkey to display the Quick Menu . Scroll down and select Options , then scroll down to select Display MAME menu ; change to ON , then resume content. On the MAME menu select Input (this game) and adjust the settings as desired. Finally, use the previous steps to set Display MAME menu back to OFF . Controls are now set properly for the game. Following the above ensures all Content may use the proper control configuration.","title":"Control Configuration for MAME Cores"},{"location":"guides/install-3ds2ds/#video-tutorial","text":"","title":"Video Tutorial"},{"location":"guides/install-android/","text":"Downloading, Installing and Updating RetroArch for Android devices. \u00b6 Downloading and installing \u00b6 There are multiple ways of downloading RetroArch for your Android device. Depending on your Android phone's architecture, you may want to install 64 bit instead of 32 bit. Installation via Google Play \u00b6 Open the Google Play Store app Note: you can also go to play.google.com Search for RetroArch . Select RetroArch then Download . This will download the latest stable version. Or you can go to the Google Play Store page by clicking here for 64bit or by clicking here for 32bit . Installation via Website \u00b6 Unknown Sources To avoid compromising the safety of your device, always use applications provided through our official channels. Go to www.retroarch.com then click Get RetroArch or click here on your device. Scroll down untill Android section. Select either Download or Download (64bit) . There are several ways to determine if you have 64bit or 32bit version. You can use app like Antutu or AIDA64 . You can still find out without app. Go to Settings - System and check Kernel version . If the code inside contains x64 string, your device has a 64-bit OS ; if you cannot find this string, then is 32-bit . Click on the downloaded APK file. Before Android Oreo : Enter your device settings. Go to Security . Find the Unknown Sources option and check the box. A warning will pop up which you should definitely read. Once done, hit OK and this will enable you to install APKs from Unknown Sources. After Android Oreo : Begin installation with a file browser or through the web browser. Android will tell you that the app doesn\u2019t have permission to install APKs . Click the available Settings button in that prompt. In the next menu, tick the box that lets that app install APKs. Hit the back button to return to your installation. Installation via F-Droid \u00b6 This is our F-Droid app repository for RetroArch. You can add this repo via QR scanning the code below: . or by entering https://fdroid.libretro.com in the F-Droid application . You can also download older builds using https://fdroid.libretro.com/archive as repository URL in the F-Droid application. Download with Buildbot \u00b6 You can either choose Nightlies or Stable bundle, you can find a bundle with RetroArch, all the cores and all the assets here - pick the latest version, go to android and download RetroArch.apk or RetroArch_aarch64.apk . For Nightlies here - pick the latest version(based on date), and download ...RetroArch.apk or ...RetroArch_aarch64.apk . ( where ... represents the date ) Video Tutorial \u00b6","title":"Android"},{"location":"guides/install-android/#downloading-installing-and-updating-retroarch-for-android-devices","text":"","title":"Downloading, Installing and Updating RetroArch for Android devices."},{"location":"guides/install-android/#downloading-and-installing","text":"There are multiple ways of downloading RetroArch for your Android device. Depending on your Android phone's architecture, you may want to install 64 bit instead of 32 bit.","title":"Downloading and installing"},{"location":"guides/install-android/#installation-via-google-play","text":"Open the Google Play Store app Note: you can also go to play.google.com Search for RetroArch . Select RetroArch then Download . This will download the latest stable version. Or you can go to the Google Play Store page by clicking here for 64bit or by clicking here for 32bit .","title":"Installation via Google Play"},{"location":"guides/install-android/#installation-via-website","text":"Unknown Sources To avoid compromising the safety of your device, always use applications provided through our official channels. Go to www.retroarch.com then click Get RetroArch or click here on your device. Scroll down untill Android section. Select either Download or Download (64bit) . There are several ways to determine if you have 64bit or 32bit version. You can use app like Antutu or AIDA64 . You can still find out without app. Go to Settings - System and check Kernel version . If the code inside contains x64 string, your device has a 64-bit OS ; if you cannot find this string, then is 32-bit . Click on the downloaded APK file. Before Android Oreo : Enter your device settings. Go to Security . Find the Unknown Sources option and check the box. A warning will pop up which you should definitely read. Once done, hit OK and this will enable you to install APKs from Unknown Sources. After Android Oreo : Begin installation with a file browser or through the web browser. Android will tell you that the app doesn\u2019t have permission to install APKs . Click the available Settings button in that prompt. In the next menu, tick the box that lets that app install APKs. Hit the back button to return to your installation.","title":"Installation via Website"},{"location":"guides/install-android/#installation-via-f-droid","text":"This is our F-Droid app repository for RetroArch. You can add this repo via QR scanning the code below: . or by entering https://fdroid.libretro.com in the F-Droid application . You can also download older builds using https://fdroid.libretro.com/archive as repository URL in the F-Droid application.","title":"Installation via F-Droid"},{"location":"guides/install-android/#download-with-buildbot","text":"You can either choose Nightlies or Stable bundle, you can find a bundle with RetroArch, all the cores and all the assets here - pick the latest version, go to android and download RetroArch.apk or RetroArch_aarch64.apk . For Nightlies here - pick the latest version(based on date), and download ...RetroArch.apk or ...RetroArch_aarch64.apk . ( where ... represents the date )","title":"Download with Buildbot"},{"location":"guides/install-android/#video-tutorial","text":"","title":"Video Tutorial"},{"location":"guides/install-gnu/","text":"Downloading, Installing and Updating RetroArch \u00b6 GNU/Linux \u00b6 Flatpak \u00b6 Flatpak is a distro-agnostic way to install RetroArch across many different GNU/Linux based operating systems. RetroArch currently resides in the FlatHub repository. First you should ensure that Flatpak is installed . Once installed, open the terminal emulator that came with your distro, and run the following command to see how to use it: flatpak --help Next you should add the Flathub repository, so that it may download from it: flatpak remote-add --user --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo To install RetroArch execute: flatpak install --user flathub org.libretro.RetroArch To update you should periodcally run flatpak --user update Ubuntu-based \u00b6 The best way to get RetroArch and the corresponding libretro cores on to a Ubuntu-based system is using PPA. First open the terminal on Ubuntu. You now need to consider which branch you want to use, stable or testing? Stable will give you better stablity at the cost of slower updates, while testing gives you the chance to try features early and get updates quicker. To add the stable branch to your system type: sudo add-apt-repository ppa:libretro/stable Or if you want the testing version: sudo add-apt-repository ppa:libretro/testing You should now update the repositories: sudo apt-get update And finally install RetroArch: sudo apt-get install retroarch Updating will happen system-wide, to change frequency update checks, you should change this in Ubuntu's software updater settings. Arch-based \u00b6 Arch Linux provides stable releases of RetroArch in their community repository. Install with: sudo pacman -S retroarch A git release of RetroArch is also available on the AUR . Video Tutorial \u00b6","title":"GNU/Linux"},{"location":"guides/install-gnu/#downloading-installing-and-updating-retroarch","text":"","title":"Downloading, Installing and Updating RetroArch"},{"location":"guides/install-gnu/#gnulinux","text":"","title":"GNU/Linux"},{"location":"guides/install-gnu/#flatpak","text":"Flatpak is a distro-agnostic way to install RetroArch across many different GNU/Linux based operating systems. RetroArch currently resides in the FlatHub repository. First you should ensure that Flatpak is installed . Once installed, open the terminal emulator that came with your distro, and run the following command to see how to use it: flatpak --help Next you should add the Flathub repository, so that it may download from it: flatpak remote-add --user --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo To install RetroArch execute: flatpak install --user flathub org.libretro.RetroArch To update you should periodcally run flatpak --user update","title":"Flatpak"},{"location":"guides/install-gnu/#ubuntu-based","text":"The best way to get RetroArch and the corresponding libretro cores on to a Ubuntu-based system is using PPA. First open the terminal on Ubuntu. You now need to consider which branch you want to use, stable or testing? Stable will give you better stablity at the cost of slower updates, while testing gives you the chance to try features early and get updates quicker. To add the stable branch to your system type: sudo add-apt-repository ppa:libretro/stable Or if you want the testing version: sudo add-apt-repository ppa:libretro/testing You should now update the repositories: sudo apt-get update And finally install RetroArch: sudo apt-get install retroarch Updating will happen system-wide, to change frequency update checks, you should change this in Ubuntu's software updater settings.","title":"Ubuntu-based"},{"location":"guides/install-gnu/#arch-based","text":"Arch Linux provides stable releases of RetroArch in their community repository. Install with: sudo pacman -S retroarch A git release of RetroArch is also available on the AUR .","title":"Arch-based"},{"location":"guides/install-gnu/#video-tutorial","text":"","title":"Video Tutorial"},{"location":"guides/install-ios/","text":"Downloading, Installing and Updating RetroArch for iOS devices. \u00b6 Downloading and installing \u00b6 There are multiple ways of downloading RetroArch for your iOS device. Depending on your iOS phone's version, you may want to install iOS 9 instead of iOS 11. Click here (iOS11+) to download now. Prerequisites \u00b6 iTunes We need iTunes to transfer content and for Cydia Impactor to work properly. Cydia Impactor You can use this tool to install IPA files on iOS and APK files on Android. Warning RetroArch or Libretro is not affiliated with Cydia Impactor in anyway. You can also use alternative applications that can do this function. Installation \u00b6 Installation for non-Jailbreak Devices \u00b6 In order to install the RetroArch on your non-Jailbreak device, we need to use a third-party application. The name of this application is Cydia Impactor and is not associated with LibRetro or RetroArch. You need to provide the Cydia Impactor yourself, you can reach the desired result using your favorite search engine. Run the Cydia Impactor . Drag and drop the .ipa file onto Cydia Impactor . Enter the email for your iTunes account. Enter the password for your iTunes account. Note: You will encounter an error and will ask you to create an application-specific password Go to appleid.apple.com Sign in with your Apple account information. Scroll down to the App-specific password field and click Generate Password... Enter a password label. Note: You can name it RetroArch or type a label of your choice. Copy your app-specific password and perform steps 2 and 3 again. Enter your app-specific password this time instead of your Apple-ID password. Note: Wait until you see Complete. We will continue from here on your iOS device. You can see RetroArch on your screen, but don't run it for now. Go to Settings then General . Scroll down until you see Device Management , then open it. You will see your iCloud e-mail address that you entered before, just click on it. Click Trust \" your-email-address@icloud.com \" Now you are free to run RetroArch. Content transfer via iTunes \u00b6 Unknown Sources To avoid compromising the safety of your device, always use applications provided through official channels. Go to https://support.apple.com/downloads/itunes or click here to go to downloads. Then click Download iTunes based on your OS. Install and run iTunes. Note: Connect your device to your computer via USB cable and complete the pre-installation if necessary. Click the iphone icon at the top. Click File Sharing from the left menu. Now you'll see RetroArch with some of your apps here. Select RetroArch. Drag and drop your content to RetroArch Documents field . You can find your content under Load Content > /var/mobile/containers/dat . Video Tutorial \u00b6","title":"iOS"},{"location":"guides/install-ios/#downloading-installing-and-updating-retroarch-for-ios-devices","text":"","title":"Downloading, Installing and Updating RetroArch for iOS devices."},{"location":"guides/install-ios/#downloading-and-installing","text":"There are multiple ways of downloading RetroArch for your iOS device. Depending on your iOS phone's version, you may want to install iOS 9 instead of iOS 11. Click here (iOS11+) to download now.","title":"Downloading and installing"},{"location":"guides/install-ios/#prerequisites","text":"iTunes We need iTunes to transfer content and for Cydia Impactor to work properly. Cydia Impactor You can use this tool to install IPA files on iOS and APK files on Android. Warning RetroArch or Libretro is not affiliated with Cydia Impactor in anyway. You can also use alternative applications that can do this function.","title":"Prerequisites"},{"location":"guides/install-ios/#installation","text":"","title":"Installation"},{"location":"guides/install-ios/#installation-for-non-jailbreak-devices","text":"In order to install the RetroArch on your non-Jailbreak device, we need to use a third-party application. The name of this application is Cydia Impactor and is not associated with LibRetro or RetroArch. You need to provide the Cydia Impactor yourself, you can reach the desired result using your favorite search engine. Run the Cydia Impactor . Drag and drop the .ipa file onto Cydia Impactor . Enter the email for your iTunes account. Enter the password for your iTunes account. Note: You will encounter an error and will ask you to create an application-specific password Go to appleid.apple.com Sign in with your Apple account information. Scroll down to the App-specific password field and click Generate Password... Enter a password label. Note: You can name it RetroArch or type a label of your choice. Copy your app-specific password and perform steps 2 and 3 again. Enter your app-specific password this time instead of your Apple-ID password. Note: Wait until you see Complete. We will continue from here on your iOS device. You can see RetroArch on your screen, but don't run it for now. Go to Settings then General . Scroll down until you see Device Management , then open it. You will see your iCloud e-mail address that you entered before, just click on it. Click Trust \" your-email-address@icloud.com \" Now you are free to run RetroArch.","title":"Installation for non-Jailbreak Devices"},{"location":"guides/install-ios/#content-transfer-via-itunes","text":"Unknown Sources To avoid compromising the safety of your device, always use applications provided through official channels. Go to https://support.apple.com/downloads/itunes or click here to go to downloads. Then click Download iTunes based on your OS. Install and run iTunes. Note: Connect your device to your computer via USB cable and complete the pre-installation if necessary. Click the iphone icon at the top. Click File Sharing from the left menu. Now you'll see RetroArch with some of your apps here. Select RetroArch. Drag and drop your content to RetroArch Documents field . You can find your content under Load Content > /var/mobile/containers/dat .","title":"Content transfer via iTunes"},{"location":"guides/install-ios/#video-tutorial","text":"","title":"Video Tutorial"},{"location":"guides/install-lakka/","text":"Downloading, Installing and Updating Lakka for PC. \u00b6 What is it? \u00b6 Lakka is a lightweight Linux distribution that transforms a small computer into a full blown retrogaming console. Disclaimer \u00b6 Lakka is still under heavy development. In its current state, the project allows you to play most games on most platforms. However, expect bugs, missing features or features not working as intended, and hardware that is yet to be supported. If you find a bug, you can declare it in our tracker , unless already reported. Prerequisites \u00b6 SD card or USB You need a USB or SD Card to write the installation image. Flashing Software You can use either Etcher or Win32 disk imager . Download Lakka \u00b6 Click here to get the 64bit version or click here to get the 32bit version. Please note that due to the wide variety of PC hardware, Lakka may not work on your hardware. Those image are USB images, not CD or DVD images, those installation mediums are unsupported. Also, we don't support virtualization and dualboot. Lakka is meant to be installed on real hardware. Flashing Lakka Image \u00b6 The following softwares are fine however you can use any other software you want. The following softwares are not related to RetroArch or Libretro in any way. You must act consciously when providing or using these softwares. Etcher \u00b6 Etcher is a free and open-source utility used for burning image files such as .iso and .img files, as well as zipped folders to create live SD cards and USB flash drives. \u2022 Run Etcher \u2022 Select Lakka Image \u2022 Select USB drive \u2022 Click Flash Win32 Disk Imager \u00b6 This program is designed to write a raw disk image to a removable device or backup a removable device to a raw image file. \u2022 Click on the folder icon \u2022 Select the image file \u2022 Select drive letter UNDER DEVICE \u2022 Click Write Installation \u00b6 Lakka is still under heavy development. In its current state, the project allows you to play most games on most platforms. However, expect bugs, missing features or features not working as intended, and hardware that is yet to be supported. The Live USB Mode \u00b6 Lakka can be installed on an USB key, and be booted in Live Mode on any PC that supports Lakka\u2019s requirements. This Live Mode is persistent: all changes will be saved to the key, safely storing games within the USB. Unknown Sources To avoid compromising the safety of your device, always use applications provided through our official channels. Insert your USB drive into your computer. Boot from USB. You can use Boot Device Options by pressing the key specified by your motherboard manufacturer. You can choose to boot from USB in the BIOS. The above options may vary depending on your motherboard model. Wait during the bootloader phase . This will start the Lakka operating system via USB. This Live Mode is persistent: all changes will be saved to the key, safely storing games within the USB. You will be able to check if Lakka works on your hardware, without altering your PC\u2019s hard drive or partitions. Certain settings and configurations may not be saved in spite of the persistence property. Full Setup \u00b6 Installing Lakka on your device is as simple as installing any other operating systems. You may experience unexpected errors during setup. Lakka is still under construction. Insert your USB drive into your computer. Boot from USB. You can use Boot Device Options by pressing the key specified by your motherboard manufacturer. You can choose to boot from USB in the BIOS. The above options may vary depending on your motherboard model. Type installer or live Select Install Lakka . Use the up/down arrows to select the drive to install. Observe the warnings on the screen. If you continue the targeted drive will be wiped out. Select Yes in confirmation alerts. After the installation, you will return to the Main menu. Remove the USB and select Reboot . Your computer will launch Lakka on the next Boot. Conclusion \u00b6 Lakka is still under heavy development. In its current state, the project allows you to play most games on most platforms. More information can be found in the Lakka documents . You may also want to check the Official Forum . Video Tutorial \u00b6","title":"Lakka-PC"},{"location":"guides/install-lakka/#downloading-installing-and-updating-lakka-for-pc","text":"","title":"Downloading, Installing and Updating Lakka for PC."},{"location":"guides/install-lakka/#what-is-it","text":"Lakka is a lightweight Linux distribution that transforms a small computer into a full blown retrogaming console.","title":"What is it?"},{"location":"guides/install-lakka/#disclaimer","text":"Lakka is still under heavy development. In its current state, the project allows you to play most games on most platforms. However, expect bugs, missing features or features not working as intended, and hardware that is yet to be supported. If you find a bug, you can declare it in our tracker , unless already reported.","title":"Disclaimer"},{"location":"guides/install-lakka/#prerequisites","text":"SD card or USB You need a USB or SD Card to write the installation image. Flashing Software You can use either Etcher or Win32 disk imager .","title":"Prerequisites"},{"location":"guides/install-lakka/#download-lakka","text":"Click here to get the 64bit version or click here to get the 32bit version. Please note that due to the wide variety of PC hardware, Lakka may not work on your hardware. Those image are USB images, not CD or DVD images, those installation mediums are unsupported. Also, we don't support virtualization and dualboot. Lakka is meant to be installed on real hardware.","title":"Download Lakka"},{"location":"guides/install-lakka/#flashing-lakka-image","text":"The following softwares are fine however you can use any other software you want. The following softwares are not related to RetroArch or Libretro in any way. You must act consciously when providing or using these softwares.","title":"Flashing Lakka Image"},{"location":"guides/install-lakka/#etcher","text":"Etcher is a free and open-source utility used for burning image files such as .iso and .img files, as well as zipped folders to create live SD cards and USB flash drives. \u2022 Run Etcher \u2022 Select Lakka Image \u2022 Select USB drive \u2022 Click Flash","title":"Etcher"},{"location":"guides/install-lakka/#win32-disk-imager","text":"This program is designed to write a raw disk image to a removable device or backup a removable device to a raw image file. \u2022 Click on the folder icon \u2022 Select the image file \u2022 Select drive letter UNDER DEVICE \u2022 Click Write","title":"Win32 Disk Imager"},{"location":"guides/install-lakka/#installation","text":"Lakka is still under heavy development. In its current state, the project allows you to play most games on most platforms. However, expect bugs, missing features or features not working as intended, and hardware that is yet to be supported.","title":"Installation"},{"location":"guides/install-lakka/#the-live-usb-mode","text":"Lakka can be installed on an USB key, and be booted in Live Mode on any PC that supports Lakka\u2019s requirements. This Live Mode is persistent: all changes will be saved to the key, safely storing games within the USB. Unknown Sources To avoid compromising the safety of your device, always use applications provided through our official channels. Insert your USB drive into your computer. Boot from USB. You can use Boot Device Options by pressing the key specified by your motherboard manufacturer. You can choose to boot from USB in the BIOS. The above options may vary depending on your motherboard model. Wait during the bootloader phase . This will start the Lakka operating system via USB. This Live Mode is persistent: all changes will be saved to the key, safely storing games within the USB. You will be able to check if Lakka works on your hardware, without altering your PC\u2019s hard drive or partitions. Certain settings and configurations may not be saved in spite of the persistence property.","title":"The Live USB Mode"},{"location":"guides/install-lakka/#full-setup","text":"Installing Lakka on your device is as simple as installing any other operating systems. You may experience unexpected errors during setup. Lakka is still under construction. Insert your USB drive into your computer. Boot from USB. You can use Boot Device Options by pressing the key specified by your motherboard manufacturer. You can choose to boot from USB in the BIOS. The above options may vary depending on your motherboard model. Type installer or live Select Install Lakka . Use the up/down arrows to select the drive to install. Observe the warnings on the screen. If you continue the targeted drive will be wiped out. Select Yes in confirmation alerts. After the installation, you will return to the Main menu. Remove the USB and select Reboot . Your computer will launch Lakka on the next Boot.","title":"Full Setup"},{"location":"guides/install-lakka/#conclusion","text":"Lakka is still under heavy development. In its current state, the project allows you to play most games on most platforms. More information can be found in the Lakka documents . You may also want to check the Official Forum .","title":"Conclusion"},{"location":"guides/install-lakka/#video-tutorial","text":"","title":"Video Tutorial"},{"location":"guides/install-libnx/","text":"Downloading, Installing and Updating RetroArch \u00b6 Nintendo Switch \u00b6 Note You need to have Atmosph\u00e8re custom firmware to run RetroArch on your Switch. Warning Hardware or software changes on your device may damage your device. Downloading and installing \u00b6 There are multiple ways of downloading RetroArch for your Switch. Using the stable bundle (recommended) \u00b6 You can find a bundle with RetroArch, all the cores and all the assets here - pick the latest version, go to nintendo/switch/libnx and download RetroArch.7z . Just extract the archive to the root of your SD card to install or update your copy of RetroArch (overwrite any existing file). Using the nightlies and/or the online updater (advanced users) \u00b6 If you don't want to download all cores at once, you can go here and only pick the ones you want. Put the downloaded NROs in retroarch/cores on your SD card. You can run them directly using the homebrew menu. Alternatively, you can download only one core and use the Online Updater inside of RetroArch to download or update additional cores later. Running RetroArch using title takeover \u00b6 The preferred way of running RetroArch is to use Atmosph\u00e8re's title takeover feature. This allows you to (temporarly) replace a game with the homebrew loader, which will then be used to load RetroArch. Make sure to use the latest version of Atmosph\u00e8re before continuing. Note: You need at least one title on the console (whether it's a digitally puchased game or a demo or a cartridge game or even an homebrew NSP). If you can pick an up to date game that's better as you won't be nagged everytime you run it. Atmosph\u00e8re now contains everything needed to run homebrews out of the box. To do so, simply run any game while holding the R key. Make sure to hold the key until you can actually see the homebrew menu. Select RetroArch in the list to start! If you wish to change the key, you can edit /atmosphere/loader.ini and change override_key here. You can add a ! in front of the key to flip the condition (\"run homebrew if the key is pressed\" versus \"run homebrew if the key isn't pressed\"). Video Tutorial \u00b6","title":"Switch"},{"location":"guides/install-libnx/#downloading-installing-and-updating-retroarch","text":"","title":"Downloading, Installing and Updating RetroArch"},{"location":"guides/install-libnx/#nintendo-switch","text":"Note You need to have Atmosph\u00e8re custom firmware to run RetroArch on your Switch. Warning Hardware or software changes on your device may damage your device.","title":"Nintendo Switch"},{"location":"guides/install-libnx/#downloading-and-installing","text":"There are multiple ways of downloading RetroArch for your Switch.","title":"Downloading and installing"},{"location":"guides/install-libnx/#using-the-stable-bundle-recommended","text":"You can find a bundle with RetroArch, all the cores and all the assets here - pick the latest version, go to nintendo/switch/libnx and download RetroArch.7z . Just extract the archive to the root of your SD card to install or update your copy of RetroArch (overwrite any existing file).","title":"Using the stable bundle (recommended)"},{"location":"guides/install-libnx/#using-the-nightlies-andor-the-online-updater-advanced-users","text":"If you don't want to download all cores at once, you can go here and only pick the ones you want. Put the downloaded NROs in retroarch/cores on your SD card. You can run them directly using the homebrew menu. Alternatively, you can download only one core and use the Online Updater inside of RetroArch to download or update additional cores later.","title":"Using the nightlies and/or the online updater (advanced users)"},{"location":"guides/install-libnx/#running-retroarch-using-title-takeover","text":"The preferred way of running RetroArch is to use Atmosph\u00e8re's title takeover feature. This allows you to (temporarly) replace a game with the homebrew loader, which will then be used to load RetroArch. Make sure to use the latest version of Atmosph\u00e8re before continuing. Note: You need at least one title on the console (whether it's a digitally puchased game or a demo or a cartridge game or even an homebrew NSP). If you can pick an up to date game that's better as you won't be nagged everytime you run it. Atmosph\u00e8re now contains everything needed to run homebrews out of the box. To do so, simply run any game while holding the R key. Make sure to hold the key until you can actually see the homebrew menu. Select RetroArch in the list to start! If you wish to change the key, you can edit /atmosphere/loader.ini and change override_key here. You can add a ! in front of the key to flip the condition (\"run homebrew if the key is pressed\" versus \"run homebrew if the key isn't pressed\").","title":"Running RetroArch using title takeover"},{"location":"guides/install-libnx/#video-tutorial","text":"","title":"Video Tutorial"},{"location":"guides/install-ps2/","text":"Downloading and Installing RetroArch for PlayStation 2 \u00b6 PlayStation 2 \u00b6 Note: You currently need the have a way to execute homebrew to run RetroArch on your PlayStation 2. Prerequisites \u00b6 This is probably the most straightforward way to install RetroArch. FreeMCBoot Downloading and installing \u00b6 At this time we can only use the Stable version of 1.8.2, this will be improved in the future. Downloading \u00b6 You can download a bundle with RetroArch, all the supported cores and all the assets by clicking here . Installing \u00b6 Installation is also very simple. Just create RetroArch folder where put all the cores (.elf). Copy this folder into a USB stick. Finally, use your favorite file explorer (usually UlaunchELF ) to navigate to mass0:\\ , then enter in RetroArch folder and launch the core you wish. Video Tutorial \u00b6","title":"PlayStation 2"},{"location":"guides/install-ps2/#downloading-and-installing-retroarch-for-playstation-2","text":"","title":"Downloading and Installing RetroArch for PlayStation 2"},{"location":"guides/install-ps2/#playstation-2","text":"Note: You currently need the have a way to execute homebrew to run RetroArch on your PlayStation 2.","title":"PlayStation 2"},{"location":"guides/install-ps2/#prerequisites","text":"This is probably the most straightforward way to install RetroArch. FreeMCBoot","title":"Prerequisites"},{"location":"guides/install-ps2/#downloading-and-installing","text":"At this time we can only use the Stable version of 1.8.2, this will be improved in the future.","title":"Downloading and installing"},{"location":"guides/install-ps2/#downloading","text":"You can download a bundle with RetroArch, all the supported cores and all the assets by clicking here .","title":"Downloading"},{"location":"guides/install-ps2/#installing","text":"Installation is also very simple. Just create RetroArch folder where put all the cores (.elf). Copy this folder into a USB stick. Finally, use your favorite file explorer (usually UlaunchELF ) to navigate to mass0:\\ , then enter in RetroArch folder and launch the core you wish.","title":"Installing"},{"location":"guides/install-ps2/#video-tutorial","text":"","title":"Video Tutorial"},{"location":"guides/install-ps3/","text":"Downloading and Installing RetroArch for PlayStation 3 \u00b6 Sony Playstation 3 \u00b6 Note You need to have any-CFW(Rebug, Ferrox etc.) custom firmware to run RetroArch on your PlayStation 3. Warning Hardware or software changes on your device may damage your device. Prerequisites \u00b6 This is probably the most straightforward way to install RetroArch. FAT32 formatted USB, It should be partitioned as MBR rather than GPT. any-CFW Downloading and installing \u00b6 There are multiple ways of downloading RetroArch for your Playstation 3. Download the correct file \u00b6 There are two types of CFW files. One of them is CEX and the other is DEX . CFW devices with CEX systems are more specific to the end user. On the other hand the DEX version is more for developers. You can use RetroArch in two ways and benefit from the same features. Always check which version of your CFW you have and download the correct file. You can find a bundle with RetroArch, all the cores and all the assets for CEX and DEX by clicking here and scroll down untill PlayStation 3 section. Installing \u00b6 Installation is also very simple. Just extract the archive to the root of your USB. Put your USB to right USB port. Use the CFW package installer to select and install RetroArch's pkg file. You can watch the short video Demonstration by clicking on the image below. Video Tutorial \u00b6","title":"PlayStation 3"},{"location":"guides/install-ps3/#downloading-and-installing-retroarch-for-playstation-3","text":"","title":"Downloading and Installing RetroArch for PlayStation 3"},{"location":"guides/install-ps3/#sony-playstation-3","text":"Note You need to have any-CFW(Rebug, Ferrox etc.) custom firmware to run RetroArch on your PlayStation 3. Warning Hardware or software changes on your device may damage your device.","title":"Sony Playstation 3"},{"location":"guides/install-ps3/#prerequisites","text":"This is probably the most straightforward way to install RetroArch. FAT32 formatted USB, It should be partitioned as MBR rather than GPT. any-CFW","title":"Prerequisites"},{"location":"guides/install-ps3/#downloading-and-installing","text":"There are multiple ways of downloading RetroArch for your Playstation 3.","title":"Downloading and installing"},{"location":"guides/install-ps3/#download-the-correct-file","text":"There are two types of CFW files. One of them is CEX and the other is DEX . CFW devices with CEX systems are more specific to the end user. On the other hand the DEX version is more for developers. You can use RetroArch in two ways and benefit from the same features. Always check which version of your CFW you have and download the correct file. You can find a bundle with RetroArch, all the cores and all the assets for CEX and DEX by clicking here and scroll down untill PlayStation 3 section.","title":"Download the correct file"},{"location":"guides/install-ps3/#installing","text":"Installation is also very simple. Just extract the archive to the root of your USB. Put your USB to right USB port. Use the CFW package installer to select and install RetroArch's pkg file. You can watch the short video Demonstration by clicking on the image below.","title":"Installing"},{"location":"guides/install-ps3/#video-tutorial","text":"","title":"Video Tutorial"},{"location":"guides/install-psp/","text":"Downloading and Installing RetroArch for PlayStation Portable \u00b6 PlayStation Portable \u00b6 Note You currently need the have custom firmware(PRO-C) to run RetroArch on your PlayStation Portable. Warning Hardware or software changes on your device may damage your device. Warning PRO-C must be running before running RetroArch, if you run RetroArch before running PRO-C, data corrupt error will occur. Prerequisites \u00b6 This is probably the most straightforward way to install RetroArch. Pro CFW (latest version) Downloading and installing \u00b6 At this time we can only use the Stable version of 1.8.2, this will be improved in the future. Downloading \u00b6 You can download a bundle with RetroArch, all the supported cores and all the assets by clicking here . Installing \u00b6 Installation is also very simple. Just create RetroArch folder under PSP/Game directory and transfer the archive files to the PSP/Game/RetroArch then go to Memory Stick\u2122 under Game press X and first or last application is must be RetroArch. Video Tutorial \u00b6","title":"PlayStation Portable"},{"location":"guides/install-psp/#downloading-and-installing-retroarch-for-playstation-portable","text":"","title":"Downloading and Installing RetroArch for PlayStation Portable"},{"location":"guides/install-psp/#playstation-portable","text":"Note You currently need the have custom firmware(PRO-C) to run RetroArch on your PlayStation Portable. Warning Hardware or software changes on your device may damage your device. Warning PRO-C must be running before running RetroArch, if you run RetroArch before running PRO-C, data corrupt error will occur.","title":"PlayStation Portable"},{"location":"guides/install-psp/#prerequisites","text":"This is probably the most straightforward way to install RetroArch. Pro CFW (latest version)","title":"Prerequisites"},{"location":"guides/install-psp/#downloading-and-installing","text":"At this time we can only use the Stable version of 1.8.2, this will be improved in the future.","title":"Downloading and installing"},{"location":"guides/install-psp/#downloading","text":"You can download a bundle with RetroArch, all the supported cores and all the assets by clicking here .","title":"Downloading"},{"location":"guides/install-psp/#installing","text":"Installation is also very simple. Just create RetroArch folder under PSP/Game directory and transfer the archive files to the PSP/Game/RetroArch then go to Memory Stick\u2122 under Game press X and first or last application is must be RetroArch.","title":"Installing"},{"location":"guides/install-psp/#video-tutorial","text":"","title":"Video Tutorial"},{"location":"guides/install-psv/","text":"Downloading and Installing RetroArch for PlayStation Vita \u00b6 PlayStation Vita \u00b6 Note You need to have custom firmware(HENkaku) to run RetroArch on your PlayStation Vita. Warning Hardware or software changes on your device may damage your device. Prerequisites \u00b6 This is probably the most straightforward way to install RetroArch. HENkaku (latest version) VitaShell Downloading and Installing \u00b6 We're gonna download two files to get the full experience. One of these files is the .vpk version of RetroArch and the other is the bundle package with assets. Downloading \u00b6 You can download a stable RetroArch by clicking here . If you want to install the Nightly version, you can also use this link . From now on, there are two ways to download our assets. This option will affect your setup method. We're going use the bundle this time. RetroArch's data You can download RetroArch's data file from this link or nightly . Bundle You can download bundle file from this link . Installing \u00b6 Both installation methods will give you the same result. Nightly files will give you the latest developments. This is sometimes dangerous and sometimes innovative. We will use the Stable version and recommend it. Installing with RetroArch's Data \u00b6 Connect your PS Vita with your PC via VitaShell . Just move RetroArch folder inside downloaded data archive to PS Vita data directory. Move your RetroArch.vpk to root of your sdcard. Disconnect PS Vita from your PC. Enter the ux0: directory, you will see a lot of files, scroll down to the bottom until you see RetroArch.vpk . Press your selection key, it can be O or X . You may receive a warning asking for the reliability of the file you downloaded, if you downloaded this file from our channels, you can accept and continue. Installing with Bundle \u00b6 Connect your PS Vita with your PC via VitaShell . Move your RetroArch.vpk to root of your sdcard. Disconnect PS Vita from your PC. Enter the ux0: directory, you will see a lot of files, scroll down to the bottom until you see RetroArch.vpk . Press your selection key, it can be O or X . You may receive a warning asking for the reliability of the file you downloaded, if you downloaded this file from our channels, you can accept and continue. Once the installation is complete, run the RetroArch once and you will see that Fonts and Images are missing. Close RetroArch and connect PS Vita to PC with VitaShell . Once you have made the connection, move the files of the downloaded Bundle archive to data/retroarch/ . After successful file transfers, close the application and run RetroArch again. Video Tutorial \u00b6","title":"PlayStation Vita"},{"location":"guides/install-psv/#downloading-and-installing-retroarch-for-playstation-vita","text":"","title":"Downloading and Installing RetroArch for PlayStation Vita"},{"location":"guides/install-psv/#playstation-vita","text":"Note You need to have custom firmware(HENkaku) to run RetroArch on your PlayStation Vita. Warning Hardware or software changes on your device may damage your device.","title":"PlayStation Vita"},{"location":"guides/install-psv/#prerequisites","text":"This is probably the most straightforward way to install RetroArch. HENkaku (latest version) VitaShell","title":"Prerequisites"},{"location":"guides/install-psv/#downloading-and-installing","text":"We're gonna download two files to get the full experience. One of these files is the .vpk version of RetroArch and the other is the bundle package with assets.","title":"Downloading and Installing"},{"location":"guides/install-psv/#downloading","text":"You can download a stable RetroArch by clicking here . If you want to install the Nightly version, you can also use this link . From now on, there are two ways to download our assets. This option will affect your setup method. We're going use the bundle this time. RetroArch's data You can download RetroArch's data file from this link or nightly . Bundle You can download bundle file from this link .","title":"Downloading"},{"location":"guides/install-psv/#installing","text":"Both installation methods will give you the same result. Nightly files will give you the latest developments. This is sometimes dangerous and sometimes innovative. We will use the Stable version and recommend it.","title":"Installing"},{"location":"guides/install-psv/#installing-with-retroarchs-data","text":"Connect your PS Vita with your PC via VitaShell . Just move RetroArch folder inside downloaded data archive to PS Vita data directory. Move your RetroArch.vpk to root of your sdcard. Disconnect PS Vita from your PC. Enter the ux0: directory, you will see a lot of files, scroll down to the bottom until you see RetroArch.vpk . Press your selection key, it can be O or X . You may receive a warning asking for the reliability of the file you downloaded, if you downloaded this file from our channels, you can accept and continue.","title":"Installing with RetroArch's Data"},{"location":"guides/install-psv/#installing-with-bundle","text":"Connect your PS Vita with your PC via VitaShell . Move your RetroArch.vpk to root of your sdcard. Disconnect PS Vita from your PC. Enter the ux0: directory, you will see a lot of files, scroll down to the bottom until you see RetroArch.vpk . Press your selection key, it can be O or X . You may receive a warning asking for the reliability of the file you downloaded, if you downloaded this file from our channels, you can accept and continue. Once the installation is complete, run the RetroArch once and you will see that Fonts and Images are missing. Close RetroArch and connect PS Vita to PC with VitaShell . Once you have made the connection, move the files of the downloaded Bundle archive to data/retroarch/ . After successful file transfers, close the application and run RetroArch again.","title":"Installing with Bundle"},{"location":"guides/install-psv/#video-tutorial","text":"","title":"Video Tutorial"},{"location":"guides/install-steamlink/","text":"Downloading and Installing RetroArch for Steam Link \u00b6 The download and installation process is as follows, and may change in the future. Threads, alsa, pulse, neon and shaderpipeline are disabled, RGUI theme is pre-configured and most Cores installed into the Cores folder for full efficiency. Prerequisites \u00b6 This is probably the most straightforward way to install RetroArch. FAT32 formatted USB Download \u00b6 You can find a cores bundle with RetroArch by clicking here and scroll down until you see the Steam Link section. Getting USB Ready \u00b6 Setting up RetroArch \u00b6 Getting RetroArch ready to install is very simple. Create the file structure in the root directory of your USB as follows: steamlink/apps/ Unzip the RetroArch.zip , move the RetroArch folder into the apps folder we just created. Content Management \u00b6 Transferring files to Steam Link can be a bit tedious. You can put your contents inside the Content folder in the RetroArch folder, however our goal is to make this process more sustainable. In this case SSH or USBmount will help us. SSH \u00b6 In order to use an SFTP connection with SSH, we must first enable SSH. It's easy to enable SSH on your Steam Link. To do this, go to steamlink folder and create two nested folders first create the Config directory then enter it and create the System directory there. The directory structure should be as follows; steamlink/config/system/ Then, enter the System directory and create an empty text file named enable_ssh.txt . Within this, create a blank text file, and label it enable_ssh.txt . The final directory structure should be as follows: steamlink/config/system/enable_ssh.txt USBmount \u00b6 USBmount is an alternative way to connect /mnt/disk . You can find more detailed information in the link below. https://steamcommunity.com/app/353380/discussions/1/152393186490496699/ Put your USBmount folder into steamlink/apps/ RetroArch is not affiliated with the above link this link may change in the future or may not be original, this subject may vary. Installation \u00b6 After completing the above operations, you should have a directory structure like the one below. Repeat the above steps until you reach the final result. steamlink apps retroarch ... config system enable_ssh.txt Format your USB to FAT32 type for fresh install. Move the steamlink folder we just created into your USB root. Unplug your USB and make sure your SteamLink is completely turned off by unplugging the power cord. Plug your USB into the first USB port, and then plug in the power cable. When Steam Link boots, RetroArch structure will be read, and RetroArch will be installed. Remove the USB after you see the RetroArch logo on the home screen. You can run the application by pressing the RetroArch logo. Content Transfer \u00b6 We can transfer our content with SSH or USBmount we have previously configured. SSH \u00b6 Find out the IP address that SteamLink receives, which you can learn from your router or SteamLink network settings. Create an SFTP connection with your trusted FTP tool. SteamLink SSH username is root and password is steamlink123 , 21 for FTP and 22 for SFTPthe sample scenario for this is as follows. It may be different(ip address) in your case. RetroArch is not related to the specified applications and cannot be held responsible. FileZilla Host Username Passoword Port 192.168.1.5 root steamlink123 22 Go to root folder and open apps folder, you will see RetroArch folder in there. Open it and move your contents to contents folder. USBmount \u00b6 Install USBmount the same way we install RetroArch. Remove the RetroArch folder from the apps directory before installation. Otherwise it will re-install on every boot. After completing the installation, create a folder on your USB and move your contents. Then plug the USB into your SteamLink and run the installed USBmount application. Video Tutorial \u00b6","title":"Steam Link"},{"location":"guides/install-steamlink/#downloading-and-installing-retroarch-for-steam-link","text":"The download and installation process is as follows, and may change in the future. Threads, alsa, pulse, neon and shaderpipeline are disabled, RGUI theme is pre-configured and most Cores installed into the Cores folder for full efficiency.","title":"Downloading and Installing RetroArch for Steam Link"},{"location":"guides/install-steamlink/#prerequisites","text":"This is probably the most straightforward way to install RetroArch. FAT32 formatted USB","title":"Prerequisites"},{"location":"guides/install-steamlink/#download","text":"You can find a cores bundle with RetroArch by clicking here and scroll down until you see the Steam Link section.","title":"Download"},{"location":"guides/install-steamlink/#getting-usb-ready","text":"","title":"Getting USB Ready"},{"location":"guides/install-steamlink/#setting-up-retroarch","text":"Getting RetroArch ready to install is very simple. Create the file structure in the root directory of your USB as follows: steamlink/apps/ Unzip the RetroArch.zip , move the RetroArch folder into the apps folder we just created.","title":"Setting up RetroArch"},{"location":"guides/install-steamlink/#content-management","text":"Transferring files to Steam Link can be a bit tedious. You can put your contents inside the Content folder in the RetroArch folder, however our goal is to make this process more sustainable. In this case SSH or USBmount will help us.","title":"Content Management"},{"location":"guides/install-steamlink/#ssh","text":"In order to use an SFTP connection with SSH, we must first enable SSH. It's easy to enable SSH on your Steam Link. To do this, go to steamlink folder and create two nested folders first create the Config directory then enter it and create the System directory there. The directory structure should be as follows; steamlink/config/system/ Then, enter the System directory and create an empty text file named enable_ssh.txt . Within this, create a blank text file, and label it enable_ssh.txt . The final directory structure should be as follows: steamlink/config/system/enable_ssh.txt","title":"SSH"},{"location":"guides/install-steamlink/#usbmount","text":"USBmount is an alternative way to connect /mnt/disk . You can find more detailed information in the link below. https://steamcommunity.com/app/353380/discussions/1/152393186490496699/ Put your USBmount folder into steamlink/apps/ RetroArch is not affiliated with the above link this link may change in the future or may not be original, this subject may vary.","title":"USBmount"},{"location":"guides/install-steamlink/#installation","text":"After completing the above operations, you should have a directory structure like the one below. Repeat the above steps until you reach the final result. steamlink apps retroarch ... config system enable_ssh.txt Format your USB to FAT32 type for fresh install. Move the steamlink folder we just created into your USB root. Unplug your USB and make sure your SteamLink is completely turned off by unplugging the power cord. Plug your USB into the first USB port, and then plug in the power cable. When Steam Link boots, RetroArch structure will be read, and RetroArch will be installed. Remove the USB after you see the RetroArch logo on the home screen. You can run the application by pressing the RetroArch logo.","title":"Installation"},{"location":"guides/install-steamlink/#content-transfer","text":"We can transfer our content with SSH or USBmount we have previously configured.","title":"Content Transfer"},{"location":"guides/install-steamlink/#ssh_1","text":"Find out the IP address that SteamLink receives, which you can learn from your router or SteamLink network settings. Create an SFTP connection with your trusted FTP tool. SteamLink SSH username is root and password is steamlink123 , 21 for FTP and 22 for SFTPthe sample scenario for this is as follows. It may be different(ip address) in your case. RetroArch is not related to the specified applications and cannot be held responsible. FileZilla Host Username Passoword Port 192.168.1.5 root steamlink123 22 Go to root folder and open apps folder, you will see RetroArch folder in there. Open it and move your contents to contents folder.","title":"SSH"},{"location":"guides/install-steamlink/#usbmount_1","text":"Install USBmount the same way we install RetroArch. Remove the RetroArch folder from the apps directory before installation. Otherwise it will re-install on every boot. After completing the installation, create a folder on your USB and move your contents. Then plug the USB into your SteamLink and run the installed USBmount application.","title":"USBmount"},{"location":"guides/install-steamlink/#video-tutorial","text":"","title":"Video Tutorial"},{"location":"guides/install-windows-2000-me-98SE/","text":"Downloading, Installing and Updating RetroArch for Windows 2000 / ME / 98SE operating systems. \u00b6 Prerequisites \u00b6 UNZIP You must have WinRAR 4.11 (32-bit) in order to unzip RetroArch.7z in Windows 2000. Downloading and installing \u00b6 There are multiple ways of downloading RetroArch for your Windows 2000 / ME / 98SE operating systems. Installer or Download in here both options provide you with the lastest RetroArch, the only difference is that one is a self extracting installer, and the other one an archive you have to extract manually. Downloading \u00b6 You can either choose Nightlies or Stable bundle, you can find a bundle with RetroArch, all the cores and all the assets here - pick the latest version, go to windows-msvc2005 and download RetroArch.7z or RetroArch-1.7.7-msvc2005-x86-setup.exe . For Nightlies here - pick the latest version(based on date), and download ...RetroArch.7z or RetroArch-...-msvc2005-x86-setup.exe . Installing \u00b6 If you pick the 7z archive package, extract it in a folder that doesn't require administrator permissions such as C:\\Users\\yourusername\\RetroArch. Don't extract it to Program Files or your Windows folder. If you pick the executable file, double click exe file and follow the instructions on-screen to install... Video Tutorial \u00b6","title":"Windows 2000/ME/98SE"},{"location":"guides/install-windows-2000-me-98SE/#downloading-installing-and-updating-retroarch-for-windows-2000-me-98se-operating-systems","text":"","title":"Downloading, Installing and Updating RetroArch for Windows 2000 / ME / 98SE operating systems."},{"location":"guides/install-windows-2000-me-98SE/#prerequisites","text":"UNZIP You must have WinRAR 4.11 (32-bit) in order to unzip RetroArch.7z in Windows 2000.","title":"Prerequisites"},{"location":"guides/install-windows-2000-me-98SE/#downloading-and-installing","text":"There are multiple ways of downloading RetroArch for your Windows 2000 / ME / 98SE operating systems. Installer or Download in here both options provide you with the lastest RetroArch, the only difference is that one is a self extracting installer, and the other one an archive you have to extract manually.","title":"Downloading and installing"},{"location":"guides/install-windows-2000-me-98SE/#downloading","text":"You can either choose Nightlies or Stable bundle, you can find a bundle with RetroArch, all the cores and all the assets here - pick the latest version, go to windows-msvc2005 and download RetroArch.7z or RetroArch-1.7.7-msvc2005-x86-setup.exe . For Nightlies here - pick the latest version(based on date), and download ...RetroArch.7z or RetroArch-...-msvc2005-x86-setup.exe .","title":"Downloading"},{"location":"guides/install-windows-2000-me-98SE/#installing","text":"If you pick the 7z archive package, extract it in a folder that doesn't require administrator permissions such as C:\\Users\\yourusername\\RetroArch. Don't extract it to Program Files or your Windows folder. If you pick the executable file, double click exe file and follow the instructions on-screen to install...","title":"Installing"},{"location":"guides/install-windows-2000-me-98SE/#video-tutorial","text":"","title":"Video Tutorial"},{"location":"guides/install-windows/","text":"Getting Started with RetroArch: Windows 7 and Later \u00b6 Downloading \u00b6 First decide if you want a stable release or a nightly. Stable \u00b6 The stable version is our first priority and the main distribution version. Since it is the major release, it comes out periodically. Stable releases take more time to manufacture, but new features become available in the next version. For example: A version can have a new theme and feature, and in the next version, this theme and feature can be removed, improved or changed. As can be understood from the name of Stable, this version is more stable because it is controlled accordingly to make it work better on the platform it is suitable for. Stable release are here , Simply click on the lastest version, navigate to Windows , and then select the architecture of your computer. Nightly \u00b6 This version contains the latest commits available on GitHub, and the latest enhancements and features are added daily. This version may not be as stable as Stable version because it is build daily, but this does not mean that it is not stable. The current nightly is here . There are several files you can download in these folders. For a new installation you want RetroArch.7z or the setup package ( RetroArch-20XX-XX-XX-setup.exe ). Both options provide you with the lastest RetroArch, the only difference is that one is a self extracting installer, and the other one an archive you have to extract manually. Both are portable installation which means the RetroArch setup is: - It's self-contained - It doesn't need users to guess random locations for configurations files - It's easy to update by just replacing files Installing \u00b6 If you pick the 7z archive package, extract it in a folder that doesn't require administrator permissions such as C:\\Users\\yourusername\\RetroArch or any other drive. Don't extract it to Program Files or your Windows folder. This could case some issues. Updating \u00b6 You can update the installation by downloading the latest 20XX-XX-XX-RetroArch.7z package and overwriting the executable. If you pick the installer package we recommend to use the default location, follow the installation steps and you should be good to go. You can update the installer version by downloading the latest version and re-running the installer. You can also update to nightly via Desktop Menu by pressing F5 which is default key. Tools > Online Updater > Update RetroArch (nightly) . This will update current release to latest built from buildbot which you can find here . Warning If you were running a stable release prior to 1.4.0. you will need to update the system libraries. You can do so by downloading the full RetroArch.7z package or redist.7z from the download locations. Starting RetroArch \u00b6 On the first run you will be greeted by this screen: From here you can launch content, change settings and build up your content collection. Keyboard Controls \u00b6 The RetroArch user interface is designed with gamepad navigation in mind but it also features robust keyboard and mouse support. Learn more about keyboard input at Input and Controls . Gamepad Controls \u00b6 XINPUT controllers should work out of the box. If the controller can be autoconfigured the OSD will inform you of the autoconfiguration event. We also include autoconf profiles for many popular controllers. If your controller doesn't auto configure you can follow this procedure: Navigate to Settings Navigate to Input Navigate to Input User 1 Binds Select User 1 Bind All Press the buttons as required Tip If you have several different controller types you may want to use the User 1 Save Autoconfig followed by User 1 Bind Default All options after binding in order to achieve hotplug functionality Directory Configuration \u00b6 Configuring directories is an important aspect to get the best RetroArch experience possible. To configure the directories follow these steps: Navigate to Settings Navigate to Directories Select the directory you want to changed Navigate to the desired location You should always configure the following paths: System Directory for system files Savefile Directory for save files Savestate Directory save state files Browser Directory for your content Tip The Browser Directory is used as a startup location which allows easy access to your content library. Installing Cores \u00b6 RetroArch requires cores to run any content. You can download cores directly from RetroArch's interface by following this procedure: Navigate to Online Updater Navigate to Select Core Updater Select the core you want to download Running Content \u00b6 After you have installed one or more cores you can run your content following this procedure: Navigate to Load Content Browse to the folder that contains the content you want to run Select the content that you want to run If you have more than one compatible core you will be asked to select the core you want to use for that purpose Tip By default loading content will trigger a content scan. If your content matches with any of our databases it will be added to a playlist for easy access. You can find the playlists by navigating to the right of the main menu. Tip Every content you launch is added to a history playlist that you can use to load it again quickly at any time Glossary \u00b6 frontend \u00b6 A frontend is a program designed to run libretro cores such as Kodi's RetroPlayer, RetroArch, Phoenix, Minir core \u00b6 A core is a program that has been ported to the libretro API and runs inside a libretro frontend content \u00b6 Content can be a game, an image, a video, an audio file that is executed by a core. In most cases contents are the ROMs of an emulated platform retropad \u00b6 RetroPad is libretro\u2019s input abstraction controller, it\u2019s the interface between the physical controller and the core inputs save files \u00b6 Save files are saves that are made from within a game, usually cross platform and should work across emulators in most cases save states \u00b6 Save states are snapshots of the content menory at a particular moment, these are not always cross platform and most certainly won\u2019t work on a different emulator that the one used to create them system files \u00b6 Additional files that might or not be part of the romset that might be needed to get some content to work (usually referred to by the BIOS term) autoconf \u00b6 A configuration file that has button definitions for a particular gamepad Video Tutorial \u00b6","title":"Windows 10"},{"location":"guides/install-windows/#getting-started-with-retroarch-windows-7-and-later","text":"","title":"Getting Started with RetroArch: Windows 7 and Later"},{"location":"guides/install-windows/#downloading","text":"First decide if you want a stable release or a nightly.","title":"Downloading"},{"location":"guides/install-windows/#stable","text":"The stable version is our first priority and the main distribution version. Since it is the major release, it comes out periodically. Stable releases take more time to manufacture, but new features become available in the next version. For example: A version can have a new theme and feature, and in the next version, this theme and feature can be removed, improved or changed. As can be understood from the name of Stable, this version is more stable because it is controlled accordingly to make it work better on the platform it is suitable for. Stable release are here , Simply click on the lastest version, navigate to Windows , and then select the architecture of your computer.","title":"Stable"},{"location":"guides/install-windows/#nightly","text":"This version contains the latest commits available on GitHub, and the latest enhancements and features are added daily. This version may not be as stable as Stable version because it is build daily, but this does not mean that it is not stable. The current nightly is here . There are several files you can download in these folders. For a new installation you want RetroArch.7z or the setup package ( RetroArch-20XX-XX-XX-setup.exe ). Both options provide you with the lastest RetroArch, the only difference is that one is a self extracting installer, and the other one an archive you have to extract manually. Both are portable installation which means the RetroArch setup is: - It's self-contained - It doesn't need users to guess random locations for configurations files - It's easy to update by just replacing files","title":"Nightly"},{"location":"guides/install-windows/#installing","text":"If you pick the 7z archive package, extract it in a folder that doesn't require administrator permissions such as C:\\Users\\yourusername\\RetroArch or any other drive. Don't extract it to Program Files or your Windows folder. This could case some issues.","title":"Installing"},{"location":"guides/install-windows/#updating","text":"You can update the installation by downloading the latest 20XX-XX-XX-RetroArch.7z package and overwriting the executable. If you pick the installer package we recommend to use the default location, follow the installation steps and you should be good to go. You can update the installer version by downloading the latest version and re-running the installer. You can also update to nightly via Desktop Menu by pressing F5 which is default key. Tools > Online Updater > Update RetroArch (nightly) . This will update current release to latest built from buildbot which you can find here . Warning If you were running a stable release prior to 1.4.0. you will need to update the system libraries. You can do so by downloading the full RetroArch.7z package or redist.7z from the download locations.","title":"Updating"},{"location":"guides/install-windows/#starting-retroarch","text":"On the first run you will be greeted by this screen: From here you can launch content, change settings and build up your content collection.","title":"Starting RetroArch"},{"location":"guides/install-windows/#keyboard-controls","text":"The RetroArch user interface is designed with gamepad navigation in mind but it also features robust keyboard and mouse support. Learn more about keyboard input at Input and Controls .","title":"Keyboard Controls"},{"location":"guides/install-windows/#gamepad-controls","text":"XINPUT controllers should work out of the box. If the controller can be autoconfigured the OSD will inform you of the autoconfiguration event. We also include autoconf profiles for many popular controllers. If your controller doesn't auto configure you can follow this procedure: Navigate to Settings Navigate to Input Navigate to Input User 1 Binds Select User 1 Bind All Press the buttons as required Tip If you have several different controller types you may want to use the User 1 Save Autoconfig followed by User 1 Bind Default All options after binding in order to achieve hotplug functionality","title":"Gamepad Controls"},{"location":"guides/install-windows/#directory-configuration","text":"Configuring directories is an important aspect to get the best RetroArch experience possible. To configure the directories follow these steps: Navigate to Settings Navigate to Directories Select the directory you want to changed Navigate to the desired location You should always configure the following paths: System Directory for system files Savefile Directory for save files Savestate Directory save state files Browser Directory for your content Tip The Browser Directory is used as a startup location which allows easy access to your content library.","title":"Directory Configuration"},{"location":"guides/install-windows/#installing-cores","text":"RetroArch requires cores to run any content. You can download cores directly from RetroArch's interface by following this procedure: Navigate to Online Updater Navigate to Select Core Updater Select the core you want to download","title":"Installing Cores"},{"location":"guides/install-windows/#running-content","text":"After you have installed one or more cores you can run your content following this procedure: Navigate to Load Content Browse to the folder that contains the content you want to run Select the content that you want to run If you have more than one compatible core you will be asked to select the core you want to use for that purpose Tip By default loading content will trigger a content scan. If your content matches with any of our databases it will be added to a playlist for easy access. You can find the playlists by navigating to the right of the main menu. Tip Every content you launch is added to a history playlist that you can use to load it again quickly at any time","title":"Running Content"},{"location":"guides/install-windows/#glossary","text":"","title":"Glossary"},{"location":"guides/install-windows/#frontend","text":"A frontend is a program designed to run libretro cores such as Kodi's RetroPlayer, RetroArch, Phoenix, Minir","title":"frontend"},{"location":"guides/install-windows/#core","text":"A core is a program that has been ported to the libretro API and runs inside a libretro frontend","title":"core"},{"location":"guides/install-windows/#content","text":"Content can be a game, an image, a video, an audio file that is executed by a core. In most cases contents are the ROMs of an emulated platform","title":"content"},{"location":"guides/install-windows/#retropad","text":"RetroPad is libretro\u2019s input abstraction controller, it\u2019s the interface between the physical controller and the core inputs","title":"retropad"},{"location":"guides/install-windows/#save-files","text":"Save files are saves that are made from within a game, usually cross platform and should work across emulators in most cases","title":"save files"},{"location":"guides/install-windows/#save-states","text":"Save states are snapshots of the content menory at a particular moment, these are not always cross platform and most certainly won\u2019t work on a different emulator that the one used to create them","title":"save states"},{"location":"guides/install-windows/#system-files","text":"Additional files that might or not be part of the romset that might be needed to get some content to work (usually referred to by the BIOS term)","title":"system files"},{"location":"guides/install-windows/#autoconf","text":"A configuration file that has button definitions for a particular gamepad","title":"autoconf"},{"location":"guides/install-windows/#video-tutorial","text":"","title":"Video Tutorial"},{"location":"guides/joypad-autoconfiguration/","text":"Joypad Auto Configuration \u00b6 How does matching work? \u00b6 RetroArch is shipped with a set of configuration files for the most common joypads. When you plug a joypad for the first time, we try to find a matching profile in our set. The matching algorithm considers three criteria: Device name Vendor ID Product ID We compute a matching score for each configuration file based on these three factors. The profile with the highest score is chosen to configure the pad. Note The Vendor ID and Product ID pair is often abbreviated as vid:pid . Why is it needed? \u00b6 RetroArch works many platforms. Each of these platforms has one or more input systems. These input systems in turn differ widely in the way they enumerate the pad buttons. For this reason, your joypad buttons may be mapped differently depending on if you are using Windows, Mac, or Linux. Traditional emulators allow you map each button of your pad to the original pad of the emulated system. For example, this is how the Snes9x joypad configuration interface looks: RetroArch also allows this kind of manual mapping. However, RetroArch tries to go further by detecting your joypad and automatically configuring it so manual configuration becomes obsolete. Benefits \u00b6 With RetroArch joypad auto-configuration system, your joypad will be recognized and will work out of the box. This allows: Use many different joypads and have them attributed to each players like it would work on a real game console. Unplug the second joypad, and replace it by another one, even if it's of a different brand and model. Having automatically configured joypads makes it a lot easier to navigate the RetroArch Menu with the joypad. This is very convenient when running RetroArch on a game console, where a keyboard and a mouse are not always available. It is also what makes RetroArch suitable to build your own game console using Lakka or a similar OS. Installing or updating joypad profiles \u00b6 The set of joypad profiles used by RetroArch can be downloaded and updated from the menu. Go to Main Menu -> Online Updater -> Update Autoconfig Profiles to get the latest version of the profile pack. A message will appear at the bottom of the screen showing the download progress and the extraction of the archive. Generating a joypad profile \u00b6 If your joypad is not recognized by RetroArch even after updating the profiles, you can generate a profile from the menu. Unplug all the other joypads Use Settings -> Input -> User 1 Binds -> User 1 Bind All . Make sure that your mapping is perfect by testing every button in the menu and in some games. Use Settings -> Inputs -> User 1 Binds -> User 1 Save Autoconfig The new profile will be saved to your disk. Use Settings -> Inputs -> User 1 Binds -> User 1 Bind Default All to clear manual bindings and rely on the new profile Unplug your joypad an re-plug it. See if it is auto configured. Clear manual bindings It is important to to skip the step of clearing manual bindings after using the User 1 Save Autoconfig command. In order to avoid issues using your profile in the future, remember to go to Settings -> Inputs -> User 1 Binds -> User 1 Bind Default All to reset the manual settings before completing this process. If you are happy with your profile, you can submit it to RetroArch so that other users benefit: Edit the autoconfig file for your joypad manually to include the input descriptors (please see the Input Descriptors section below) Submit your profile to our joypad profile repository . Troubleshooting \u00b6 If your joypad is not configured properly, you should generate a RetroArch log . Your log will show if a profile has been matched for your pad and the path of the corresponding profile. Joypad auto-configuration file \u00b6 Metadata \u00b6 The first part of the joypad profile is used for matching the profile with the device, as explained above. The Vendor ID and Product ID are in decimal format. input_device = \"Microsoft X-Box One pad\" input_driver = \"udev\" input_vendor_id = 1118 input_product_id = 721 Mapping \u00b6 The second part is the mapping itself, where each button is assigned to a button of the RetroPad (the joypad abstraction of RetroArch): input_b_btn = \"0\" input_y_btn = \"2\" input_select_btn = \"6\" input_start_btn = \"7\" input_up_btn = \"h0up\" input_down_btn = \"h0down\" input_left_btn = \"h0left\" input_right_btn = \"h0right\" input_a_btn = \"1\" input_x_btn = \"3\" input_l_btn = \"4\" input_r_btn = \"5\" input_l2_axis = \"+2\" input_r2_axis = \"+5\" input_l3_btn = \"9\" input_r3_btn = \"10\" input_l_x_plus_axis = \"+0\" input_l_x_minus_axis = \"-0\" input_l_y_plus_axis = \"+1\" input_l_y_minus_axis = \"-1\" input_r_x_plus_axis = \"+3\" input_r_x_minus_axis = \"-3\" input_r_y_plus_axis = \"+4\" input_r_y_minus_axis = \"-4\" input_menu_toggle_btn = \"8\" Input descriptors \u00b6 The third part are input descriptors used by RetroArch to display the labels of the buttons as they are written on your joypad. So if you are using a DualShock pad, RetroArch will refer to the buttons as Cross, Circle, Square and Triangle. input_b_btn_label = \"A\" input_y_btn_label = \"X\" input_select_btn_label = \"Back\" input_start_btn_label = \"Start\" input_up_btn_label = \"D-Pad Up\" input_down_btn_label = \"D-Pad Down\" input_left_btn_label = \"D-Pad Left\" input_right_btn_label = \"D-Pad Right\" input_a_btn_label = \"B\" input_x_btn_label = \"Y\" input_l_btn_label = \"LB\" input_r_btn_label = \"RB\" input_l2_axis_label = \"LT\" input_r2_axis_label = \"RT\" input_l3_btn_label = \"Left Thumb\" input_r3_btn_label = \"Right Thumb\" input_l_x_plus_axis_label = \"Left Analog X+\" input_l_x_minus_axis_label = \"Left Analog X-\" input_l_y_plus_axis_label = \"Left Analog Y+\" input_l_y_minus_axis_label = \"Left Analog Y-\" input_r_x_plus_axis_label = \"Right Analog X+\" input_r_x_minus_axis_label = \"Right Analog X-\" input_r_y_plus_axis_label = \"Right Analog Y+\" input_r_y_minus_axis_label = \"Right Analog Y-\" input_menu_toggle_btn_label = \"Guide\"","title":"Joypad Auto-Configuration"},{"location":"guides/joypad-autoconfiguration/#joypad-auto-configuration","text":"","title":"Joypad Auto Configuration"},{"location":"guides/joypad-autoconfiguration/#how-does-matching-work","text":"RetroArch is shipped with a set of configuration files for the most common joypads. When you plug a joypad for the first time, we try to find a matching profile in our set. The matching algorithm considers three criteria: Device name Vendor ID Product ID We compute a matching score for each configuration file based on these three factors. The profile with the highest score is chosen to configure the pad. Note The Vendor ID and Product ID pair is often abbreviated as vid:pid .","title":"How does matching work?"},{"location":"guides/joypad-autoconfiguration/#why-is-it-needed","text":"RetroArch works many platforms. Each of these platforms has one or more input systems. These input systems in turn differ widely in the way they enumerate the pad buttons. For this reason, your joypad buttons may be mapped differently depending on if you are using Windows, Mac, or Linux. Traditional emulators allow you map each button of your pad to the original pad of the emulated system. For example, this is how the Snes9x joypad configuration interface looks: RetroArch also allows this kind of manual mapping. However, RetroArch tries to go further by detecting your joypad and automatically configuring it so manual configuration becomes obsolete.","title":"Why is it needed?"},{"location":"guides/joypad-autoconfiguration/#benefits","text":"With RetroArch joypad auto-configuration system, your joypad will be recognized and will work out of the box. This allows: Use many different joypads and have them attributed to each players like it would work on a real game console. Unplug the second joypad, and replace it by another one, even if it's of a different brand and model. Having automatically configured joypads makes it a lot easier to navigate the RetroArch Menu with the joypad. This is very convenient when running RetroArch on a game console, where a keyboard and a mouse are not always available. It is also what makes RetroArch suitable to build your own game console using Lakka or a similar OS.","title":"Benefits"},{"location":"guides/joypad-autoconfiguration/#installing-or-updating-joypad-profiles","text":"The set of joypad profiles used by RetroArch can be downloaded and updated from the menu. Go to Main Menu -> Online Updater -> Update Autoconfig Profiles to get the latest version of the profile pack. A message will appear at the bottom of the screen showing the download progress and the extraction of the archive.","title":"Installing or updating joypad profiles"},{"location":"guides/joypad-autoconfiguration/#generating-a-joypad-profile","text":"If your joypad is not recognized by RetroArch even after updating the profiles, you can generate a profile from the menu. Unplug all the other joypads Use Settings -> Input -> User 1 Binds -> User 1 Bind All . Make sure that your mapping is perfect by testing every button in the menu and in some games. Use Settings -> Inputs -> User 1 Binds -> User 1 Save Autoconfig The new profile will be saved to your disk. Use Settings -> Inputs -> User 1 Binds -> User 1 Bind Default All to clear manual bindings and rely on the new profile Unplug your joypad an re-plug it. See if it is auto configured. Clear manual bindings It is important to to skip the step of clearing manual bindings after using the User 1 Save Autoconfig command. In order to avoid issues using your profile in the future, remember to go to Settings -> Inputs -> User 1 Binds -> User 1 Bind Default All to reset the manual settings before completing this process. If you are happy with your profile, you can submit it to RetroArch so that other users benefit: Edit the autoconfig file for your joypad manually to include the input descriptors (please see the Input Descriptors section below) Submit your profile to our joypad profile repository .","title":"Generating a joypad profile"},{"location":"guides/joypad-autoconfiguration/#troubleshooting","text":"If your joypad is not configured properly, you should generate a RetroArch log . Your log will show if a profile has been matched for your pad and the path of the corresponding profile.","title":"Troubleshooting"},{"location":"guides/joypad-autoconfiguration/#joypad-auto-configuration-file","text":"","title":"Joypad auto-configuration file"},{"location":"guides/joypad-autoconfiguration/#metadata","text":"The first part of the joypad profile is used for matching the profile with the device, as explained above. The Vendor ID and Product ID are in decimal format. input_device = \"Microsoft X-Box One pad\" input_driver = \"udev\" input_vendor_id = 1118 input_product_id = 721","title":"Metadata"},{"location":"guides/joypad-autoconfiguration/#mapping","text":"The second part is the mapping itself, where each button is assigned to a button of the RetroPad (the joypad abstraction of RetroArch): input_b_btn = \"0\" input_y_btn = \"2\" input_select_btn = \"6\" input_start_btn = \"7\" input_up_btn = \"h0up\" input_down_btn = \"h0down\" input_left_btn = \"h0left\" input_right_btn = \"h0right\" input_a_btn = \"1\" input_x_btn = \"3\" input_l_btn = \"4\" input_r_btn = \"5\" input_l2_axis = \"+2\" input_r2_axis = \"+5\" input_l3_btn = \"9\" input_r3_btn = \"10\" input_l_x_plus_axis = \"+0\" input_l_x_minus_axis = \"-0\" input_l_y_plus_axis = \"+1\" input_l_y_minus_axis = \"-1\" input_r_x_plus_axis = \"+3\" input_r_x_minus_axis = \"-3\" input_r_y_plus_axis = \"+4\" input_r_y_minus_axis = \"-4\" input_menu_toggle_btn = \"8\"","title":"Mapping"},{"location":"guides/joypad-autoconfiguration/#input-descriptors","text":"The third part are input descriptors used by RetroArch to display the labels of the buttons as they are written on your joypad. So if you are using a DualShock pad, RetroArch will refer to the buttons as Cross, Circle, Square and Triangle. input_b_btn_label = \"A\" input_y_btn_label = \"X\" input_select_btn_label = \"Back\" input_start_btn_label = \"Start\" input_up_btn_label = \"D-Pad Up\" input_down_btn_label = \"D-Pad Down\" input_left_btn_label = \"D-Pad Left\" input_right_btn_label = \"D-Pad Right\" input_a_btn_label = \"B\" input_x_btn_label = \"Y\" input_l_btn_label = \"LB\" input_r_btn_label = \"RB\" input_l2_axis_label = \"LT\" input_r2_axis_label = \"RT\" input_l3_btn_label = \"Left Thumb\" input_r3_btn_label = \"Right Thumb\" input_l_x_plus_axis_label = \"Left Analog X+\" input_l_x_minus_axis_label = \"Left Analog X-\" input_l_y_plus_axis_label = \"Left Analog Y+\" input_l_y_minus_axis_label = \"Left Analog Y-\" input_r_x_plus_axis_label = \"Right Analog X+\" input_r_x_minus_axis_label = \"Right Analog X-\" input_r_y_plus_axis_label = \"Right Analog Y+\" input_r_y_minus_axis_label = \"Right Analog Y-\" input_menu_toggle_btn_label = \"Guide\"","title":"Input descriptors"},{"location":"guides/kms-mode/","text":"Purpose \u00b6 KMS (Kernel Mode Setting) mode is a feature where RetroArch can use the OpenGL driver outside Xorg, running straight in the virtual terminal. It is a fairly obscure feature, but very powerful in a console scenario. Requirements \u00b6 To use KMS mode you need: Recent version of MESA (9.0+) (dev) libgbm 9.0+, libdrm (dev) Open source driver which supports KMS ./configure with flags \"--enable-kms\" and \"--enable-egl\" These require a fairly up-to-date distro. After compiling RetroArch, you should see this when running retroarch --features : 1 2 KMS: KMS/EGL context support: yes If KMS mode is working correctly, RetroArch should start up outside Xorg as well.","title":"Linux KMS Mode"},{"location":"guides/kms-mode/#purpose","text":"KMS (Kernel Mode Setting) mode is a feature where RetroArch can use the OpenGL driver outside Xorg, running straight in the virtual terminal. It is a fairly obscure feature, but very powerful in a console scenario.","title":"Purpose"},{"location":"guides/kms-mode/#requirements","text":"To use KMS mode you need: Recent version of MESA (9.0+) (dev) libgbm 9.0+, libdrm (dev) Open source driver which supports KMS ./configure with flags \"--enable-kms\" and \"--enable-egl\" These require a fairly up-to-date distro. After compiling RetroArch, you should see this when running retroarch --features : 1 2 KMS: KMS/EGL context support: yes If KMS mode is working correctly, RetroArch should start up outside Xorg as well.","title":"Requirements"},{"location":"guides/latency/","text":"Latency \u00b6 RetroArch is capable of next-frame responsive time. This means that there should be no nearly no perceivable difference in terms of input latency from real hardware, FPGA/clone or original hardware. On top of all that, there are various settings you can configure to optimize the results even more. Next-frame response time indistinguishable from real hardware \u00b6 RetroArch is truly in a league of its own when it comes to input responsiveness, and it keeps confounding even us here at Libretro. Several independent researchers did their own research on RetroArch's latency and came away being quite blown away by the results, completely shattering several long-held myths that up until now had been accepted as gospel in emulation circles: The hierarchy for loading is: That emulation will always have an implicit 3 to 5 frames of input lag, and that therefore FPGA-based hardware will always hold a distinct advantage over software-based emulation. That there's nothing one can do to avoid this RetroArch shatters these myths. It has been demonstratedy by independent researchers that a next-frame response time (\u226416ms!) achievable with RetroArch! This means zero frames of input lag is achievable, indistinguishable from real hardware. Whoever told you that input lag was a given with emulators and that you needed FPGA in order to avoid this latency, should get him/herself acquainted with RetroArch. Post-RetroArch, latency indistinguishable from real hardware is perfectly possible! Check out people's findings here on our forum and participate, don't just take our word for it! Link here . Your browser does not support the video tag. \"With Pitfall, I witnessed a response on the very next frame. In the video shown to the left, you can clearly see me hit the button near the end of one frame, and on the next, Harry jumps! Essentially no way to improve compared to original hardware. Pack it up. We\u2019re done here\" \"Ever since I tried Retroarch for the first time there was no doubt in my mind that it was the future. It overcame the crippling input lag that plagues many stand alone emulators.\" \"[With RetroArch], it is possible to get to the same input lag as the original hardware, which may be as little as whatever is left of the current frame. At 60fps (16ms) this could be anywhere from 0ms to 16ms, which averages out to about 8ms. There is no room for improvement above that as far as the software is concerned.\" Configurable latency mitigation tools \u00b6 RetroArch provides you with all the tools you need to combat latency in your games. This includes options such as: Frame Delay Synchronization Fences (GPU Hard Sync) Video drivers for new graphics technology APIs like Vulkan, which can drive latency down even further. Maximum amount of configurable swap chains. Can be set from 1 to 3 depending on your video driver, your GPU, and the video context driver that is being used by RetroArch. Vulkan supports this feature natively, but video drivers might not implement setting lower max swapchains. You can choose between different audio drivers which can have an effect on overall perceived latency Windows: You can choose between WASAPI (available since Windows 7), XAudio (available since Windows XP), and DirectSound. Linux: Depending on the build, you can choose between ALSA, PulseAudio, OSS, and audio servers like JACK. Adjustable audio buffering for lower/higher audio latency Adjustable audio resampler quality Several video context drivers to choose from Linux: Some video driver contexts like DRM/KMS on Linux allow for granular swapchain control, which should allow for an even better gameplay experience. It also allows you to boot RetroArch without an active X Server running (assuming your video driver supports this). Wayland is supported on Linux. This is an advanced display server that is being increasingly pushed as a replacement for X11. Note that whether or not you can use this depends on your video driver. Ability to turn off window compositing for better latency results (NOTE: This is only possible on Windows 7, Microsoft disallows this on Windows 8 and later) Configurable swap interval","title":"Latency"},{"location":"guides/latency/#latency","text":"RetroArch is capable of next-frame responsive time. This means that there should be no nearly no perceivable difference in terms of input latency from real hardware, FPGA/clone or original hardware. On top of all that, there are various settings you can configure to optimize the results even more.","title":"Latency"},{"location":"guides/latency/#next-frame-response-time-indistinguishable-from-real-hardware","text":"RetroArch is truly in a league of its own when it comes to input responsiveness, and it keeps confounding even us here at Libretro. Several independent researchers did their own research on RetroArch's latency and came away being quite blown away by the results, completely shattering several long-held myths that up until now had been accepted as gospel in emulation circles: The hierarchy for loading is: That emulation will always have an implicit 3 to 5 frames of input lag, and that therefore FPGA-based hardware will always hold a distinct advantage over software-based emulation. That there's nothing one can do to avoid this RetroArch shatters these myths. It has been demonstratedy by independent researchers that a next-frame response time (\u226416ms!) achievable with RetroArch! This means zero frames of input lag is achievable, indistinguishable from real hardware. Whoever told you that input lag was a given with emulators and that you needed FPGA in order to avoid this latency, should get him/herself acquainted with RetroArch. Post-RetroArch, latency indistinguishable from real hardware is perfectly possible! Check out people's findings here on our forum and participate, don't just take our word for it! Link here . Your browser does not support the video tag. \"With Pitfall, I witnessed a response on the very next frame. In the video shown to the left, you can clearly see me hit the button near the end of one frame, and on the next, Harry jumps! Essentially no way to improve compared to original hardware. Pack it up. We\u2019re done here\" \"Ever since I tried Retroarch for the first time there was no doubt in my mind that it was the future. It overcame the crippling input lag that plagues many stand alone emulators.\" \"[With RetroArch], it is possible to get to the same input lag as the original hardware, which may be as little as whatever is left of the current frame. At 60fps (16ms) this could be anywhere from 0ms to 16ms, which averages out to about 8ms. There is no room for improvement above that as far as the software is concerned.\"","title":"Next-frame response time indistinguishable from real hardware"},{"location":"guides/latency/#configurable-latency-mitigation-tools","text":"RetroArch provides you with all the tools you need to combat latency in your games. This includes options such as: Frame Delay Synchronization Fences (GPU Hard Sync) Video drivers for new graphics technology APIs like Vulkan, which can drive latency down even further. Maximum amount of configurable swap chains. Can be set from 1 to 3 depending on your video driver, your GPU, and the video context driver that is being used by RetroArch. Vulkan supports this feature natively, but video drivers might not implement setting lower max swapchains. You can choose between different audio drivers which can have an effect on overall perceived latency Windows: You can choose between WASAPI (available since Windows 7), XAudio (available since Windows XP), and DirectSound. Linux: Depending on the build, you can choose between ALSA, PulseAudio, OSS, and audio servers like JACK. Adjustable audio buffering for lower/higher audio latency Adjustable audio resampler quality Several video context drivers to choose from Linux: Some video driver contexts like DRM/KMS on Linux allow for granular swapchain control, which should allow for an even better gameplay experience. It also allows you to boot RetroArch without an active X Server running (assuming your video driver supports this). Wayland is supported on Linux. This is an advanced display server that is being increasingly pushed as a replacement for X11. Note that whether or not you can use this depends on your video driver. Ability to turn off window compositing for better latency results (NOTE: This is only possible on Windows 7, Microsoft disallows this on Windows 8 and later) Configurable swap interval","title":"Configurable latency mitigation tools"},{"location":"guides/launch-content/","text":"Launching Content \u00b6 Warning This guide assumes that you already have obtained the content legally, RetroArch does not provide users with copyright content. You should already have both cores and content, now we just have to launch it! Launching \u00b6 Go back to the Main Menu and select Load content . From the last guide you should have already set the default start directory, if this is the case choose Start directory . If you haven't set it or you are choosing other content (such as downloaded content) select the relvent option. From here it is up to you to navigate your game folder and find the game you want to try, select it once you have. Note If the game is zipped you will be presented with two options. Browse archive will allow you to open it and select the contents. While Load archive will try and load the archive as an image. In most cases if you simply just compressed the image, either option will do. Note RetroArch will automatically choose the appropriate core for your content based on file extension. However if two or more cores use the same file extension, it will ask you to choose the core. You should always choose the platform the game was suppose to run on. Playing \u00b6 Well done, you have finally launched your first game with RetroArch. If you setup your controller take note of the RetroPad concept. With this you will not have to setup a controller for each console, instead the RetroPad will adapt depending on what console your playing. To return to RetroArch, press F1 or the RetroArch button on mobile. This will bring up the menu where you can change core settings, or otherwise configure the current content, or close it. Warning On PC's pressing Esc twice will close RetroArch without saving.","title":"Launching Content"},{"location":"guides/launch-content/#launching-content","text":"Warning This guide assumes that you already have obtained the content legally, RetroArch does not provide users with copyright content. You should already have both cores and content, now we just have to launch it!","title":"Launching Content"},{"location":"guides/launch-content/#launching","text":"Go back to the Main Menu and select Load content . From the last guide you should have already set the default start directory, if this is the case choose Start directory . If you haven't set it or you are choosing other content (such as downloaded content) select the relvent option. From here it is up to you to navigate your game folder and find the game you want to try, select it once you have. Note If the game is zipped you will be presented with two options. Browse archive will allow you to open it and select the contents. While Load archive will try and load the archive as an image. In most cases if you simply just compressed the image, either option will do. Note RetroArch will automatically choose the appropriate core for your content based on file extension. However if two or more cores use the same file extension, it will ask you to choose the core. You should always choose the platform the game was suppose to run on.","title":"Launching"},{"location":"guides/launch-content/#playing","text":"Well done, you have finally launched your first game with RetroArch. If you setup your controller take note of the RetroPad concept. With this you will not have to setup a controller for each console, instead the RetroPad will adapt depending on what console your playing. To return to RetroArch, press F1 or the RetroArch button on mobile. This will bring up the menu where you can change core settings, or otherwise configure the current content, or close it. Warning On PC's pressing Esc twice will close RetroArch without saving.","title":"Playing"},{"location":"guides/libretro-overlays/","text":"What is a Libretro Overlay? \u00b6 Imagine a libretro core playing a game or video on your screen. Now imagine attaching a clear piece of glass over your screen that you can draw on, attach touchscreen buttons to, or use to display an image of a vintage CRT television in your old bedroom. That layer of glass would be the overlay -- a virtual 'layer' between you and the video signal. What's the difference between an Overlay and a Bezel? \u00b6 With Libretro, bezels are one subtype of overlay . If you have experience with game emulators, you may be familiar with the term Bezel, which describes images that wrap around the emulated screen. Often this is to display an image of the original arcade cabinet or game console being emulated. dan2hos demonstrated this bezel-style overlay for Sonic 2 in the libretro forums ; What's the difference between an Overlay and a Shader? \u00b6 Shaders manipulate the video image being displayed by the Libretro core, so often the two are used in tandem. For example, you might want to use shaders to manipulate a Sega Genesis emulator core's video output to look just like a vintage Trinitron CRT television. Then you might use an overlay to wrap an image of that exact television around the emulated video. Another way that shaders and overlays are used together is to 1) use a shader to enhance dithered or low resolution images from a handheld emulator core as they are displayed on a modern HD smartphone and then 2) use an overlay to add touchscreen buttons to that emulator. Overlay Touchscreen Functionality \u00b6 Overlay touch functionality allows users to create an input interface that is mouse or touch oriented regardless of whether the original system or libretro core was built for these forms of input. The overlay images are displayed with transparency over the regular game image, and the user is able to trigger input by pressing on designated parts of the overlay. Overlays are built from a collection of images and a text configuration file which makes it straightforward to change both the look and functionality of this overlay. Learn more about this aspect of Libretro's Overlay tech over in the Overlay Spec . An example of a touchscreen overlay, demonstrated with the Dinothawr core: Activating an Overlay via the GUI \u00b6 Overlays require at least one image ( .png ) and a configuration file ( .cfg ) in order to activate them. Notes: - The configuration file should have the exact same name as the first image file (the only image file if your overlay only has one image). - Do not use spaces in the filename. - These files should be placed together in the libretro overlay folder. In order to activate an overlay, go to the RetroArch Settings menu. Find the Onscreen Display submenu. From this menu you can activate the Overlay system and select which overlay file to display. Setting Up Per-Core Overlays in RetroArch \u00b6 Per-Core Overlays via the RetroArch GUI \u00b6 Go to the Settings menu and find the User Interface submenu and enable Show Advanced Settings Go to the Settings menu and find the Configuration submenu. Make sure that Use Content-Specific Core Options If Available and Load Override Files Automatically are enabled. Set up the Overlay according to your preferences. Load a game. Open the RA \"Quick Menu\" and then use the GUI to set up the Overlay according to your preferences. From the Quick Menu, select Save Core Overrides . Per-Core Overlays via RetroArch CFG Files \u00b6 To be written Setting Up Per-Game Overlays in Retroarch \u00b6 Per-Game Overlays via the RetroArch GUI \u00b6 Go to the Settings menu and find the User Interface submenu and enable Show Advanced Settings Go to the Settings menu and find the Configuration submenu. Make sure that Use Content-Specific Core Options If Available and Load Override Files Automatically are enabled. Load a game. Open the RA \"Quick Menu\" and then use the GUI to set up the Overlay according to your preferences. From the Quick Menu, select Save Game Overrides . Per-Game Overlays via RetroArch CFG Files \u00b6 The first time you set up a per-game overlay: 1. Ensure that these two options are set in retroarch.cfg: game_specific_options = \"true\" and auto_overrides_enable = \"true\" 2. The first time you load content with these seetings, RetroArch will create a settings override directory structure and a .opts configuration file which you can use as a template to correctly name and locate your overlay configuration files. 3. If the automatically-generated file is named Dinothawr.opts , you would name your per-game override Dinothawr.cfg . 3. The new RetroArch .cfg should only include the options you want to change for this single game. Overlay options that can be changed include: \u00b6 input_overlay - Path to the correct overlay input_overlay_enable input_overlay_opacity input_overlay_scale input_overlay_enable_autopreferred input_overlay_show_physical_inputs input_overlay_hide_in_menu Note: You can change more than just the overlay by specific any content-specific options -- for example you might also decide to set video_shader_enable = \"true\" and video_shader = \"/usr/share/libretro/shaders/classic-crt-television.slang\" , etc. Where can one find Overlays to use? \u00b6 Interactive overlays are managed within: https://github.com/libretro/common-overlays Decorative border overlays are managed within: https://github.com/libretro/overlay-borders More about Overlays \u00b6 Visit the official Libretro Overlays Forum Overlay technology and customization specification RetroArch Overlay Guide at emulationguide.com","title":"Input Overlays"},{"location":"guides/libretro-overlays/#what-is-a-libretro-overlay","text":"Imagine a libretro core playing a game or video on your screen. Now imagine attaching a clear piece of glass over your screen that you can draw on, attach touchscreen buttons to, or use to display an image of a vintage CRT television in your old bedroom. That layer of glass would be the overlay -- a virtual 'layer' between you and the video signal.","title":"What is a Libretro Overlay?"},{"location":"guides/libretro-overlays/#whats-the-difference-between-an-overlay-and-a-bezel","text":"With Libretro, bezels are one subtype of overlay . If you have experience with game emulators, you may be familiar with the term Bezel, which describes images that wrap around the emulated screen. Often this is to display an image of the original arcade cabinet or game console being emulated. dan2hos demonstrated this bezel-style overlay for Sonic 2 in the libretro forums ;","title":"What's the difference between an Overlay and a Bezel?"},{"location":"guides/libretro-overlays/#whats-the-difference-between-an-overlay-and-a-shader","text":"Shaders manipulate the video image being displayed by the Libretro core, so often the two are used in tandem. For example, you might want to use shaders to manipulate a Sega Genesis emulator core's video output to look just like a vintage Trinitron CRT television. Then you might use an overlay to wrap an image of that exact television around the emulated video. Another way that shaders and overlays are used together is to 1) use a shader to enhance dithered or low resolution images from a handheld emulator core as they are displayed on a modern HD smartphone and then 2) use an overlay to add touchscreen buttons to that emulator.","title":"What's the difference between an Overlay and a Shader?"},{"location":"guides/libretro-overlays/#overlay-touchscreen-functionality","text":"Overlay touch functionality allows users to create an input interface that is mouse or touch oriented regardless of whether the original system or libretro core was built for these forms of input. The overlay images are displayed with transparency over the regular game image, and the user is able to trigger input by pressing on designated parts of the overlay. Overlays are built from a collection of images and a text configuration file which makes it straightforward to change both the look and functionality of this overlay. Learn more about this aspect of Libretro's Overlay tech over in the Overlay Spec . An example of a touchscreen overlay, demonstrated with the Dinothawr core:","title":"Overlay Touchscreen Functionality"},{"location":"guides/libretro-overlays/#activating-an-overlay-via-the-gui","text":"Overlays require at least one image ( .png ) and a configuration file ( .cfg ) in order to activate them. Notes: - The configuration file should have the exact same name as the first image file (the only image file if your overlay only has one image). - Do not use spaces in the filename. - These files should be placed together in the libretro overlay folder. In order to activate an overlay, go to the RetroArch Settings menu. Find the Onscreen Display submenu. From this menu you can activate the Overlay system and select which overlay file to display.","title":"Activating an Overlay via the GUI"},{"location":"guides/libretro-overlays/#setting-up-per-core-overlays-in-retroarch","text":"","title":"Setting Up Per-Core Overlays in RetroArch"},{"location":"guides/libretro-overlays/#per-core-overlays-via-the-retroarch-gui","text":"Go to the Settings menu and find the User Interface submenu and enable Show Advanced Settings Go to the Settings menu and find the Configuration submenu. Make sure that Use Content-Specific Core Options If Available and Load Override Files Automatically are enabled. Set up the Overlay according to your preferences. Load a game. Open the RA \"Quick Menu\" and then use the GUI to set up the Overlay according to your preferences. From the Quick Menu, select Save Core Overrides .","title":"Per-Core Overlays via the RetroArch GUI"},{"location":"guides/libretro-overlays/#per-core-overlays-via-retroarch-cfg-files","text":"To be written","title":"Per-Core Overlays via RetroArch CFG Files"},{"location":"guides/libretro-overlays/#setting-up-per-game-overlays-in-retroarch","text":"","title":"Setting Up Per-Game Overlays in Retroarch"},{"location":"guides/libretro-overlays/#per-game-overlays-via-the-retroarch-gui","text":"Go to the Settings menu and find the User Interface submenu and enable Show Advanced Settings Go to the Settings menu and find the Configuration submenu. Make sure that Use Content-Specific Core Options If Available and Load Override Files Automatically are enabled. Load a game. Open the RA \"Quick Menu\" and then use the GUI to set up the Overlay according to your preferences. From the Quick Menu, select Save Game Overrides .","title":"Per-Game Overlays via the RetroArch GUI"},{"location":"guides/libretro-overlays/#per-game-overlays-via-retroarch-cfg-files","text":"The first time you set up a per-game overlay: 1. Ensure that these two options are set in retroarch.cfg: game_specific_options = \"true\" and auto_overrides_enable = \"true\" 2. The first time you load content with these seetings, RetroArch will create a settings override directory structure and a .opts configuration file which you can use as a template to correctly name and locate your overlay configuration files. 3. If the automatically-generated file is named Dinothawr.opts , you would name your per-game override Dinothawr.cfg . 3. The new RetroArch .cfg should only include the options you want to change for this single game.","title":"Per-Game Overlays via RetroArch CFG Files"},{"location":"guides/libretro-overlays/#overlay-options-that-can-be-changed-include","text":"input_overlay - Path to the correct overlay input_overlay_enable input_overlay_opacity input_overlay_scale input_overlay_enable_autopreferred input_overlay_show_physical_inputs input_overlay_hide_in_menu Note: You can change more than just the overlay by specific any content-specific options -- for example you might also decide to set video_shader_enable = \"true\" and video_shader = \"/usr/share/libretro/shaders/classic-crt-television.slang\" , etc.","title":"Overlay options that can be changed include:"},{"location":"guides/libretro-overlays/#where-can-one-find-overlays-to-use","text":"Interactive overlays are managed within: https://github.com/libretro/common-overlays Decorative border overlays are managed within: https://github.com/libretro/overlay-borders","title":"Where can one find Overlays to use?"},{"location":"guides/libretro-overlays/#more-about-overlays","text":"Visit the official Libretro Overlays Forum Overlay technology and customization specification RetroArch Overlay Guide at emulationguide.com","title":"More about Overlays"},{"location":"guides/navigating/","text":"Navigating \u00b6 Navigating on RetroArch is as easy as you can imagine. Depending on the device you have, the control scheme is determined automatically. For example, if you are going to use it on a computer, the basic key combinations of the keyboard will apply. You move with the arrow keys and select with the Enter key, and you return with the Backspace key. If you plug a controller, you can also move with the D-Pad keys. PC \u00b6 By default the keyboard should be ready to use. Using the left and right arrow keys, you move to a different tab, each tab will relate to an aspect of the RetroArch experience (main menu for game loading, settings for settings etc.). Once the desired tab is selected, use the up and down arrow to move to an option. To advance in the menu press Enter (or Return ). To go back to the previous menu push Backspace . Whilst in a game use the F1 key [MOVE TO ANOTHER PAGE] Pushing Esc twice will quit the program Main Menu \u00b6 Welcome to the main menu this is where you will launch games, download and update cores and have access to freely available content. Load Core , Load Content and the Online Updater are the menu items you will probably be using the most. Settings \u00b6 Here you will find all the options available to configure RetroArch, from Graphics, Input, Sound and everything else. Favourites \u00b6 Favourites allow you to maintain a short list of your favourite games. You can add the content you want to add to your favorites from the Quick Menu or before launching it. So you can quickly access your favorite content. History \u00b6 The content you recently run will be added here, the content you run last will be at the top. Image, Music and Video \u00b6 These tabs will handle all your media. Images will contain any screenshots you've made. Netplay \u00b6 RetroArch relies on peer-to-peer networking to reduce network latency and ensure the best possible experience. Allows multi-player over the internet. Host or join a network gaming session. Rediscover the joy of multiplayer games using RetroArch's builtin netplay lobby. You can also use the spectator mode to watch others play. Import content \u00b6 Either you scan automatically so that your content that matches the last database will add to the playlists or you scan manually without being dependent on the database so you can freely add your contents to playlists. Mobile \u00b6 The mobile interface is much more minimalistic compared to the PC's interface. Touch is the default input, although depending on device other options may be available. There are three different tabs, which can be switched at the bottom of the menu. Main Menu \u00b6 The main menu will be where you launch games, download and update cores, start or join netplay sessions and pretty much anything to do with gaming. Playlists \u00b6 Handles anything to do with creating and maintaining playlists. It gives you scanning options to recognise your game collection. It also provides access to your images, music and videos. Settings \u00b6 Here you will find all the options available to configure RetroArch, from Graphics, Input, Sound and everything else.","title":"User Interface"},{"location":"guides/navigating/#navigating","text":"Navigating on RetroArch is as easy as you can imagine. Depending on the device you have, the control scheme is determined automatically. For example, if you are going to use it on a computer, the basic key combinations of the keyboard will apply. You move with the arrow keys and select with the Enter key, and you return with the Backspace key. If you plug a controller, you can also move with the D-Pad keys.","title":"Navigating"},{"location":"guides/navigating/#pc","text":"By default the keyboard should be ready to use. Using the left and right arrow keys, you move to a different tab, each tab will relate to an aspect of the RetroArch experience (main menu for game loading, settings for settings etc.). Once the desired tab is selected, use the up and down arrow to move to an option. To advance in the menu press Enter (or Return ). To go back to the previous menu push Backspace . Whilst in a game use the F1 key [MOVE TO ANOTHER PAGE] Pushing Esc twice will quit the program","title":"PC"},{"location":"guides/navigating/#main-menu","text":"Welcome to the main menu this is where you will launch games, download and update cores and have access to freely available content. Load Core , Load Content and the Online Updater are the menu items you will probably be using the most.","title":"Main Menu"},{"location":"guides/navigating/#settings","text":"Here you will find all the options available to configure RetroArch, from Graphics, Input, Sound and everything else.","title":"Settings"},{"location":"guides/navigating/#favourites","text":"Favourites allow you to maintain a short list of your favourite games. You can add the content you want to add to your favorites from the Quick Menu or before launching it. So you can quickly access your favorite content.","title":"Favourites"},{"location":"guides/navigating/#history","text":"The content you recently run will be added here, the content you run last will be at the top.","title":"History"},{"location":"guides/navigating/#image-music-and-video","text":"These tabs will handle all your media. Images will contain any screenshots you've made.","title":"Image, Music and Video"},{"location":"guides/navigating/#netplay","text":"RetroArch relies on peer-to-peer networking to reduce network latency and ensure the best possible experience. Allows multi-player over the internet. Host or join a network gaming session. Rediscover the joy of multiplayer games using RetroArch's builtin netplay lobby. You can also use the spectator mode to watch others play.","title":"Netplay"},{"location":"guides/navigating/#import-content","text":"Either you scan automatically so that your content that matches the last database will add to the playlists or you scan manually without being dependent on the database so you can freely add your contents to playlists.","title":"Import content"},{"location":"guides/navigating/#mobile","text":"The mobile interface is much more minimalistic compared to the PC's interface. Touch is the default input, although depending on device other options may be available. There are three different tabs, which can be switched at the bottom of the menu.","title":"Mobile"},{"location":"guides/navigating/#main-menu_1","text":"The main menu will be where you launch games, download and update cores, start or join netplay sessions and pretty much anything to do with gaming.","title":"Main Menu"},{"location":"guides/navigating/#playlists","text":"Handles anything to do with creating and maintaining playlists. It gives you scanning options to recognise your game collection. It also provides access to your images, music and videos.","title":"Playlists"},{"location":"guides/navigating/#settings_1","text":"Here you will find all the options available to configure RetroArch, from Graphics, Input, Sound and everything else.","title":"Settings"},{"location":"guides/netplay-faq/","text":"FAQ \u00b6 What is netplay? \u00b6 It's a mechanism that allows multiplayer over a network. It's not link cable emulation though. It's same system multiplayer. Does RetroArch require port-forwarding to work? \u00b6 Yes, the host needs to forward the ports properly. There is a fallback mechanism that can be employed by those who can't forward the ports, please read the Setup Guide below. Does it support more than two players? \u00b6 Yes! See Getting Started Guide for more details. Does it support more than one player on one computer? \u00b6 Yes! See Mutliple Controllers Guide for more details. What do you need for RetroArch netplay to work? \u00b6 Same RetroArch version, same core version, and the same exact content. RetroArch says Content not found, try loading content manually \u00b6 Either load content manually, have the content in your recent history list, or scan your content to a playlist. Does RetroArch support cross-platform netplay? \u00b6 Yes, but your mileage may vary, particularly when endianness differs. Which cores work for netplay? \u00b6 On a technical level, every core that supports save states should work but the performance requirements may be too high for it to work in any practical level. Does PSX / N64 / Dreamcast / GameCube / Wii / 3DS netplay work? \u00b6 No, the performance requirements make the current model unsuitable for those. Can I play GB / GBC / GBA / PSP / 3DS games with multiple people via RetroArch Netplay? \u00b6 No, RetroArch's netplay is not link-cable emulation, GB, GBA, PSP netplay are currently not possible with our implementation. One notable exception is same game GB/GBC Netplay via the TGB-Dual and Sameboy cores. Can I trade Pok\u00e9mon via RetroArch Netplay? \u00b6 No.","title":"FAQ"},{"location":"guides/netplay-faq/#faq","text":"","title":"FAQ"},{"location":"guides/netplay-faq/#what-is-netplay","text":"It's a mechanism that allows multiplayer over a network. It's not link cable emulation though. It's same system multiplayer.","title":"What is netplay?"},{"location":"guides/netplay-faq/#does-retroarch-require-port-forwarding-to-work","text":"Yes, the host needs to forward the ports properly. There is a fallback mechanism that can be employed by those who can't forward the ports, please read the Setup Guide below.","title":"Does RetroArch require port-forwarding to work?"},{"location":"guides/netplay-faq/#does-it-support-more-than-two-players","text":"Yes! See Getting Started Guide for more details.","title":"Does it support more than two players?"},{"location":"guides/netplay-faq/#does-it-support-more-than-one-player-on-one-computer","text":"Yes! See Mutliple Controllers Guide for more details.","title":"Does it support more than one player on one computer?"},{"location":"guides/netplay-faq/#what-do-you-need-for-retroarch-netplay-to-work","text":"Same RetroArch version, same core version, and the same exact content.","title":"What do you need for RetroArch netplay to work?"},{"location":"guides/netplay-faq/#retroarch-says-content-not-found-try-loading-content-manually","text":"Either load content manually, have the content in your recent history list, or scan your content to a playlist.","title":"RetroArch says Content not found, try loading content manually"},{"location":"guides/netplay-faq/#does-retroarch-support-cross-platform-netplay","text":"Yes, but your mileage may vary, particularly when endianness differs.","title":"Does RetroArch support cross-platform netplay?"},{"location":"guides/netplay-faq/#which-cores-work-for-netplay","text":"On a technical level, every core that supports save states should work but the performance requirements may be too high for it to work in any practical level.","title":"Which cores work for netplay?"},{"location":"guides/netplay-faq/#does-psx-n64-dreamcast-gamecube-wii-3ds-netplay-work","text":"No, the performance requirements make the current model unsuitable for those.","title":"Does PSX / N64 / Dreamcast / GameCube / Wii / 3DS netplay work?"},{"location":"guides/netplay-faq/#can-i-play-gb-gbc-gba-psp-3ds-games-with-multiple-people-via-retroarch-netplay","text":"No, RetroArch's netplay is not link-cable emulation, GB, GBA, PSP netplay are currently not possible with our implementation. One notable exception is same game GB/GBC Netplay via the TGB-Dual and Sameboy cores.","title":"Can I play GB / GBC / GBA / PSP / 3DS games with multiple people via RetroArch Netplay?"},{"location":"guides/netplay-faq/#can-i-trade-pokemon-via-retroarch-netplay","text":"No.","title":"Can I trade Pok\u00e9mon via RetroArch Netplay?"},{"location":"guides/netplay-getting-started/","text":"Getting Started \u00b6 Configuring Nickname \u00b6 Navigate to Settings Navigate to User Select Username Configure your preferred nickname Configure Netplay Server \u00b6 If you are gonna host a game you don't need to scan content or to build databases. The only thing you need to do is to configure your network parameters and \"Start Hosting\" from the netplay menu. After doing that just load the content you want to netplay and wait for players. Check your lobby \u00b6 Once you start hosting you can check to see if your lobby is visible at lobby.libretro.com . Tip If your router doesn't support UPnP or you can't forward your ports or you are uncertain, enable the Use Relay Server option. This routes both sides of the connection through our man-in-the-middle server. Tip If you want to run a private game you can setup a Server Password to prevent random people from connecting. Alternatively you can disable the Publicly Announce Netplay option. The clients will need to enter your IP address or hostname directly. Warning RetroArch doesn't check if you managed to open your ports manually, the lobby server doesn't either so make sure you do that properly or enable the Relay Server or people won't be able to connect to your session. You can use this tool , enter your Netplay TCP Port once you are hosting and it will tell you if the port is open or not. Configure Netplay Clients \u00b6 You don't need to configure anything to connect to netplay rooms. Browse to the netplay menu, Select Refresh and then select the room you want to connect to. You will be asked for a password if one is required, and if you have matching content scanned or in the Content History it will connect right away. Otherwise it will tell you to load the core and content manually and it will attempt to connect right away. Video Tutorial \u00b6","title":"Getting Started"},{"location":"guides/netplay-getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"guides/netplay-getting-started/#configuring-nickname","text":"Navigate to Settings Navigate to User Select Username Configure your preferred nickname","title":"Configuring Nickname"},{"location":"guides/netplay-getting-started/#configure-netplay-server","text":"If you are gonna host a game you don't need to scan content or to build databases. The only thing you need to do is to configure your network parameters and \"Start Hosting\" from the netplay menu. After doing that just load the content you want to netplay and wait for players.","title":"Configure Netplay Server"},{"location":"guides/netplay-getting-started/#check-your-lobby","text":"Once you start hosting you can check to see if your lobby is visible at lobby.libretro.com . Tip If your router doesn't support UPnP or you can't forward your ports or you are uncertain, enable the Use Relay Server option. This routes both sides of the connection through our man-in-the-middle server. Tip If you want to run a private game you can setup a Server Password to prevent random people from connecting. Alternatively you can disable the Publicly Announce Netplay option. The clients will need to enter your IP address or hostname directly. Warning RetroArch doesn't check if you managed to open your ports manually, the lobby server doesn't either so make sure you do that properly or enable the Relay Server or people won't be able to connect to your session. You can use this tool , enter your Netplay TCP Port once you are hosting and it will tell you if the port is open or not.","title":"Check your lobby"},{"location":"guides/netplay-getting-started/#configure-netplay-clients","text":"You don't need to configure anything to connect to netplay rooms. Browse to the netplay menu, Select Refresh and then select the room you want to connect to. You will be asked for a password if one is required, and if you have matching content scanned or in the Content History it will connect right away. Otherwise it will tell you to load the core and content manually and it will attempt to connect right away.","title":"Configure Netplay Clients"},{"location":"guides/netplay-getting-started/#video-tutorial","text":"","title":"Video Tutorial"},{"location":"guides/netplay-multiple-controllers/","text":"Setup Multiple Controllers on One (1) Computer \u00b6 Request Device \u00b6 Request Device is an advance network option used for NetPlay. Request Device allows the computer to request device(s)/controller(s) to control. This allows the capablitiy to allow two (2) computers with four (4) players. To make this option visible, RetroArch must have Show Advanced Settings set to ON . Turning on Show Advanced Settings : \u00b6 Navigate to Settings Navigate to User Interface Toggle Show Advanced Settings to ON Once Show Advanced Settings is on, proceed to the Network configurations in the Settings menu ( NetPlay menu also has a path to Network configurations). Scroll down through Network configuration, and the advance configuration options are now visible. Request Device # (where # is any number from 1 to 16) options will allow the computer to control two (2) or more controllers. Setup Guide \u00b6 The following example of Super Bomberman 2 on the SNES will be used to demonstrate four (4) players using two (2) computers. The host will be controlling players one (1) and three (3), and the client will be controlling players two (2) and four (4). Host \u00b6 Input Devices \u00b6 Set up Input Devices while the game is loaded: Connect two (2) controllers Start SNES Super Bomberman 2 game Set Inputs for each controller 1 and 2: Navigate to Settings Navigate to Inputs Navigate to Port 1 Binds Ensure Device Index is set to * Controller Name 1 Return to Inputs configuration menu Navigate to Port 2 Binds Ensure Device Index is set to * Controller Name 2 Set Device Type to MultiTap MultiTap is only available when SNES core is loaded. This plugs in a virtual SNES MultiTap into the SNES so more than two (2) controllers can connect to the SNES. * Controller Name 1 and 2 are unique to the computer and to the controllers connected to it (e.g. PS4 controller shows as \"Wireless Controller #1\") Network Request Device \u00b6 Set host computer's RetroArch NetPlay to request control of the running core's devices/controllers: Navigate to Settings -or- NetPlay Navigate to Network Set Request Device 1 to YES Set Request Device 3 to YES Ensure all other Request Device # are set to NO Host is now able to start a NetPlay game controlling controllers one (1) and three (3). See Getting Started Guide for more details. Client \u00b6 Input Devices \u00b6 Set up Input Devices while the game is loaded: Connect two (2) controllers Start SNES Super Bomberman 2 game Set Inputs for each controller 1 and 2: Navigate to Settings Navigate to Inputs Navigate to Port 1 Binds Ensure Device Index is set to * Controller Name 1 Return to Inputs configuration menu Navigate to Port 2 Binds Ensure Device Index is set to * Controller Name 2 * Controller Name 1 and 2 are unique to the computer and to the controllers connected to it (e.g. PS4 controller shows as \"Wireless Controller #1\") Network Request Device \u00b6 Set client computer's RetroArch Netplay to request control of the running core's devices/controllers: Navigate to Settings -or- Netplay Navigate to Network Set Request Device 2 to YES Set Request Device 3 to YES Ensure all other Request Device # are set to NO Client is now able to join the host in a NetPlay game controlling controllers two (2) and four (4). See Getting Started Guide for more details. Warning RetroArch Network typically has all Request Device # set to NO . When all Request Device # are set to NO , this allows NetPlay to automatically set host as device/controller one (1). Then when the client connets to the host, the client will connect to device/controller two (2) for the NetPlay session. Each subsequent client that connects will continue connect to the next available device/controller. RetroArch NetPlay requires all Request Device # set to NO for RetroArch Netplay to automatically assign device/controller for the NetPlay session.","title":"Multiple Controllers"},{"location":"guides/netplay-multiple-controllers/#setup-multiple-controllers-on-one-1-computer","text":"","title":"Setup Multiple Controllers on One (1) Computer"},{"location":"guides/netplay-multiple-controllers/#request-device","text":"Request Device is an advance network option used for NetPlay. Request Device allows the computer to request device(s)/controller(s) to control. This allows the capablitiy to allow two (2) computers with four (4) players. To make this option visible, RetroArch must have Show Advanced Settings set to ON .","title":"Request Device"},{"location":"guides/netplay-multiple-controllers/#turning-on-show-advanced-settings","text":"Navigate to Settings Navigate to User Interface Toggle Show Advanced Settings to ON Once Show Advanced Settings is on, proceed to the Network configurations in the Settings menu ( NetPlay menu also has a path to Network configurations). Scroll down through Network configuration, and the advance configuration options are now visible. Request Device # (where # is any number from 1 to 16) options will allow the computer to control two (2) or more controllers.","title":"Turning on Show Advanced Settings:"},{"location":"guides/netplay-multiple-controllers/#setup-guide","text":"The following example of Super Bomberman 2 on the SNES will be used to demonstrate four (4) players using two (2) computers. The host will be controlling players one (1) and three (3), and the client will be controlling players two (2) and four (4).","title":"Setup Guide"},{"location":"guides/netplay-multiple-controllers/#host","text":"","title":"Host"},{"location":"guides/netplay-multiple-controllers/#input-devices","text":"Set up Input Devices while the game is loaded: Connect two (2) controllers Start SNES Super Bomberman 2 game Set Inputs for each controller 1 and 2: Navigate to Settings Navigate to Inputs Navigate to Port 1 Binds Ensure Device Index is set to * Controller Name 1 Return to Inputs configuration menu Navigate to Port 2 Binds Ensure Device Index is set to * Controller Name 2 Set Device Type to MultiTap MultiTap is only available when SNES core is loaded. This plugs in a virtual SNES MultiTap into the SNES so more than two (2) controllers can connect to the SNES. * Controller Name 1 and 2 are unique to the computer and to the controllers connected to it (e.g. PS4 controller shows as \"Wireless Controller #1\")","title":"Input Devices"},{"location":"guides/netplay-multiple-controllers/#network-request-device","text":"Set host computer's RetroArch NetPlay to request control of the running core's devices/controllers: Navigate to Settings -or- NetPlay Navigate to Network Set Request Device 1 to YES Set Request Device 3 to YES Ensure all other Request Device # are set to NO Host is now able to start a NetPlay game controlling controllers one (1) and three (3). See Getting Started Guide for more details.","title":"Network Request Device"},{"location":"guides/netplay-multiple-controllers/#client","text":"","title":"Client"},{"location":"guides/netplay-multiple-controllers/#input-devices_1","text":"Set up Input Devices while the game is loaded: Connect two (2) controllers Start SNES Super Bomberman 2 game Set Inputs for each controller 1 and 2: Navigate to Settings Navigate to Inputs Navigate to Port 1 Binds Ensure Device Index is set to * Controller Name 1 Return to Inputs configuration menu Navigate to Port 2 Binds Ensure Device Index is set to * Controller Name 2 * Controller Name 1 and 2 are unique to the computer and to the controllers connected to it (e.g. PS4 controller shows as \"Wireless Controller #1\")","title":"Input Devices"},{"location":"guides/netplay-multiple-controllers/#network-request-device_1","text":"Set client computer's RetroArch Netplay to request control of the running core's devices/controllers: Navigate to Settings -or- Netplay Navigate to Network Set Request Device 2 to YES Set Request Device 3 to YES Ensure all other Request Device # are set to NO Client is now able to join the host in a NetPlay game controlling controllers two (2) and four (4). See Getting Started Guide for more details. Warning RetroArch Network typically has all Request Device # set to NO . When all Request Device # are set to NO , this allows NetPlay to automatically set host as device/controller one (1). Then when the client connets to the host, the client will connect to device/controller two (2) for the NetPlay session. Each subsequent client that connects will continue connect to the next available device/controller. RetroArch NetPlay requires all Request Device # set to NO for RetroArch Netplay to automatically assign device/controller for the NetPlay session.","title":"Network Request Device"},{"location":"guides/optimal-vsync/","text":"Getting optimal vsync performance \u00b6 RetroArch uses Dynamic Rate Control to synchronize both video and audio at the same time. Synchronizing like this is a very demanding task timing-wise and dynamic rate control helps smooth out imperfections in timing which are guaranteed to arise. It can be disabled, but be aware that proper video/audio sync is nearly impossible to obtain in that case. Tip +In order to propose improvements to this document, visit it's corresponding source page on github . Changes are proposed using \"Pull Requests.\" Problems \u00b6 While using RetroArch, the default settings might not be adequate, and you might experience video stuttering and/or audio crackling. For correct synchronization, video_refresh_rate must be configured for your monitor. It cannot be detected accurately enough by OS-provided APIs (i.e. they tend to blatantly lie). For proper behavior, an accuracy of roughly ~0.1% is needed for dynamic rate control to smooth out the drifting. This is trivial to obtain by measuring manually under normal conditions. Without dynamic rate control one would need a \"perfect\" measurement which obviously isn't possible without special hardware. RetroArch can give you an estimate of your monitors refresh rate in RGUI under video settings, which is updated in real-time using a running average over frame times. Make sure VSync is enabled and working. Also make sure you're running in full-screen for more accurate results (compositors can easily interfere with timing). Press accept button on the estimated refresh rate to configure RetroArch with the estimated rate. If the running average isn't drifting much anymore, it's probably a good result. You can also have RetroArch log the output at the end and configure things more manually. Start RetroArch directly in RGUI with retroarch --verbose --menu . Let it run uninterrupted for at least 4096 frames (displayed in title bar), and exit. In the log, you should see something like: RetroArch: Average monitor Hz: 59.869485 Hz. (1.347 % frame time deviation, based on 2048 last samples). If you're unsure about the result, run this test several times and see if the results are consistent. Some systems tend to have very unreliable VSync behavior and this result will wildly fluctuate. You can use this value in video_refresh_rate and the video and audio should ideally be butter smooth if the game's FPS and monitor FPS are relatively close to each other (playing a PAL game on 60 Hz monitor won't be perfect no matter what you do ...) Input latency \u00b6 There have been cases reported on excessive input lag in Windows for some users. It's not really input latency, but video driver latency. Some video drivers tend to buffer way too much in the name of increased performance. This problem is explained by Carmack here . Note The original John Carmack article is unavailable. The above link is a reproduction, as explained in the intro. RetroArch recently got an option to use a swap/fence sync method in OpenGL driver, which is reported to greatly lower input latency forum thread . To enable it, set video_hard_sync = true in config or enable it from RGUI. To ensure that this sync method is actually used, make sure that you see this in the log: RetroArch: Querying GL extension: ARB_sync => exists RetroArch: [GL]: Using ARB_sync to reduce latency. Do note that this sync method can greatly reduce performance, and can turn smooth 60 fps into crawling 30 fps if there was not enough headroom in the performance. If you use KMS mode, using video_hard_sync won't help as it already does something like this. Threaded video fallback \u00b6 If your video driver has very bad performance, it is possible to run it on a thread to avoid almost all video driver overhead. Set video_threaded = true in config. Butter smooth VSync behavior in this case is impossible however, and latency might increase slighly. Use only if you cannot obtain full speed otherwise. Windows Vista+ problems \u00b6 Windows Vista and up suffer problems with OpenGL in windowed mode where it appears to be impossible to obtain proper, smooth VSync behavior no matter what you do. If you are annoyed by this problem, and still want to play in windowed mode, you should use the D3D9 driver which doesn't have this problem. Disabling Aero sometimes helps OpenGL VSync behavior. macOS problems \u00b6 If you are experiencing periodic issues of audio and video stuttering and have multiple displays attached to your computer, this may be the cause. The solution is to limit macOS to a single display. For example, if you are running on a laptop with a single external display, it is sufficient to close your laptop lid or turn off the external display.","title":"Optimal Vsync Performance"},{"location":"guides/optimal-vsync/#getting-optimal-vsync-performance","text":"RetroArch uses Dynamic Rate Control to synchronize both video and audio at the same time. Synchronizing like this is a very demanding task timing-wise and dynamic rate control helps smooth out imperfections in timing which are guaranteed to arise. It can be disabled, but be aware that proper video/audio sync is nearly impossible to obtain in that case. Tip +In order to propose improvements to this document, visit it's corresponding source page on github . Changes are proposed using \"Pull Requests.\"","title":"Getting optimal vsync performance"},{"location":"guides/optimal-vsync/#problems","text":"While using RetroArch, the default settings might not be adequate, and you might experience video stuttering and/or audio crackling. For correct synchronization, video_refresh_rate must be configured for your monitor. It cannot be detected accurately enough by OS-provided APIs (i.e. they tend to blatantly lie). For proper behavior, an accuracy of roughly ~0.1% is needed for dynamic rate control to smooth out the drifting. This is trivial to obtain by measuring manually under normal conditions. Without dynamic rate control one would need a \"perfect\" measurement which obviously isn't possible without special hardware. RetroArch can give you an estimate of your monitors refresh rate in RGUI under video settings, which is updated in real-time using a running average over frame times. Make sure VSync is enabled and working. Also make sure you're running in full-screen for more accurate results (compositors can easily interfere with timing). Press accept button on the estimated refresh rate to configure RetroArch with the estimated rate. If the running average isn't drifting much anymore, it's probably a good result. You can also have RetroArch log the output at the end and configure things more manually. Start RetroArch directly in RGUI with retroarch --verbose --menu . Let it run uninterrupted for at least 4096 frames (displayed in title bar), and exit. In the log, you should see something like: RetroArch: Average monitor Hz: 59.869485 Hz. (1.347 % frame time deviation, based on 2048 last samples). If you're unsure about the result, run this test several times and see if the results are consistent. Some systems tend to have very unreliable VSync behavior and this result will wildly fluctuate. You can use this value in video_refresh_rate and the video and audio should ideally be butter smooth if the game's FPS and monitor FPS are relatively close to each other (playing a PAL game on 60 Hz monitor won't be perfect no matter what you do ...)","title":"Problems"},{"location":"guides/optimal-vsync/#input-latency","text":"There have been cases reported on excessive input lag in Windows for some users. It's not really input latency, but video driver latency. Some video drivers tend to buffer way too much in the name of increased performance. This problem is explained by Carmack here . Note The original John Carmack article is unavailable. The above link is a reproduction, as explained in the intro. RetroArch recently got an option to use a swap/fence sync method in OpenGL driver, which is reported to greatly lower input latency forum thread . To enable it, set video_hard_sync = true in config or enable it from RGUI. To ensure that this sync method is actually used, make sure that you see this in the log: RetroArch: Querying GL extension: ARB_sync => exists RetroArch: [GL]: Using ARB_sync to reduce latency. Do note that this sync method can greatly reduce performance, and can turn smooth 60 fps into crawling 30 fps if there was not enough headroom in the performance. If you use KMS mode, using video_hard_sync won't help as it already does something like this.","title":"Input latency"},{"location":"guides/optimal-vsync/#threaded-video-fallback","text":"If your video driver has very bad performance, it is possible to run it on a thread to avoid almost all video driver overhead. Set video_threaded = true in config. Butter smooth VSync behavior in this case is impossible however, and latency might increase slighly. Use only if you cannot obtain full speed otherwise.","title":"Threaded video fallback"},{"location":"guides/optimal-vsync/#windows-vista-problems","text":"Windows Vista and up suffer problems with OpenGL in windowed mode where it appears to be impossible to obtain proper, smooth VSync behavior no matter what you do. If you are annoyed by this problem, and still want to play in windowed mode, you should use the D3D9 driver which doesn't have this problem. Disabling Aero sometimes helps OpenGL VSync behavior.","title":"Windows Vista+ problems"},{"location":"guides/optimal-vsync/#macos-problems","text":"If you are experiencing periodic issues of audio and video stuttering and have multiple displays attached to your computer, this may be the cause. The solution is to limit macOS to a single display. For example, if you are running on a laptop with a single external display, it is sufficient to close your laptop lid or turn off the external display.","title":"macOS problems"},{"location":"guides/overrides/","text":"Using Content, Folder, and Core Overrides for Custom Settings \u00b6 There are various and comprehensive ways to save customized settings within the RetroArch menus. 99% of settings can be adjusted and saved from the menu but are only plain text files and can be adjusted manually with a text editor. Global settings can be overridden on a per core, per content directory, or per game basis using the config override system. Input settings are handled separately with the input core and game Remap system. Likewise, Shader Preset settings are also their own entity for per core and game settings A standalone file also saves the Option settings for all cores that support them. The settings in this file can be overridden on a per game basis. Tip Please read the Getting Started guide. Logic \u00b6 Overrides (.cfg) & Remaps (.rmp) \u00b6 Overrides and Remaps are designed to be lightweight and easily maintained configuration methods. They save only settings that differ from the preceding settings files. For example if only one setting differs between your retroarch.cfg and a core.cfg , then the core.cfg file will only contain one setting. The hierarchy for loading is: Game settings -> Applied when loading a particular game (content) Content directory settings -> Applied when loading content from a particular directory Core settings -> Applied when loading content with a specific core Default settings -> The default settings from 'retroarch.cfg' The RetroArch loading process is: Load retroarch.cfg Apply <name-of-core>.cfg & <name-of-core>.rmp override Apply <name-of-content-directory>.cfg & <name-of-content-directory>.rmp override Apply <name-of-game>.cfg & <name-of-game>.rmp override Note Core-specific or content directory-specific overrides that are not in game-specific overrides persist and will be loaded. Also once you have created an override any future changes will need to be saved via the Quick Menu. Options (.opt) & Shader Presets (.cgp|.glslp|.slangp) \u00b6 Custom per game core options and shader presets work slightly differently. These are full configurations and are loaded instead of the base shader preset and core option settings. Configuration Files & Location \u00b6 Note Depending on your chosen platform the location of these files after installation may vary. Warning Some settings cannot be saved in an override file from the menu. You can manually add settings to the override file to workaround most situations. The default and global settings file retroarch.cfg (located in the base install path) The global file for core option settings, for cores that support options retroarch-core-options.cfg (located with the retroarch.cfg ) Core options \u00b6 name-of-game.opt If not found load retroarch-core-options.cfg The options files list the settings found under Quick Menu -> Options . The retroarch-core-options.cfg is created automatically on loading a core that supports Options. A game-specific options file is created when you select Quick Menu -> Options -> Game-options file . (located in /config/<name-of-core>/<name-of-game>.opt . The path is set under Settings->Directory->Config ) Attention Load Content Specific Core Options Automatically must be set to On in RetroArch's Configuration settings in order for game-specific options to be automatically loaded upon content load. Override Configs \u00b6 The override system activates on loading of content. RetroArch applies config settings with the logic as explained above . Per Core Override /config/<name-of-core>/name-of-core.cfg (This path is set under Settings -> Directory -> Config ) These settings files are created from the Quick Menu -> Save Core Overrides option and contain ANY (supported) settings you have changed since loading content. These settings will be loaded every time you load content with that core. Per Content Directory Override /config/<name-of-core>/name-of-content-directory.cfg (located with per core override) These settings files are created as above with the Quick Menu -> Save Content Directory Overrides . The settings will take precedence over name-of-core.cfg Per Game Override /config/<name-of-core>/name-of-game.cfg (located with per core override file) These settings files are created as above with the Quick Menu -> Save Game Overrides . The settings will take precedence over name-of-content-directory.cfg Input Remaps \u00b6 Input remaps use the same logic as core/directory/game overrides and use the .rmp extension. They can be adjusted and saved from: - Quick Menu -> Controls -> Save Core Remap File - Quick Menu -> Controls -> Save Content Directory Remap File - Quick Menu -> Controls -> Save Game Remap File Set the save directory in Settings -> Directory -> Input Remapping (by default they will save to /config/remaps/<name-of-core>/ )","title":"Overrides: Content/Folder/Core-Specific Settings"},{"location":"guides/overrides/#using-content-folder-and-core-overrides-for-custom-settings","text":"There are various and comprehensive ways to save customized settings within the RetroArch menus. 99% of settings can be adjusted and saved from the menu but are only plain text files and can be adjusted manually with a text editor. Global settings can be overridden on a per core, per content directory, or per game basis using the config override system. Input settings are handled separately with the input core and game Remap system. Likewise, Shader Preset settings are also their own entity for per core and game settings A standalone file also saves the Option settings for all cores that support them. The settings in this file can be overridden on a per game basis. Tip Please read the Getting Started guide.","title":"Using Content, Folder, and Core Overrides for Custom Settings"},{"location":"guides/overrides/#logic","text":"","title":"Logic"},{"location":"guides/overrides/#overrides-cfg-remaps-rmp","text":"Overrides and Remaps are designed to be lightweight and easily maintained configuration methods. They save only settings that differ from the preceding settings files. For example if only one setting differs between your retroarch.cfg and a core.cfg , then the core.cfg file will only contain one setting. The hierarchy for loading is: Game settings -> Applied when loading a particular game (content) Content directory settings -> Applied when loading content from a particular directory Core settings -> Applied when loading content with a specific core Default settings -> The default settings from 'retroarch.cfg' The RetroArch loading process is: Load retroarch.cfg Apply <name-of-core>.cfg & <name-of-core>.rmp override Apply <name-of-content-directory>.cfg & <name-of-content-directory>.rmp override Apply <name-of-game>.cfg & <name-of-game>.rmp override Note Core-specific or content directory-specific overrides that are not in game-specific overrides persist and will be loaded. Also once you have created an override any future changes will need to be saved via the Quick Menu.","title":"Overrides (.cfg) &amp; Remaps (.rmp)"},{"location":"guides/overrides/#options-opt-shader-presets-cgpglslpslangp","text":"Custom per game core options and shader presets work slightly differently. These are full configurations and are loaded instead of the base shader preset and core option settings.","title":"Options (.opt) &amp; Shader Presets (.cgp|.glslp|.slangp)"},{"location":"guides/overrides/#configuration-files-location","text":"Note Depending on your chosen platform the location of these files after installation may vary. Warning Some settings cannot be saved in an override file from the menu. You can manually add settings to the override file to workaround most situations. The default and global settings file retroarch.cfg (located in the base install path) The global file for core option settings, for cores that support options retroarch-core-options.cfg (located with the retroarch.cfg )","title":"Configuration Files &amp; Location"},{"location":"guides/overrides/#core-options","text":"name-of-game.opt If not found load retroarch-core-options.cfg The options files list the settings found under Quick Menu -> Options . The retroarch-core-options.cfg is created automatically on loading a core that supports Options. A game-specific options file is created when you select Quick Menu -> Options -> Game-options file . (located in /config/<name-of-core>/<name-of-game>.opt . The path is set under Settings->Directory->Config ) Attention Load Content Specific Core Options Automatically must be set to On in RetroArch's Configuration settings in order for game-specific options to be automatically loaded upon content load.","title":"Core options"},{"location":"guides/overrides/#override-configs","text":"The override system activates on loading of content. RetroArch applies config settings with the logic as explained above . Per Core Override /config/<name-of-core>/name-of-core.cfg (This path is set under Settings -> Directory -> Config ) These settings files are created from the Quick Menu -> Save Core Overrides option and contain ANY (supported) settings you have changed since loading content. These settings will be loaded every time you load content with that core. Per Content Directory Override /config/<name-of-core>/name-of-content-directory.cfg (located with per core override) These settings files are created as above with the Quick Menu -> Save Content Directory Overrides . The settings will take precedence over name-of-core.cfg Per Game Override /config/<name-of-core>/name-of-game.cfg (located with per core override file) These settings files are created as above with the Quick Menu -> Save Game Overrides . The settings will take precedence over name-of-content-directory.cfg","title":"Override Configs"},{"location":"guides/overrides/#input-remaps","text":"Input remaps use the same logic as core/directory/game overrides and use the .rmp extension. They can be adjusted and saved from: - Quick Menu -> Controls -> Save Core Remap File - Quick Menu -> Controls -> Save Content Directory Remap File - Quick Menu -> Controls -> Save Game Remap File Set the save directory in Settings -> Directory -> Input Remapping (by default they will save to /config/remaps/<name-of-core>/ )","title":"Input Remaps"},{"location":"guides/recording-and-streaming/","text":"Recording and streaming video from RetroArch \u00b6 RetroArch has the capability to record gaming footage in real-time using libavcodec (FFmpeg). Both lossless and lossy coding is supported. It is possible to configure most encoding options for libavcodec using a separate config file. FFmpeg version \u00b6 RetroArch requires a very recent version of FFmpeg to work correctly. If you are on Linux or OSX, your distros FFmpeg build is likely out of date, and you should build FFmpeg from Git. A recommended command line is: 1 2 3 ./configure --prefix=/opt/ffmpeg --enable-libx264 --enable-gpl --enable-libmp3lame <enable stuff you fancy here> make sudo make install This assumes you will install a custom FFmpeg build into /opt/ffmpeg . For Windows users, the redist includes recent enough libav* binaries. Now you can configure RetroArch with: 1 PKG_CONFIG_PATH=/opt/ffmpeg/lib/pkgconfig ./configure and the configure script should pick up the FFmpeg libraries in /opt/ffmpeg/lib . Check config.mk to make sure. After successfully compiling, make sure that the RetroArch binary picks up the correct FFmpeg libs by adding /opt/ffmpeg/lib to LD_LIBRARY_PATH (or the equivalent on OSX). Lossless coding \u00b6 By default (not providing an encoding config), lossless coding is used. This means libx264/RGB, with -qp 0 (lossless). The audio codec used is FLAC. libx264/RGB ensures very nice bitrates even when lossless and very fast encoding. Lossy and flexible coding config \u00b6 By adding the --recordconfig <config> parameter, you have more control over encoding. The recognized config options are: 1 2 3 4 5 6 7 8 9 10 11 12 13 vcodec = <codec> # Same as -vcodec acodec = <codec> # Same as -acodec format = <format> # Muxer format to use. E.g. mkv, flv or mp4. This is normally inferred, but must be set when using extensionless formats like RTMP (streaming). threads = <threads> # Threads to use when encoding video. Should be set to (# of CPU threads - 1). frame_drop_ratio = <ratio> # Only encodes every <ratio> frames. pix_fmt = <pix_fmt> # Same as -pix_fmt, no default is assumed, must be set! scale_factor = <factor> # Scales input by <factor>. Useful when encoding in chroma subsampled formats like yuv420p. sample_rate = <rate> # Audio output sampling rate. audio_global_quality = <qual> # Global quality for audio (VBR). Maps to codec->global_quality in API. Play around with it. Higher = better. 75 seems to be a fair value. audio_bit_rate = <bitrate> # Audio bit rate (CBR). This is in bit/s, so use e.g. 192000 for 192 kb/s. video_{option} = <value> # Sets generic video option {option} to <value>. This is codec specific. Mostly useful for libx264. audio_{option} = <value> # Sets generic audio option {option} to <value>. This is codec specific. Live streaming \u00b6 RetroArch can live stream to RTMP services like twitch . To live stream there, create a config that is tailored for twitch. Example: 1 2 3 4 5 6 7 8 9 10 11 vcodec = libx264 acodec = libmp3lame pix_fmt = yuv420p scale_factor = 2 threads = 3 video_crf = 25 video_preset = superfast video_tune = animation audio_global_quality = 75 sample_rate = 44100 format = flv You can stream to twitch with a command such as: 1 retroarch --record rtmp://live.twitch.tv/app/$YOUR_TWITCH_ID --recordconfig twitch.cfg","title":"Video Recording and Streaming"},{"location":"guides/recording-and-streaming/#recording-and-streaming-video-from-retroarch","text":"RetroArch has the capability to record gaming footage in real-time using libavcodec (FFmpeg). Both lossless and lossy coding is supported. It is possible to configure most encoding options for libavcodec using a separate config file.","title":"Recording and streaming video from RetroArch"},{"location":"guides/recording-and-streaming/#ffmpeg-version","text":"RetroArch requires a very recent version of FFmpeg to work correctly. If you are on Linux or OSX, your distros FFmpeg build is likely out of date, and you should build FFmpeg from Git. A recommended command line is: 1 2 3 ./configure --prefix=/opt/ffmpeg --enable-libx264 --enable-gpl --enable-libmp3lame <enable stuff you fancy here> make sudo make install This assumes you will install a custom FFmpeg build into /opt/ffmpeg . For Windows users, the redist includes recent enough libav* binaries. Now you can configure RetroArch with: 1 PKG_CONFIG_PATH=/opt/ffmpeg/lib/pkgconfig ./configure and the configure script should pick up the FFmpeg libraries in /opt/ffmpeg/lib . Check config.mk to make sure. After successfully compiling, make sure that the RetroArch binary picks up the correct FFmpeg libs by adding /opt/ffmpeg/lib to LD_LIBRARY_PATH (or the equivalent on OSX).","title":"FFmpeg version"},{"location":"guides/recording-and-streaming/#lossless-coding","text":"By default (not providing an encoding config), lossless coding is used. This means libx264/RGB, with -qp 0 (lossless). The audio codec used is FLAC. libx264/RGB ensures very nice bitrates even when lossless and very fast encoding.","title":"Lossless coding"},{"location":"guides/recording-and-streaming/#lossy-and-flexible-coding-config","text":"By adding the --recordconfig <config> parameter, you have more control over encoding. The recognized config options are: 1 2 3 4 5 6 7 8 9 10 11 12 13 vcodec = <codec> # Same as -vcodec acodec = <codec> # Same as -acodec format = <format> # Muxer format to use. E.g. mkv, flv or mp4. This is normally inferred, but must be set when using extensionless formats like RTMP (streaming). threads = <threads> # Threads to use when encoding video. Should be set to (# of CPU threads - 1). frame_drop_ratio = <ratio> # Only encodes every <ratio> frames. pix_fmt = <pix_fmt> # Same as -pix_fmt, no default is assumed, must be set! scale_factor = <factor> # Scales input by <factor>. Useful when encoding in chroma subsampled formats like yuv420p. sample_rate = <rate> # Audio output sampling rate. audio_global_quality = <qual> # Global quality for audio (VBR). Maps to codec->global_quality in API. Play around with it. Higher = better. 75 seems to be a fair value. audio_bit_rate = <bitrate> # Audio bit rate (CBR). This is in bit/s, so use e.g. 192000 for 192 kb/s. video_{option} = <value> # Sets generic video option {option} to <value>. This is codec specific. Mostly useful for libx264. audio_{option} = <value> # Sets generic audio option {option} to <value>. This is codec specific.","title":"Lossy and flexible coding config"},{"location":"guides/recording-and-streaming/#live-streaming","text":"RetroArch can live stream to RTMP services like twitch . To live stream there, create a config that is tailored for twitch. Example: 1 2 3 4 5 6 7 8 9 10 11 vcodec = libx264 acodec = libmp3lame pix_fmt = yuv420p scale_factor = 2 threads = 3 video_crf = 25 video_preset = superfast video_tune = animation audio_global_quality = 75 sample_rate = 44100 format = flv You can stream to twitch with a command such as: 1 retroarch --record rtmp://live.twitch.tv/app/$YOUR_TWITCH_ID --recordconfig twitch.cfg","title":"Live streaming"},{"location":"guides/retroachievements/","text":"RetroAchievements In RetroArch \u00b6 What are RetroAchievements? \u00b6 retroachievements.org is a service that provides a trophy/achievement unlocking mechanism similar to modern consoles, for retro games. Warning The service is not maintained by RetroArch or the Libretro team. Note If you want to contribute, please update RetroArch and cores to get the latest fixes on the RetroAchievements feature, then in order to propose improvements to this document, do it via GitHub using \"Pull Requests\". How to setup achievements \u00b6 Register an account on retroachievements.org (don't forget to confirm your account creation with the email they send to you). Open Retroarch and go to Settings->Achievements. Enable the functionality and fill in your retroachievements credentials. Note The hardcore mode prevents you from using emulation features like savestates, slow motion, and cheats, BUT it gives you double points. Check your connection to the service \u00b6 You need an active internet connection. In this example, we are using the game Chrono Trigger (USA) with the Snes9x core. Launch the game and trigger the Quick Menu. Go to Achievements and you should see a list of the unlockable trophies for this game. Check your progress \u00b6 On the retroachievements website, you can login and access your account page. You should be able to check your progress in the games and see which trophies you unlocked. Trophies unlocked in hardcore mode are marked with a special color. You can also check the progress of your friends and add comments on their trophies. Cores Compatibility \u00b6 Arcade (various manufacturers) \u00b6 Arcade \u00b6 Core Supported Notes FinalBurn Neo \u2714 AES bios is required for most Neo Geo achievements. AES Asia is generally English. MAME \u2715 Atari \u00b6 2600 \u00b6 Core Supported Notes Stella \u2714 Stella 2014 \u2714 7800 \u00b6 Core Supported Notes ProSystem \u2714 Lynx \u00b6 Core Supported Notes Beetle Lynx \u2714 Handy \u2714 Bandai \u00b6 Wonderswan / Wonderswan Color \u00b6 Core Supported Notes Beetle Cygne \u2714 Coleco \u00b6 ColecoVision \u00b6 Core Supported Notes blueMSX \u2714 FinalBurn Neo \u2714 Requires games in coleco subdirectory, exact archives just like arcade. Not all games may be linked for this core. SMS Plus GX \u2715 Coleco games aren't fully playable in this core yet. GCE \u00b6 Vectrex \u00b6 Core Supported Notes vecx \u2714 Microsoft \u00b6 MSX / MSX2 \u00b6 Core Supported Notes blueMSX \u2714 FinalBurn Neo \u2714 Requires games in msx subdirectory, exact archives just like arcade. Not all games may be linked for this core. MSX2 is not supported. fMSX \u2715 Emulation is too unstable to support. NEC \u00b6 PC Engine - TurboGrafx-16 / PC Engine CD - TurboGrafx-CD \u00b6 Core Supported Notes Beetle PCE FAST \u2714 Highest speed. Does not support SuperGrafx games. Beetle SuperGrafx \u2714 High speed. Supports SuperGrafx games. Beetle PCE \u2714 High accuracy, lower speed. Supports SuperGrafx games. FinalBurn Neo \u2714 Requires games in pce , tg16 , or sgx subdirectories, exact archives just like arcade. Not all games may be linked for this core. CD is not supported. PC-FX \u00b6 Core Supported Notes Beetle PC-FX \u2714 PC-8000 / PC-8800 \u00b6 Core Supported Notes QUASI88 \u2714 Some games may be unsupported in Retroarch due to missing options. Sets generally expect the MkIISR bios. Nintendo \u00b6 Nintendo DS \u00b6 Core Supported Notes DeSmuME \u2714 External BIOS recommended, needs to be enabled in core options DeSmuME 2015 \u2714 MelonDS \u2714 BIOS required Game Boy / Game Boy Color \u00b6 Core Supported Notes SameBoy \u2714 Gambatte \u2714 Gearboy \u2714 VBA-M \u2714 Has gyro support via analog sticks mGBA \u2714 Mesen-S \u2714 Currently the only supported core with complete SGB support. Supports GB and GBC without SGB as well. Emux GB \u2715 TGB Dual \u2715 bsnes \u2715 SGB only bsnes-hd \u2715 SGB only higan Accuracy \u2715 SGB only, Achievement support isn't going to be added nSide Balanced \u2715 SGB only, Achievement support isn't going to be added Game Boy Advance \u00b6 Core Supported Notes mGBA \u2714 VBA-M \u2714 VBA Next \u2714 Beetle GBA \u2714 gpSP \u2715 Meteor \u2715 NES \u00b6 Core Supported Notes FCEUmm \u2714 Supports FDS Mesen \u2714 Supports FDS, very high accuracy QuickNES \u2714 Nestopia UE \u2715 Achievements are not fully supported yet bnes \u2715 Emux NES \u2715 FinalBurn Neo \u2715 Requires games in nes or fds subdirectories, exact archives just like arcade. Not supported at this time. Nintendo 64 \u00b6 Core Supported Notes Mupen64Plus-Next \u2714 Supports greater graphic customization and upscaling ParaLLEl N64 \u2714 Supports 64DD games. Can play -some- hacks reliant on low accuracy via alternate plugins. Pokemon Mini \u00b6 Core Supported Notes PokeMini \u2714 SNES \u00b6 Core Supported Notes Snes9x \u2714 High speed, moderate accuracy. Actively maintained. Snes9x 2010 \u2714 Snes9x 2005 Plus \u2714 Snes9x 2005 \u2714 Snes9x 2002 \u2714 Mesen-S \u2714 High accuracy, high performance cost. Actively maintained. Beetle bsnes \u2714 bsnes \u2715 bsnes-hd \u2715 bsnes-mercury Accuracy \u2714 bsnes-mercury Balanced \u2714 bsnes-mercury Performance \u2714 bsnes 2014 Accuracy \u2714 bsnes 2014 Balanced \u2714 bsnes 2014 Performance \u2714 bsnes C++98 (v085) \u2714 higan Accuracy \u2715 Achievement support isn't going to be added nSide Balanced \u2715 Achievement support isn't going to be added Virtual Boy \u00b6 Core Supported Notes Beetle VB \u2714 Sega \u00b6 Master System / MegaDrive - Genesis \u00b6 Core Supported Notes Genesis Plus GX \u2714 BlastEm \u2714 Cycle accurate. Genesis/MegaDrive only. Picodrive \u2714 Gearsystem \u2714 SMS Plus GX \u2714 Master System only Emux SMS \u2715 FinalBurn Neo \u2715 Requires games in megadriv or sms subdirectories, exact archives just like arcade. Not supported at this time. 32X / 32X CD \u00b6 Core Supported Notes Picodrive \u2714 Emulation quality can be dodgy. Game Gear \u00b6 Core Supported Notes Genesis Plus GX \u2714 Gearsystem \u2714 SMS Plus GX \u2714 FinalBurn Neo \u2715 Requires games in gamegear subdirectory, exact archives just like arcade. Not supported at this time. SG-1000 \u00b6 Core Supported Notes Genesis Plus GX \u2714 Gearsystem \u2714 blueMSX \u2714 FinalBurn Neo \u2714 Requires games in sg1000 subdirectory, exact archives just like arcade. Not all games may be linked for this core. Sega CD - Mega-CD \u00b6 Core Supported Notes Genesis Plus GX \u2714 Picodrive \u2714 Saturn \u00b6 Core Supported Notes Beetle Saturn \u2714 Yabause x Yabasanshiro x Kronos x SNK \u00b6 Neo Geo Pocket / Neo Geo Pocket Color \u00b6 Core Supported Notes Beetle NeoPop \u2714 RACE \u2714 FinalBurn Neo \u2715 Requires games in ngp subdirectory, exact archives just like arcade. Not supported at this time. Sony \u00b6 PlayStation \u00b6 Core Supported Notes Beetle PSX HW \u2714 Identical to Beetle PSX, with extra hardware features. High accuracy. Beetle PSX \u2714 PCSX ReARMed \u2714 Lower accuracy than Beetle PSX (HW), higher speed. The 3DO Company (various manufacturers) \u00b6 3DO \u00b6 Core Supported Notes Opera \u2714","title":"RetroAchievements"},{"location":"guides/retroachievements/#retroachievements-in-retroarch","text":"","title":"RetroAchievements In RetroArch"},{"location":"guides/retroachievements/#what-are-retroachievements","text":"retroachievements.org is a service that provides a trophy/achievement unlocking mechanism similar to modern consoles, for retro games. Warning The service is not maintained by RetroArch or the Libretro team. Note If you want to contribute, please update RetroArch and cores to get the latest fixes on the RetroAchievements feature, then in order to propose improvements to this document, do it via GitHub using \"Pull Requests\".","title":"What are RetroAchievements?"},{"location":"guides/retroachievements/#how-to-setup-achievements","text":"Register an account on retroachievements.org (don't forget to confirm your account creation with the email they send to you). Open Retroarch and go to Settings->Achievements. Enable the functionality and fill in your retroachievements credentials. Note The hardcore mode prevents you from using emulation features like savestates, slow motion, and cheats, BUT it gives you double points.","title":"How to setup achievements"},{"location":"guides/retroachievements/#check-your-connection-to-the-service","text":"You need an active internet connection. In this example, we are using the game Chrono Trigger (USA) with the Snes9x core. Launch the game and trigger the Quick Menu. Go to Achievements and you should see a list of the unlockable trophies for this game.","title":"Check your connection to the service"},{"location":"guides/retroachievements/#check-your-progress","text":"On the retroachievements website, you can login and access your account page. You should be able to check your progress in the games and see which trophies you unlocked. Trophies unlocked in hardcore mode are marked with a special color. You can also check the progress of your friends and add comments on their trophies.","title":"Check your progress"},{"location":"guides/retroachievements/#cores-compatibility","text":"","title":"Cores Compatibility"},{"location":"guides/retroachievements/#arcade-various-manufacturers","text":"","title":"Arcade (various manufacturers)"},{"location":"guides/retroachievements/#arcade","text":"Core Supported Notes FinalBurn Neo \u2714 AES bios is required for most Neo Geo achievements. AES Asia is generally English. MAME \u2715","title":"Arcade"},{"location":"guides/retroachievements/#atari","text":"","title":"Atari"},{"location":"guides/retroachievements/#2600","text":"Core Supported Notes Stella \u2714 Stella 2014 \u2714","title":"2600"},{"location":"guides/retroachievements/#7800","text":"Core Supported Notes ProSystem \u2714","title":"7800"},{"location":"guides/retroachievements/#lynx","text":"Core Supported Notes Beetle Lynx \u2714 Handy \u2714","title":"Lynx"},{"location":"guides/retroachievements/#bandai","text":"","title":"Bandai"},{"location":"guides/retroachievements/#wonderswan-wonderswan-color","text":"Core Supported Notes Beetle Cygne \u2714","title":"Wonderswan / Wonderswan Color"},{"location":"guides/retroachievements/#coleco","text":"","title":"Coleco"},{"location":"guides/retroachievements/#colecovision","text":"Core Supported Notes blueMSX \u2714 FinalBurn Neo \u2714 Requires games in coleco subdirectory, exact archives just like arcade. Not all games may be linked for this core. SMS Plus GX \u2715 Coleco games aren't fully playable in this core yet.","title":"ColecoVision"},{"location":"guides/retroachievements/#gce","text":"","title":"GCE"},{"location":"guides/retroachievements/#vectrex","text":"Core Supported Notes vecx \u2714","title":"Vectrex"},{"location":"guides/retroachievements/#microsoft","text":"","title":"Microsoft"},{"location":"guides/retroachievements/#msx-msx2","text":"Core Supported Notes blueMSX \u2714 FinalBurn Neo \u2714 Requires games in msx subdirectory, exact archives just like arcade. Not all games may be linked for this core. MSX2 is not supported. fMSX \u2715 Emulation is too unstable to support.","title":"MSX / MSX2"},{"location":"guides/retroachievements/#nec","text":"","title":"NEC"},{"location":"guides/retroachievements/#pc-engine-turbografx-16-pc-engine-cd-turbografx-cd","text":"Core Supported Notes Beetle PCE FAST \u2714 Highest speed. Does not support SuperGrafx games. Beetle SuperGrafx \u2714 High speed. Supports SuperGrafx games. Beetle PCE \u2714 High accuracy, lower speed. Supports SuperGrafx games. FinalBurn Neo \u2714 Requires games in pce , tg16 , or sgx subdirectories, exact archives just like arcade. Not all games may be linked for this core. CD is not supported.","title":"PC Engine - TurboGrafx-16 / PC Engine CD - TurboGrafx-CD"},{"location":"guides/retroachievements/#pc-fx","text":"Core Supported Notes Beetle PC-FX \u2714","title":"PC-FX"},{"location":"guides/retroachievements/#pc-8000-pc-8800","text":"Core Supported Notes QUASI88 \u2714 Some games may be unsupported in Retroarch due to missing options. Sets generally expect the MkIISR bios.","title":"PC-8000 / PC-8800"},{"location":"guides/retroachievements/#nintendo","text":"","title":"Nintendo"},{"location":"guides/retroachievements/#nintendo-ds","text":"Core Supported Notes DeSmuME \u2714 External BIOS recommended, needs to be enabled in core options DeSmuME 2015 \u2714 MelonDS \u2714 BIOS required","title":"Nintendo DS"},{"location":"guides/retroachievements/#game-boy-game-boy-color","text":"Core Supported Notes SameBoy \u2714 Gambatte \u2714 Gearboy \u2714 VBA-M \u2714 Has gyro support via analog sticks mGBA \u2714 Mesen-S \u2714 Currently the only supported core with complete SGB support. Supports GB and GBC without SGB as well. Emux GB \u2715 TGB Dual \u2715 bsnes \u2715 SGB only bsnes-hd \u2715 SGB only higan Accuracy \u2715 SGB only, Achievement support isn't going to be added nSide Balanced \u2715 SGB only, Achievement support isn't going to be added","title":"Game Boy / Game Boy Color"},{"location":"guides/retroachievements/#game-boy-advance","text":"Core Supported Notes mGBA \u2714 VBA-M \u2714 VBA Next \u2714 Beetle GBA \u2714 gpSP \u2715 Meteor \u2715","title":"Game Boy Advance"},{"location":"guides/retroachievements/#nes","text":"Core Supported Notes FCEUmm \u2714 Supports FDS Mesen \u2714 Supports FDS, very high accuracy QuickNES \u2714 Nestopia UE \u2715 Achievements are not fully supported yet bnes \u2715 Emux NES \u2715 FinalBurn Neo \u2715 Requires games in nes or fds subdirectories, exact archives just like arcade. Not supported at this time.","title":"NES"},{"location":"guides/retroachievements/#nintendo-64","text":"Core Supported Notes Mupen64Plus-Next \u2714 Supports greater graphic customization and upscaling ParaLLEl N64 \u2714 Supports 64DD games. Can play -some- hacks reliant on low accuracy via alternate plugins.","title":"Nintendo 64"},{"location":"guides/retroachievements/#pokemon-mini","text":"Core Supported Notes PokeMini \u2714","title":"Pokemon Mini"},{"location":"guides/retroachievements/#snes","text":"Core Supported Notes Snes9x \u2714 High speed, moderate accuracy. Actively maintained. Snes9x 2010 \u2714 Snes9x 2005 Plus \u2714 Snes9x 2005 \u2714 Snes9x 2002 \u2714 Mesen-S \u2714 High accuracy, high performance cost. Actively maintained. Beetle bsnes \u2714 bsnes \u2715 bsnes-hd \u2715 bsnes-mercury Accuracy \u2714 bsnes-mercury Balanced \u2714 bsnes-mercury Performance \u2714 bsnes 2014 Accuracy \u2714 bsnes 2014 Balanced \u2714 bsnes 2014 Performance \u2714 bsnes C++98 (v085) \u2714 higan Accuracy \u2715 Achievement support isn't going to be added nSide Balanced \u2715 Achievement support isn't going to be added","title":"SNES"},{"location":"guides/retroachievements/#virtual-boy","text":"Core Supported Notes Beetle VB \u2714","title":"Virtual Boy"},{"location":"guides/retroachievements/#sega","text":"","title":"Sega"},{"location":"guides/retroachievements/#master-system-megadrive-genesis","text":"Core Supported Notes Genesis Plus GX \u2714 BlastEm \u2714 Cycle accurate. Genesis/MegaDrive only. Picodrive \u2714 Gearsystem \u2714 SMS Plus GX \u2714 Master System only Emux SMS \u2715 FinalBurn Neo \u2715 Requires games in megadriv or sms subdirectories, exact archives just like arcade. Not supported at this time.","title":"Master System / MegaDrive - Genesis"},{"location":"guides/retroachievements/#32x-32x-cd","text":"Core Supported Notes Picodrive \u2714 Emulation quality can be dodgy.","title":"32X / 32X CD"},{"location":"guides/retroachievements/#game-gear","text":"Core Supported Notes Genesis Plus GX \u2714 Gearsystem \u2714 SMS Plus GX \u2714 FinalBurn Neo \u2715 Requires games in gamegear subdirectory, exact archives just like arcade. Not supported at this time.","title":"Game Gear"},{"location":"guides/retroachievements/#sg-1000","text":"Core Supported Notes Genesis Plus GX \u2714 Gearsystem \u2714 blueMSX \u2714 FinalBurn Neo \u2714 Requires games in sg1000 subdirectory, exact archives just like arcade. Not all games may be linked for this core.","title":"SG-1000"},{"location":"guides/retroachievements/#sega-cd-mega-cd","text":"Core Supported Notes Genesis Plus GX \u2714 Picodrive \u2714","title":"Sega CD - Mega-CD"},{"location":"guides/retroachievements/#saturn","text":"Core Supported Notes Beetle Saturn \u2714 Yabause x Yabasanshiro x Kronos x","title":"Saturn"},{"location":"guides/retroachievements/#snk","text":"","title":"SNK"},{"location":"guides/retroachievements/#neo-geo-pocket-neo-geo-pocket-color","text":"Core Supported Notes Beetle NeoPop \u2714 RACE \u2714 FinalBurn Neo \u2715 Requires games in ngp subdirectory, exact archives just like arcade. Not supported at this time.","title":"Neo Geo Pocket / Neo Geo Pocket Color"},{"location":"guides/retroachievements/#sony","text":"","title":"Sony"},{"location":"guides/retroachievements/#playstation","text":"Core Supported Notes Beetle PSX HW \u2714 Identical to Beetle PSX, with extra hardware features. High accuracy. Beetle PSX \u2714 PCSX ReARMed \u2714 Lower accuracy than Beetle PSX (HW), higher speed.","title":"PlayStation"},{"location":"guides/retroachievements/#the-3do-company-various-manufacturers","text":"","title":"The 3DO Company (various manufacturers)"},{"location":"guides/retroachievements/#3do","text":"Core Supported Notes Opera \u2714","title":"3DO"},{"location":"guides/retroarch-accessibility-guide/","text":"Retroarch Getting Started guide for users of the accessibility mode \u00b6 Introduction \u00b6 This user guide is to aid users of screen readers who are newcomers to Retroarch begin using the program. Retroarch is an emulation front-end which allows one to play many games from many video game consoles, Arcades, and vintage computers. As of version 1.8.2, the user interface is accessible to blind people. Using the AI service within games, one is able to read textual content: menus, character dialog, statistics screens, ETC. Along with the game\u2019s sound design, this makes many games which were playable even more enjoyable, or games which use only text playable at all. For now, accessibility mode works on Windows, macOS, and Linux operating systems. Retroarch Terminology \u00b6 Retroarch: A front-end for many video game emulators. Front-end: A program that brings multiple other programs into one universal interface. Core: a video game console, game engine, or media player within Retroarch. content: a video game, media file, or Homebrew program that can be loaded by a Retroarch core. accessibility: In Retroarch, a setting which speaks the user interface of the program. AI service: A service which takes a screenshot of a game and acts upon it based on the setting chosen in the AI service settings. In this guide, we\u2019ll focus on Narrator mode. Netplay: Playing an originally offline video game across the local network or Internet. bind: To link one thing with another. In Retroarch terms, to link a key or button with an action. Download Retroarch \u00b6 To download Retroarch, go to Retroarch's download page and choose the download for your system. Windows users should choose the 64-bit installer version, unless they have an old computer with a 32-bit operating system. Mac users should download the Intel version under the \u201cApple macOS / OSX\u201d heading. Linux users should see if version 1.8.2 or higher is in their package manager, and get that and the cores through APT, Pacman, DNF, and so on, or compile it yourself. For iOS, Android, tvOS, and game consoles, accessibility features are not implemented. Open the Program \u00b6 After installing Retroarch, launch the program in the usual way according to your system. Right now, it will not speak, but if it opens, that means it\u2019s at least installed correctly, and you can press escape twice to close it, or using the usual quit command of your operating system. Turn on accessibility \u00b6 To turn on the accessibility feature, do the following: Open Retroarch. Press Left Arrow , Down Arrow , then Enter . Press up arrow seven times. Press Enter twice, or Enter then Right arrow . You\u2019ll hear \u201cRetroarch accessibility on.\u201d Now, you can either keep exploring the menu, or quit and reopen Retroarch for a fresh start. Accessibility mode will stay on, and if not, after enabling accessibility, arrow left once, then down arrow until you hear \"settings\", then arrow down to configuration, press Enter , and enable \u201csave on exit\u201d with enter . note : in later versions of Retroarch, the default menu has been set to Ozone. For an easier experience, especially with gamepads, you may switch to the \"XMB\" menu by going to settings, drivers, menu driver, and changing \"ozone\" to \"XMB.\" The rest of this guide assumes that you are using the XMB menu. Set Narrator Speed \u00b6 If you find that Retroarch is speaking too quickly or too slowly, you can change the speed. From the Retroarch accessibility menu, press Down arrow . Press the Left arrow to decrease the speed, and the Right arrow to increase it. Navigate the Interface \u00b6 The Retroarch user interface is composed of menus, dialog boxes, text-entry boxes, and so on. This does not include the games played using Retroarch. To navigate the interface, use the arrow keys to traverse menus, Enter to activate items, left and right arrow keys to adjust options, and backspace to go back to the previous menus. You can press the Shift key to get information on the currently focused menu item, and then Enter or Backspace to exit that dialog. There are two main navigation elements to be aware of in Retroarch\u2019s user interface. Menus are vertical, so you use the Up and Down arrows to navigate these. Tabs, sometimes called Vertical menus, are navigated with the Left and Right arrows. Main Menu, Settings, Netplay, Favorites, ETC. are tabs, but Load Core, Load Content, and Quit are menu items. To the left of the Main Menu, you\u2019ll find the \u201cHorizontal Menus,\u201d which are lists of game systems and games which you\u2019ve played on that system. For example, if you play Play Station games, there will be a menu of those. The games in each tab are in a vertical list, but the other game systems, like PlayStation Portable, will be in another tab to the left of that. Tabs like Favorites, Netplay, and Settings are to the right of the Main Menu. AI Service \u00b6 The AI service is a retroarch feature which takes a screenshot of the game being played, and can either translate the text in the image, speak the text, or speak the text with the same voice as the Narrator used for the Retroarch user interface. You will have to configure the AI service yourself, linking it with a translator, and setting up a key for it. This can be useful for reading menus in games, unspoken character dialog, character dialog in another language, or other textual content, like instructions. Because the AI service uses Artificial Intelligence, the spoken text may not be completely accurate, as is all optical character recognition technology. If there is a table, it will be read one column at a time. How to Enable the AI Service \u00b6 From the Main menu, press Right Arrow to move to the Settings menu. There, press Down Arrow until you reach the AI Service item, and press Enter to open it. Here, you can choose which mode the AI service will be in: Image Mode: The service will capture an image of text, translate it, and send it back to the screen as an image. Speech Mode: The Service will grab an image of text in a game, translate it if needed, and speak it using a third-party text to speech engine. Narrator Mode: The AI service will grab an image of text, translate it if necessary, and send it to Retroarch\u2019s accessibility system to be spoken by your operating system\u2019s speech synthesizer. For now, choose Narrator mode by pressing Right Arrow and down arrow to \u201cAi Service Enabled,\u201d and if needed, turn it on with Enter . Also, while you\u2019re here, you can set the language to translate, and to translate to. For example, if you primarily play Japanese games, but you prefer to hear your games spoken in Esperanto, assuming you have a voice for that language, set the source language to \u201cJapanese,\u201d and the target language to \u201cEsperanto.\u201d You can also leave the source language at \u201cDon\u2019t care,\u201d and the Service will guess the language of the game. Sign up for ZTranslate \u00b6 To use the AI Service, you need to link it with an online translation service. The easiest method is to use ZTranslate. In your web browser, go to https://ztranslate.net Find the \u201cSign Up\u201d link, and press Enter on it. Fill out the form, and submit it to make an account there. Check your email, and verify the account by clicking the included link. When logged in, go to the \u201cSettings\u201d link, and press Enter . Move to the \u201cQuota\u201d heading, and arrow down to the \u201cAPI key\u201d section. Copy the API key, and paste it into a Notepad, text edit, GEdit, Pluma, or Nano file. Configure the Service \u00b6 To configure the service, go to the Settings link on ZTranslate\u2019s site, and find the OCR Page. There, you can set confidence levels, which tell the Service what level, from 0 to 1, of confidence to translate the text with. In the Profile page, you can set and change personal information. link Retroarch with your account \u00b6 To link Retroarch with your ZTranslate account, find your Retroarch configuration file. Find your Retroarch folder: Open Retroarch Right arrow to Settings Down Arrow to directories Press Enter Find the configuration directory and note the path to it, then exit retroarch. Open the configuration directory, and then open Retroarch.cfg. There, change the line starting with #+begin example ai service url = \" http://ztranslate.net/service?api_key = \" #+end example Here, you can simply copy and paste the URL in quotes to your configuration file, replacing with your own key, getting rid of the less-than and greater-than signs. Bind a key to the AI Service \u00b6 Now, for easy access, we can bind the AI Service command to a key. To do this: Go into retroarch\u2019s settings menu. Arrow down to Input and press Enter . Arrow down to \u201chotkey binds,\u201d and press Enter . Arrow down to \u201cAI Service,\u201d and press Enter and quickly press the key, just once, that you\u2019d like to bind to it. Press Up Arrow then Down Arrow to read the key that AI Service is bound to, to make sure it\u2019s what you want. Press Backspace a few times to exit those menus. Use controllers \u00b6 Retroarch not only works with keyboards. One can, if their headphones have a long enough chord, or their controller has a headphone jack, play games, and use the AI Service, right from a game controller. Usually, all one has to do is plug in a controller, and retroarch automatically configures and works with it. Sometimes, though, Retroarch\u2019s control mappings are not to the user\u2019s liking, some some reconfiguration is in order. Map controls \u00b6 To map controls, go to the settings menu in Retroarch, arrow down to User one binds, press Enter , and down arrow to a button you want to configure. Press Enter , and then quickly press once the button you want the command, like \u201cD-Pad Up,\u201d to be mapped to. Repeat this with all other buttons, and press Backspace to exit that menu. Bind Hotkeys \u00b6 You can also bind hotkeys. This is useful for binding commands, like AI Service, Rewind, or Fast Forward, to a controller button. To do this, go into the Settings menu, then \u201cInput,\u201d then \u201cHotkey Binds.\u201d Arrow down to the command you\u2019d like to configure a key for, press Enter , press a key on the keyboard or button on the controller, and it\u2019ll be bound. Download Cores \u00b6 In retroarch, cores are video game console emulators, game engines, video and picture viewers, or game music players. To download one, from the main menu, go to \u201cload core,\u201d and press Enter . Then, arrow down to \u201cDownload a core,\u201d and press Enter . In this list, you\u2019ll find a lot of cores which have year numbers or other differentiating words after it. These are alternatives, in case the main core, the one without year numbers or specifying words beside it, do not work. For example, if there is \u201cPPSSPP,\u201d and \u201cPPSSPP 2019,\u201d it is good to go with \u201cPPSSPP\u201d first. Update Cores \u00b6 Cores, like many other programs, receive updates to make games run faster, more smoothly, or add compatibility with new games. Particularly, the \u201cPlay\u201d core, which allows one to play PlayStation Two cores, will have future updates addressing speed and compatibility in many games, as it is a relatively new emulator. To check for updates, do the following: In the Main Menu, arrow down to \u201conline updater\u201d. Arrow down to \u201cUpdate Installed cores,\u201d and press Enter . Load Content \u00b6 Now that we have cores, we can load content into them. Content can be a game, video file, picture, or game music file, depending on what core you use. Retroarch comes with Doom and Tomb Hunter open game engines, which are not yet accessible, but you can find enjoyable games for other systems that you can play using other cores. To load content, choose \u201cLoad Content\u201d from the main menu, use the arrow keys and Enter to navigate directories to the game on your computer, and press Enter on the game file to open it. If you do not see the game file, download a core that can play that kind of game. Once you\u2019ve pressed Enter on the game file, you\u2019ll be presented with a list of cores that could open that type of file. Choose the right one for your game, and press Enter . The game will start, and you can begin having fun. Use The Quick Menu \u00b6 The Quick menu is a menu you can open within the game to customize controls, use Cheat Codes, save or load save states in the game, reset, or close the game. To open the Quick actions menu, press F1 . To close it without making changes, press Escape . Other gaming resources \u00b6 Other gaming resources for people who are blind include: The Audio Games site has a listing of accessible games and an active forum. AppleVis has mobile game listings and a gaming forum. This project is a voluntery listing of accessible retro games playable by the blind. Getting More Help \u00b6 If you run into an error in Retroarch itself, not cores or games, or a problem with the accessibility service, please check the Retroarch Issues page , and if you cannot find it, create a Github account and submit one of your own. If you\u2019d like general help with using retroarch, join its Discord server and ask your questions there.","title":"Guide"},{"location":"guides/retroarch-accessibility-guide/#retroarch-getting-started-guide-for-users-of-the-accessibility-mode","text":"","title":"Retroarch Getting Started guide for users of the accessibility mode"},{"location":"guides/retroarch-accessibility-guide/#introduction","text":"This user guide is to aid users of screen readers who are newcomers to Retroarch begin using the program. Retroarch is an emulation front-end which allows one to play many games from many video game consoles, Arcades, and vintage computers. As of version 1.8.2, the user interface is accessible to blind people. Using the AI service within games, one is able to read textual content: menus, character dialog, statistics screens, ETC. Along with the game\u2019s sound design, this makes many games which were playable even more enjoyable, or games which use only text playable at all. For now, accessibility mode works on Windows, macOS, and Linux operating systems.","title":"Introduction"},{"location":"guides/retroarch-accessibility-guide/#retroarch-terminology","text":"Retroarch: A front-end for many video game emulators. Front-end: A program that brings multiple other programs into one universal interface. Core: a video game console, game engine, or media player within Retroarch. content: a video game, media file, or Homebrew program that can be loaded by a Retroarch core. accessibility: In Retroarch, a setting which speaks the user interface of the program. AI service: A service which takes a screenshot of a game and acts upon it based on the setting chosen in the AI service settings. In this guide, we\u2019ll focus on Narrator mode. Netplay: Playing an originally offline video game across the local network or Internet. bind: To link one thing with another. In Retroarch terms, to link a key or button with an action.","title":"Retroarch Terminology"},{"location":"guides/retroarch-accessibility-guide/#download-retroarch","text":"To download Retroarch, go to Retroarch's download page and choose the download for your system. Windows users should choose the 64-bit installer version, unless they have an old computer with a 32-bit operating system. Mac users should download the Intel version under the \u201cApple macOS / OSX\u201d heading. Linux users should see if version 1.8.2 or higher is in their package manager, and get that and the cores through APT, Pacman, DNF, and so on, or compile it yourself. For iOS, Android, tvOS, and game consoles, accessibility features are not implemented.","title":"Download Retroarch"},{"location":"guides/retroarch-accessibility-guide/#open-the-program","text":"After installing Retroarch, launch the program in the usual way according to your system. Right now, it will not speak, but if it opens, that means it\u2019s at least installed correctly, and you can press escape twice to close it, or using the usual quit command of your operating system.","title":"Open the Program"},{"location":"guides/retroarch-accessibility-guide/#turn-on-accessibility","text":"To turn on the accessibility feature, do the following: Open Retroarch. Press Left Arrow , Down Arrow , then Enter . Press up arrow seven times. Press Enter twice, or Enter then Right arrow . You\u2019ll hear \u201cRetroarch accessibility on.\u201d Now, you can either keep exploring the menu, or quit and reopen Retroarch for a fresh start. Accessibility mode will stay on, and if not, after enabling accessibility, arrow left once, then down arrow until you hear \"settings\", then arrow down to configuration, press Enter , and enable \u201csave on exit\u201d with enter . note : in later versions of Retroarch, the default menu has been set to Ozone. For an easier experience, especially with gamepads, you may switch to the \"XMB\" menu by going to settings, drivers, menu driver, and changing \"ozone\" to \"XMB.\" The rest of this guide assumes that you are using the XMB menu.","title":"Turn on accessibility"},{"location":"guides/retroarch-accessibility-guide/#set-narrator-speed","text":"If you find that Retroarch is speaking too quickly or too slowly, you can change the speed. From the Retroarch accessibility menu, press Down arrow . Press the Left arrow to decrease the speed, and the Right arrow to increase it.","title":"Set Narrator Speed"},{"location":"guides/retroarch-accessibility-guide/#navigate-the-interface","text":"The Retroarch user interface is composed of menus, dialog boxes, text-entry boxes, and so on. This does not include the games played using Retroarch. To navigate the interface, use the arrow keys to traverse menus, Enter to activate items, left and right arrow keys to adjust options, and backspace to go back to the previous menus. You can press the Shift key to get information on the currently focused menu item, and then Enter or Backspace to exit that dialog. There are two main navigation elements to be aware of in Retroarch\u2019s user interface. Menus are vertical, so you use the Up and Down arrows to navigate these. Tabs, sometimes called Vertical menus, are navigated with the Left and Right arrows. Main Menu, Settings, Netplay, Favorites, ETC. are tabs, but Load Core, Load Content, and Quit are menu items. To the left of the Main Menu, you\u2019ll find the \u201cHorizontal Menus,\u201d which are lists of game systems and games which you\u2019ve played on that system. For example, if you play Play Station games, there will be a menu of those. The games in each tab are in a vertical list, but the other game systems, like PlayStation Portable, will be in another tab to the left of that. Tabs like Favorites, Netplay, and Settings are to the right of the Main Menu.","title":"Navigate the Interface"},{"location":"guides/retroarch-accessibility-guide/#ai-service","text":"The AI service is a retroarch feature which takes a screenshot of the game being played, and can either translate the text in the image, speak the text, or speak the text with the same voice as the Narrator used for the Retroarch user interface. You will have to configure the AI service yourself, linking it with a translator, and setting up a key for it. This can be useful for reading menus in games, unspoken character dialog, character dialog in another language, or other textual content, like instructions. Because the AI service uses Artificial Intelligence, the spoken text may not be completely accurate, as is all optical character recognition technology. If there is a table, it will be read one column at a time.","title":"AI Service"},{"location":"guides/retroarch-accessibility-guide/#how-to-enable-the-ai-service","text":"From the Main menu, press Right Arrow to move to the Settings menu. There, press Down Arrow until you reach the AI Service item, and press Enter to open it. Here, you can choose which mode the AI service will be in: Image Mode: The service will capture an image of text, translate it, and send it back to the screen as an image. Speech Mode: The Service will grab an image of text in a game, translate it if needed, and speak it using a third-party text to speech engine. Narrator Mode: The AI service will grab an image of text, translate it if necessary, and send it to Retroarch\u2019s accessibility system to be spoken by your operating system\u2019s speech synthesizer. For now, choose Narrator mode by pressing Right Arrow and down arrow to \u201cAi Service Enabled,\u201d and if needed, turn it on with Enter . Also, while you\u2019re here, you can set the language to translate, and to translate to. For example, if you primarily play Japanese games, but you prefer to hear your games spoken in Esperanto, assuming you have a voice for that language, set the source language to \u201cJapanese,\u201d and the target language to \u201cEsperanto.\u201d You can also leave the source language at \u201cDon\u2019t care,\u201d and the Service will guess the language of the game.","title":"How to Enable the AI Service"},{"location":"guides/retroarch-accessibility-guide/#sign-up-for-ztranslate","text":"To use the AI Service, you need to link it with an online translation service. The easiest method is to use ZTranslate. In your web browser, go to https://ztranslate.net Find the \u201cSign Up\u201d link, and press Enter on it. Fill out the form, and submit it to make an account there. Check your email, and verify the account by clicking the included link. When logged in, go to the \u201cSettings\u201d link, and press Enter . Move to the \u201cQuota\u201d heading, and arrow down to the \u201cAPI key\u201d section. Copy the API key, and paste it into a Notepad, text edit, GEdit, Pluma, or Nano file.","title":"Sign up for ZTranslate"},{"location":"guides/retroarch-accessibility-guide/#configure-the-service","text":"To configure the service, go to the Settings link on ZTranslate\u2019s site, and find the OCR Page. There, you can set confidence levels, which tell the Service what level, from 0 to 1, of confidence to translate the text with. In the Profile page, you can set and change personal information.","title":"Configure the Service"},{"location":"guides/retroarch-accessibility-guide/#link-retroarch-with-your-account","text":"To link Retroarch with your ZTranslate account, find your Retroarch configuration file. Find your Retroarch folder: Open Retroarch Right arrow to Settings Down Arrow to directories Press Enter Find the configuration directory and note the path to it, then exit retroarch. Open the configuration directory, and then open Retroarch.cfg. There, change the line starting with #+begin example ai service url = \" http://ztranslate.net/service?api_key = \" #+end example Here, you can simply copy and paste the URL in quotes to your configuration file, replacing with your own key, getting rid of the less-than and greater-than signs.","title":"link Retroarch with your account"},{"location":"guides/retroarch-accessibility-guide/#bind-a-key-to-the-ai-service","text":"Now, for easy access, we can bind the AI Service command to a key. To do this: Go into retroarch\u2019s settings menu. Arrow down to Input and press Enter . Arrow down to \u201chotkey binds,\u201d and press Enter . Arrow down to \u201cAI Service,\u201d and press Enter and quickly press the key, just once, that you\u2019d like to bind to it. Press Up Arrow then Down Arrow to read the key that AI Service is bound to, to make sure it\u2019s what you want. Press Backspace a few times to exit those menus.","title":"Bind a key to the AI Service"},{"location":"guides/retroarch-accessibility-guide/#use-controllers","text":"Retroarch not only works with keyboards. One can, if their headphones have a long enough chord, or their controller has a headphone jack, play games, and use the AI Service, right from a game controller. Usually, all one has to do is plug in a controller, and retroarch automatically configures and works with it. Sometimes, though, Retroarch\u2019s control mappings are not to the user\u2019s liking, some some reconfiguration is in order.","title":"Use controllers"},{"location":"guides/retroarch-accessibility-guide/#map-controls","text":"To map controls, go to the settings menu in Retroarch, arrow down to User one binds, press Enter , and down arrow to a button you want to configure. Press Enter , and then quickly press once the button you want the command, like \u201cD-Pad Up,\u201d to be mapped to. Repeat this with all other buttons, and press Backspace to exit that menu.","title":"Map controls"},{"location":"guides/retroarch-accessibility-guide/#bind-hotkeys","text":"You can also bind hotkeys. This is useful for binding commands, like AI Service, Rewind, or Fast Forward, to a controller button. To do this, go into the Settings menu, then \u201cInput,\u201d then \u201cHotkey Binds.\u201d Arrow down to the command you\u2019d like to configure a key for, press Enter , press a key on the keyboard or button on the controller, and it\u2019ll be bound.","title":"Bind Hotkeys"},{"location":"guides/retroarch-accessibility-guide/#download-cores","text":"In retroarch, cores are video game console emulators, game engines, video and picture viewers, or game music players. To download one, from the main menu, go to \u201cload core,\u201d and press Enter . Then, arrow down to \u201cDownload a core,\u201d and press Enter . In this list, you\u2019ll find a lot of cores which have year numbers or other differentiating words after it. These are alternatives, in case the main core, the one without year numbers or specifying words beside it, do not work. For example, if there is \u201cPPSSPP,\u201d and \u201cPPSSPP 2019,\u201d it is good to go with \u201cPPSSPP\u201d first.","title":"Download Cores"},{"location":"guides/retroarch-accessibility-guide/#update-cores","text":"Cores, like many other programs, receive updates to make games run faster, more smoothly, or add compatibility with new games. Particularly, the \u201cPlay\u201d core, which allows one to play PlayStation Two cores, will have future updates addressing speed and compatibility in many games, as it is a relatively new emulator. To check for updates, do the following: In the Main Menu, arrow down to \u201conline updater\u201d. Arrow down to \u201cUpdate Installed cores,\u201d and press Enter .","title":"Update Cores"},{"location":"guides/retroarch-accessibility-guide/#load-content","text":"Now that we have cores, we can load content into them. Content can be a game, video file, picture, or game music file, depending on what core you use. Retroarch comes with Doom and Tomb Hunter open game engines, which are not yet accessible, but you can find enjoyable games for other systems that you can play using other cores. To load content, choose \u201cLoad Content\u201d from the main menu, use the arrow keys and Enter to navigate directories to the game on your computer, and press Enter on the game file to open it. If you do not see the game file, download a core that can play that kind of game. Once you\u2019ve pressed Enter on the game file, you\u2019ll be presented with a list of cores that could open that type of file. Choose the right one for your game, and press Enter . The game will start, and you can begin having fun.","title":"Load Content"},{"location":"guides/retroarch-accessibility-guide/#use-the-quick-menu","text":"The Quick menu is a menu you can open within the game to customize controls, use Cheat Codes, save or load save states in the game, reset, or close the game. To open the Quick actions menu, press F1 . To close it without making changes, press Escape .","title":"Use The Quick Menu"},{"location":"guides/retroarch-accessibility-guide/#other-gaming-resources","text":"Other gaming resources for people who are blind include: The Audio Games site has a listing of accessible games and an active forum. AppleVis has mobile game listings and a gaming forum. This project is a voluntery listing of accessible retro games playable by the blind.","title":"Other gaming resources"},{"location":"guides/retroarch-accessibility-guide/#getting-more-help","text":"If you run into an error in Retroarch itself, not cores or games, or a problem with the accessibility service, please check the Retroarch Issues page , and if you cannot find it, create a Github account and submit one of your own. If you\u2019d like general help with using retroarch, join its Discord server and ask your questions there.","title":"Getting More Help"},{"location":"guides/rgui/","text":"RGUI RetroArch Menu Interface \u00b6 RGUI is a simple built-in GUI for RetroArch. It was originally introduced in the Wii port of RetroArch in order to provide the console experience, where everything is controlled from a joypad. RGUI was later refitted for PC and mobile ports. Features \u00b6 While RGUI cannot configure absolutely everything, it can do the most common things you would want to do while using RetroArch. Selecting libretro core Load a game Tweak per-libretro core options (e.g. colorization in GameBoy) Load game from history (previous games played) Save/load savestates Configure shaders Configure aspect ratios Configure integer scale Toggle fullscreen Swap disk images (needed for PlayStation, see notes below!) Take screenshots Enable/disable real-time rewind Simple input configuration Mute/unmute audio Exit RetroArch Config file \u00b6 By default, RetroArch looks for a config in various places depending on OS: Linux/OSX : $XDG_CONFIG_HOME/retroarch/retroarch.cfg , then ~/.config/retroarch/retroarch.cfg , then ~/.retroarch.cfg , and finally, as a fallback, /etc/retroarch.cfg . Windows : retroarch.cfg in same folder as retroarch.exe , then %APPDATA%\\retroarch.cfg . To override this, use retroarch --config customconfig.cfg . If you have some special options you want to store in separate config files you can use retroarch --config baseconfig.cfg --appendconfig specialconfig.cfg . See man-page and/or --help for detail. Warning \u00b6 While you are changing settings in runtime, they are not saved to disk afterwards on PC by default. If you want RetroArch to automatically write back the config, either set config_save_on_exit = true in config, or enable this under Settings -> Config Save On Exit from within RGUI. By design, the config file is considered immutable as it is likely maintained by the user, and should not be overwritten behind the users back. This is not the case on consoles however, where looking at the config manually isn't really an option for most users. Entering the menu \u00b6 By default on PC, the F1 button will enter the menu. To exit the menu, use F1 or Resume Game . To start immediately in RGUI without any game or core loaded, use the --menu command line option. As a special case, if no arguments are received, it is treated the same as running retroarch --menu . Menu toggle button can be mapped to joypad as well, see option input_menu_toggle option in retroarch.cfg . Navigating the menu \u00b6 RGUI is controlled like any other libretro core. Regular input binds will apply, and binds here are defined in terms of the RetroPad, RetroArch's joypad abstraction. A button (Default PC: X): Accept/OK B button (Default PC: Z): Back/Cancel Start (Default PC: Return): Go to main settings menu Select (Default PC: Right shift): Set a setting to default Up/Down D-pad (Default PC: Up/Down keys): Browse settings/files Left/Right D-pad (Default PC: Left/Right keys): Toggle settings, or browse several items at once in file browser. Searching through lists with keyboard \u00b6 When using a keyboard, it can be slow to navigate a large list using gamepad-like controls. To help this, you can type / (forward slash) at any time to bring up a search-box. Type a search string and hit return. The cursor should jump to the first entry that matches. The search will match mid-path strings. However, if a match is found at the beginning of the path, like when searching for first letter, the start-of-path match will take priority. The forward slash is recognized on character basis, not on the key itself. This allows e.g. norwegian layouts to type forward slash using shift + 7. Characters which are outside the ASCII set are recognized but ignored as RGUI cannot render such characters anyways. Thumbnails \u00b6 RGUI thumbnail support requires the use of playlist files and thumbnail image packs, as described in ROMs, Playlists, and Thumbnails . To view existing playlists choose Load Content from the top menu, then Collections . Select a playlist, and while browsing its contents use the RetroPad Y button to toggle the display of the thumbnail associated with the currently highlighted entry: Thumbnails off: Thumbnails on: Note that it is possible to navigate up and down through a playlist while thumbnails are being shown. To choose which type of thumbnail will be displayed, from the top menu select Settings > User Interface > Appearance and set the Thumbnails option to one of: Screenshots Title Screens Boxarts Any thumbnail image larger than 320x240 will be downscaled automatically to fit the screen. Three downscaling methods are provided, allowing a choice between performance and quality. To switch between them, from the top menu select Settings > User Interface > Appearance and set the Thumbnail Downscaling Method option to one of: Nearest Neighbour (Fast) : Simple (pixelated) nearest neighbour scaling. Has a very low impact on performance, and should be usable on any hardware. Bilinear : Smooth (although potentially blurry) resampling. Slower than nearest neighbour, but should be usable on most hardware. Sinc/Lanczos3 (Slow) : High quality resampling (although sometimes generates artefacts when source image contains dithering). May cause lag on very low end devices, but has no discernable performance impact on desktop-class hardware. Starting a game \u00b6 To load a game you need a libretro core to use, and a ROM. Selecting Core from top menu, you can browse for a libretro implementation. Where the browser starts depends on your libretro_path config. If blank, it will start in root (tedious to browse). If libretro_path is a directory, RGUI will use that as top folder. If libretro_path is a full path, it will start in the folder where the file is. After loading a libretro core, you will see the name and version of the core in lower part of screen. You can then browse for a ROM with Load Game . To control where RGUI starts to browse for roms, set rgui_browser_directory in config. If not set, it'll start in root. The browser will filter out extensions for the last core set in Core , and use that core when a ROM is loaded. If libretro_path in config is set with a full path to a core, this core is automatically selected once RGUI boots up (but you can still change the core afterwards). Applying shaders \u00b6 See the shaders user guide . Configuring input \u00b6 Currently you can configure two settings per player (on PC): Device : Picks which gamepad to use for player N. The name of the pad is available. Device Type : Picks which device type to use. This is relevant for the libretro core itself, and mostly useful for PlayStation, which needs to know if you're using a DualAnalog device or not. Configuring joypad input \u00b6 Configuring joypad input is supported from within RGUI. Normal gameplay binds as well as RGUI hotkey binding is supported. It is possible to bind everything in succession for convenience. Configuring keyboard input \u00b6 Configuring keyboard input is currently not supported. To configure keyboard binds, it must be done outside RGUI. PlayStation disk swapping \u00b6 Some PlayStation games require disk swapping. To manage disks, libretro has a concept of a disk index (like a multi-disk CD player, remember those? :P). If a PlayStation core is loaded, Disk Index and Disk Image Append options are added to main menu. In Beetle PSX, multi-CD images are typically handled with an .m3u playlist. In this case, you can swap disks by cycling through the Disk Index setting. If you don't or can't use a playlist, you can append a disk image on the fly using Disk Image Append . In this case, you browse for a disk image and append it to the internal disk image list. The Disk Index is updated appropriately and you are returned to the game. Workarounds \u00b6 Replacing the disk inside RGUI is \"physically\" speaking the same as ejecting, swapping disks and closing the tray instantanously. Some games will not work with this approach, notably Metal Gear Solid because they need to detect an actual eject taking place. To work around this, set Disk Index to No Disk , and exit RGUI. The game will pick up that the tray has been ejected/missing disk after half a second or so. Now you can go back to RGUI, pick the correct disk index and return to the game. Themes \u00b6 The visual appearance of RGUI may altered by choosing one of 32 inbuilt color themes. From the top menu select Settings > User Interface > Appearance and cycle through the various Menu Color Theme options: Setting Menu Color Theme to Custom allows for an even greater degree of personalisation via the use of custom menu theme presets. A number of examples are provided in the RetroArch assets package, which may be downloaded by selecting from the top menu Online Updater > Update Assets . To choose one of these examples, go to Settings > User Interface > Appearance and select the Custom Menu Theme Preset option. In the file browser that opens, navigate to the rgui directory and select a .cfg file. Creating Custom Menu Theme Presets \u00b6 A custom menu theme preset is a plain text configuration file (e.g. my_theme.cfg ) with the following contents: 1 2 3 4 5 6 7 8 rgui_entry_normal_color = \"0xAARRGGBB\" rgui_entry_hover_color = \"0xAARRGGBB\" rgui_title_color = \"0xAARRGGBB\" rgui_bg_dark_color = \"0xAARRGGBB\" rgui_bg_light_color = \"0xAARRGGBB\" rgui_border_dark_color = \"0xAARRGGBB\" rgui_border_light_color = \"0xAARRGGBB\" rgui_wallpaper = \"wallpaper_file.png\" rgui_entry_normal_color : Specifies the color of all 'normal' text displayed in any list. rgui_entry_hover_color : Specifies the color of the currently selected entry, along with the core name and clock displayed at the bottom of the screen. rgui_bg_dark/light_color : Specifies the menu background color. Setting rgui_bg_dark_color and rgui_bg_light_color to different values creates a chequerboard effect. Also used for the background of message boxes, and the title text when displaying thumbnails. rgui_border_dark/light_color : Specifies the color of the border 'frame' drawn around the perimeter of the menu. Setting rgui_border_dark_color and rgui_border_light_color to different values creates a chequerboard effect. Also used for the frame of message boxes. rgui_wallpaper : The relative file path to an optional wallpaper image. If this entry is omitted or left empty, no wallpaper is used. Color Selection \u00b6 All color values are given in 0xAARRGGBB 8-digit hex code format - i.e. the first two digits correspond to the alpha (transparency) value, while the remaining 6 are a normal hex triplet . For example: fully opaque red would correspond to 0xFFFF0000 ; 50% transparent green would correspond (approximately) to 0x7F00FF00 . For maximum legibility, the alpha value for all text colors should be set to FF (fully opaque). For the background and border, setting partial transparency allows the currently loaded content to be seen 'through' the menu when opening it while running a game. Note, however, that setting partial transparency causes colors to appear darker than expected, so careful tuning of the hex triplet values is required. Appropriate transparency values are as follows: When creating a dark theme without wallpaper , the border/bg alpha component should be set to C0 . When creating a light theme without wallpaper , the border/bg alpha component should be set to E0 . When creating a theme with wallpaper , the border/bg alpha component should be set to FF . (This is because it is very difficult to create a semi-transparent wallpaper image with proper colors, and so it is most practical to make everything fully opaque when using wallpapers) Creating Wallpaper Images \u00b6 RGUI wallpapers must have the following properties: A resolution of exactly 320x240. A color depth of 4 bits per pixel. (This is not strictly required, but using an image with greater color depth will not produce expected results) Wallpapers should be generated in PNG format. To produce a suitable image, the user should first create a regular 320x240 PNG file via any means at their disposal. Inkscape users may find the following simple template beneficial: rgui_wallpaper_template.svg Once the image is complete, it is necessary to reduce its color depth. This may be done via one of two methods: 1) pngquant (recommended): pngquant is a command-line utility for lossy compression of PNG files. It supports very high quality conversion of images to indexed color, in a manner appropriate for most kinds of wallpaper. Download/compile/install the latest version, then use the following command to process a wallpaper source file: 1 > pngquant --posterize=4 --force -o \"WALLPAPER_NAME_indexed.png\" \"WALLPAPER_SOURCE.png\" Open the output WALLPAPER_NAME_indexed.png file and check that colors/gradients appear correct. In most cases, the result will be agreeable. If odd 'speckles' are apparent, it may be necessary to adjust the colors in the source image (this is a black art, and beyond the scope of this document). If the image has unacceptable, uncorrectable dithering then the WALLPAPER_NAME_indexed.png file should be discarded, and the following alternate method used instead: 2) GIMP: GIMP is a well known image editor. In general it produces lower quality color reduction than pngquant , but it can handle certain gradients and patterns that cause pngquant to stumble. Download/install the latest version, then: Open the wallpaper source file From the menu, select Image > Mode > Indexed... In the Indexed Color Conversion pop-up, select: Generate optimum palette Maximum number of colors: 16 Color dithering: EITHER Floyd-Steinberg (normal) OR Floyd-Steinberg (reduced color bleeding (use whichever looks best, but the other options here will not work) Press Convert Inspect the result. Some manual touch-up may be required. (If the image is disagreeable at this stage, then the wallpaper probably isn't going to work - so start over...) If all is well, select from the menu File > Export As... and name the file WALLPAPER_NAME_indexed.png In the Export Image as PNG pop-up, untick Save color values from transparent pixels and click Export Whether pngquant or GIMP is used to create WALLPAPER_NAME_indexed.png , a final stage of optimisation should be applied to generate a 'clean' output wallpaper. This can be done using OptiPNG . Download/compile/install the latest version, then run the following command: 1 > optipng -o7 -strip=all -force -clobber -out `WALLPAPER_NAME.png` `WALLPAPER_NAME_indexed.png` Edit the custom menu theme preset configuration file such that rgui_wallpaper points to the resultant WALLPAPER_NAME.png image. Once appropriate text/background/border colors have been set, the theme is complete.","title":"RGUI Interface"},{"location":"guides/rgui/#rgui-retroarch-menu-interface","text":"RGUI is a simple built-in GUI for RetroArch. It was originally introduced in the Wii port of RetroArch in order to provide the console experience, where everything is controlled from a joypad. RGUI was later refitted for PC and mobile ports.","title":"RGUI RetroArch Menu Interface"},{"location":"guides/rgui/#features","text":"While RGUI cannot configure absolutely everything, it can do the most common things you would want to do while using RetroArch. Selecting libretro core Load a game Tweak per-libretro core options (e.g. colorization in GameBoy) Load game from history (previous games played) Save/load savestates Configure shaders Configure aspect ratios Configure integer scale Toggle fullscreen Swap disk images (needed for PlayStation, see notes below!) Take screenshots Enable/disable real-time rewind Simple input configuration Mute/unmute audio Exit RetroArch","title":"Features"},{"location":"guides/rgui/#config-file","text":"By default, RetroArch looks for a config in various places depending on OS: Linux/OSX : $XDG_CONFIG_HOME/retroarch/retroarch.cfg , then ~/.config/retroarch/retroarch.cfg , then ~/.retroarch.cfg , and finally, as a fallback, /etc/retroarch.cfg . Windows : retroarch.cfg in same folder as retroarch.exe , then %APPDATA%\\retroarch.cfg . To override this, use retroarch --config customconfig.cfg . If you have some special options you want to store in separate config files you can use retroarch --config baseconfig.cfg --appendconfig specialconfig.cfg . See man-page and/or --help for detail.","title":"Config file"},{"location":"guides/rgui/#warning","text":"While you are changing settings in runtime, they are not saved to disk afterwards on PC by default. If you want RetroArch to automatically write back the config, either set config_save_on_exit = true in config, or enable this under Settings -> Config Save On Exit from within RGUI. By design, the config file is considered immutable as it is likely maintained by the user, and should not be overwritten behind the users back. This is not the case on consoles however, where looking at the config manually isn't really an option for most users.","title":"Warning"},{"location":"guides/rgui/#entering-the-menu","text":"By default on PC, the F1 button will enter the menu. To exit the menu, use F1 or Resume Game . To start immediately in RGUI without any game or core loaded, use the --menu command line option. As a special case, if no arguments are received, it is treated the same as running retroarch --menu . Menu toggle button can be mapped to joypad as well, see option input_menu_toggle option in retroarch.cfg .","title":"Entering the menu"},{"location":"guides/rgui/#navigating-the-menu","text":"RGUI is controlled like any other libretro core. Regular input binds will apply, and binds here are defined in terms of the RetroPad, RetroArch's joypad abstraction. A button (Default PC: X): Accept/OK B button (Default PC: Z): Back/Cancel Start (Default PC: Return): Go to main settings menu Select (Default PC: Right shift): Set a setting to default Up/Down D-pad (Default PC: Up/Down keys): Browse settings/files Left/Right D-pad (Default PC: Left/Right keys): Toggle settings, or browse several items at once in file browser.","title":"Navigating the menu"},{"location":"guides/rgui/#searching-through-lists-with-keyboard","text":"When using a keyboard, it can be slow to navigate a large list using gamepad-like controls. To help this, you can type / (forward slash) at any time to bring up a search-box. Type a search string and hit return. The cursor should jump to the first entry that matches. The search will match mid-path strings. However, if a match is found at the beginning of the path, like when searching for first letter, the start-of-path match will take priority. The forward slash is recognized on character basis, not on the key itself. This allows e.g. norwegian layouts to type forward slash using shift + 7. Characters which are outside the ASCII set are recognized but ignored as RGUI cannot render such characters anyways.","title":"Searching through lists with keyboard"},{"location":"guides/rgui/#thumbnails","text":"RGUI thumbnail support requires the use of playlist files and thumbnail image packs, as described in ROMs, Playlists, and Thumbnails . To view existing playlists choose Load Content from the top menu, then Collections . Select a playlist, and while browsing its contents use the RetroPad Y button to toggle the display of the thumbnail associated with the currently highlighted entry: Thumbnails off: Thumbnails on: Note that it is possible to navigate up and down through a playlist while thumbnails are being shown. To choose which type of thumbnail will be displayed, from the top menu select Settings > User Interface > Appearance and set the Thumbnails option to one of: Screenshots Title Screens Boxarts Any thumbnail image larger than 320x240 will be downscaled automatically to fit the screen. Three downscaling methods are provided, allowing a choice between performance and quality. To switch between them, from the top menu select Settings > User Interface > Appearance and set the Thumbnail Downscaling Method option to one of: Nearest Neighbour (Fast) : Simple (pixelated) nearest neighbour scaling. Has a very low impact on performance, and should be usable on any hardware. Bilinear : Smooth (although potentially blurry) resampling. Slower than nearest neighbour, but should be usable on most hardware. Sinc/Lanczos3 (Slow) : High quality resampling (although sometimes generates artefacts when source image contains dithering). May cause lag on very low end devices, but has no discernable performance impact on desktop-class hardware.","title":"Thumbnails"},{"location":"guides/rgui/#starting-a-game","text":"To load a game you need a libretro core to use, and a ROM. Selecting Core from top menu, you can browse for a libretro implementation. Where the browser starts depends on your libretro_path config. If blank, it will start in root (tedious to browse). If libretro_path is a directory, RGUI will use that as top folder. If libretro_path is a full path, it will start in the folder where the file is. After loading a libretro core, you will see the name and version of the core in lower part of screen. You can then browse for a ROM with Load Game . To control where RGUI starts to browse for roms, set rgui_browser_directory in config. If not set, it'll start in root. The browser will filter out extensions for the last core set in Core , and use that core when a ROM is loaded. If libretro_path in config is set with a full path to a core, this core is automatically selected once RGUI boots up (but you can still change the core afterwards).","title":"Starting a game"},{"location":"guides/rgui/#applying-shaders","text":"See the shaders user guide .","title":"Applying shaders"},{"location":"guides/rgui/#configuring-input","text":"Currently you can configure two settings per player (on PC): Device : Picks which gamepad to use for player N. The name of the pad is available. Device Type : Picks which device type to use. This is relevant for the libretro core itself, and mostly useful for PlayStation, which needs to know if you're using a DualAnalog device or not.","title":"Configuring input"},{"location":"guides/rgui/#configuring-joypad-input","text":"Configuring joypad input is supported from within RGUI. Normal gameplay binds as well as RGUI hotkey binding is supported. It is possible to bind everything in succession for convenience.","title":"Configuring joypad input"},{"location":"guides/rgui/#configuring-keyboard-input","text":"Configuring keyboard input is currently not supported. To configure keyboard binds, it must be done outside RGUI.","title":"Configuring keyboard input"},{"location":"guides/rgui/#playstation-disk-swapping","text":"Some PlayStation games require disk swapping. To manage disks, libretro has a concept of a disk index (like a multi-disk CD player, remember those? :P). If a PlayStation core is loaded, Disk Index and Disk Image Append options are added to main menu. In Beetle PSX, multi-CD images are typically handled with an .m3u playlist. In this case, you can swap disks by cycling through the Disk Index setting. If you don't or can't use a playlist, you can append a disk image on the fly using Disk Image Append . In this case, you browse for a disk image and append it to the internal disk image list. The Disk Index is updated appropriately and you are returned to the game.","title":"PlayStation disk swapping"},{"location":"guides/rgui/#workarounds","text":"Replacing the disk inside RGUI is \"physically\" speaking the same as ejecting, swapping disks and closing the tray instantanously. Some games will not work with this approach, notably Metal Gear Solid because they need to detect an actual eject taking place. To work around this, set Disk Index to No Disk , and exit RGUI. The game will pick up that the tray has been ejected/missing disk after half a second or so. Now you can go back to RGUI, pick the correct disk index and return to the game.","title":"Workarounds"},{"location":"guides/rgui/#themes","text":"The visual appearance of RGUI may altered by choosing one of 32 inbuilt color themes. From the top menu select Settings > User Interface > Appearance and cycle through the various Menu Color Theme options: Setting Menu Color Theme to Custom allows for an even greater degree of personalisation via the use of custom menu theme presets. A number of examples are provided in the RetroArch assets package, which may be downloaded by selecting from the top menu Online Updater > Update Assets . To choose one of these examples, go to Settings > User Interface > Appearance and select the Custom Menu Theme Preset option. In the file browser that opens, navigate to the rgui directory and select a .cfg file.","title":"Themes"},{"location":"guides/rgui/#creating-custom-menu-theme-presets","text":"A custom menu theme preset is a plain text configuration file (e.g. my_theme.cfg ) with the following contents: 1 2 3 4 5 6 7 8 rgui_entry_normal_color = \"0xAARRGGBB\" rgui_entry_hover_color = \"0xAARRGGBB\" rgui_title_color = \"0xAARRGGBB\" rgui_bg_dark_color = \"0xAARRGGBB\" rgui_bg_light_color = \"0xAARRGGBB\" rgui_border_dark_color = \"0xAARRGGBB\" rgui_border_light_color = \"0xAARRGGBB\" rgui_wallpaper = \"wallpaper_file.png\" rgui_entry_normal_color : Specifies the color of all 'normal' text displayed in any list. rgui_entry_hover_color : Specifies the color of the currently selected entry, along with the core name and clock displayed at the bottom of the screen. rgui_bg_dark/light_color : Specifies the menu background color. Setting rgui_bg_dark_color and rgui_bg_light_color to different values creates a chequerboard effect. Also used for the background of message boxes, and the title text when displaying thumbnails. rgui_border_dark/light_color : Specifies the color of the border 'frame' drawn around the perimeter of the menu. Setting rgui_border_dark_color and rgui_border_light_color to different values creates a chequerboard effect. Also used for the frame of message boxes. rgui_wallpaper : The relative file path to an optional wallpaper image. If this entry is omitted or left empty, no wallpaper is used.","title":"Creating Custom Menu Theme Presets"},{"location":"guides/rgui/#color-selection","text":"All color values are given in 0xAARRGGBB 8-digit hex code format - i.e. the first two digits correspond to the alpha (transparency) value, while the remaining 6 are a normal hex triplet . For example: fully opaque red would correspond to 0xFFFF0000 ; 50% transparent green would correspond (approximately) to 0x7F00FF00 . For maximum legibility, the alpha value for all text colors should be set to FF (fully opaque). For the background and border, setting partial transparency allows the currently loaded content to be seen 'through' the menu when opening it while running a game. Note, however, that setting partial transparency causes colors to appear darker than expected, so careful tuning of the hex triplet values is required. Appropriate transparency values are as follows: When creating a dark theme without wallpaper , the border/bg alpha component should be set to C0 . When creating a light theme without wallpaper , the border/bg alpha component should be set to E0 . When creating a theme with wallpaper , the border/bg alpha component should be set to FF . (This is because it is very difficult to create a semi-transparent wallpaper image with proper colors, and so it is most practical to make everything fully opaque when using wallpapers)","title":"Color Selection"},{"location":"guides/rgui/#creating-wallpaper-images","text":"RGUI wallpapers must have the following properties: A resolution of exactly 320x240. A color depth of 4 bits per pixel. (This is not strictly required, but using an image with greater color depth will not produce expected results) Wallpapers should be generated in PNG format. To produce a suitable image, the user should first create a regular 320x240 PNG file via any means at their disposal. Inkscape users may find the following simple template beneficial: rgui_wallpaper_template.svg Once the image is complete, it is necessary to reduce its color depth. This may be done via one of two methods: 1) pngquant (recommended): pngquant is a command-line utility for lossy compression of PNG files. It supports very high quality conversion of images to indexed color, in a manner appropriate for most kinds of wallpaper. Download/compile/install the latest version, then use the following command to process a wallpaper source file: 1 > pngquant --posterize=4 --force -o \"WALLPAPER_NAME_indexed.png\" \"WALLPAPER_SOURCE.png\" Open the output WALLPAPER_NAME_indexed.png file and check that colors/gradients appear correct. In most cases, the result will be agreeable. If odd 'speckles' are apparent, it may be necessary to adjust the colors in the source image (this is a black art, and beyond the scope of this document). If the image has unacceptable, uncorrectable dithering then the WALLPAPER_NAME_indexed.png file should be discarded, and the following alternate method used instead: 2) GIMP: GIMP is a well known image editor. In general it produces lower quality color reduction than pngquant , but it can handle certain gradients and patterns that cause pngquant to stumble. Download/install the latest version, then: Open the wallpaper source file From the menu, select Image > Mode > Indexed... In the Indexed Color Conversion pop-up, select: Generate optimum palette Maximum number of colors: 16 Color dithering: EITHER Floyd-Steinberg (normal) OR Floyd-Steinberg (reduced color bleeding (use whichever looks best, but the other options here will not work) Press Convert Inspect the result. Some manual touch-up may be required. (If the image is disagreeable at this stage, then the wallpaper probably isn't going to work - so start over...) If all is well, select from the menu File > Export As... and name the file WALLPAPER_NAME_indexed.png In the Export Image as PNG pop-up, untick Save color values from transparent pixels and click Export Whether pngquant or GIMP is used to create WALLPAPER_NAME_indexed.png , a final stage of optimisation should be applied to generate a 'clean' output wallpaper. This can be done using OptiPNG . Download/compile/install the latest version, then run the following command: 1 > optipng -o7 -strip=all -force -clobber -out `WALLPAPER_NAME.png` `WALLPAPER_NAME_indexed.png` Edit the custom menu theme preset configuration file such that rgui_wallpaper points to the resultant WALLPAPER_NAME.png image. Once appropriate text/background/border colors have been set, the theme is complete.","title":"Creating Wallpaper Images"},{"location":"guides/roms-playlists-thumbnails/","text":"ROMs, Playlists, and Thumbnails \u00b6 Storing games and other content \u00b6 Game ROMs should be placed within the roms folder as configured in RetroArch. Many users sort their ROMs into subfolders named after the system which the ROMs belong to, which results in a folder arrangement such as: 1 2 3 4 5 6 7 8 9 10 11 12 roms/ Atari - 2600/ Atari Game 1.zip Atari Game 2.zip Atari Game 3.zip Nintendo - Nintendo Entertainment System/ NES Game 1.zip Sega - 32X/ 32X Game 1.zip 32X Game 2.zip etc. etc. This arrangement is not required and you are free to organize your ROMs as you prefer. Working with Playlists \u00b6 Playlists (or Collections as they are sometimes referred to) are the lists of games and other content that can be generated automatically by the RetroArch playlist scanner, generated by a third-party playlist utility or script, or edited by hand in a text editor. RetroArch Playlist Scanner \u00b6 RetroArch incoporates a ROM scanning system to automatically produce playlists. Each ROM that is scanned by the playlist generator is checked against a database of ROMs that are known to be good copies. In order for content to be correctly scanned, you must: Have a compatible core already downloaded and installed Update Core Info Files via Online Updater Update Databases via Online Updater Restart RetroArch if any of the above was just done Finally, the content must match existing databases from the libretro-database README . If those conditions are met but content is still not being added automatically to a playlist, consider submitting an issue report on github . Designating which core to use \u00b6 RetroArch will attempt to detect and use the correct core for use with the ROMs that are used as part of a playlist. Under some circumstances, it may be useful to manually set a particular core for one of its playlists. This can be accomplished within the Playlists submenu in the RetroArch settings. Playlist File Overview \u00b6 Each playlist is a plain text file with an extension of .lpl . RetroArch 1.7.5 and later uses a JSON playlist format, although the backwards compatibilty remains for the deprecated \"6-Line\" playlist format. Note: The paths in playlist files need to use the correct 'slash' character for the user's platform. Linux, OS X, and Android systems including Lakka and LudOS require forward slashes / , while Windows and DOS systems require backslashes \\ . Hint for Windows Users The built-in Notepad editor cannot work with cross-platform text files such as RetroArch playlist files. Many users and developers recommend the free Notepad++ as a replacement although most alternative text editors will also work. JSON Playlist Format \u00b6 The following example is a single-entry MAME 2003-Plus playlist for Alien Arena -- the silent version of this game is available through the RetroArch Content Downloader found in the Online Updater menu. The playlist is named MAME 2003-Plus.lpl which means it will match the existing icon for that core's playlists in the RetroArch assets pack and display it for the playlist for menu drivers that implement playlist icons. The Alien Arena romset is located at C:\\retroarch\\downloads\\alienar.zip ; note that the backslashes are doubled in JSON-formatted playlist entries so that the value of the path entry is C:\\\\retroarch\\\\downloads\\\\alienar.zip . MAME 2003-Plus.lpl \u00b6 { \"version\" : \"1.0\" , \"items\" : [ { \"path\" : \"C:\\\\retroarch\\\\downloads\\\\alienar.zip\" , \"label\" : \"Alien Arena\" , \"core_path\" : \"DETECT\" , \"core_name\" : \"DETECT\" , \"crc32\" : \"01ACE2AB|crc\" , \"db_name\" : \"MAME 2003-Plus.lpl\" } ] } Alert You can omit the CRC or Serial for a manualy created playlist entry by using the word DETECT instead, although it may limit your ability to use netplay for this playlist entry. 6-Line Playlist Format (Deprecated) \u00b6 Warning This playlist format is deprecated and may not always be supported by RetroArch in the future. New playlists should be created in the JSON format. Each entry in a playlist must be composed of 6 lines: MAME 2003-Plus.lpl \u00b6 C:\\retroarch\\downloads\\alienar.zip\" Alien Arena /tmp/cores/mame2003_plus_libretro.so DETECT 01ACE2AB|crc MAME 2003-Plus.lpl The path to the ROM. This can either be an 'absolute' path or a path relative to the current working directory. The display name (you can use any name here) The path to the core, this libretro core will be used to launch the ROM. You can use the word DETECT in place of the core path here. Once this is done you can set the core to be used for this playlist via the RetroArch GUI. The displayname of the core, not really useful, we keep it there because the history list is also using this format CRC or Serial number for database and other matching purposes. You can omit the CRC or Serial for a manualy created playlist entry by using the word DETECT here instead, although it may limit your ability to use Netplay for this playlist entry. The name of this playlist, ending in the extension .lpl Thumbnails \u00b6 RetroArch can display three types of thumbnails for games in playlists, depending on the specific RetroArch menu driver in use: In-game snapshots Title screen snapshots Boxart RetroArch thumbnail packs \u00b6 RetroArch provides packs of thumbnails suitable for use with many emulated systems. These thumbnail packs are recommended for most users and can be installed connecting to the internet and using the built-in thumbnails updater, available from the online update menu within the RetroArch settings interface. These packs can be downloaded manually from http://thumbnailpacks.libretro.com and individual thumbnails from within the packs can be downloaded from http://thumbnails.libretro.com . Custom thumbnails \u00b6 Users who wish to use their own thumbnails can do so by naming PNG image files according to the RetroArch naming convention. Thumbnail paths and filenames \u00b6 Thumbnails should be stored in subfolders within the configured RetroArch thumbnails directory within a subfolder named exactly the same as the playlist, except without .lpl at the end. Example: If your playlist is named Atari - 2600.lpl , then your Atari 2600 root thumbnail folder should be called thumbnails/Atari - 2600/ . Within this root thumbnail folder called Atari - 2600 , you should then create subfolders named Named_Boxarts , Named_Snaps , or Named_Titles for boxart/cover art, in-game snapshots, and title screens, respectively. The thumbnail filename should exactly match the game's title as listed in the playlist with an important exception. The following characters in playlist titles must be replaced with _ in the corresponding thumbnail filename: &*/:`<>?\\| Example: If your content is named Q*bert's Qubes in the playlist, then its thumbnails should be named Q_bert's Qubes.png and stored at these paths: thumbnails/ Atari - 2600/ Named_Boxarts/ Q_bert's Qubes.png Named_Snaps/ Q_bert's Qubes.png Named_Titles/ Q_bert's Qubes.png Changing the displayed thumbnail type \u00b6 Regardless of whether you download the RetroArch thumbnail packs or use your own custom thumbnails, you can use the RetroArch GUI to set which type of thumbnail to display. In order to change this setting, go to Menu Settings, and change the Thumbnails option to reflect the type of thumbnail you wish to display.","title":"Playlists and Thumbnails"},{"location":"guides/roms-playlists-thumbnails/#roms-playlists-and-thumbnails","text":"","title":"ROMs, Playlists, and Thumbnails"},{"location":"guides/roms-playlists-thumbnails/#storing-games-and-other-content","text":"Game ROMs should be placed within the roms folder as configured in RetroArch. Many users sort their ROMs into subfolders named after the system which the ROMs belong to, which results in a folder arrangement such as: 1 2 3 4 5 6 7 8 9 10 11 12 roms/ Atari - 2600/ Atari Game 1.zip Atari Game 2.zip Atari Game 3.zip Nintendo - Nintendo Entertainment System/ NES Game 1.zip Sega - 32X/ 32X Game 1.zip 32X Game 2.zip etc. etc. This arrangement is not required and you are free to organize your ROMs as you prefer.","title":"Storing games and other content"},{"location":"guides/roms-playlists-thumbnails/#working-with-playlists","text":"Playlists (or Collections as they are sometimes referred to) are the lists of games and other content that can be generated automatically by the RetroArch playlist scanner, generated by a third-party playlist utility or script, or edited by hand in a text editor.","title":"Working with Playlists"},{"location":"guides/roms-playlists-thumbnails/#retroarch-playlist-scanner","text":"RetroArch incoporates a ROM scanning system to automatically produce playlists. Each ROM that is scanned by the playlist generator is checked against a database of ROMs that are known to be good copies. In order for content to be correctly scanned, you must: Have a compatible core already downloaded and installed Update Core Info Files via Online Updater Update Databases via Online Updater Restart RetroArch if any of the above was just done Finally, the content must match existing databases from the libretro-database README . If those conditions are met but content is still not being added automatically to a playlist, consider submitting an issue report on github .","title":"RetroArch Playlist Scanner"},{"location":"guides/roms-playlists-thumbnails/#designating-which-core-to-use","text":"RetroArch will attempt to detect and use the correct core for use with the ROMs that are used as part of a playlist. Under some circumstances, it may be useful to manually set a particular core for one of its playlists. This can be accomplished within the Playlists submenu in the RetroArch settings.","title":"Designating which core to use"},{"location":"guides/roms-playlists-thumbnails/#playlist-file-overview","text":"Each playlist is a plain text file with an extension of .lpl . RetroArch 1.7.5 and later uses a JSON playlist format, although the backwards compatibilty remains for the deprecated \"6-Line\" playlist format. Note: The paths in playlist files need to use the correct 'slash' character for the user's platform. Linux, OS X, and Android systems including Lakka and LudOS require forward slashes / , while Windows and DOS systems require backslashes \\ . Hint for Windows Users The built-in Notepad editor cannot work with cross-platform text files such as RetroArch playlist files. Many users and developers recommend the free Notepad++ as a replacement although most alternative text editors will also work.","title":"Playlist File Overview"},{"location":"guides/roms-playlists-thumbnails/#json-playlist-format","text":"The following example is a single-entry MAME 2003-Plus playlist for Alien Arena -- the silent version of this game is available through the RetroArch Content Downloader found in the Online Updater menu. The playlist is named MAME 2003-Plus.lpl which means it will match the existing icon for that core's playlists in the RetroArch assets pack and display it for the playlist for menu drivers that implement playlist icons. The Alien Arena romset is located at C:\\retroarch\\downloads\\alienar.zip ; note that the backslashes are doubled in JSON-formatted playlist entries so that the value of the path entry is C:\\\\retroarch\\\\downloads\\\\alienar.zip .","title":"JSON Playlist Format"},{"location":"guides/roms-playlists-thumbnails/#mame-2003-pluslpl","text":"{ \"version\" : \"1.0\" , \"items\" : [ { \"path\" : \"C:\\\\retroarch\\\\downloads\\\\alienar.zip\" , \"label\" : \"Alien Arena\" , \"core_path\" : \"DETECT\" , \"core_name\" : \"DETECT\" , \"crc32\" : \"01ACE2AB|crc\" , \"db_name\" : \"MAME 2003-Plus.lpl\" } ] } Alert You can omit the CRC or Serial for a manualy created playlist entry by using the word DETECT instead, although it may limit your ability to use netplay for this playlist entry.","title":"MAME 2003-Plus.lpl"},{"location":"guides/roms-playlists-thumbnails/#6-line-playlist-format-deprecated","text":"Warning This playlist format is deprecated and may not always be supported by RetroArch in the future. New playlists should be created in the JSON format. Each entry in a playlist must be composed of 6 lines:","title":"6-Line Playlist Format (Deprecated)"},{"location":"guides/roms-playlists-thumbnails/#mame-2003-pluslpl_1","text":"C:\\retroarch\\downloads\\alienar.zip\" Alien Arena /tmp/cores/mame2003_plus_libretro.so DETECT 01ACE2AB|crc MAME 2003-Plus.lpl The path to the ROM. This can either be an 'absolute' path or a path relative to the current working directory. The display name (you can use any name here) The path to the core, this libretro core will be used to launch the ROM. You can use the word DETECT in place of the core path here. Once this is done you can set the core to be used for this playlist via the RetroArch GUI. The displayname of the core, not really useful, we keep it there because the history list is also using this format CRC or Serial number for database and other matching purposes. You can omit the CRC or Serial for a manualy created playlist entry by using the word DETECT here instead, although it may limit your ability to use Netplay for this playlist entry. The name of this playlist, ending in the extension .lpl","title":"MAME 2003-Plus.lpl"},{"location":"guides/roms-playlists-thumbnails/#thumbnails","text":"RetroArch can display three types of thumbnails for games in playlists, depending on the specific RetroArch menu driver in use: In-game snapshots Title screen snapshots Boxart","title":"Thumbnails"},{"location":"guides/roms-playlists-thumbnails/#retroarch-thumbnail-packs","text":"RetroArch provides packs of thumbnails suitable for use with many emulated systems. These thumbnail packs are recommended for most users and can be installed connecting to the internet and using the built-in thumbnails updater, available from the online update menu within the RetroArch settings interface. These packs can be downloaded manually from http://thumbnailpacks.libretro.com and individual thumbnails from within the packs can be downloaded from http://thumbnails.libretro.com .","title":"RetroArch thumbnail packs"},{"location":"guides/roms-playlists-thumbnails/#custom-thumbnails","text":"Users who wish to use their own thumbnails can do so by naming PNG image files according to the RetroArch naming convention.","title":"Custom thumbnails"},{"location":"guides/roms-playlists-thumbnails/#thumbnail-paths-and-filenames","text":"Thumbnails should be stored in subfolders within the configured RetroArch thumbnails directory within a subfolder named exactly the same as the playlist, except without .lpl at the end. Example: If your playlist is named Atari - 2600.lpl , then your Atari 2600 root thumbnail folder should be called thumbnails/Atari - 2600/ . Within this root thumbnail folder called Atari - 2600 , you should then create subfolders named Named_Boxarts , Named_Snaps , or Named_Titles for boxart/cover art, in-game snapshots, and title screens, respectively. The thumbnail filename should exactly match the game's title as listed in the playlist with an important exception. The following characters in playlist titles must be replaced with _ in the corresponding thumbnail filename: &*/:`<>?\\| Example: If your content is named Q*bert's Qubes in the playlist, then its thumbnails should be named Q_bert's Qubes.png and stored at these paths: thumbnails/ Atari - 2600/ Named_Boxarts/ Q_bert's Qubes.png Named_Snaps/ Q_bert's Qubes.png Named_Titles/ Q_bert's Qubes.png","title":"Thumbnail paths and filenames"},{"location":"guides/roms-playlists-thumbnails/#changing-the-displayed-thumbnail-type","text":"Regardless of whether you download the RetroArch thumbnail packs or use your own custom thumbnails, you can use the RetroArch GUI to set which type of thumbnail to display. In order to change this setting, go to Menu Settings, and change the Thumbnails option to reflect the type of thumbnail you wish to display.","title":"Changing the displayed thumbnail type"},{"location":"guides/runahead/","text":"RetroArch Run Ahead \u00b6 Every game has a certain built-in amount of lag, some react on the next displayed frame, some can take 2, 3 or even more frames before an action on the gamepad finally get rendered on screen. The Run Ahead feature calculates the frames as fast as possible in the background to \"rollback\" the action as close as possible to the input command requested. That feature deals with \"internal\" game logic lag. This means you can still take advantage of other RetroArch lag reduction methods that happens later, such as Hard GPU Sync or Frame Delay. It's located in Quickmenu > Latency (also in Settings > Latency). How many frames to Run Ahead? \u00b6 We need to find the shortest internal input lag a game can have, it's usually just moving the character: Pause emulation (press \"P\" hotkey on keyboard). Press and hold a direction on the controller. Advance emulation frame by frame (press \"K\" hotkey on keyboard) until the character moves. At best an action will be visible on the next frame, so the frames of lag are the amount of time you pushed \"K\" minus 1 . If you did select an higher number than needed, you will see a stutter/rollback when pushing buttons and possibly various weirdnesses. If you selected a lower number, repeating the test above will take more than 1 push on the \"K\" hotkey to see your character move. Can I always use Run Ahead? \u00b6 Run Ahead relies on save states so they need to be clean and fast enough. If a core doesn't support them, this can not work. Using Second Instance mode works around some save states limitation, use it if possible. Calculating several frames in advance means that your machine must be fast enough to run the core at that level of speed. The higher the number of frames you are going to run ahead of emulation, the higher demands it places on your CPU. More detailed explanation \u00b6 Here is a more detailed explanation on runahead by its author Dwedit. How the Run-Ahead feature currently works: There are two modes of operation. Single-Instance Mode Two-Instance Mode In Single-Instance mode, when it wants to run a frame, instead it does this: Disable audio and video, run a frame, Save State Run additional frames with audio and video disabled if we want to run ahead more than one frame Enable audio and video and run the frame we want to see Load State All save states and load states are done to ram and never reach the disk. In Two-Instance mode, it does this: Primary core does Audio only, then saves state Secondary core loads state, runs frames ahead discarding audio and video, then runs a frame with video only. For performance reasons, it only resyncs the secondary core when input is dirty, otherwise it keeps running additional frames on the secondary core while the input is clean. Why bother with Two-Instance mode at all? Many of the cores do not leave audio emulation in a clean state after loading state, so you would get buzzing. Using Two-Instance mode makes the primary core not do any load states and avoids that. In Single-Instance mode, it is possible to improve performance further by running ahead without loading state while input is clean, but I am not currently doing that. I'd imagine there'd be issues if calling the \"run a frame\" function left you in a state further along than a single frame. I'm also not doing any speculative inputs at all.","title":"Run Ahead"},{"location":"guides/runahead/#retroarch-run-ahead","text":"Every game has a certain built-in amount of lag, some react on the next displayed frame, some can take 2, 3 or even more frames before an action on the gamepad finally get rendered on screen. The Run Ahead feature calculates the frames as fast as possible in the background to \"rollback\" the action as close as possible to the input command requested. That feature deals with \"internal\" game logic lag. This means you can still take advantage of other RetroArch lag reduction methods that happens later, such as Hard GPU Sync or Frame Delay. It's located in Quickmenu > Latency (also in Settings > Latency).","title":"RetroArch Run Ahead"},{"location":"guides/runahead/#how-many-frames-to-run-ahead","text":"We need to find the shortest internal input lag a game can have, it's usually just moving the character: Pause emulation (press \"P\" hotkey on keyboard). Press and hold a direction on the controller. Advance emulation frame by frame (press \"K\" hotkey on keyboard) until the character moves. At best an action will be visible on the next frame, so the frames of lag are the amount of time you pushed \"K\" minus 1 . If you did select an higher number than needed, you will see a stutter/rollback when pushing buttons and possibly various weirdnesses. If you selected a lower number, repeating the test above will take more than 1 push on the \"K\" hotkey to see your character move.","title":"How many frames to Run Ahead?"},{"location":"guides/runahead/#can-i-always-use-run-ahead","text":"Run Ahead relies on save states so they need to be clean and fast enough. If a core doesn't support them, this can not work. Using Second Instance mode works around some save states limitation, use it if possible. Calculating several frames in advance means that your machine must be fast enough to run the core at that level of speed. The higher the number of frames you are going to run ahead of emulation, the higher demands it places on your CPU.","title":"Can I always use Run Ahead?"},{"location":"guides/runahead/#more-detailed-explanation","text":"Here is a more detailed explanation on runahead by its author Dwedit. How the Run-Ahead feature currently works: There are two modes of operation. Single-Instance Mode Two-Instance Mode In Single-Instance mode, when it wants to run a frame, instead it does this: Disable audio and video, run a frame, Save State Run additional frames with audio and video disabled if we want to run ahead more than one frame Enable audio and video and run the frame we want to see Load State All save states and load states are done to ram and never reach the disk. In Two-Instance mode, it does this: Primary core does Audio only, then saves state Secondary core loads state, runs frames ahead discarding audio and video, then runs a frame with video only. For performance reasons, it only resyncs the secondary core when input is dirty, otherwise it keeps running additional frames on the secondary core while the input is clean. Why bother with Two-Instance mode at all? Many of the cores do not leave audio emulation in a clean state after loading state, so you would get buzzing. Using Two-Instance mode makes the primary core not do any load states and avoids that. In Single-Instance mode, it is possible to improve performance further by running ahead without loading state while input is clean, but I am not currently doing that. I'd imagine there'd be issues if calling the \"run a frame\" function left you in a state further along than a single frame. I'm also not doing any speculative inputs at all.","title":"More detailed explanation"},{"location":"guides/shaders/","text":"Shader Presets \u00b6 Shader Presets are combinations of one or more shaders. They can be loaded via Quick Menu -> Shaders -> Load Shader Preset and if you want to keep the shader in-between play sessions, you can save them as an \"automatic\" preset via Quick Menu -> Shaders -> Save -> Save Global/Core/Directory/Game Preset . Global presets are automatically applied in any content for any core, while the Core presets are applied in any content for that specific core. Directory presets apply to all content in a certain folder and Game presets apply just to one game. Note that directory and game presets are also core specific. If more than one automatic presets exist that could be applied, the most specific one wins out, so for example, if both a global and a game preset exists, the game preset will be used. You can also save custom non-automatic shader presets via Quick Menu -> Shaders -> Save -> Save Shader Preset As , so if you create your \"perfect\" combination of shaders you can recall this at any time with Load Shader Preset then continue on to save it as an automatic preset. This will save time if using the same preset for multiple games or cores. By default automatic presets will save to under /presets/\"name-of-core\"/\"name-of-core/directory/game\".glslp|slangp|cgp or presets/global.glslp|slangp|cgp in the shader directory while custom presets are saved in the base shader directory. The shader directoy can be changed via Settings -> Directory -> Video Shader . There are plenty of user created default presets that come bundled with the RetroArch installation and these can be updated from Main Menu -> Online Updater -> Update Glsl|Slang|Cg Shaders (you can find these presets in the shaders_glsl|slang|cg subfolders of your shader directory) Example Screenshots Editing Shader Presets \u00b6 You can edit shader presets or build your own using these tools: - Shader Passes : The number of shader passes to use. For every shader pass you can configure: - Shader #N : Path to a shader. All shaders must be of the same type (i.e. .glsl, .slang, or .cg). - Shader #N Filter : Hardware filter used for scaling. \"Don't Care\" uses Settings -> Video -> Bilinear Scale . - Shader #N Scale : Scale for this pass. The scale factor accumulates, i.e. 2x for first pass and 2x for second pass will give you a 4x total scale. The last pass in the chain then is streched to fullscreen using the Settings -> Video -> Bilinear Scale filter setting. Note: If the preset uses scaling methods which are not simple, (i.e. source scaling, same scaling factor for X/Y), the scaling factors displayed might not be correct. Apply Changes : After changing shader settings, use this to apply changes. Changing shader settings is a somewhat expensive operation so it has to be done explicitly. Shader Parameters : Shows the list of all tweakable shader parameters, which are previewed \"live\", i.e. without the need of hitting Apply Changes \"Reference\" Presets \u00b6 Presets can use a #reference \"<preset path>\" directive, which will act as if the preset with the given path was loaded instead. From the shader menu you can create such reference presets by first loading any shader preset and then immediately saving it as an automatic shader preset. If any changes were made to the menu preset, it'll be saved as a copy like usual. If you make changes and still want a automatic preset to point to it, you can first save it as a custom preset and then immediately save an automatic preset. This allows you to change your custom preset without having to resave the automatic one every time. Note that custom saved presets are always saved as copies and automatic presets cannot point to automatic presets. This is so we never get references to references (which are not supported). Command Line \u00b6 The --set-shader command line option allows to set shaders directly, bypassing even automatic shader presets. Example use: 1 retroarch --set-shader \"D:\\RetroArch\\shaders\\shaders_glsl\\blurs\\kawase_blur_5pass.glslp\" -L <core> <content> The shader path can be relative to the shader directory: 1 retroarch --set-shader \"shaders_glsl\\blurs\\kawase_blur_5pass.glslp\" -L <core> <content> An empty parameter effectively disables any automatic presets: 1 retroarch --set-shader \"\" -L <core> <content> Converting Cg shaders to GLSL \u00b6 In some cases, Cg shaders cannot be supported. This goes for OpenGL ES drivers, and when EGL OpenGL contexts are used (KMS mode for instance). Using Nvidia's cgc compiler, you can convert Cg shaders to GLSL shaders with the cg2glsl tool developed by us here . It can convert single shaders as well as whole folder structures in batch. 100% compatibility is not guaranteed, but almost all shaders should work fine. Cg presets (.cgp) are not converted at the moment, but converting them is as simple as copying over the .cgp, rename it to .glslp and replace references to .cg files to .glsl.","title":"Shaders"},{"location":"guides/shaders/#shader-presets","text":"Shader Presets are combinations of one or more shaders. They can be loaded via Quick Menu -> Shaders -> Load Shader Preset and if you want to keep the shader in-between play sessions, you can save them as an \"automatic\" preset via Quick Menu -> Shaders -> Save -> Save Global/Core/Directory/Game Preset . Global presets are automatically applied in any content for any core, while the Core presets are applied in any content for that specific core. Directory presets apply to all content in a certain folder and Game presets apply just to one game. Note that directory and game presets are also core specific. If more than one automatic presets exist that could be applied, the most specific one wins out, so for example, if both a global and a game preset exists, the game preset will be used. You can also save custom non-automatic shader presets via Quick Menu -> Shaders -> Save -> Save Shader Preset As , so if you create your \"perfect\" combination of shaders you can recall this at any time with Load Shader Preset then continue on to save it as an automatic preset. This will save time if using the same preset for multiple games or cores. By default automatic presets will save to under /presets/\"name-of-core\"/\"name-of-core/directory/game\".glslp|slangp|cgp or presets/global.glslp|slangp|cgp in the shader directory while custom presets are saved in the base shader directory. The shader directoy can be changed via Settings -> Directory -> Video Shader . There are plenty of user created default presets that come bundled with the RetroArch installation and these can be updated from Main Menu -> Online Updater -> Update Glsl|Slang|Cg Shaders (you can find these presets in the shaders_glsl|slang|cg subfolders of your shader directory) Example Screenshots","title":"Shader Presets"},{"location":"guides/shaders/#editing-shader-presets","text":"You can edit shader presets or build your own using these tools: - Shader Passes : The number of shader passes to use. For every shader pass you can configure: - Shader #N : Path to a shader. All shaders must be of the same type (i.e. .glsl, .slang, or .cg). - Shader #N Filter : Hardware filter used for scaling. \"Don't Care\" uses Settings -> Video -> Bilinear Scale . - Shader #N Scale : Scale for this pass. The scale factor accumulates, i.e. 2x for first pass and 2x for second pass will give you a 4x total scale. The last pass in the chain then is streched to fullscreen using the Settings -> Video -> Bilinear Scale filter setting. Note: If the preset uses scaling methods which are not simple, (i.e. source scaling, same scaling factor for X/Y), the scaling factors displayed might not be correct. Apply Changes : After changing shader settings, use this to apply changes. Changing shader settings is a somewhat expensive operation so it has to be done explicitly. Shader Parameters : Shows the list of all tweakable shader parameters, which are previewed \"live\", i.e. without the need of hitting Apply Changes","title":"Editing Shader Presets"},{"location":"guides/shaders/#reference-presets","text":"Presets can use a #reference \"<preset path>\" directive, which will act as if the preset with the given path was loaded instead. From the shader menu you can create such reference presets by first loading any shader preset and then immediately saving it as an automatic shader preset. If any changes were made to the menu preset, it'll be saved as a copy like usual. If you make changes and still want a automatic preset to point to it, you can first save it as a custom preset and then immediately save an automatic preset. This allows you to change your custom preset without having to resave the automatic one every time. Note that custom saved presets are always saved as copies and automatic presets cannot point to automatic presets. This is so we never get references to references (which are not supported).","title":"\"Reference\" Presets"},{"location":"guides/shaders/#command-line","text":"The --set-shader command line option allows to set shaders directly, bypassing even automatic shader presets. Example use: 1 retroarch --set-shader \"D:\\RetroArch\\shaders\\shaders_glsl\\blurs\\kawase_blur_5pass.glslp\" -L <core> <content> The shader path can be relative to the shader directory: 1 retroarch --set-shader \"shaders_glsl\\blurs\\kawase_blur_5pass.glslp\" -L <core> <content> An empty parameter effectively disables any automatic presets: 1 retroarch --set-shader \"\" -L <core> <content>","title":"Command Line"},{"location":"guides/shaders/#converting-cg-shaders-to-glsl","text":"In some cases, Cg shaders cannot be supported. This goes for OpenGL ES drivers, and when EGL OpenGL contexts are used (KMS mode for instance). Using Nvidia's cgc compiler, you can convert Cg shaders to GLSL shaders with the cg2glsl tool developed by us here . It can convert single shaders as well as whole folder structures in batch. 100% compatibility is not guaranteed, but almost all shaders should work fine. Cg presets (.cgp) are not converted at the moment, but converting them is as simple as copying over the .cgp, rename it to .glslp and replace references to .cg files to .glsl.","title":"Converting Cg shaders to GLSL"},{"location":"guides/softpatching/","text":"Softpatching ROMs with RetroArch \u00b6 RetroArch currently supports UPS, IPS and BPS patching formats. If you load rom.bin and one of the following is present, the ROM will be autopatched: rom.ups , rom.ips or rom.bps . Autopatching only takes place if the libretro implementation supports loading ROMs from memory. Cores Compatibility \u00b6 Bandai - WonderSwan/Color \u00b6 Core Supported Beetle Cygne \u2714 Nintendo - Game Boy / Color \u00b6 Core Supported Gambatte \u2714 Gearboy \u2714 Mesen-S \u2714 mGBA \u2714 SameBoy \u2715 TGB Dual \u2714 VBA-M \u2714 Nintendo - Game Boy Advance \u00b6 Core Supported Meteor \u2714 mGBA \u2714 VBA-M \u2714 VBA Next \u2714 Nintendo - NES / Famicom \u00b6 Core Supported bnes \u2714 FCEUmm \u2714 Mesen \u2714 Nestopia UE \u2714 QuickNES \u2714 Nintendo - SNES / Famicom \u00b6 Core Supported Beetle bsnes \u2714 bsnes-mercury Accuracy \u2714 bsnes-mercury Balanced \u2714 bsnes-mercury Performance \u2714 bsnes Accuracy \u2714 bsnes Balanced \u2714 bsnes C++98 (v085) \u2714 bsnes Performance \u2714 higan Accuracy \u2714 nSide Balanced \u2714 Mesen-S \u2714 Snes9x \u2714 Snes9x 2002 \u2714 Snes9x 2005 \u2714 Snes9x 2005 Plus \u2714 Snes9x 2010 \u2714 Sega - Master System \u00b6 Core Supported SMS Plus GX \u2714 Gearsystem \u2714 Genesis Plus GX \u2715 PicoDrive \u2715 Sega - MegaDrive / Genesis \u00b6 Core Supported BlastEm \u2714 Genesis Plus GX \u2715 PicoDrive \u2715 SNK - Neo Geo Pocket / Neo Geo Pocket Color \u00b6 Core Supported Beetle NeoPop \u2714 RACE \u2715","title":"Softpatching ROMs"},{"location":"guides/softpatching/#softpatching-roms-with-retroarch","text":"RetroArch currently supports UPS, IPS and BPS patching formats. If you load rom.bin and one of the following is present, the ROM will be autopatched: rom.ups , rom.ips or rom.bps . Autopatching only takes place if the libretro implementation supports loading ROMs from memory.","title":"Softpatching ROMs with RetroArch"},{"location":"guides/softpatching/#cores-compatibility","text":"","title":"Cores Compatibility"},{"location":"guides/softpatching/#bandai-wonderswancolor","text":"Core Supported Beetle Cygne \u2714","title":"Bandai - WonderSwan/Color"},{"location":"guides/softpatching/#nintendo-game-boy-color","text":"Core Supported Gambatte \u2714 Gearboy \u2714 Mesen-S \u2714 mGBA \u2714 SameBoy \u2715 TGB Dual \u2714 VBA-M \u2714","title":"Nintendo - Game Boy / Color"},{"location":"guides/softpatching/#nintendo-game-boy-advance","text":"Core Supported Meteor \u2714 mGBA \u2714 VBA-M \u2714 VBA Next \u2714","title":"Nintendo - Game Boy Advance"},{"location":"guides/softpatching/#nintendo-nes-famicom","text":"Core Supported bnes \u2714 FCEUmm \u2714 Mesen \u2714 Nestopia UE \u2714 QuickNES \u2714","title":"Nintendo - NES / Famicom"},{"location":"guides/softpatching/#nintendo-snes-famicom","text":"Core Supported Beetle bsnes \u2714 bsnes-mercury Accuracy \u2714 bsnes-mercury Balanced \u2714 bsnes-mercury Performance \u2714 bsnes Accuracy \u2714 bsnes Balanced \u2714 bsnes C++98 (v085) \u2714 bsnes Performance \u2714 higan Accuracy \u2714 nSide Balanced \u2714 Mesen-S \u2714 Snes9x \u2714 Snes9x 2002 \u2714 Snes9x 2005 \u2714 Snes9x 2005 Plus \u2714 Snes9x 2010 \u2714","title":"Nintendo - SNES / Famicom"},{"location":"guides/softpatching/#sega-master-system","text":"Core Supported SMS Plus GX \u2714 Gearsystem \u2714 Genesis Plus GX \u2715 PicoDrive \u2715","title":"Sega - Master System"},{"location":"guides/softpatching/#sega-megadrive-genesis","text":"Core Supported BlastEm \u2714 Genesis Plus GX \u2715 PicoDrive \u2715","title":"Sega - MegaDrive / Genesis"},{"location":"guides/softpatching/#snk-neo-geo-pocket-neo-geo-pocket-color","text":"Core Supported Beetle NeoPop \u2714 RACE \u2715","title":"SNK - Neo Geo Pocket / Neo Geo Pocket Color"},{"location":"guides/softwarelist-getting-started/","text":"Getting started with software emulation in Libretro MAME cores \u00b6 Multi software emulation requires a different planning approach than arcade emulation. Terminology can also differ from the terms used in other kinds of emulation. The terms software and software list are used to define non-arcade machines emulated by MAME. Process \u00b6 Understand the core variants Use the correct version romsets for that emulator The libretro core ecosystem currently includes many multi software emulators, that support software emulation. Arcade (MAME), Arcade (MAME 2016) will be the main focus of this guide but the MULTI (MESS 2015) and MULTI (UME 2015) cores have this ability. Each requiring its own distinct version of \"romsets\" which the emulator supports. Tip Matching emulator and game versions is advised for maximum compatibility but you may find mis-matched combinations also work. Step 1: Understand the core variants \u00b6 There are three families of multi-system software emulators available as libretro cores: MAME, MESS and UME. These emulators are in turn available in multiple versions to allow users to best match a core to their preference. MAME \u00b6 Arcade (MAME) & Arcade (MAME 2016) are currently the only MAME cores that support the emulation of software & arcade system. The Arcade (MAME) core is updated regulary and most inline with the official MAME project release. Arcade (MAME 2016) is an archived snapshot of MAME from the 0.174 release. MESS \u00b6 Multi (MESS 2015) is a snapshot of the MESS project from v0.160. The MESS project later merged with the MAME project in MAME v0.162 UME \u00b6 Multi (UME 2015) is a snapshot of the Universal Machine Emulator. This was a precursor to the MAME/MESS merger, released by David Haywood (haze). The MAME and MESS project codebases co-existed in the MESS SVN development tree before they official merged. This allowed haze to build and release the eumlator with unmodified code from both projects under the name UME Step 2: Use the correct version romsets for that emulator \u00b6 For best results, start with a full software list ROM collection with a version that matches the emulator you're using. In general, you will only get good results with a full collection of software list romsets for your chosen emulator.Individual romset zip files may not include BIOS ROMs, \"Parent\" romsets, necessary audio sample files, etc. Emulator Required ROM Version MAME 2016 MAME 0.174 MAME (latest version) MAME (latest version) MESS 2015 - UME 2015 - Running software list machines \u00b6 There are two common methods of configuring Retroarch to launch software list machines and games with MAME cores. MAME Frontend direct Libretro CMD file Method 1 uses the inbuilt MAME logic and hash files to launch your games. Method 2 uses an extra Libretro feature to pass command line functions to the core. This replicates sending command line functions directly to MAME like you would on a PC. MAME Frontend direct \u00b6 NOTES:- Method 1:- Authentic MAME Using the internal Software List functions of MAME. For this you will need some supporting files from the mainline MAME emulator. Download the windows MAME emulator here(link). Making sure to get the correct version you require. Extract the contents and remove the \u201chash\u201d folder and it\u2019s contents. If your device has limited storage just take the files relating to the system you want to emulate. Folder structure:- Folder structure/naming is very important for this use of the MAME Cores. The naming will depend on the machine you are trying to emulate but the folder structure will be the same. The example below is for the Atari 5200. \u201cYourPath\u201d is the location of your Retroarch and games folders. Create the following folders in your Retroarch installation or your specified \u201csystem\u201d folder YourPath/Retroarch/System/mame Copy the hash folder acquired earlier to the above location. YourPath/Retroarch/system/mame/hash So for Atari 5200 you would have YourPath/Retroarch/system/mame/hash/a5200.xml (Check about .hsi file or use another example) Create the following folders in your games directory (these will be mame naming dependent) YourPath/Games/Atari 5200/a5200 (The last folder MUST be named as MAME requires, in this case \u201ca5200\u201d) Place any .zip games and .zip bios files required here YourPath/Games/Atari 5200/a5200/a5200.zip YourPath/Games/Atari 5200/a5200/boogie.zip (You May also extract the bios file to their own folder within the games directory) YourPath/Games/Atari 5200/a5200/a5200/5200.rom) Now Load Content and browse to the game files and launch with a compatible core. \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 Need to do a fresh install and confirm minimum files needed Add note about SoftList xml specifying the game names and crc and only supporting only those specific file names. \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 Method2: Frontend Friendly CMD or command line file launching. This method follows the same folder structure as above but you can use custom naming outside of the hash file included with MAME. It utilises some custom additions to the Libretro MAME Cores. Specifically the use of text files (.cmd) to replicate sending command line actions as you can with mainline MAME. To do Deciding on contents of the cmd file Cmd file example Test on clean install","title":"Getting Started with MAME Software List Emulation"},{"location":"guides/softwarelist-getting-started/#getting-started-with-software-emulation-in-libretro-mame-cores","text":"Multi software emulation requires a different planning approach than arcade emulation. Terminology can also differ from the terms used in other kinds of emulation. The terms software and software list are used to define non-arcade machines emulated by MAME.","title":"Getting started with software emulation in Libretro MAME cores"},{"location":"guides/softwarelist-getting-started/#process","text":"Understand the core variants Use the correct version romsets for that emulator The libretro core ecosystem currently includes many multi software emulators, that support software emulation. Arcade (MAME), Arcade (MAME 2016) will be the main focus of this guide but the MULTI (MESS 2015) and MULTI (UME 2015) cores have this ability. Each requiring its own distinct version of \"romsets\" which the emulator supports. Tip Matching emulator and game versions is advised for maximum compatibility but you may find mis-matched combinations also work.","title":"Process"},{"location":"guides/softwarelist-getting-started/#step-1-understand-the-core-variants","text":"There are three families of multi-system software emulators available as libretro cores: MAME, MESS and UME. These emulators are in turn available in multiple versions to allow users to best match a core to their preference.","title":"Step 1: Understand the core variants"},{"location":"guides/softwarelist-getting-started/#mame","text":"Arcade (MAME) & Arcade (MAME 2016) are currently the only MAME cores that support the emulation of software & arcade system. The Arcade (MAME) core is updated regulary and most inline with the official MAME project release. Arcade (MAME 2016) is an archived snapshot of MAME from the 0.174 release.","title":"MAME"},{"location":"guides/softwarelist-getting-started/#mess","text":"Multi (MESS 2015) is a snapshot of the MESS project from v0.160. The MESS project later merged with the MAME project in MAME v0.162","title":"MESS"},{"location":"guides/softwarelist-getting-started/#ume","text":"Multi (UME 2015) is a snapshot of the Universal Machine Emulator. This was a precursor to the MAME/MESS merger, released by David Haywood (haze). The MAME and MESS project codebases co-existed in the MESS SVN development tree before they official merged. This allowed haze to build and release the eumlator with unmodified code from both projects under the name UME","title":"UME"},{"location":"guides/softwarelist-getting-started/#step-2-use-the-correct-version-romsets-for-that-emulator","text":"For best results, start with a full software list ROM collection with a version that matches the emulator you're using. In general, you will only get good results with a full collection of software list romsets for your chosen emulator.Individual romset zip files may not include BIOS ROMs, \"Parent\" romsets, necessary audio sample files, etc. Emulator Required ROM Version MAME 2016 MAME 0.174 MAME (latest version) MAME (latest version) MESS 2015 - UME 2015 -","title":"Step 2: Use the correct version romsets for that emulator"},{"location":"guides/softwarelist-getting-started/#running-software-list-machines","text":"There are two common methods of configuring Retroarch to launch software list machines and games with MAME cores. MAME Frontend direct Libretro CMD file Method 1 uses the inbuilt MAME logic and hash files to launch your games. Method 2 uses an extra Libretro feature to pass command line functions to the core. This replicates sending command line functions directly to MAME like you would on a PC.","title":"Running software list machines"},{"location":"guides/softwarelist-getting-started/#mame-frontend-direct","text":"NOTES:- Method 1:- Authentic MAME Using the internal Software List functions of MAME. For this you will need some supporting files from the mainline MAME emulator. Download the windows MAME emulator here(link). Making sure to get the correct version you require. Extract the contents and remove the \u201chash\u201d folder and it\u2019s contents. If your device has limited storage just take the files relating to the system you want to emulate. Folder structure:- Folder structure/naming is very important for this use of the MAME Cores. The naming will depend on the machine you are trying to emulate but the folder structure will be the same. The example below is for the Atari 5200. \u201cYourPath\u201d is the location of your Retroarch and games folders. Create the following folders in your Retroarch installation or your specified \u201csystem\u201d folder YourPath/Retroarch/System/mame Copy the hash folder acquired earlier to the above location. YourPath/Retroarch/system/mame/hash So for Atari 5200 you would have YourPath/Retroarch/system/mame/hash/a5200.xml (Check about .hsi file or use another example) Create the following folders in your games directory (these will be mame naming dependent) YourPath/Games/Atari 5200/a5200 (The last folder MUST be named as MAME requires, in this case \u201ca5200\u201d) Place any .zip games and .zip bios files required here YourPath/Games/Atari 5200/a5200/a5200.zip YourPath/Games/Atari 5200/a5200/boogie.zip (You May also extract the bios file to their own folder within the games directory) YourPath/Games/Atari 5200/a5200/a5200/5200.rom) Now Load Content and browse to the game files and launch with a compatible core. \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 Need to do a fresh install and confirm minimum files needed Add note about SoftList xml specifying the game names and crc and only supporting only those specific file names. \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 Method2: Frontend Friendly CMD or command line file launching. This method follows the same folder structure as above but you can use custom naming outside of the hash file included with MAME. It utilises some custom additions to the Libretro MAME Cores. Specifically the use of text files (.cmd) to replicate sending command line actions as you can with mainline MAME. To do Deciding on contents of the cmd file Cmd file example Test on clean install","title":"MAME Frontend direct"},{"location":"guides/themes/","text":"Making Custom Themes \u00b6 This page will guide you through the essential information needed to customize the core RetroArch theme. Credit for information goes to @baxysquare from this forum post Tip For examples of Menu Icon Themes and how to change them please read this guide Skills & Tools Needed to Make and Contribute a Theme \u00b6 A GitHub account and a basic understanding on how to fork a project and contribute via Pull Requests. The GitHub project that hosts the theme is the retroarch-assets repository. Computer application(s) to create source icons. You can use any photo editing application such as Photoshop or GIMP, but a Vector-based application such as Illustrator or Inkscape is preferred. The preferred source format is SVG. Conversion applications can come in handy. You can use ImageMagick to batch convert your source files to PNG format. Running your PNG files through ImageOptim can help reduce the icon file size without reducing the quality. Attention to detail, patience and time. Be prepared to create and revise as you learn and grow. Feel free to take an existing theme, make modifications and then test your new design. Required Theme Components \u00b6 A truetype font renamed to \"font.ttf.\" You need to choose a typeface that has an open license. There is a wide selection to choose from at Google Fonts . If you have the tools and skills to make your own font and wish to contribute it via open license, feel free to do so. A text file in GitHub Markdown format titled README.md. This file provides basic info on the theme itself along with specifications and guidelines to help others contribute to the theme. Make sure to include an attribution and license info for the included truetype font. A PNG folder that contains a complete set of icons and a default background image. Optional Theme Components \u00b6 A SRC file containing SVG or other source files. If you choose not to include your source files, please host them elsewhere and indicate in the README. Icons \u00b6 The majority of time and effort involved in creating a theme is creating and revising the icons. The default Monochrome set includes just over 200 icons as listed below. That number will continue to grow as more cores and features are added. Tips & Tricks for Creating Icons \u00b6 The icons should be set to a 256x256 pixel canvas and should be centered on a 64x64 grid. You need to snap your point and line elements to the grid wherever possible. Libretro icons are scaled down, so when design elements do not line up with the grid, they tend to render oddly. Give your icons room to breathe. While you are capable of using the full canvas, a 248x248 or 240x240 maximum icon size is highly recommended. Alternatively, you can keep your icons inside a 256x256 circular \"blueprint\". This will keep the top and the bottom of your icons from touching when you're scrolling through a list of icons. Create and stick to a color palette of 64 colors or less. While you can use an unlimited palette, your icons will look more uniform and consistent as a theme. Keep the details of your icons in harmony with one another. If one icon has too many design details, try to simplify it to match with the other icons. If an icon is lacking in detail, do what you can to add balance in comparison to the other designs. Here's a complete list of icons (and wallpaper) in the default set. Category, Type, Menu Level and Size info has been included to help you understand an icon's purpose and use in the user interface. Name Category Type Level Size FB Alpha - Arcade Games-content.png Arcade Content 1 256 MAME-content.png Arcade Content 1 256 MAME2003-content.png Arcade Content 1 256 MAME2010-content.png Arcade Content 1 256 Neo Geo-content.png Arcade Content 1 256 FB Alpha - Arcade Games.png Arcade System 0 256 MAME.png Arcade System 0 256 MAME2003.png Arcade System 0 256 MAME2010.png Arcade System 0 256 Neo Geo.png Arcade System 0 256 Lutro.png Computer Application 0 256 DOS.png Computer Application 0 256 Atari - ST-content.png Computer Content 1 256 Commodore Amiga-content.png Computer Content 1 256 DOS-content.png Computer Content 1 256 Microsoft - MSX-content.png Computer Content 1 256 Microsoft - MSX2-content.png Computer Content 1 256 ScummVM-content.png Computer Content 1 256 Sinclair - ZX 81-content.png Computer Content 1 256 Sinclair - ZX Spectrum +3-content.png Computer Content 1 256 Sinclair - ZX Spectrum-content.png Computer Content 1 256 Lutro-content.png Computer Content 1 256 Atari - ST.png Computer System 0 256 Commodore Amiga.png Computer System 0 256 Microsoft - MSX.png Computer System 0 256 Microsoft - MSX2.png Computer System 0 256 ScummVM.png Computer System 0 256 Sinclair - ZX 81.png Computer System 0 256 Sinclair - ZX Spectrum +3.png Computer System 0 256 Sinclair - ZX Spectrum.png Computer System 0 256 Atari - 2600-content.png Console Content 1 256 Atari - 5200-content.png Console Content 1 256 Atari - 7800-content.png Console Content 1 256 Atari - Jaguar-content.png Console Content 1 256 Bandai - WonderSwan Color-content.png Console Content 1 256 Bandai - WonderSwan-content.png Console Content 1 256 Coleco - ColecoVision-content.png Console Content 1 256 GCE - Vectrex-content.png Console Content 1 256 Magnavox - Odyssey2-content.png Console Content 1 256 NEC - PC Engine - TurboGrafx 16-content.png Console Content 1 256 NEC - PC Engine CD - TurboGrafx-CD-content.png Console Content 1 256 NEC - PC Engine SuperGrafx-content.png Console Content 1 256 NEC - PC-FX-content.png Console Content 1 256 Nintendo - Family Computer Disk System-content.png Console Content 1 256 Nintendo - GameCube-content.png Console Content 1 256 Nintendo - Nintendo 64-content.png Console Content 1 256 Nintendo - Nintendo 64DD-content.png Console Content 1 256 Nintendo - Nintendo Entertainment System-content.png Console Content 1 256 Nintendo - Satellaview-content.png Console Content 1 256 Nintendo - Sufami Turbo-content.png Console Content 1 256 Nintendo - Super Nintendo Entertainment System-content.png Console Content 1 256 Nintendo - Wii-content.png Console Content 1 256 Sega - 32X-content.png Console Content 1 256 Sega - Dreamcast-content.png Console Content 1 256 Sega - Master System - Mark III-content.png Console Content 1 256 Sega - Mega Drive - Genesis-content.png Console Content 1 256 Sega - Mega-CD - Sega CD-content.png Console Content 1 256 Sega - PICO-content.png Console Content 1 256 Sega - Saturn-content.png Console Content 1 256 Sega - SG-1000-content.png Console Content 1 256 SNK - Neo Geo CD-content.png Console Content 1 256 SNK - Neo Geo-content.png Console Content 1 256 Sony - PlayStation-content.png Console Content 1 256 The 3DO Company - 3DO-content.png Console Content 1 256 Uzebox-content.png Console Content 1 256 Atari - 2600.png Console System 0 256 Atari - 5200.png Console System 0 256 Atari - 7800.png Console System 0 256 Atari - Jaguar.png Console System 0 256 Bandai - WonderSwan Color.png Console System 0 256 Bandai - WonderSwan.png Console System 0 256 Coleco - ColecoVision.png Console System 0 256 GCE - Vectrex.png Console System 0 256 Magnavox - Odyssey2.png Console System 0 256 NEC - PC Engine - TurboGrafx 16.png Console System 0 256 NEC - PC Engine CD - TurboGrafx-CD.png Console System 0 256 NEC - PC Engine SuperGrafx.png Console System 0 256 NEC - PC-FX.png Console System 0 256 Nintendo - Family Computer Disk System.png Console System 0 256 Nintendo - GameCube.png Console System 0 256 Nintendo - Nintendo 64.png Console System 0 256 Nintendo - Nintendo 64DD.png Console System 0 256 Nintendo - Nintendo Entertainment System.png Console System 0 256 Nintendo - Satellaview.png Console System 0 256 Nintendo - Sufami Turbo.png Console System 0 256 Nintendo - Super Nintendo Entertainment System.png Console System 0 256 Nintendo - Wii.png Console System 0 256 Sega - 32X.png Console System 0 256 Sega - Dreamcast.png Console System 0 256 Sega - Master System - Mark III.png Console System 0 256 Sega - Mega Drive - Genesis.png Console System 0 256 Sega - Mega-CD - Sega CD.png Console System 0 256 Sega - PICO.png Console System 0 256 Sega - Saturn.png Console System 0 256 Sega - SG-1000.png Console System 0 256 SNK - Neo Geo CD.png Console System 0 256 SNK - Neo Geo.png Console System 0 256 Sony - PlayStation.png Console System 0 256 The 3DO Company - 3DO.png Console System 0 256 Uzebox.png Console System 0 256 Atari - Lynx-content.png Handheld Content 1 256 Game Park - GP32-content.png Handheld Content 1 256 Handheld Electronic Game-content.png Handheld Content 1 256 Nintendo - Game Boy Advance-content.png Handheld Content 1 256 Nintendo - Game Boy Color-content.png Handheld Content 1 256 Nintendo - Game Boy-content.png Handheld Content 1 256 Nintendo - Nintendo DS Decrypted-content.png Handheld Content 1 256 Nintendo - Nintendo DS-content.png Handheld Content 1 256 Nintendo - Pokemon Mini-content.png Handheld Content 1 256 Nintendo - Virtual Boy-content.png Handheld Content 1 256 Sega - Game Gear-content.png Handheld Content 1 256 SNK - Neo Geo Pocket Color-content.png Handheld Content 1 256 SNK - Neo Geo Pocket-content.png Handheld Content 1 256 Sony - PlayStation Portable-content.png Handheld Content 1 256 Tiger - Game.com-content.png Handheld Content 1 256 Atari - Lynx.png Handheld System 0 256 Game Park - GP32.png Handheld System 0 256 Handheld Electronic Game.png Handheld System 0 256 Nintendo - Game Boy Advance.png Handheld System 0 256 Nintendo - Game Boy Color.png Handheld System 0 256 Nintendo - Game Boy.png Handheld System 0 256 Nintendo - Nintendo DS Decrypted.png Handheld System 0 256 Nintendo - Nintendo DS.png Handheld System 0 256 Nintendo - Pokemon Mini.png Handheld System 0 256 Nintendo - Virtual Boy.png Handheld System 0 256 Sega - Game Gear.png Handheld System 0 256 SNK - Neo Geo Pocket Color.png Handheld System 0 256 SNK - Neo Geo Pocket.png Handheld System 0 256 Sony - PlayStation Portable.png Handheld System 0 256 Tiger - Game.com.png Handheld System 0 256 2048.png Port Application 0 256 Cave Story.png Port Application 0 256 Dinothawr.png Port Application 0 256 DOOM.png Port Application 0 256 Dungeon Crawl Stone Soup.png Port Application 0 256 Quake1.png Port Application 0 256 2048-content.png Port Content 1 256 Cave Story-content.png Port Content 1 256 Dinothawr-content.png Port Content 1 256 DOOM-content.png Port Content 1 256 Dungeon Crawl Stone Soup-content.png Port Content 1 256 Quake1-content.png Port Content 1 256 FFmpeg.png XMB Application 0 256 default.png XMB Application 0 256 Game.png XMB Application 0 256 history.png XMB Application 0 256 images.png XMB Application 0 256 lakka.png XMB Application 0 256 movies.png XMB Application 0 256 netplay.png XMB Application 0 256 retroarch.png XMB Application 0 256 settings.png XMB Application 0 256 musics.png XMB Application 0 256 add.png XMB Application 0 256 FFmpeg-content.png XMB Content 1 256 music.png XMB Content 1 256 image.png XMB Content 1 256 movie.png XMB Content 1 256 achievement-list.png XMB Content 1 256 default-content.png XMB Content 1 256 Game-content.png XMB Content 1 256 netplay - iRoom-locked.png XMB Content 1 256 netplay - iRoom.png XMB Content 1 256 netplay - LAN Room-locked.png XMB Content 1 256 netplay - LAN Room.png XMB Content 1 256 netplay - rooms-locked.png XMB Content 1 256 netplay - rooms.png XMB Content 1 256 room.png XMB Content 1 256 setting.png XMB Content 1 256 zip.png XMB Content 2 256 file.png XMB Content 2 Small folder.png XMB Content 2 Small dialog-slice.png XMB Dialog 2 256 Libretro - Pad.png XMB Help - 256 battery-charging.png XMB Info Bar - Small battery-full.png XMB Info Bar - Small clock.png XMB Info Bar - Small undo.png XMB Info Bar - Small wifi.png XMB Info Bar - Small key-hover.png XMB Key 2 256 key.png XMB Key 2 256 arrow.png XMB Nav 2 Small close.png XMB Nav 2 Small core-cheat-options.png XMB Nav 2 Small core-disk-options.png XMB Nav 2 Small core-infos.png XMB Nav 2 Small core-input-remapping-options.png XMB Nav 2 Small core-options.png XMB Nav 2 Small core-shader-options.png XMB Nav 2 Small core.png XMB Nav 2 Small cursor.png XMB Nav 2 Small database.png XMB Nav 2 Small loadstate.png XMB Nav 2 Small pointer.png XMB Nav 2 Small reload.png XMB Nav 2 Small resume.png XMB Nav 2 Small run.png XMB Nav 2 Small savestate.png XMB Nav 2 Small screenshot.png XMB Nav 2 Small subsetting.png XMB Nav 2 Small off.png XMB Selection 2 Small on.png XMB Selection 2 Small bg.png XMB Wallpaper - 1080p","title":"Creating a Theme"},{"location":"guides/themes/#making-custom-themes","text":"This page will guide you through the essential information needed to customize the core RetroArch theme. Credit for information goes to @baxysquare from this forum post Tip For examples of Menu Icon Themes and how to change them please read this guide","title":"Making Custom Themes"},{"location":"guides/themes/#skills-tools-needed-to-make-and-contribute-a-theme","text":"A GitHub account and a basic understanding on how to fork a project and contribute via Pull Requests. The GitHub project that hosts the theme is the retroarch-assets repository. Computer application(s) to create source icons. You can use any photo editing application such as Photoshop or GIMP, but a Vector-based application such as Illustrator or Inkscape is preferred. The preferred source format is SVG. Conversion applications can come in handy. You can use ImageMagick to batch convert your source files to PNG format. Running your PNG files through ImageOptim can help reduce the icon file size without reducing the quality. Attention to detail, patience and time. Be prepared to create and revise as you learn and grow. Feel free to take an existing theme, make modifications and then test your new design.","title":"Skills &amp; Tools Needed to Make and Contribute a Theme"},{"location":"guides/themes/#required-theme-components","text":"A truetype font renamed to \"font.ttf.\" You need to choose a typeface that has an open license. There is a wide selection to choose from at Google Fonts . If you have the tools and skills to make your own font and wish to contribute it via open license, feel free to do so. A text file in GitHub Markdown format titled README.md. This file provides basic info on the theme itself along with specifications and guidelines to help others contribute to the theme. Make sure to include an attribution and license info for the included truetype font. A PNG folder that contains a complete set of icons and a default background image.","title":"Required Theme Components"},{"location":"guides/themes/#optional-theme-components","text":"A SRC file containing SVG or other source files. If you choose not to include your source files, please host them elsewhere and indicate in the README.","title":"Optional Theme Components"},{"location":"guides/themes/#icons","text":"The majority of time and effort involved in creating a theme is creating and revising the icons. The default Monochrome set includes just over 200 icons as listed below. That number will continue to grow as more cores and features are added.","title":"Icons"},{"location":"guides/themes/#tips-tricks-for-creating-icons","text":"The icons should be set to a 256x256 pixel canvas and should be centered on a 64x64 grid. You need to snap your point and line elements to the grid wherever possible. Libretro icons are scaled down, so when design elements do not line up with the grid, they tend to render oddly. Give your icons room to breathe. While you are capable of using the full canvas, a 248x248 or 240x240 maximum icon size is highly recommended. Alternatively, you can keep your icons inside a 256x256 circular \"blueprint\". This will keep the top and the bottom of your icons from touching when you're scrolling through a list of icons. Create and stick to a color palette of 64 colors or less. While you can use an unlimited palette, your icons will look more uniform and consistent as a theme. Keep the details of your icons in harmony with one another. If one icon has too many design details, try to simplify it to match with the other icons. If an icon is lacking in detail, do what you can to add balance in comparison to the other designs. Here's a complete list of icons (and wallpaper) in the default set. Category, Type, Menu Level and Size info has been included to help you understand an icon's purpose and use in the user interface. Name Category Type Level Size FB Alpha - Arcade Games-content.png Arcade Content 1 256 MAME-content.png Arcade Content 1 256 MAME2003-content.png Arcade Content 1 256 MAME2010-content.png Arcade Content 1 256 Neo Geo-content.png Arcade Content 1 256 FB Alpha - Arcade Games.png Arcade System 0 256 MAME.png Arcade System 0 256 MAME2003.png Arcade System 0 256 MAME2010.png Arcade System 0 256 Neo Geo.png Arcade System 0 256 Lutro.png Computer Application 0 256 DOS.png Computer Application 0 256 Atari - ST-content.png Computer Content 1 256 Commodore Amiga-content.png Computer Content 1 256 DOS-content.png Computer Content 1 256 Microsoft - MSX-content.png Computer Content 1 256 Microsoft - MSX2-content.png Computer Content 1 256 ScummVM-content.png Computer Content 1 256 Sinclair - ZX 81-content.png Computer Content 1 256 Sinclair - ZX Spectrum +3-content.png Computer Content 1 256 Sinclair - ZX Spectrum-content.png Computer Content 1 256 Lutro-content.png Computer Content 1 256 Atari - ST.png Computer System 0 256 Commodore Amiga.png Computer System 0 256 Microsoft - MSX.png Computer System 0 256 Microsoft - MSX2.png Computer System 0 256 ScummVM.png Computer System 0 256 Sinclair - ZX 81.png Computer System 0 256 Sinclair - ZX Spectrum +3.png Computer System 0 256 Sinclair - ZX Spectrum.png Computer System 0 256 Atari - 2600-content.png Console Content 1 256 Atari - 5200-content.png Console Content 1 256 Atari - 7800-content.png Console Content 1 256 Atari - Jaguar-content.png Console Content 1 256 Bandai - WonderSwan Color-content.png Console Content 1 256 Bandai - WonderSwan-content.png Console Content 1 256 Coleco - ColecoVision-content.png Console Content 1 256 GCE - Vectrex-content.png Console Content 1 256 Magnavox - Odyssey2-content.png Console Content 1 256 NEC - PC Engine - TurboGrafx 16-content.png Console Content 1 256 NEC - PC Engine CD - TurboGrafx-CD-content.png Console Content 1 256 NEC - PC Engine SuperGrafx-content.png Console Content 1 256 NEC - PC-FX-content.png Console Content 1 256 Nintendo - Family Computer Disk System-content.png Console Content 1 256 Nintendo - GameCube-content.png Console Content 1 256 Nintendo - Nintendo 64-content.png Console Content 1 256 Nintendo - Nintendo 64DD-content.png Console Content 1 256 Nintendo - Nintendo Entertainment System-content.png Console Content 1 256 Nintendo - Satellaview-content.png Console Content 1 256 Nintendo - Sufami Turbo-content.png Console Content 1 256 Nintendo - Super Nintendo Entertainment System-content.png Console Content 1 256 Nintendo - Wii-content.png Console Content 1 256 Sega - 32X-content.png Console Content 1 256 Sega - Dreamcast-content.png Console Content 1 256 Sega - Master System - Mark III-content.png Console Content 1 256 Sega - Mega Drive - Genesis-content.png Console Content 1 256 Sega - Mega-CD - Sega CD-content.png Console Content 1 256 Sega - PICO-content.png Console Content 1 256 Sega - Saturn-content.png Console Content 1 256 Sega - SG-1000-content.png Console Content 1 256 SNK - Neo Geo CD-content.png Console Content 1 256 SNK - Neo Geo-content.png Console Content 1 256 Sony - PlayStation-content.png Console Content 1 256 The 3DO Company - 3DO-content.png Console Content 1 256 Uzebox-content.png Console Content 1 256 Atari - 2600.png Console System 0 256 Atari - 5200.png Console System 0 256 Atari - 7800.png Console System 0 256 Atari - Jaguar.png Console System 0 256 Bandai - WonderSwan Color.png Console System 0 256 Bandai - WonderSwan.png Console System 0 256 Coleco - ColecoVision.png Console System 0 256 GCE - Vectrex.png Console System 0 256 Magnavox - Odyssey2.png Console System 0 256 NEC - PC Engine - TurboGrafx 16.png Console System 0 256 NEC - PC Engine CD - TurboGrafx-CD.png Console System 0 256 NEC - PC Engine SuperGrafx.png Console System 0 256 NEC - PC-FX.png Console System 0 256 Nintendo - Family Computer Disk System.png Console System 0 256 Nintendo - GameCube.png Console System 0 256 Nintendo - Nintendo 64.png Console System 0 256 Nintendo - Nintendo 64DD.png Console System 0 256 Nintendo - Nintendo Entertainment System.png Console System 0 256 Nintendo - Satellaview.png Console System 0 256 Nintendo - Sufami Turbo.png Console System 0 256 Nintendo - Super Nintendo Entertainment System.png Console System 0 256 Nintendo - Wii.png Console System 0 256 Sega - 32X.png Console System 0 256 Sega - Dreamcast.png Console System 0 256 Sega - Master System - Mark III.png Console System 0 256 Sega - Mega Drive - Genesis.png Console System 0 256 Sega - Mega-CD - Sega CD.png Console System 0 256 Sega - PICO.png Console System 0 256 Sega - Saturn.png Console System 0 256 Sega - SG-1000.png Console System 0 256 SNK - Neo Geo CD.png Console System 0 256 SNK - Neo Geo.png Console System 0 256 Sony - PlayStation.png Console System 0 256 The 3DO Company - 3DO.png Console System 0 256 Uzebox.png Console System 0 256 Atari - Lynx-content.png Handheld Content 1 256 Game Park - GP32-content.png Handheld Content 1 256 Handheld Electronic Game-content.png Handheld Content 1 256 Nintendo - Game Boy Advance-content.png Handheld Content 1 256 Nintendo - Game Boy Color-content.png Handheld Content 1 256 Nintendo - Game Boy-content.png Handheld Content 1 256 Nintendo - Nintendo DS Decrypted-content.png Handheld Content 1 256 Nintendo - Nintendo DS-content.png Handheld Content 1 256 Nintendo - Pokemon Mini-content.png Handheld Content 1 256 Nintendo - Virtual Boy-content.png Handheld Content 1 256 Sega - Game Gear-content.png Handheld Content 1 256 SNK - Neo Geo Pocket Color-content.png Handheld Content 1 256 SNK - Neo Geo Pocket-content.png Handheld Content 1 256 Sony - PlayStation Portable-content.png Handheld Content 1 256 Tiger - Game.com-content.png Handheld Content 1 256 Atari - Lynx.png Handheld System 0 256 Game Park - GP32.png Handheld System 0 256 Handheld Electronic Game.png Handheld System 0 256 Nintendo - Game Boy Advance.png Handheld System 0 256 Nintendo - Game Boy Color.png Handheld System 0 256 Nintendo - Game Boy.png Handheld System 0 256 Nintendo - Nintendo DS Decrypted.png Handheld System 0 256 Nintendo - Nintendo DS.png Handheld System 0 256 Nintendo - Pokemon Mini.png Handheld System 0 256 Nintendo - Virtual Boy.png Handheld System 0 256 Sega - Game Gear.png Handheld System 0 256 SNK - Neo Geo Pocket Color.png Handheld System 0 256 SNK - Neo Geo Pocket.png Handheld System 0 256 Sony - PlayStation Portable.png Handheld System 0 256 Tiger - Game.com.png Handheld System 0 256 2048.png Port Application 0 256 Cave Story.png Port Application 0 256 Dinothawr.png Port Application 0 256 DOOM.png Port Application 0 256 Dungeon Crawl Stone Soup.png Port Application 0 256 Quake1.png Port Application 0 256 2048-content.png Port Content 1 256 Cave Story-content.png Port Content 1 256 Dinothawr-content.png Port Content 1 256 DOOM-content.png Port Content 1 256 Dungeon Crawl Stone Soup-content.png Port Content 1 256 Quake1-content.png Port Content 1 256 FFmpeg.png XMB Application 0 256 default.png XMB Application 0 256 Game.png XMB Application 0 256 history.png XMB Application 0 256 images.png XMB Application 0 256 lakka.png XMB Application 0 256 movies.png XMB Application 0 256 netplay.png XMB Application 0 256 retroarch.png XMB Application 0 256 settings.png XMB Application 0 256 musics.png XMB Application 0 256 add.png XMB Application 0 256 FFmpeg-content.png XMB Content 1 256 music.png XMB Content 1 256 image.png XMB Content 1 256 movie.png XMB Content 1 256 achievement-list.png XMB Content 1 256 default-content.png XMB Content 1 256 Game-content.png XMB Content 1 256 netplay - iRoom-locked.png XMB Content 1 256 netplay - iRoom.png XMB Content 1 256 netplay - LAN Room-locked.png XMB Content 1 256 netplay - LAN Room.png XMB Content 1 256 netplay - rooms-locked.png XMB Content 1 256 netplay - rooms.png XMB Content 1 256 room.png XMB Content 1 256 setting.png XMB Content 1 256 zip.png XMB Content 2 256 file.png XMB Content 2 Small folder.png XMB Content 2 Small dialog-slice.png XMB Dialog 2 256 Libretro - Pad.png XMB Help - 256 battery-charging.png XMB Info Bar - Small battery-full.png XMB Info Bar - Small clock.png XMB Info Bar - Small undo.png XMB Info Bar - Small wifi.png XMB Info Bar - Small key-hover.png XMB Key 2 256 key.png XMB Key 2 256 arrow.png XMB Nav 2 Small close.png XMB Nav 2 Small core-cheat-options.png XMB Nav 2 Small core-disk-options.png XMB Nav 2 Small core-infos.png XMB Nav 2 Small core-input-remapping-options.png XMB Nav 2 Small core-options.png XMB Nav 2 Small core-shader-options.png XMB Nav 2 Small core.png XMB Nav 2 Small cursor.png XMB Nav 2 Small database.png XMB Nav 2 Small loadstate.png XMB Nav 2 Small pointer.png XMB Nav 2 Small reload.png XMB Nav 2 Small resume.png XMB Nav 2 Small run.png XMB Nav 2 Small savestate.png XMB Nav 2 Small screenshot.png XMB Nav 2 Small subsetting.png XMB Nav 2 Small off.png XMB Selection 2 Small on.png XMB Selection 2 Small bg.png XMB Wallpaper - 1080p","title":"Tips &amp; Tricks for Creating Icons"},{"location":"guides/troubleshooting-retroarch/","text":"Troubleshooting RetroArch \u00b6 Common video issues \u00b6 Optimal vsync performance with dynamic rate control \u00b6 RetroArch uses Dynamic Rate Control to synchronize both video and audio at the same time. Synchronizing like this is a very demanding task timing-wise and dynamic rate control helps smooth out imperfections in timing which are guaranteed to arise. It can be disabled, but be aware that proper video/audio sync is nearly impossible to obtain. While using RetroArch, the default settings might not be adequate, and you might experience video stuttering and/or audio crackling. For correct synchronization, video_refresh_rate must be configured for your monitor. It cannot be detected accuractely enough by OS-provided APIs (i.e. they tend to blatantly lie). For proper behavior, an accuracy of roughly ~0.1% is needed for dynamic rate control to smooth out the drifting. This is trivial to obtain by measuring manually under normal conditions. Without dynamic rate control one would need a \"perfect\" measurement which obviously isn't possible without special hardware. RetroArch can give you an estimate of your monitors refresh rate under video settings, which is updated in real-time using a running average over frame times. Make sure vysnc is enabled and working. Also make sure you're running in full-screen for more accurate results (compositors can easily interfere with timing). Press accept button on the estimated refresh rate to configure RetroArch with the estimated rate. If the running average isn't drifting much anymore, it's probably a good result. You can also have RetroArch log the output at the end and configure things more manually. Start RetroArch directly in RGUI with retroarch --verbose --menu. Let it run uninterrupted for at least 4096 frames (displayed in title bar), and exit. In the log, you should see something like: 1 RetroArch: Average monitor Hz: 59.869485 Hz. (1.347 % frame time deviation, based on 2048 last samples). If you're unsure about the result, run this test several times and see if the results are consistent. Some systems tend to have very unreliable vsync behavior and this result will wildly fluctuate. You can use this value in video_refresh_rate and the video and audio should ideally be butter smooth if the game's FPS and monitor FPS are relatively close to each other. Playing a PAL game on 60 Hz monitor won't be perfect no matter what you do, however. Threaded video \u00b6 If your video driver has very bad performance, it is possible to run it on a thread to avoid almost all video driver overhead. Set video_threaded = true in config. Butter smooth VSync behavior in this case is impossible however, and latency might increase slighly. Use only if you cannot obtain full speed otherwise. Low frame rate \u00b6 Make sure your system meets the requirement of the core you picked. See if your core options aren't set too high for your system. Disable shaders. Lower the video scale setting. Try another video driver. Try enabling threaded video in the video options. Windows Vista and up video problems \u00b6 Windows Vista and up suffer problems with OpenGL in windowed mode where it appears to be impossible to obtain proper, smooth VSync behavior no matter what you do. If you are annoyed by this problem, and still want to play in windowed mode, you should use the D3D driver which doesn't have this problem. Disabling Aero sometimes helps OpenGL VSync behavior. Input latency \u00b6 There have been cases reported on excessive input lag in Windows for some users. It's not really input latency, but video driver latency. Some video drivers tend to buffer way too much in the name of increased performance. This problem is explained by Carmack here. RetroArch recently got an option to use a swap/fence sync method in OpenGL driver, which is reported to greatly lower input latency (thread). To enable it, set video_hard_sync = true in config or enable it from RGUI. To ensure that this sync method is actually used, make sure that you see this in the log: 1 2 RetroArch: Querying GL extension: ARB_sync => exists RetroArch: [GL]: Using ARB_sync to reduce latency. Do note that this sync method can greatly reduce performance, and can turn smooth 60 fps into crawling 30 fps if there was not enough headroom in the performance. If you use KMS mode, using video_hard_sync won't help as it already does something like this. Why isn\u2019t my BIOS working? \u00b6 Make sure the BIOS files are placed into the correct directory Make sure they are named correctly so the core can identify them. Make sure it\u2019s the correct version/region of a BIOS. Make sure your files are not corrupted (bad source, broken download, etc.). Make sure to check the log for any errors. Getting ready to ask for help \u00b6 When problems arise with RetroArch, it is helpful for the developers and other volunteers to have certain standard information in order to find a solution. When requesting help with a RetroArch issue, please try to include: A description of the problem: What did you expect to happen, and what happened instead? The version of RetroArch you are using The hardware and operating system that you are using If the problem occurs while using a core: What is the the core name, its version, and the name of the game or media you were playing? RetroArch log files recorded when the problem occurs See: Generating RetroArch Logs \"OK, I've done these things. Where can I get help?\" \u00b6 If you have questions or issues which cannot be resolved on your own, visit the RetroArch forum \"I know my problem is a bug. Where can I report it?\" \u00b6 You can report issues in the RetroArch issues tracker .","title":"Troubleshooting"},{"location":"guides/troubleshooting-retroarch/#troubleshooting-retroarch","text":"","title":"Troubleshooting RetroArch"},{"location":"guides/troubleshooting-retroarch/#common-video-issues","text":"","title":"Common video issues"},{"location":"guides/troubleshooting-retroarch/#optimal-vsync-performance-with-dynamic-rate-control","text":"RetroArch uses Dynamic Rate Control to synchronize both video and audio at the same time. Synchronizing like this is a very demanding task timing-wise and dynamic rate control helps smooth out imperfections in timing which are guaranteed to arise. It can be disabled, but be aware that proper video/audio sync is nearly impossible to obtain. While using RetroArch, the default settings might not be adequate, and you might experience video stuttering and/or audio crackling. For correct synchronization, video_refresh_rate must be configured for your monitor. It cannot be detected accuractely enough by OS-provided APIs (i.e. they tend to blatantly lie). For proper behavior, an accuracy of roughly ~0.1% is needed for dynamic rate control to smooth out the drifting. This is trivial to obtain by measuring manually under normal conditions. Without dynamic rate control one would need a \"perfect\" measurement which obviously isn't possible without special hardware. RetroArch can give you an estimate of your monitors refresh rate under video settings, which is updated in real-time using a running average over frame times. Make sure vysnc is enabled and working. Also make sure you're running in full-screen for more accurate results (compositors can easily interfere with timing). Press accept button on the estimated refresh rate to configure RetroArch with the estimated rate. If the running average isn't drifting much anymore, it's probably a good result. You can also have RetroArch log the output at the end and configure things more manually. Start RetroArch directly in RGUI with retroarch --verbose --menu. Let it run uninterrupted for at least 4096 frames (displayed in title bar), and exit. In the log, you should see something like: 1 RetroArch: Average monitor Hz: 59.869485 Hz. (1.347 % frame time deviation, based on 2048 last samples). If you're unsure about the result, run this test several times and see if the results are consistent. Some systems tend to have very unreliable vsync behavior and this result will wildly fluctuate. You can use this value in video_refresh_rate and the video and audio should ideally be butter smooth if the game's FPS and monitor FPS are relatively close to each other. Playing a PAL game on 60 Hz monitor won't be perfect no matter what you do, however.","title":"Optimal vsync performance with dynamic rate control"},{"location":"guides/troubleshooting-retroarch/#threaded-video","text":"If your video driver has very bad performance, it is possible to run it on a thread to avoid almost all video driver overhead. Set video_threaded = true in config. Butter smooth VSync behavior in this case is impossible however, and latency might increase slighly. Use only if you cannot obtain full speed otherwise.","title":"Threaded video"},{"location":"guides/troubleshooting-retroarch/#low-frame-rate","text":"Make sure your system meets the requirement of the core you picked. See if your core options aren't set too high for your system. Disable shaders. Lower the video scale setting. Try another video driver. Try enabling threaded video in the video options.","title":"Low frame rate"},{"location":"guides/troubleshooting-retroarch/#windows-vista-and-up-video-problems","text":"Windows Vista and up suffer problems with OpenGL in windowed mode where it appears to be impossible to obtain proper, smooth VSync behavior no matter what you do. If you are annoyed by this problem, and still want to play in windowed mode, you should use the D3D driver which doesn't have this problem. Disabling Aero sometimes helps OpenGL VSync behavior.","title":"Windows Vista and up video problems"},{"location":"guides/troubleshooting-retroarch/#input-latency","text":"There have been cases reported on excessive input lag in Windows for some users. It's not really input latency, but video driver latency. Some video drivers tend to buffer way too much in the name of increased performance. This problem is explained by Carmack here. RetroArch recently got an option to use a swap/fence sync method in OpenGL driver, which is reported to greatly lower input latency (thread). To enable it, set video_hard_sync = true in config or enable it from RGUI. To ensure that this sync method is actually used, make sure that you see this in the log: 1 2 RetroArch: Querying GL extension: ARB_sync => exists RetroArch: [GL]: Using ARB_sync to reduce latency. Do note that this sync method can greatly reduce performance, and can turn smooth 60 fps into crawling 30 fps if there was not enough headroom in the performance. If you use KMS mode, using video_hard_sync won't help as it already does something like this.","title":"Input latency"},{"location":"guides/troubleshooting-retroarch/#why-isnt-my-bios-working","text":"Make sure the BIOS files are placed into the correct directory Make sure they are named correctly so the core can identify them. Make sure it\u2019s the correct version/region of a BIOS. Make sure your files are not corrupted (bad source, broken download, etc.). Make sure to check the log for any errors.","title":"Why isn\u2019t my BIOS working?"},{"location":"guides/troubleshooting-retroarch/#getting-ready-to-ask-for-help","text":"When problems arise with RetroArch, it is helpful for the developers and other volunteers to have certain standard information in order to find a solution. When requesting help with a RetroArch issue, please try to include: A description of the problem: What did you expect to happen, and what happened instead? The version of RetroArch you are using The hardware and operating system that you are using If the problem occurs while using a core: What is the the core name, its version, and the name of the game or media you were playing? RetroArch log files recorded when the problem occurs See: Generating RetroArch Logs","title":"Getting ready to ask for help"},{"location":"guides/troubleshooting-retroarch/#ok-ive-done-these-things-where-can-i-get-help","text":"If you have questions or issues which cannot be resolved on your own, visit the RetroArch forum","title":"\"OK, I've done these things. Where can I get help?\""},{"location":"guides/troubleshooting-retroarch/#i-know-my-problem-is-a-bug-where-can-i-report-it","text":"You can report issues in the RetroArch issues tracker .","title":"\"I know my problem is a bug. Where can I report it?\""},{"location":"guides/web-player/","text":"What is it? \u00b6 It is a version that works on the modern internet browsers with the basic features of RetroArch. You don't need to install this version. You can add your content after selecting the desired Core. How to use it \u00b6 You can access it from this link with using modern internet browsers (For example: Google Chrome, Microsoft Edge etc.). Warning Using an old internet browser may ruin the whole experience. Select the Core to run from the first tab (Clicking on the Core name will start running). Core loading time may vary depending on the selected Core. During this time, your system's performance and actively used processes can cause your browser to crash. In this case, the option Wait or End will be displayed on your screen. In this case, click Wait, it may come out several times. Choose your content to load by clicking Add Content from the second tab . This will add your content to your browser's cache. We will be able to delete it later. To access the file you uploaded Load Content> Start Directory > You will also see it in the Downloads folder, where you can access open source content, which you can download from RetroArch's Content Downloader. Details \u00b6 We can use the basic features of RetroArch. How can I toggle Quick Menu? You can either press F1 or click the Menu Toggle button which is How can I go full screen? You do not want to press F11 when the screen is selected, this key usually takes you to full screen, but in our scenario you need to use the Full Screen key which is . How can I delete the cache? There are many methods for this, you can do CTRL + F5, right click the cursor and go to the inspect and right click on the refresh button on the top left and clear the cache, press the clear cache key . You can also click the Help button and read this information there. Cores \u00b6 Supported Cores for now are as follows, may vary in this list. 2048 Beetle Lynx Beetle NeoPop Beetle PCE FAST Beetle PC-FX Beetle PSX Beetle SNES Beetle VB Beetle WonderSwan BlueMSX ChaiLove Craft DeSmuME DOSBox EasyRPG FB Alpha 2012 FB Alpha 2012 CPS1 FB Alpha 2012 CPS2 FB Alpha 2012 NeoGeo FCEUmm FFmpeg Gambatte Game Music Emu Genesi Plus GX GLupeN64 gPSP Handy MAME 2000 Mu Mupen64 Plus Nestopia NX Engine 02em Opera PicoDrive PrBoom QuickNES Flycast Snes9x 2002 Snes9x 2005 Snes9x 2010 Snes9x SquirrelJME Stella TGB Dual Theodore (Thompson T08/T09) TryQuake VBA Next Vecx Virtual Jaguar Yabause","title":"Web Player"},{"location":"guides/web-player/#what-is-it","text":"It is a version that works on the modern internet browsers with the basic features of RetroArch. You don't need to install this version. You can add your content after selecting the desired Core.","title":"What is it?"},{"location":"guides/web-player/#how-to-use-it","text":"You can access it from this link with using modern internet browsers (For example: Google Chrome, Microsoft Edge etc.). Warning Using an old internet browser may ruin the whole experience. Select the Core to run from the first tab (Clicking on the Core name will start running). Core loading time may vary depending on the selected Core. During this time, your system's performance and actively used processes can cause your browser to crash. In this case, the option Wait or End will be displayed on your screen. In this case, click Wait, it may come out several times. Choose your content to load by clicking Add Content from the second tab . This will add your content to your browser's cache. We will be able to delete it later. To access the file you uploaded Load Content> Start Directory > You will also see it in the Downloads folder, where you can access open source content, which you can download from RetroArch's Content Downloader.","title":"How to use it"},{"location":"guides/web-player/#details","text":"We can use the basic features of RetroArch. How can I toggle Quick Menu? You can either press F1 or click the Menu Toggle button which is How can I go full screen? You do not want to press F11 when the screen is selected, this key usually takes you to full screen, but in our scenario you need to use the Full Screen key which is . How can I delete the cache? There are many methods for this, you can do CTRL + F5, right click the cursor and go to the inspect and right click on the refresh button on the top left and clear the cache, press the clear cache key . You can also click the Help button and read this information there.","title":"Details"},{"location":"guides/web-player/#cores","text":"Supported Cores for now are as follows, may vary in this list. 2048 Beetle Lynx Beetle NeoPop Beetle PCE FAST Beetle PC-FX Beetle PSX Beetle SNES Beetle VB Beetle WonderSwan BlueMSX ChaiLove Craft DeSmuME DOSBox EasyRPG FB Alpha 2012 FB Alpha 2012 CPS1 FB Alpha 2012 CPS2 FB Alpha 2012 NeoGeo FCEUmm FFmpeg Gambatte Game Music Emu Genesi Plus GX GLupeN64 gPSP Handy MAME 2000 Mu Mupen64 Plus Nestopia NX Engine 02em Opera PicoDrive PrBoom QuickNES Flycast Snes9x 2002 Snes9x 2005 Snes9x 2010 Snes9x SquirrelJME Stella TGB Dual Theodore (Thompson T08/T09) TryQuake VBA Next Vecx Virtual Jaguar Yabause","title":"Cores"},{"location":"library/2048/","text":"2048 \u00b6 Background \u00b6 This is a port of 2048, a game, to libretro. How to start the 2048 core: \u00b6 To start the 2048 core, go to RetroArch's main menu screen. Select 'Load Core', then '2048'. Now, select 'Start Core'. The content should now start running! Author/License \u00b6 The 2048 game has been authored by Gabriele Cirulli The libretro implementation was authored by Higor Eur\u00edpedes The 2048 core is licensed under Public Domain A summary of the licenses behind RetroArch and its cores can be found here . Features \u00b6 Frontend-level settings or features that the 2048 core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2715 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The 2048 core's internal core name is '2048' The 2048 core saves/loads to/from these directories. Frontend's Save directory 2048.srm (Previous game sessions and hiscores) Frontend's State directory 2048.state# (State) Geometry and timing \u00b6 The 2048 core's core provided FPS is 60 The 2048 core's core provided sample rate is 30000 Hz The 2048 core's core provided aspect ratio is 1 Controllers \u00b6 The 2048 core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 device types \u00b6 None - Doesn't disable input. RetroPad - Joypad RetroPad w/Analog - Joypad - There's no reason to switch to this. Controller tables \u00b6 Joypad \u00b6 User 1 Remap descriptors RetroPad Inputs Pause Start Up Down Left Right External Links \u00b6 Official 2048 Website Official 2048 Github Repository Libretro 2048 Core info file Libretro 2048 Github Repository Report Libretro 2048 Core Issues Here","title":"2048"},{"location":"library/2048/#2048","text":"","title":"2048"},{"location":"library/2048/#background","text":"This is a port of 2048, a game, to libretro.","title":"Background"},{"location":"library/2048/#how-to-start-the-2048-core","text":"To start the 2048 core, go to RetroArch's main menu screen. Select 'Load Core', then '2048'. Now, select 'Start Core'. The content should now start running!","title":"How to start the 2048 core:"},{"location":"library/2048/#authorlicense","text":"The 2048 game has been authored by Gabriele Cirulli The libretro implementation was authored by Higor Eur\u00edpedes The 2048 core is licensed under Public Domain A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/2048/#features","text":"Frontend-level settings or features that the 2048 core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2715 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/2048/#directories","text":"The 2048 core's internal core name is '2048' The 2048 core saves/loads to/from these directories. Frontend's Save directory 2048.srm (Previous game sessions and hiscores) Frontend's State directory 2048.state# (State)","title":"Directories"},{"location":"library/2048/#geometry-and-timing","text":"The 2048 core's core provided FPS is 60 The 2048 core's core provided sample rate is 30000 Hz The 2048 core's core provided aspect ratio is 1","title":"Geometry and timing"},{"location":"library/2048/#controllers","text":"The 2048 core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/2048/#user-1-device-types","text":"None - Doesn't disable input. RetroPad - Joypad RetroPad w/Analog - Joypad - There's no reason to switch to this.","title":"User 1 device types"},{"location":"library/2048/#controller-tables","text":"","title":"Controller tables"},{"location":"library/2048/#joypad","text":"User 1 Remap descriptors RetroPad Inputs Pause Start Up Down Left Right","title":"Joypad"},{"location":"library/2048/#external-links","text":"Official 2048 Website Official 2048 Github Repository Libretro 2048 Core info file Libretro 2048 Github Repository Report Libretro 2048 Core Issues Here","title":"External Links"},{"location":"library/3d_engine/","text":"3D Engine \u00b6 Contribute to this documentation \u00b6 In order to propose improvements to this document, visit its corresponding source page on github . Changes are proposed using \"Pull Requests.\" Background \u00b6 A tech demo for libretro GL with additional features (camera/location/etc). Why use this core? \u00b6 Awaiting description. How to get and install the 3D Engine core: \u00b6 Start up RetroArch. Inside the main menu, go to 'Online Updater'. Just to make sure we have the latest info files, select 'Update Core Info FIles'. Wait until this is done. Then, select 'Core Updater'. Browse through the list and select '3D Engine'. After this has finished downloading, the core should now be ready for use! How to start (after installation): \u00b6 Go back to RetroArch's main menu screen. Select 'Load Content'. Browse to the folder that contains the content you want to run. Select the content that you want to run. If you are asked which core to select, choose '3D Engine'. The content should now start running! Authors \u00b6 Team Libretro License \u00b6 A summary of the licenses behind RetroArch and its cores can be found here . GPLv3 Extensions \u00b6 Content that can be loaded by the 3D Engine core have the following file extensions: .png .jpg .mtl .obj Features \u00b6 RetroArch features that the 3D Engine core respects. Feature Supported Restart \u2715 Screenshots \u2714 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2714 Camera \u2714 Location \u2714 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 Directories \u00b6 The 3D Engine core's directory name is 'Libretro 3DEngine' Geometry and timing \u00b6 The 3D Engine core's internal FPS is 60.0. The 3D Engine core's internal sample rate is 30000.0 Hz. The 3D Engine core's core provided aspect ratio is (Ratio). Core options \u00b6 The 3D Engine core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Internal resolution ( 320x240 /360x480/480x272/512x384/512x512/640x240/640x448/640x480/720x576/800x600/960x720/1024x768/1024x1024/1280x720/1280x960/1600x1200/1920x1080/1920x1440/1920x1600/2048x1152/2048x1536/2048x2048/320x240) Self explanatory. Cube size ( 0 /\u00bd/4/8/16/32/64/128) Awaiting description. Cube stride (2.0 to 8.0 in increments of 1.0. 2.0 is default ) Awaiting description. Camera enable ( Off /On) Awaiting description. Camera FB Type ( texture/ /raw framebuffer) Awaiting description. Sensor enable ( Off /On) Awaiting description. Location enable ( Off /On) Awaiting description. Location camera control ( Off /On) Awaiting description. Discard hack enable ( Off /On) Awaiting description. Location position OSD ( Off /On) Awaiting description. Controllers \u00b6 Device types \u00b6 The 3D Engine core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 device types \u00b6 None - Doesn't disable input. RetroPad - Joypad RetroPad w/Analog - Joypad - There is no reason to switch to this. Controller tables \u00b6 Joypad and analog device type table \u00b6 User 1 Remap descriptors RetroPad Inputs 3D Engine core inputs Jump/Zoom-in Move forwards Move backwards Turn left Turn right Zoom-out Move left Move right Adjust lighting Adjust lighting Adjust lighting X Move right or left/Rotate model Y Move forwards and backwards/Rotate model X Look right and left Y Look up and down/Zoom-in or Zoom-out External Links \u00b6 Libretro 3D Engine Core info file Libretro 3D Engine Github Repository Report Libretro 3D Engine Core Issues Here","title":"3D Engine"},{"location":"library/3d_engine/#3d-engine","text":"","title":"3D Engine"},{"location":"library/3d_engine/#contribute-to-this-documentation","text":"In order to propose improvements to this document, visit its corresponding source page on github . Changes are proposed using \"Pull Requests.\"","title":"Contribute to this documentation"},{"location":"library/3d_engine/#background","text":"A tech demo for libretro GL with additional features (camera/location/etc).","title":"Background"},{"location":"library/3d_engine/#why-use-this-core","text":"Awaiting description.","title":"Why use this core?"},{"location":"library/3d_engine/#how-to-get-and-install-the-3d-engine-core","text":"Start up RetroArch. Inside the main menu, go to 'Online Updater'. Just to make sure we have the latest info files, select 'Update Core Info FIles'. Wait until this is done. Then, select 'Core Updater'. Browse through the list and select '3D Engine'. After this has finished downloading, the core should now be ready for use!","title":"How to get and install the 3D Engine core:"},{"location":"library/3d_engine/#how-to-start-after-installation","text":"Go back to RetroArch's main menu screen. Select 'Load Content'. Browse to the folder that contains the content you want to run. Select the content that you want to run. If you are asked which core to select, choose '3D Engine'. The content should now start running!","title":"How to start (after installation):"},{"location":"library/3d_engine/#authors","text":"Team Libretro","title":"Authors"},{"location":"library/3d_engine/#license","text":"A summary of the licenses behind RetroArch and its cores can be found here . GPLv3","title":"License"},{"location":"library/3d_engine/#extensions","text":"Content that can be loaded by the 3D Engine core have the following file extensions: .png .jpg .mtl .obj","title":"Extensions"},{"location":"library/3d_engine/#features","text":"RetroArch features that the 3D Engine core respects. Feature Supported Restart \u2715 Screenshots \u2714 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2714 Camera \u2714 Location \u2714 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715","title":"Features"},{"location":"library/3d_engine/#directories","text":"The 3D Engine core's directory name is 'Libretro 3DEngine'","title":"Directories"},{"location":"library/3d_engine/#geometry-and-timing","text":"The 3D Engine core's internal FPS is 60.0. The 3D Engine core's internal sample rate is 30000.0 Hz. The 3D Engine core's core provided aspect ratio is (Ratio).","title":"Geometry and timing"},{"location":"library/3d_engine/#core-options","text":"The 3D Engine core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Internal resolution ( 320x240 /360x480/480x272/512x384/512x512/640x240/640x448/640x480/720x576/800x600/960x720/1024x768/1024x1024/1280x720/1280x960/1600x1200/1920x1080/1920x1440/1920x1600/2048x1152/2048x1536/2048x2048/320x240) Self explanatory. Cube size ( 0 /\u00bd/4/8/16/32/64/128) Awaiting description. Cube stride (2.0 to 8.0 in increments of 1.0. 2.0 is default ) Awaiting description. Camera enable ( Off /On) Awaiting description. Camera FB Type ( texture/ /raw framebuffer) Awaiting description. Sensor enable ( Off /On) Awaiting description. Location enable ( Off /On) Awaiting description. Location camera control ( Off /On) Awaiting description. Discard hack enable ( Off /On) Awaiting description. Location position OSD ( Off /On) Awaiting description.","title":"Core options"},{"location":"library/3d_engine/#controllers","text":"","title":"Controllers"},{"location":"library/3d_engine/#device-types","text":"The 3D Engine core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Device types"},{"location":"library/3d_engine/#user-1-device-types","text":"None - Doesn't disable input. RetroPad - Joypad RetroPad w/Analog - Joypad - There is no reason to switch to this.","title":"User 1 device types"},{"location":"library/3d_engine/#controller-tables","text":"","title":"Controller tables"},{"location":"library/3d_engine/#joypad-and-analog-device-type-table","text":"User 1 Remap descriptors RetroPad Inputs 3D Engine core inputs Jump/Zoom-in Move forwards Move backwards Turn left Turn right Zoom-out Move left Move right Adjust lighting Adjust lighting Adjust lighting X Move right or left/Rotate model Y Move forwards and backwards/Rotate model X Look right and left Y Look up and down/Zoom-in or Zoom-out","title":"Joypad and analog device type table"},{"location":"library/3d_engine/#external-links","text":"Libretro 3D Engine Core info file Libretro 3D Engine Github Repository Report Libretro 3D Engine Core Issues Here","title":"External Links"},{"location":"library/atari800/","text":"Atari 8-bit computer systems and 5200 (Atari800) \u00b6 Contribute to this documentation \u00b6 In order to propose improvements to this document, visit its corresponding source page on github . Changes are proposed using \"Pull Requests.\" Background \u00b6 Atari 8-bit computer systems (400, 800, 600 XL, 800XL, 130XE) and 5200 game console emulator. How to get and install the Atari800 core: \u00b6 Start up RetroArch. Inside the main menu, go to 'Online Updater'. Just to make sure we have the latest info files, select 'Update Core Info FIles'. Wait until this is done. Then, select 'Core Updater'. Browse through the list and select 'Atari 8-bit computer systems and 5200 (Atari800)'. After this has finished downloading, the core should now be ready for use! How to play (after installation): \u00b6 Go back to RetroArch's main menu screen. Select 'Load Content'. Browse to the folder that contains the content you want to run. Select the content that you want to run. If you are asked which core to select, choose 'Atari 8-bit computer systems and 5200 (Atari800)'. The game should now start running! Authors \u00b6 Petr Stehlik See also \u00b6 Awaiting description. License \u00b6 A summary of the licenses behind RetroArch and its cores can be found here . GPLv2 Extensions \u00b6 Content that can be loaded by the Atari800 core have the following file extensions: .xfd .atr .atx .cdm .cas .bin .a52 .xex .zip Databases \u00b6 RetroArch database(s) that are associated with the Atari800 core: Atari - 5200 BIOS \u00b6 Required or optional firmware files go in RetroArch's system directory. Filename Description md5sum 5200.rom 5200 BIOS - Required 281f20ea4320404ec820fb7ec0693b38 ATARIXL.ROM Atari XL/XE OS BIOS - Required 06daac977823773a3eea3422fd26a703 ATARIBAS.ROM BASIC interpreter BIOS - Required 0bac0c6a50104045d902df4503a4c30b ATARIOSA.ROM Atari 400/800 PAL BIOS - Required eb1f32f5d9f382db1bbfb8d7f9cb343a ATARIOSB.ROM BIOS for Atari 400/800 NTSC - Required a3e8d617c95d08031fe1b20d541434b2 Features \u00b6 Feature Supported Restart \u2715 Screenshots \u2714 Saves - States - Rewind \u2715 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats - Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Crop Overscan (in RetroArch's Video settings) \u2715 Directories \u00b6 The Atari800 core's directory name is 'Atari800' Atari800 config settings are saved/loaded to and from .atari800.cfg in RetroArch's home directory (where RetroArch.exe is in Windows). .atari800.cfg (Config) RetroArch.exe directory .atari800.cfg (config) .atari000.wav in exe directory (startup noise?) .atari000.pcx in exe directory (screenshot) Core provided aspect ratio \u00b6 Atari800's core provided aspect ratio is 4/3. Usage \u00b6 Make sure you have the appropriate system files in RetroArch's system directory. Then, load a content file. The Atari800 core should boot to the 'Atari Computer - Memo Pad' screen. The Atari800 core will generate a '.atari800.cfg' config file in RetroArch's home directory and will add the required BIOS files it detects in the system directory to the config file. Now you can manually select what Atari system you want to emulate through the 'Atari System' core option. Finally, you can load any content files compatible with the system chosen through RetroArch's Load Content menu. Attention You can set per-game core option settings by creating a game-options file through RetroArch's Core Opitons menu. Alternatively, you can manually configure how the Atari800 will look for and handle BIOS files. While the Atari800 core is running, you can press F1 to get into the internal emulator menu. There - emulator configuration, system rom settings. From there, You can go to the 'Emulator Configuration' section and then the System ROM settings section to configure BIOS options. (Press Enter to confirm menu selections and press Escape to go back a menu) Then press Escape a few times to go back to the 'Emulator Configuration' section and select Save Configuration File or alternatively change Save configuration file on exit from no to yes Then you can exit the emulator by pressing F9 and then try the game again or press Shift+F5 to reboot the game. Core options \u00b6 The Atari800 core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Atari System ( 400/800 (OS B) /800XL (64K)/130XE (128K)/5200) Choose what Atari System to emulate. Video Standard ( NTSC /PAL) Awaiting description. Internal BASIC (hold OPTION on boot) ( Off /On) Awaiting description. SIO Acceleration ( Off /On) Awaiting description. Boot from Cassette ( Off /On) Awaiting description. Hi-Res Artifacting ( Off /On) Awaiting description. Autodetect A5200 CartType ( Off /On) Awaiting description. Joy hack A5200 for robotron ( Off /On) Awaiting description. Internal resolution ( 336x240 /320x240/384x240/384x272/384x288/400x300) Awaiting description. Retroarch Keyboard type ( poll /callback) Awaiting description. Controllers \u00b6 Device types \u00b6 The Atari800 core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 - 2 device types \u00b6 None - Input disabled. RetroPad - Joypad - Don't use this, switch to ATARI Joystick for joypad usage. ATARI Joystick - Joypad ATARI Keyboard - Keyboard - For keyboard usage Controller tables \u00b6 Joypad and analog device type table \u00b6 User 1 Remap descriptors RetroPad Inputs ATARI Joystick B KEY RETURN Y VKBD ON/OFF Select CONSOL_SELECT Start CONSOL_START Up Up Down Down Left Left Right Right A FIRE1/KEY RETURN IN GUI X FIRE2/KEY ESCAPE IN GUI L CONSOLE_OPTION R TOGGLE_UI L2 KEY SPACE R2 KEY ESCAPE L3 R3 Keyboard device type table \u00b6 User # input descriptors ATARI Keyboard N/A Keyboard Numpad 2 Down N/A Keyboard Numpad 4 Left N/A Keyboard Numpad 6 Right N/A Keyboard Numpad 8 Up N/A Keyboard Up Up N/A Keyboard Down Down N/A Keyboard Right Right N/A Keyboard Left Left N/A Keyboard F1 Built in UI N/A Keyboard F2 Option key N/A Keyboard F3 Select key N/A Keyboard F4 Start key N/A Keyboard F5 Reset key N/A Keyboard F6 Help key (XL/XE only) N/A Keyboard F7 Break key N/A Keyboard F8 Enter monitor N/A Keyboard F9 Exit emulator N/A Keyboard F10 Save screenshot N/A Keyboard Right Control Fire N/A Keyboard Shift + F5 Reboot N/A Keyboard Shift + F10 Save interlaced screenshot N/A Keyboard Alt + R Run Atari program N/A Keyboard Alt + D Disk management N/A Keyboard Alt + C Cartridge management N/A Keyboard Alt + Y Select system N/A Keyboard Alt + O Sound settings N/A Keyboard Alt + W Sound recording start/stop N/A Keyboard Alt + S Save state file N/A Keyboard Alt + L Load state file N/A Keyboard Alt + A About the emulator External Links \u00b6 Libretro Atari800 Core info file Libretro Atari800 Github Repository Report Libretro Atari800 Core Issues Here Official Atari800 Website Official Atari800 Github Repository","title":"Atari - 5200 (Atari800)"},{"location":"library/atari800/#atari-8-bit-computer-systems-and-5200-atari800","text":"","title":"Atari 8-bit computer systems and 5200 (Atari800)"},{"location":"library/atari800/#contribute-to-this-documentation","text":"In order to propose improvements to this document, visit its corresponding source page on github . Changes are proposed using \"Pull Requests.\"","title":"Contribute to this documentation"},{"location":"library/atari800/#background","text":"Atari 8-bit computer systems (400, 800, 600 XL, 800XL, 130XE) and 5200 game console emulator.","title":"Background"},{"location":"library/atari800/#how-to-get-and-install-the-atari800-core","text":"Start up RetroArch. Inside the main menu, go to 'Online Updater'. Just to make sure we have the latest info files, select 'Update Core Info FIles'. Wait until this is done. Then, select 'Core Updater'. Browse through the list and select 'Atari 8-bit computer systems and 5200 (Atari800)'. After this has finished downloading, the core should now be ready for use!","title":"How to get and install the Atari800 core:"},{"location":"library/atari800/#how-to-play-after-installation","text":"Go back to RetroArch's main menu screen. Select 'Load Content'. Browse to the folder that contains the content you want to run. Select the content that you want to run. If you are asked which core to select, choose 'Atari 8-bit computer systems and 5200 (Atari800)'. The game should now start running!","title":"How to play (after installation):"},{"location":"library/atari800/#authors","text":"Petr Stehlik","title":"Authors"},{"location":"library/atari800/#see-also","text":"Awaiting description.","title":"See also"},{"location":"library/atari800/#license","text":"A summary of the licenses behind RetroArch and its cores can be found here . GPLv2","title":"License"},{"location":"library/atari800/#extensions","text":"Content that can be loaded by the Atari800 core have the following file extensions: .xfd .atr .atx .cdm .cas .bin .a52 .xex .zip","title":"Extensions"},{"location":"library/atari800/#databases","text":"RetroArch database(s) that are associated with the Atari800 core: Atari - 5200","title":"Databases"},{"location":"library/atari800/#bios","text":"Required or optional firmware files go in RetroArch's system directory. Filename Description md5sum 5200.rom 5200 BIOS - Required 281f20ea4320404ec820fb7ec0693b38 ATARIXL.ROM Atari XL/XE OS BIOS - Required 06daac977823773a3eea3422fd26a703 ATARIBAS.ROM BASIC interpreter BIOS - Required 0bac0c6a50104045d902df4503a4c30b ATARIOSA.ROM Atari 400/800 PAL BIOS - Required eb1f32f5d9f382db1bbfb8d7f9cb343a ATARIOSB.ROM BIOS for Atari 400/800 NTSC - Required a3e8d617c95d08031fe1b20d541434b2","title":"BIOS"},{"location":"library/atari800/#features","text":"Feature Supported Restart \u2715 Screenshots \u2714 Saves - States - Rewind \u2715 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats - Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Crop Overscan (in RetroArch's Video settings) \u2715","title":"Features"},{"location":"library/atari800/#directories","text":"The Atari800 core's directory name is 'Atari800' Atari800 config settings are saved/loaded to and from .atari800.cfg in RetroArch's home directory (where RetroArch.exe is in Windows). .atari800.cfg (Config) RetroArch.exe directory .atari800.cfg (config) .atari000.wav in exe directory (startup noise?) .atari000.pcx in exe directory (screenshot)","title":"Directories"},{"location":"library/atari800/#core-provided-aspect-ratio","text":"Atari800's core provided aspect ratio is 4/3.","title":"Core provided aspect ratio"},{"location":"library/atari800/#usage","text":"Make sure you have the appropriate system files in RetroArch's system directory. Then, load a content file. The Atari800 core should boot to the 'Atari Computer - Memo Pad' screen. The Atari800 core will generate a '.atari800.cfg' config file in RetroArch's home directory and will add the required BIOS files it detects in the system directory to the config file. Now you can manually select what Atari system you want to emulate through the 'Atari System' core option. Finally, you can load any content files compatible with the system chosen through RetroArch's Load Content menu. Attention You can set per-game core option settings by creating a game-options file through RetroArch's Core Opitons menu. Alternatively, you can manually configure how the Atari800 will look for and handle BIOS files. While the Atari800 core is running, you can press F1 to get into the internal emulator menu. There - emulator configuration, system rom settings. From there, You can go to the 'Emulator Configuration' section and then the System ROM settings section to configure BIOS options. (Press Enter to confirm menu selections and press Escape to go back a menu) Then press Escape a few times to go back to the 'Emulator Configuration' section and select Save Configuration File or alternatively change Save configuration file on exit from no to yes Then you can exit the emulator by pressing F9 and then try the game again or press Shift+F5 to reboot the game.","title":"Usage"},{"location":"library/atari800/#core-options","text":"The Atari800 core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Atari System ( 400/800 (OS B) /800XL (64K)/130XE (128K)/5200) Choose what Atari System to emulate. Video Standard ( NTSC /PAL) Awaiting description. Internal BASIC (hold OPTION on boot) ( Off /On) Awaiting description. SIO Acceleration ( Off /On) Awaiting description. Boot from Cassette ( Off /On) Awaiting description. Hi-Res Artifacting ( Off /On) Awaiting description. Autodetect A5200 CartType ( Off /On) Awaiting description. Joy hack A5200 for robotron ( Off /On) Awaiting description. Internal resolution ( 336x240 /320x240/384x240/384x272/384x288/400x300) Awaiting description. Retroarch Keyboard type ( poll /callback) Awaiting description.","title":"Core options"},{"location":"library/atari800/#controllers","text":"","title":"Controllers"},{"location":"library/atari800/#device-types","text":"The Atari800 core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Device types"},{"location":"library/atari800/#user-1-2-device-types","text":"None - Input disabled. RetroPad - Joypad - Don't use this, switch to ATARI Joystick for joypad usage. ATARI Joystick - Joypad ATARI Keyboard - Keyboard - For keyboard usage","title":"User 1 - 2 device types"},{"location":"library/atari800/#controller-tables","text":"","title":"Controller tables"},{"location":"library/atari800/#joypad-and-analog-device-type-table","text":"User 1 Remap descriptors RetroPad Inputs ATARI Joystick B KEY RETURN Y VKBD ON/OFF Select CONSOL_SELECT Start CONSOL_START Up Up Down Down Left Left Right Right A FIRE1/KEY RETURN IN GUI X FIRE2/KEY ESCAPE IN GUI L CONSOLE_OPTION R TOGGLE_UI L2 KEY SPACE R2 KEY ESCAPE L3 R3","title":"Joypad and analog device type table"},{"location":"library/atari800/#keyboard-device-type-table","text":"User # input descriptors ATARI Keyboard N/A Keyboard Numpad 2 Down N/A Keyboard Numpad 4 Left N/A Keyboard Numpad 6 Right N/A Keyboard Numpad 8 Up N/A Keyboard Up Up N/A Keyboard Down Down N/A Keyboard Right Right N/A Keyboard Left Left N/A Keyboard F1 Built in UI N/A Keyboard F2 Option key N/A Keyboard F3 Select key N/A Keyboard F4 Start key N/A Keyboard F5 Reset key N/A Keyboard F6 Help key (XL/XE only) N/A Keyboard F7 Break key N/A Keyboard F8 Enter monitor N/A Keyboard F9 Exit emulator N/A Keyboard F10 Save screenshot N/A Keyboard Right Control Fire N/A Keyboard Shift + F5 Reboot N/A Keyboard Shift + F10 Save interlaced screenshot N/A Keyboard Alt + R Run Atari program N/A Keyboard Alt + D Disk management N/A Keyboard Alt + C Cartridge management N/A Keyboard Alt + Y Select system N/A Keyboard Alt + O Sound settings N/A Keyboard Alt + W Sound recording start/stop N/A Keyboard Alt + S Save state file N/A Keyboard Alt + L Load state file N/A Keyboard Alt + A About the emulator","title":"Keyboard device type table"},{"location":"library/atari800/#external-links","text":"Libretro Atari800 Core info file Libretro Atari800 Github Repository Report Libretro Atari800 Core Issues Here Official Atari800 Website Official Atari800 Github Repository","title":"External Links"},{"location":"library/beetle_bsnes/","text":"Nintendo - SNES / Famicom (Beetle bsnes) \u00b6 Background \u00b6 Standalone port of Mednafen bSNES to libretro, itself a old fork of bsnes 0.59. This core exists as a side effect of porting/forking mednafen for its other cores in the past. There's no reason to use this core now that there's other more compatible and faster SNES cores. Author/License \u00b6 The Beetle bsnes core has been authored by byuu Mednafen Team The Beetle bsnes core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the Beetle bsnes core have the following file extensions: .smc .fig .bs .st .sfc Databases \u00b6 RetroArch database(s) that are associated with the Beetle bsnes core: Nintendo - Super Nintendo Entertainment System Nintendo - Super Nintendo Entertainment System Hacks Nintendo - Sufami Turbo Features \u00b6 Frontend-level settings or features that the Beetle bsnes core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2715 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2714 LEDs \u2715 Directories \u00b6 The Beetle bsnes core's internal core name is 'Mednafen bSNES' The Beetle bsnes core saves/loads to/from these directories. Frontend's Save directory 'content-name'.srm (Cartridge battery save) 'content-name'.rtc (Real time clock save) Frontend's State directory 'content-name'.state# (State) Geometry and timing \u00b6 The Beetle bsnes core's core provided FPS is 60.10 The Beetle bsnes core's core provided sample rate is 44100 Hz The Beetle bsnes core's core provided aspect ratio is 4/3 Controllers \u00b6 The Beetle bsnes core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 - 2 device types \u00b6 None - Doesn't disable input RetroPad - Joypad RetroPad w/Analog - Joypad - There's no reason to switch to this. Controller tables \u00b6 Joypad \u00b6 RetroPad Inputs Beetle bsnes Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R External Links \u00b6 Official Mednafen Website Official Mednafen Downloads Libretro Beetle bsnes Core info file Libretro Beetle bsnes Github Repository Report Libretro Beetle bsnes Core Issues Here See also \u00b6 Nintendo - Sufami Turbo \u00b6 Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2005) Nintendo - SNES / Famicom (Snes9x 2010) Nintendo - Super Nintendo Entertainment System (+Hacks) \u00b6 Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (nSide Balanced) Nintendo - SNES / Famicom (Mesen-S) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2005) Nintendo - SNES / Famicom (Snes9x 2010)","title":"Nintendo - SNES / Famicom (Beetle bsnes)"},{"location":"library/beetle_bsnes/#nintendo-snes-famicom-beetle-bsnes","text":"","title":"Nintendo - SNES / Famicom (Beetle bsnes)"},{"location":"library/beetle_bsnes/#background","text":"Standalone port of Mednafen bSNES to libretro, itself a old fork of bsnes 0.59. This core exists as a side effect of porting/forking mednafen for its other cores in the past. There's no reason to use this core now that there's other more compatible and faster SNES cores.","title":"Background"},{"location":"library/beetle_bsnes/#authorlicense","text":"The Beetle bsnes core has been authored by byuu Mednafen Team The Beetle bsnes core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/beetle_bsnes/#extensions","text":"Content that can be loaded by the Beetle bsnes core have the following file extensions: .smc .fig .bs .st .sfc","title":"Extensions"},{"location":"library/beetle_bsnes/#databases","text":"RetroArch database(s) that are associated with the Beetle bsnes core: Nintendo - Super Nintendo Entertainment System Nintendo - Super Nintendo Entertainment System Hacks Nintendo - Sufami Turbo","title":"Databases"},{"location":"library/beetle_bsnes/#features","text":"Frontend-level settings or features that the Beetle bsnes core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2715 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2714 LEDs \u2715","title":"Features"},{"location":"library/beetle_bsnes/#directories","text":"The Beetle bsnes core's internal core name is 'Mednafen bSNES' The Beetle bsnes core saves/loads to/from these directories. Frontend's Save directory 'content-name'.srm (Cartridge battery save) 'content-name'.rtc (Real time clock save) Frontend's State directory 'content-name'.state# (State)","title":"Directories"},{"location":"library/beetle_bsnes/#geometry-and-timing","text":"The Beetle bsnes core's core provided FPS is 60.10 The Beetle bsnes core's core provided sample rate is 44100 Hz The Beetle bsnes core's core provided aspect ratio is 4/3","title":"Geometry and timing"},{"location":"library/beetle_bsnes/#controllers","text":"The Beetle bsnes core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/beetle_bsnes/#user-1-2-device-types","text":"None - Doesn't disable input RetroPad - Joypad RetroPad w/Analog - Joypad - There's no reason to switch to this.","title":"User 1 - 2 device types"},{"location":"library/beetle_bsnes/#controller-tables","text":"","title":"Controller tables"},{"location":"library/beetle_bsnes/#joypad","text":"RetroPad Inputs Beetle bsnes Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R","title":"Joypad"},{"location":"library/beetle_bsnes/#external-links","text":"Official Mednafen Website Official Mednafen Downloads Libretro Beetle bsnes Core info file Libretro Beetle bsnes Github Repository Report Libretro Beetle bsnes Core Issues Here","title":"External Links"},{"location":"library/beetle_bsnes/#see-also","text":"","title":"See also"},{"location":"library/beetle_bsnes/#nintendo-sufami-turbo","text":"Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2005) Nintendo - SNES / Famicom (Snes9x 2010)","title":"Nintendo - Sufami Turbo"},{"location":"library/beetle_bsnes/#nintendo-super-nintendo-entertainment-system-hacks","text":"Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (nSide Balanced) Nintendo - SNES / Famicom (Mesen-S) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2005) Nintendo - SNES / Famicom (Snes9x 2010)","title":"Nintendo - Super Nintendo Entertainment System (+Hacks)"},{"location":"library/beetle_cygne/","text":"Bandai - WonderSwan/Color (Beetle Cygne) \u00b6 Background \u00b6 Standalone port of Mednafen WonderSwan to libretro, itself a fork of Cygne. Author/License \u00b6 The Beetle Cygne core has been authored by Dox Mednafen Team The Beetle Cygne core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the Beetle Cygne core have the following file extensions: .ws .wsc .pc2 (Benesse Pocket Challenge v2 files) Databases \u00b6 RetroArch database(s) that are associated with the Beetle Cygne core: Bandai - WonderSwan Bandai - WonderSwan Color Features \u00b6 Frontend-level settings or features that the Beetle Cygne core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 (not link-cable emulation) Core Options \u2715 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The Beetle Cygne core's internal core name is 'Beetle WonderSwan' The Beetle Cygne core saves/loads to/from these directories. Frontend's Save directory 'content-name'.srm (Cartridge backup save) Frontend's State directory 'content-name'.state# (State) Geometry and timing \u00b6 The Beetle Cygne core's core provided FPS is 75.47 The Beetle Cygne core's core provided sample rate is 44100 Hz The Beetle Cygne core's core provided aspect ratio is 14/9 Controllers \u00b6 The Beetle Cygne core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 device types \u00b6 None - Doesn't disable input. RetroPad - Joypad RetroPad w/Analog - There is no reason to switch to this. Controller tables \u00b6 Joypad \u00b6 User 1 Remap descriptors RetroPad Inputs B Rotate screen + active D-Pad Start X Cursor Up X Cursor Down X Cursor Left X Cursor Right A Y Cursor Left Y Cursor Right Y Cursor Down Y Cursor Up Compatibility \u00b6 Game Issue Tonpuusou Title screen announcer voice missing. Softlocks after picking a menu option. External Links \u00b6 Official Mednafen Website Official Mednafen Downloads Libretro Beetle Cygne Core info file Libretro Beetle Cygne Github Repository Report Libretro Beetle Cygne Core Issues Here","title":"Bandai - WonderSwan/Color (Beetle Cygne)"},{"location":"library/beetle_cygne/#bandai-wonderswancolor-beetle-cygne","text":"","title":"Bandai - WonderSwan/Color (Beetle Cygne)"},{"location":"library/beetle_cygne/#background","text":"Standalone port of Mednafen WonderSwan to libretro, itself a fork of Cygne.","title":"Background"},{"location":"library/beetle_cygne/#authorlicense","text":"The Beetle Cygne core has been authored by Dox Mednafen Team The Beetle Cygne core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/beetle_cygne/#extensions","text":"Content that can be loaded by the Beetle Cygne core have the following file extensions: .ws .wsc .pc2 (Benesse Pocket Challenge v2 files)","title":"Extensions"},{"location":"library/beetle_cygne/#databases","text":"RetroArch database(s) that are associated with the Beetle Cygne core: Bandai - WonderSwan Bandai - WonderSwan Color","title":"Databases"},{"location":"library/beetle_cygne/#features","text":"Frontend-level settings or features that the Beetle Cygne core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 (not link-cable emulation) Core Options \u2715 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/beetle_cygne/#directories","text":"The Beetle Cygne core's internal core name is 'Beetle WonderSwan' The Beetle Cygne core saves/loads to/from these directories. Frontend's Save directory 'content-name'.srm (Cartridge backup save) Frontend's State directory 'content-name'.state# (State)","title":"Directories"},{"location":"library/beetle_cygne/#geometry-and-timing","text":"The Beetle Cygne core's core provided FPS is 75.47 The Beetle Cygne core's core provided sample rate is 44100 Hz The Beetle Cygne core's core provided aspect ratio is 14/9","title":"Geometry and timing"},{"location":"library/beetle_cygne/#controllers","text":"The Beetle Cygne core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/beetle_cygne/#user-1-device-types","text":"None - Doesn't disable input. RetroPad - Joypad RetroPad w/Analog - There is no reason to switch to this.","title":"User 1 device types"},{"location":"library/beetle_cygne/#controller-tables","text":"","title":"Controller tables"},{"location":"library/beetle_cygne/#joypad","text":"User 1 Remap descriptors RetroPad Inputs B Rotate screen + active D-Pad Start X Cursor Up X Cursor Down X Cursor Left X Cursor Right A Y Cursor Left Y Cursor Right Y Cursor Down Y Cursor Up","title":"Joypad"},{"location":"library/beetle_cygne/#compatibility","text":"Game Issue Tonpuusou Title screen announcer voice missing. Softlocks after picking a menu option.","title":"Compatibility"},{"location":"library/beetle_cygne/#external-links","text":"Official Mednafen Website Official Mednafen Downloads Libretro Beetle Cygne Core info file Libretro Beetle Cygne Github Repository Report Libretro Beetle Cygne Core Issues Here","title":"External Links"},{"location":"library/beetle_gba/","text":"Nintendo - Game Boy Advance (Beetle GBA) \u00b6 Background \u00b6 Standalone port of Mednafen GBA to libretro, itself a fork of VBA-M, itself a fork of Visual Boy Advance. Author/License \u00b6 The Beetle GBA core has been authored by Forgotten Mednafen Team The Beetle GBA core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the Beetle GBA core have the following file extensions: .gba .agb .bin Databases \u00b6 RetroArch database(s) that are associated with the Beetle GBA core: Nintendo - Game Boy Advance BIOS \u00b6 Required or optional firmware files go in the frontend's system directory. Filename Description md5sum gba_bios.bin Game Boy Advance BIOS - Optional a860e8c0b6d573d191e4ec7db1b1e4f6 Features \u00b6 Frontend-level settings or features that the Beetle GBA core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2714 LEDs \u2715 Directories \u00b6 The Beetle GBA core's internal core name is 'Beetle GBA' The Beetle GBA core saves/loads to/from these directories. Frontend's Save directory 'content-name'.'ROM MD5'.sav (SRAM) 'content-name'.'ROM MD5'.eep (EEPROM) Frontend's State directory 'content-name'.state# (State) Geometry and timing \u00b6 The Beetle GBA core's core provided FPS is 59.73 The Beetle GBA core's core provided sample rate is 44100 Hz The Beetle GBA core's core provided aspect ratio is 3/2 Core options \u00b6 The Beetle GBA core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. HLE bios emulation [gba_hle] ( enabled /disabled) Self-explanatory. When set to off, a Game Boy Advance BIOS is required. Controllers \u00b6 The Beetle GBA core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 device types \u00b6 None - Doesn't disable input. RetroPad - Joypad RetroPad w/Analog - Joypad - There's no reason to switch to this. Controller tables \u00b6 Joypad \u00b6 User 1 Remap descriptors RetroPad Inputs B Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A L R External Links \u00b6 Official Mednafen Website Official Mednafen Downloads Libretro Beetle GBA Core info file Libretro Beetle GBA Github Repository Report Libretro Beetle GBA Core Issues Here See also \u00b6 Nintendo - Game Boy Advance \u00b6 Nintendo - Game Boy Advance (gpSP) Nintendo - Game Boy Advance (Meteor) Nintendo - Game Boy Advance (mGBA) Nintendo - Game Boy Advance (TempGBA) Nintendo - Game Boy Advance (VBA-M) Nintendo - Game Boy Advance (VBA Next)","title":"Nintendo - Game Boy Advance (Beetle GBA)"},{"location":"library/beetle_gba/#nintendo-game-boy-advance-beetle-gba","text":"","title":"Nintendo - Game Boy Advance (Beetle GBA)"},{"location":"library/beetle_gba/#background","text":"Standalone port of Mednafen GBA to libretro, itself a fork of VBA-M, itself a fork of Visual Boy Advance.","title":"Background"},{"location":"library/beetle_gba/#authorlicense","text":"The Beetle GBA core has been authored by Forgotten Mednafen Team The Beetle GBA core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/beetle_gba/#extensions","text":"Content that can be loaded by the Beetle GBA core have the following file extensions: .gba .agb .bin","title":"Extensions"},{"location":"library/beetle_gba/#databases","text":"RetroArch database(s) that are associated with the Beetle GBA core: Nintendo - Game Boy Advance","title":"Databases"},{"location":"library/beetle_gba/#bios","text":"Required or optional firmware files go in the frontend's system directory. Filename Description md5sum gba_bios.bin Game Boy Advance BIOS - Optional a860e8c0b6d573d191e4ec7db1b1e4f6","title":"BIOS"},{"location":"library/beetle_gba/#features","text":"Frontend-level settings or features that the Beetle GBA core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2714 LEDs \u2715","title":"Features"},{"location":"library/beetle_gba/#directories","text":"The Beetle GBA core's internal core name is 'Beetle GBA' The Beetle GBA core saves/loads to/from these directories. Frontend's Save directory 'content-name'.'ROM MD5'.sav (SRAM) 'content-name'.'ROM MD5'.eep (EEPROM) Frontend's State directory 'content-name'.state# (State)","title":"Directories"},{"location":"library/beetle_gba/#geometry-and-timing","text":"The Beetle GBA core's core provided FPS is 59.73 The Beetle GBA core's core provided sample rate is 44100 Hz The Beetle GBA core's core provided aspect ratio is 3/2","title":"Geometry and timing"},{"location":"library/beetle_gba/#core-options","text":"The Beetle GBA core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. HLE bios emulation [gba_hle] ( enabled /disabled) Self-explanatory. When set to off, a Game Boy Advance BIOS is required.","title":"Core options"},{"location":"library/beetle_gba/#controllers","text":"The Beetle GBA core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/beetle_gba/#user-1-device-types","text":"None - Doesn't disable input. RetroPad - Joypad RetroPad w/Analog - Joypad - There's no reason to switch to this.","title":"User 1 device types"},{"location":"library/beetle_gba/#controller-tables","text":"","title":"Controller tables"},{"location":"library/beetle_gba/#joypad","text":"User 1 Remap descriptors RetroPad Inputs B Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A L R","title":"Joypad"},{"location":"library/beetle_gba/#external-links","text":"Official Mednafen Website Official Mednafen Downloads Libretro Beetle GBA Core info file Libretro Beetle GBA Github Repository Report Libretro Beetle GBA Core Issues Here","title":"External Links"},{"location":"library/beetle_gba/#see-also","text":"","title":"See also"},{"location":"library/beetle_gba/#nintendo-game-boy-advance","text":"Nintendo - Game Boy Advance (gpSP) Nintendo - Game Boy Advance (Meteor) Nintendo - Game Boy Advance (mGBA) Nintendo - Game Boy Advance (TempGBA) Nintendo - Game Boy Advance (VBA-M) Nintendo - Game Boy Advance (VBA Next)","title":"Nintendo - Game Boy Advance"},{"location":"library/beetle_lynx/","text":"Atari - Lynx (Beetle Lynx) \u00b6 Background \u00b6 Beetle Lynx is an Atari Lynx video game system emulator that can be used as a libretro core. Specifically it's a port of Mednafen Lynx which is a fork of Handy. Author/License \u00b6 The Beetle Lynx core has been authored by K. Wilkins Mednafen Team The Beetle Lynx core is licensed under zlib , GPLv2 A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the Beetle Lynx core have the following file extensions: .lnx .o Databases \u00b6 RetroArch database(s) that are associated with the Beetle Lynx core: Atari - Lynx BIOS \u00b6 Required or optional firmware files go in the frontend's system directory. Filename Description md5sum lynxboot.img Lynx Boot Image - Required fcd403db69f54290b51035d82f835e7b Features \u00b6 Frontend-level settings or features that the Beetle Lynx core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2715 States \u2714 Rewind \u2714 Netplay (State based) \u2714 (not link-cable emulation) Core Options \u2714 RetroAchievements \u2714 Cheats (Cheats menu) \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2714 LEDs \u2715 Directories \u00b6 The Beetle Lynx core's directory name is 'Beetle Lynx' The Beetle Lynx core saves/loads to/from these directories. Frontend's State directory 'content-name'.state# (State) Geometry and timing \u00b6 The Beetle Lynx core's core provided FPS is 75 The Beetle Lynx core's core provided sample rate is 44100 Hz The Beetle Lynx core's core provided aspect ratio is 80/51 Loading content \u00b6 Beetle Lynx supports Lynx headered roms and non-headered roms. It also supports homebrews in *.o extensions. Core options \u00b6 The Beetle Lynx core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Auto-rotate Screen [lynx_rot_screen] ( enabled /disabled) Virtually rotates the screen orientation and keymaps automatically for known games. When disabled, screen rotation is manually adjusted by pressing the SELECT button. Controllers \u00b6 The Beetle Lynx core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 device types \u00b6 None - Doesn't disable input. RetroPad - Joypad RetroPad w/Analog - Joypad - There's no reason to switch to this. Controller tables \u00b6 Joypad \u00b6 User 1 Remap descriptors RetroPad Inputs Beetle Lynx core inputs B Pause D-Pad Up D-Pad Down D-Pad Left D-Pad Right A Option 1 Option 2 Supported combinations Option 1 + Pause = Flips Screen Option 2 + Pause = Restarts game Compatibility \u00b6 Game Issue RoadBlasters Graphics glitches. Minor flickering and glitches after starting a race. External Links \u00b6 Official Mednafen Website Official Mednafen Downloads Libretro Beetle Lynx Core info file Libretro Beetle Lynx Github Repository Report Libretro Beetle Lynx Core Issues Here See also \u00b6 Atari - Lynx \u00b6 Atari - Lynx (Handy)","title":"Atari - Lynx (Beetle Lynx)"},{"location":"library/beetle_lynx/#atari-lynx-beetle-lynx","text":"","title":"Atari - Lynx (Beetle Lynx)"},{"location":"library/beetle_lynx/#background","text":"Beetle Lynx is an Atari Lynx video game system emulator that can be used as a libretro core. Specifically it's a port of Mednafen Lynx which is a fork of Handy.","title":"Background"},{"location":"library/beetle_lynx/#authorlicense","text":"The Beetle Lynx core has been authored by K. Wilkins Mednafen Team The Beetle Lynx core is licensed under zlib , GPLv2 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/beetle_lynx/#extensions","text":"Content that can be loaded by the Beetle Lynx core have the following file extensions: .lnx .o","title":"Extensions"},{"location":"library/beetle_lynx/#databases","text":"RetroArch database(s) that are associated with the Beetle Lynx core: Atari - Lynx","title":"Databases"},{"location":"library/beetle_lynx/#bios","text":"Required or optional firmware files go in the frontend's system directory. Filename Description md5sum lynxboot.img Lynx Boot Image - Required fcd403db69f54290b51035d82f835e7b","title":"BIOS"},{"location":"library/beetle_lynx/#features","text":"Frontend-level settings or features that the Beetle Lynx core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2715 States \u2714 Rewind \u2714 Netplay (State based) \u2714 (not link-cable emulation) Core Options \u2714 RetroAchievements \u2714 Cheats (Cheats menu) \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2714 LEDs \u2715","title":"Features"},{"location":"library/beetle_lynx/#directories","text":"The Beetle Lynx core's directory name is 'Beetle Lynx' The Beetle Lynx core saves/loads to/from these directories. Frontend's State directory 'content-name'.state# (State)","title":"Directories"},{"location":"library/beetle_lynx/#geometry-and-timing","text":"The Beetle Lynx core's core provided FPS is 75 The Beetle Lynx core's core provided sample rate is 44100 Hz The Beetle Lynx core's core provided aspect ratio is 80/51","title":"Geometry and timing"},{"location":"library/beetle_lynx/#loading-content","text":"Beetle Lynx supports Lynx headered roms and non-headered roms. It also supports homebrews in *.o extensions.","title":"Loading content"},{"location":"library/beetle_lynx/#core-options","text":"The Beetle Lynx core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Auto-rotate Screen [lynx_rot_screen] ( enabled /disabled) Virtually rotates the screen orientation and keymaps automatically for known games. When disabled, screen rotation is manually adjusted by pressing the SELECT button.","title":"Core options"},{"location":"library/beetle_lynx/#controllers","text":"The Beetle Lynx core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/beetle_lynx/#user-1-device-types","text":"None - Doesn't disable input. RetroPad - Joypad RetroPad w/Analog - Joypad - There's no reason to switch to this.","title":"User 1 device types"},{"location":"library/beetle_lynx/#controller-tables","text":"","title":"Controller tables"},{"location":"library/beetle_lynx/#joypad","text":"User 1 Remap descriptors RetroPad Inputs Beetle Lynx core inputs B Pause D-Pad Up D-Pad Down D-Pad Left D-Pad Right A Option 1 Option 2 Supported combinations Option 1 + Pause = Flips Screen Option 2 + Pause = Restarts game","title":"Joypad"},{"location":"library/beetle_lynx/#compatibility","text":"Game Issue RoadBlasters Graphics glitches. Minor flickering and glitches after starting a race.","title":"Compatibility"},{"location":"library/beetle_lynx/#external-links","text":"Official Mednafen Website Official Mednafen Downloads Libretro Beetle Lynx Core info file Libretro Beetle Lynx Github Repository Report Libretro Beetle Lynx Core Issues Here","title":"External Links"},{"location":"library/beetle_lynx/#see-also","text":"","title":"See also"},{"location":"library/beetle_lynx/#atari-lynx","text":"Atari - Lynx (Handy)","title":"Atari - Lynx"},{"location":"library/beetle_neopop/","text":"SNK - Neo Geo Pocket / Color (Beetle NeoPop) \u00b6 Background \u00b6 Beetle/Mednafen NGP is a SNK Neo Geo Pocket (Color) video game system emulator based on NeoPop. Author/License \u00b6 The Beetle NeoPop core has been authored by neopop_uk Mednafen Team The Beetle NeoPop core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the Beetle NeoPop core have the following file extensions: .ngp .ngc Databases \u00b6 RetroArch database(s) that are associated with the Beetle Neopop core: SNK - Neo Geo Pocket SNK - Neo Geo Pocket Color Features \u00b6 Frontend-level settings or features that the Beetle NeoPop core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 (not link-cable emulation) Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The Beetle NeoPop core's internal core name is 'Beetle NeoPop' The Beetle NeoPop core saves/loads to/from these directories. Frontend's Save directory 'content-name'.flash (Cartrtidge battery save) Frontend's State directory 'content-name'.state# (State) Geometry and timing \u00b6 The Beetle NeoPop core's core provided FPS is 60 The Beetle NeoPop core's core provided sample rate is 44100 Hz The Beetle NeoPop core's core provided aspect ratio is 20/19 Core options \u00b6 The Beetle NeoPop core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Language (restart) [ngp_language] ( english /japanese) Choose the system language of the BIOS. Controllers \u00b6 The Beetle NeoPop core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 device types \u00b6 None - Doesn't disable input. RetroPad - Joypad RetroPad w/Analog - Joypad - There's no reason to switch to this. Controller tables \u00b6 Joypad \u00b6 User 1 Remap descriptors RetroPad Inputs A Option D-Pad Up D-Pad Down D-Pad Left D-Pad Right B External Links \u00b6 Official Mednafen Website Official Mednafen Downloads Libretro Beetle NeoPop Core info file Libretro Beetle NeoPop Github Repository Report Libretro Beetle NeoPop Core Issues Here","title":"SNK - Neo Geo Pocket / Color (Beetle NeoPop)"},{"location":"library/beetle_neopop/#snk-neo-geo-pocket-color-beetle-neopop","text":"","title":"SNK - Neo Geo Pocket / Color (Beetle NeoPop)"},{"location":"library/beetle_neopop/#background","text":"Beetle/Mednafen NGP is a SNK Neo Geo Pocket (Color) video game system emulator based on NeoPop.","title":"Background"},{"location":"library/beetle_neopop/#authorlicense","text":"The Beetle NeoPop core has been authored by neopop_uk Mednafen Team The Beetle NeoPop core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/beetle_neopop/#extensions","text":"Content that can be loaded by the Beetle NeoPop core have the following file extensions: .ngp .ngc","title":"Extensions"},{"location":"library/beetle_neopop/#databases","text":"RetroArch database(s) that are associated with the Beetle Neopop core: SNK - Neo Geo Pocket SNK - Neo Geo Pocket Color","title":"Databases"},{"location":"library/beetle_neopop/#features","text":"Frontend-level settings or features that the Beetle NeoPop core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 (not link-cable emulation) Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/beetle_neopop/#directories","text":"The Beetle NeoPop core's internal core name is 'Beetle NeoPop' The Beetle NeoPop core saves/loads to/from these directories. Frontend's Save directory 'content-name'.flash (Cartrtidge battery save) Frontend's State directory 'content-name'.state# (State)","title":"Directories"},{"location":"library/beetle_neopop/#geometry-and-timing","text":"The Beetle NeoPop core's core provided FPS is 60 The Beetle NeoPop core's core provided sample rate is 44100 Hz The Beetle NeoPop core's core provided aspect ratio is 20/19","title":"Geometry and timing"},{"location":"library/beetle_neopop/#core-options","text":"The Beetle NeoPop core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Language (restart) [ngp_language] ( english /japanese) Choose the system language of the BIOS.","title":"Core options"},{"location":"library/beetle_neopop/#controllers","text":"The Beetle NeoPop core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/beetle_neopop/#user-1-device-types","text":"None - Doesn't disable input. RetroPad - Joypad RetroPad w/Analog - Joypad - There's no reason to switch to this.","title":"User 1 device types"},{"location":"library/beetle_neopop/#controller-tables","text":"","title":"Controller tables"},{"location":"library/beetle_neopop/#joypad","text":"User 1 Remap descriptors RetroPad Inputs A Option D-Pad Up D-Pad Down D-Pad Left D-Pad Right B","title":"Joypad"},{"location":"library/beetle_neopop/#external-links","text":"Official Mednafen Website Official Mednafen Downloads Libretro Beetle NeoPop Core info file Libretro Beetle NeoPop Github Repository Report Libretro Beetle NeoPop Core Issues Here","title":"External Links"},{"location":"library/beetle_pc_fx/","text":"NEC - PC-FX (Beetle PC-FX) \u00b6 Background \u00b6 Beetle PC-FX is a port of Mednafen PC-FX video game system emulator for the NEC PC-FX. Author/License \u00b6 The Beetle PC-FX core has been authored by Mednafen Team The Beetle PC-FX core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the Beetle PC-FX core have the following file extensions: .cue .ccd .toc .chd Databases \u00b6 RetroArch database(s) that are associated with the Beetle PC-FX core: NEC - PC-FX BIOS \u00b6 Required or optional firmware files go in the frontend's system directory. Filename Description md5sum pcfx.rom PC-FX BIOS v1.00 - 2 Sep 1994 - Required 08e36edbea28a017f79f8d4f7ff9b6d7 Features \u00b6 Frontend-level settings or features that the Beetle PC-FX core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2714 LEDs \u2715 Directories \u00b6 The Beetle PC-FX core's internal core name is 'Beetle PC-FX' The Beetle PC-FX core saves/loads to/from these directories. Frontend's Save directory 'content-name'.srm (Save) Frontend's State directory 'content-name-.state# (State) Geometry and timing \u00b6 The Beetle PC-FX core's core provided FPS is 60 The Beetle PC-FX core's core provided sample rate is 44100 Hz The Beetle PC-FX core's core provided aspect ratio is 4/3 Loading PC-FX content \u00b6 Beetle PC-FX needs a cue-sheet that points to an image file. A cue sheet, or cue file, is a metadata file which describes how the tracks of a CD or DVD are laid out. If you have e.g. foo.bin , you should create a text file and save it as foo.cue . If you're playing a single-track Saturn game, then the cue file contents should look like this: foobin.cue FILE \"foo.bin\" BINARY TRACK 01 MODE1/2352 INDEX 01 00:00:00 After that, you can load the foo.cue file in RetroArch with the Beetle PC-FX core. Attention Certain PC-FX games are multi-track, so their .cue files might be more complicated. Core options \u00b6 The Beetle PC-FX core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. High Dotclock Width (Restart) [pcfx_high_dotclock_width] ( 1024 /256/341) Emulated width for 7.16MHz dot-clock mode. Lower values are faster, but will cause some degree of pixel distortion. Suppress Channel Reset Clicks (Restart) [pcfx_suppress_channel_reset_clicks] ( enabled /disabled) Hack to suppress clicks caused by forced channel resets. Emulate Buggy Codec (Restart) [pcfx_emulate_buggy_codec] ( disabled /enabled) Hack that emulates the codec a buggy ADPCM encoder used for some games' ADPCM. Sound Quality (Restart) [pcfx_resamp_quality] ( 3 /\u2158/0/\u00bd) Higher values correspond to better SNR and better preservation of higher frequencies(\"brightness\"), at the cost of increased computational complexity and a negligible increase in latency. Chroma channel bilinear interpolation (Restart) [pcfx_rainbow_chromaip] ( disabled /enabled) Enable bilinear interpolation on the chroma channel of RAINBOW YUV output. Enabling it may cause graphical glitches with some games. No Sprite Limit (Restart) [pcfx_nospritelimit] ( disabled /enabled) Remove 16-sprites-per-scanline hardware limit. Initial scanline [pcfx_initial_scanline] ((0 to 40 in increments of 1. 4 is default .) Adjust first display scanline. Last scanline [pcfx_last_scanline] (208 to 238 in increments of 1. 235 is default .) Adjust last display scanline. Mouse Sensitivity [pcfx_mouse_sensitivity] (1.00 to 5.00 in increments of 0.25. 1.25 is default .) Configure the sensitivity of the 'PCFX Mouse' device type, Controllers \u00b6 The Beetle PC-FX core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 - 2 device types \u00b6 None - Doesn't disable input. PCFX Joypad - Joypad PCFX Mouse - Mouse Controller tables \u00b6 Joypad \u00b6 User 1 - 6 Remap descriptors RetroPad Inputs II IV Select Run D-Pad Up D-Pad Down D-Pad Left D-Pad Right I III V VI MODE 1 (Switch) MODE 2 (Switch) Mouse \u00b6 RetroMouse Inputs PCFX Mouse Mouse Cursor PCFX Mouse Cursor Mouse 1 PCFX Mouse Left Button Mouse 2 PCFX Mouse Right Button Compatibility \u00b6 Game Issue External Links \u00b6 Official Mednafen Website Official Mednafen Downloads Libretro Beetle PC-FX Core info file Libretro Beetle PC-FX Github Repository Report Libretro Beetle PC-FX Core Issues Here","title":"NEC - PC-FX (Beetle PC-FX)"},{"location":"library/beetle_pc_fx/#nec-pc-fx-beetle-pc-fx","text":"","title":"NEC - PC-FX (Beetle PC-FX)"},{"location":"library/beetle_pc_fx/#background","text":"Beetle PC-FX is a port of Mednafen PC-FX video game system emulator for the NEC PC-FX.","title":"Background"},{"location":"library/beetle_pc_fx/#authorlicense","text":"The Beetle PC-FX core has been authored by Mednafen Team The Beetle PC-FX core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/beetle_pc_fx/#extensions","text":"Content that can be loaded by the Beetle PC-FX core have the following file extensions: .cue .ccd .toc .chd","title":"Extensions"},{"location":"library/beetle_pc_fx/#databases","text":"RetroArch database(s) that are associated with the Beetle PC-FX core: NEC - PC-FX","title":"Databases"},{"location":"library/beetle_pc_fx/#bios","text":"Required or optional firmware files go in the frontend's system directory. Filename Description md5sum pcfx.rom PC-FX BIOS v1.00 - 2 Sep 1994 - Required 08e36edbea28a017f79f8d4f7ff9b6d7","title":"BIOS"},{"location":"library/beetle_pc_fx/#features","text":"Frontend-level settings or features that the Beetle PC-FX core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2714 LEDs \u2715","title":"Features"},{"location":"library/beetle_pc_fx/#directories","text":"The Beetle PC-FX core's internal core name is 'Beetle PC-FX' The Beetle PC-FX core saves/loads to/from these directories. Frontend's Save directory 'content-name'.srm (Save) Frontend's State directory 'content-name-.state# (State)","title":"Directories"},{"location":"library/beetle_pc_fx/#geometry-and-timing","text":"The Beetle PC-FX core's core provided FPS is 60 The Beetle PC-FX core's core provided sample rate is 44100 Hz The Beetle PC-FX core's core provided aspect ratio is 4/3","title":"Geometry and timing"},{"location":"library/beetle_pc_fx/#loading-pc-fx-content","text":"Beetle PC-FX needs a cue-sheet that points to an image file. A cue sheet, or cue file, is a metadata file which describes how the tracks of a CD or DVD are laid out. If you have e.g. foo.bin , you should create a text file and save it as foo.cue . If you're playing a single-track Saturn game, then the cue file contents should look like this: foobin.cue FILE \"foo.bin\" BINARY TRACK 01 MODE1/2352 INDEX 01 00:00:00 After that, you can load the foo.cue file in RetroArch with the Beetle PC-FX core. Attention Certain PC-FX games are multi-track, so their .cue files might be more complicated.","title":"Loading PC-FX content"},{"location":"library/beetle_pc_fx/#core-options","text":"The Beetle PC-FX core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. High Dotclock Width (Restart) [pcfx_high_dotclock_width] ( 1024 /256/341) Emulated width for 7.16MHz dot-clock mode. Lower values are faster, but will cause some degree of pixel distortion. Suppress Channel Reset Clicks (Restart) [pcfx_suppress_channel_reset_clicks] ( enabled /disabled) Hack to suppress clicks caused by forced channel resets. Emulate Buggy Codec (Restart) [pcfx_emulate_buggy_codec] ( disabled /enabled) Hack that emulates the codec a buggy ADPCM encoder used for some games' ADPCM. Sound Quality (Restart) [pcfx_resamp_quality] ( 3 /\u2158/0/\u00bd) Higher values correspond to better SNR and better preservation of higher frequencies(\"brightness\"), at the cost of increased computational complexity and a negligible increase in latency. Chroma channel bilinear interpolation (Restart) [pcfx_rainbow_chromaip] ( disabled /enabled) Enable bilinear interpolation on the chroma channel of RAINBOW YUV output. Enabling it may cause graphical glitches with some games. No Sprite Limit (Restart) [pcfx_nospritelimit] ( disabled /enabled) Remove 16-sprites-per-scanline hardware limit. Initial scanline [pcfx_initial_scanline] ((0 to 40 in increments of 1. 4 is default .) Adjust first display scanline. Last scanline [pcfx_last_scanline] (208 to 238 in increments of 1. 235 is default .) Adjust last display scanline. Mouse Sensitivity [pcfx_mouse_sensitivity] (1.00 to 5.00 in increments of 0.25. 1.25 is default .) Configure the sensitivity of the 'PCFX Mouse' device type,","title":"Core options"},{"location":"library/beetle_pc_fx/#controllers","text":"The Beetle PC-FX core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/beetle_pc_fx/#user-1-2-device-types","text":"None - Doesn't disable input. PCFX Joypad - Joypad PCFX Mouse - Mouse","title":"User 1 - 2 device types"},{"location":"library/beetle_pc_fx/#controller-tables","text":"","title":"Controller tables"},{"location":"library/beetle_pc_fx/#joypad","text":"User 1 - 6 Remap descriptors RetroPad Inputs II IV Select Run D-Pad Up D-Pad Down D-Pad Left D-Pad Right I III V VI MODE 1 (Switch) MODE 2 (Switch)","title":"Joypad"},{"location":"library/beetle_pc_fx/#mouse","text":"RetroMouse Inputs PCFX Mouse Mouse Cursor PCFX Mouse Cursor Mouse 1 PCFX Mouse Left Button Mouse 2 PCFX Mouse Right Button","title":"Mouse"},{"location":"library/beetle_pc_fx/#compatibility","text":"Game Issue","title":"Compatibility"},{"location":"library/beetle_pc_fx/#external-links","text":"Official Mednafen Website Official Mednafen Downloads Libretro Beetle PC-FX Core info file Libretro Beetle PC-FX Github Repository Report Libretro Beetle PC-FX Core Issues Here","title":"External Links"},{"location":"library/beetle_pce_fast/","text":"NEC - PC Engine / CD (Beetle PCE FAST) \u00b6 Background \u00b6 Beetle/Mednafen PCE FAST is a libretro port of Mednafen PCE Fast with the PC Engine SuperGrafx module removed. The Beetle PCE FAST core has been authored by Mednafen Team The Beetle PCE FAST core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here . BIOS \u00b6 Required or optional firmware files go in RetroArch's system directory. Which PCE CD BIOS file the Beetle PCE FAST core will use can be configured by the 'CD BIOS' core option . Any CD-ROM System BIOS will work, but some of them are known to be incompatible with certain games. Filename Description md5sum syscard3.pce Super CD-ROM2 System V3.xx - Required 38179df8f4ac870017db21ebcbf53114 syscard2.pce CD-ROM System V2.xx - Optional syscard1.pce CD-ROM System V1.xx - Optional gexpress.pce Game Express CD Card - Optional Extensions \u00b6 Content that can be loaded by the Beetle PCE FAST core have the following file extensions: .pce .cue .ccd .iso .img .bin .chd RetroArch database(s) that are associated with the [Core name] core: NEC - PC Engine - TurboGrafx 16 NEC - PC Engine CD - TurboGrafx-CD Features \u00b6 Frontend-level settings or features that the Beetle PCE FAST core respects. Feature Supported Restart \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The Beetle PCE FAST core's library name is 'Beetle PCE Fast' The Beetle PCE FAST core saves/loads to/from these directories. Frontend's Save directory File Description *.srm Save Frontend's State directory File Description *.state# State Geometry and timing \u00b6 The Beetle PCE FAST core's core provided FPS is 59.82 The Beetle PCE FAST core's core provided sample rate is 44100 Hz The Beetle PCE FAST core's base width is 512 The Beetle PCE FAST core's base height is 243 The Beetle PCE FAST core's max width is 512 The Beetle PCE FAST core's max height is 243 The Beetle PCE FAST core's core provided aspect ratio is 6/5 Loading PC Engine CD content \u00b6 To load PC Engine CD content, Beetle PCE FAST needs a cue-sheet that points to an image file. A cue sheet, or cue file, is a metadata file which describes how the tracks of a CD or DVD are laid out. If you have e.g. foo.bin , you should create a text file and save it as foo.cue . If you're playing a single-track Saturn game, then the cue file contents should look like this: foobin.cue FILE \"foo.bin\" BINARY TRACK 01 MODE1/2352 INDEX 01 00:00:00 After that, you can load the foo.cue file in RetroArch with the Beetle PCE FAST core. Certain PC Engine content are multi-track, so their .cue files might be more complicated. CHD \u00b6 Alternatively to using cue sheets with .bin/.iso files, you can convert your games to .chd (MAME Compressed Hunks of Data) to reduce file sizes and neaten up your game folder. To convert content to CHD format, use the chdman tool found inside the latest MAME distribution and point it to a .cue file, like so: chdman createcd --input foo.cue --output foo.chd Core options \u00b6 The Beetle PCE FAST core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. CD Image Cache (Restart) [pce_fast_cdimagecache] ( disabled /enabled) Loads the complete image in memory at startup. Can potentially decrease loading times at the cost of increased startup time. CD Bios (Restart) [pce_fast_cdbios] ( System Card 3 /Games Express/System Card 1/System Card 2) Select which PC Engine CD BIOS to use. No Sprite Limit (Restart) [pce_nospritelimit] ( disabled /enabled\") Remove 16-sprites-per-scanline hardware limit. CPU Overclock Multiplier (Restart) [pce_ocmultiplier] ( 1 /\u2154/\u2158/6/\u215e/9/10/20/30/40/50) Overclock the emulated CPU. Horizontal Overscan (352 Width Mode Only) [pce_hoverscan] (300 to 352 in increments of 2. 352 in default .) Modify the horizontal overscan. Initial scanline [pce_initial_scanline] (0 to 40 in increments of 1. 3 is default. ) Adjust initial display scanline. Last scanline [pce_last_scanline] (208 to 242 in increments of 1. 242 is default. ) Adjust last display scanline. (CD) CDDA Volume % [pce_cddavolume] (0 to 200 in increments of 10. 100 is default .) Adjust CDDA Volume %. (CD) ADPCM Volume % [pce_adpcmvolume] (0 to 200 in increments of 10. 100 is default .) Adjust ADPCM Volume %. (CD) CD PSG Volume % [pce_cdpsgvolume] (0 to 200 in increments of 10. 100 is default .) Adjust CD PSG Volume %. (CD) CD Speed [pce_cdspeed] ( 1 /2/4/8) Set the speed of the emulated CD drive. Turbo Delay [pce_Turbo_Delay] ( Fast /Medium/Slow) Adjust turbo delay. Turbo ON/OFF Toggle [pce_Turbo_Toggling] ( disabled /enabled) Enables Turbo ON/OFF inputs. Look at the Joypad section for more information. Alternate Turbo Hotkey [pce_turbo_toggle_hotkey] ( disabled /enabled) Enables Alternate Turbo ON/OFF inputs. You can avoid remapping Button III and IV when switching to 6-button gamepad mode with this. Look at the Joypad section for more information. P1 Turbo I [pce_p0_turbo_I_enable] ( disabled /enabled) Awaiting description. P1 Turbo II [pce_p0_turbo_II_enable] ( disabled /enabled) Awaiting description. P2 Turbo I [pce_p1_turbo_I_enable] ( disabled /enabled) Awaiting description. P2 Turbo II [pce_p1_turbo_II_enable] ( disabled /enabled) Awaiting description. P3 Turbo I [pce_p2_turbo_I_enable] ( disabled /enabled) Awaiting description. P3 Turbo II [pce_p2_turbo_II_enable] ( disabled /enabled) Awaiting description. P4 Turbo I [pce_p3_turbo_I_enable] ( disabled /enabled) Awaiting description. P4 Turbo II [pce_p3_turbo_II_enable] ( disabled /enabled) Awaiting description. P5 Turbo I [pce_p4_turbo_I_enable] ( disabled /enabled) Awaiting description. P5 Turbo II [pce_p4_turbo_II_enable] ( disabled /enabled) Awaiting description. User 1 - 2 device types \u00b6 The Beetle PCE FAST core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): None - Doesn't disable input. PCE Joypad - Joypad Mouse - Mouse Joypad \u00b6 Which PCE Joypad button mode is in use can be configured by the Mode Switch input. The regular Turbo inputs for 2-button mode are only active when the 'Turbo ON/OFF Toggle' core option is set to On. The Alternate Turbo inputs for 2-button mode are only active when the 'Turbo ON.mdOFF Toggle' core option is set to On and the 'Alternate Turbo Hotkey' core option is set to On. RetroPad Inputs User 1 - 5 input descriptors PCE Joypad 2-button PCE Joypad 6-button II II II III II Turbo On/Off III Select Select Select Run Run Run D-Pad Up D-Pad Up D-Pad Up D-Pad Down D-Pad Down D-Pad Down D-Pad Left D-Pad Left D-Pad Left D-Pad Right D-Pad Right D-Pad Right I I I IV I Turbo On/Off IV V V VI VI Mode Switch Mode Switch Mode Switch Alternate II Turbo On/Off Alternate I Turbo On/Off Mouse \u00b6 RetroMouse Inputs Mouse Mouse Cursor Mouse Cursor Mouse 1 Mouse Left Button Mouse 2 Mouse Right Button External Links \u00b6 Official Mednafen Website Official Mednafen Downloads Libretro Beetle PCE FAST Core info file Libretro Beetle PCE FAST Github Repository Report Libretro Beetle PCE FAST Core Issues Here TG-16 \u00b6 NEC - PC Engine SuperGrafx (Beetle SGX)","title":"NEC - PC Engine / CD (Beetle PCE FAST)"},{"location":"library/beetle_pce_fast/#nec-pc-engine-cd-beetle-pce-fast","text":"","title":"NEC - PC Engine / CD (Beetle PCE FAST)"},{"location":"library/beetle_pce_fast/#background","text":"Beetle/Mednafen PCE FAST is a libretro port of Mednafen PCE Fast with the PC Engine SuperGrafx module removed. The Beetle PCE FAST core has been authored by Mednafen Team The Beetle PCE FAST core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Background"},{"location":"library/beetle_pce_fast/#bios","text":"Required or optional firmware files go in RetroArch's system directory. Which PCE CD BIOS file the Beetle PCE FAST core will use can be configured by the 'CD BIOS' core option . Any CD-ROM System BIOS will work, but some of them are known to be incompatible with certain games. Filename Description md5sum syscard3.pce Super CD-ROM2 System V3.xx - Required 38179df8f4ac870017db21ebcbf53114 syscard2.pce CD-ROM System V2.xx - Optional syscard1.pce CD-ROM System V1.xx - Optional gexpress.pce Game Express CD Card - Optional","title":"BIOS"},{"location":"library/beetle_pce_fast/#extensions","text":"Content that can be loaded by the Beetle PCE FAST core have the following file extensions: .pce .cue .ccd .iso .img .bin .chd RetroArch database(s) that are associated with the [Core name] core: NEC - PC Engine - TurboGrafx 16 NEC - PC Engine CD - TurboGrafx-CD","title":"Extensions"},{"location":"library/beetle_pce_fast/#features","text":"Frontend-level settings or features that the Beetle PCE FAST core respects. Feature Supported Restart \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/beetle_pce_fast/#directories","text":"The Beetle PCE FAST core's library name is 'Beetle PCE Fast' The Beetle PCE FAST core saves/loads to/from these directories. Frontend's Save directory File Description *.srm Save Frontend's State directory File Description *.state# State","title":"Directories"},{"location":"library/beetle_pce_fast/#geometry-and-timing","text":"The Beetle PCE FAST core's core provided FPS is 59.82 The Beetle PCE FAST core's core provided sample rate is 44100 Hz The Beetle PCE FAST core's base width is 512 The Beetle PCE FAST core's base height is 243 The Beetle PCE FAST core's max width is 512 The Beetle PCE FAST core's max height is 243 The Beetle PCE FAST core's core provided aspect ratio is 6/5","title":"Geometry and timing"},{"location":"library/beetle_pce_fast/#loading-pc-engine-cd-content","text":"To load PC Engine CD content, Beetle PCE FAST needs a cue-sheet that points to an image file. A cue sheet, or cue file, is a metadata file which describes how the tracks of a CD or DVD are laid out. If you have e.g. foo.bin , you should create a text file and save it as foo.cue . If you're playing a single-track Saturn game, then the cue file contents should look like this: foobin.cue FILE \"foo.bin\" BINARY TRACK 01 MODE1/2352 INDEX 01 00:00:00 After that, you can load the foo.cue file in RetroArch with the Beetle PCE FAST core. Certain PC Engine content are multi-track, so their .cue files might be more complicated.","title":"Loading PC Engine CD content"},{"location":"library/beetle_pce_fast/#chd","text":"Alternatively to using cue sheets with .bin/.iso files, you can convert your games to .chd (MAME Compressed Hunks of Data) to reduce file sizes and neaten up your game folder. To convert content to CHD format, use the chdman tool found inside the latest MAME distribution and point it to a .cue file, like so: chdman createcd --input foo.cue --output foo.chd","title":"CHD"},{"location":"library/beetle_pce_fast/#core-options","text":"The Beetle PCE FAST core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. CD Image Cache (Restart) [pce_fast_cdimagecache] ( disabled /enabled) Loads the complete image in memory at startup. Can potentially decrease loading times at the cost of increased startup time. CD Bios (Restart) [pce_fast_cdbios] ( System Card 3 /Games Express/System Card 1/System Card 2) Select which PC Engine CD BIOS to use. No Sprite Limit (Restart) [pce_nospritelimit] ( disabled /enabled\") Remove 16-sprites-per-scanline hardware limit. CPU Overclock Multiplier (Restart) [pce_ocmultiplier] ( 1 /\u2154/\u2158/6/\u215e/9/10/20/30/40/50) Overclock the emulated CPU. Horizontal Overscan (352 Width Mode Only) [pce_hoverscan] (300 to 352 in increments of 2. 352 in default .) Modify the horizontal overscan. Initial scanline [pce_initial_scanline] (0 to 40 in increments of 1. 3 is default. ) Adjust initial display scanline. Last scanline [pce_last_scanline] (208 to 242 in increments of 1. 242 is default. ) Adjust last display scanline. (CD) CDDA Volume % [pce_cddavolume] (0 to 200 in increments of 10. 100 is default .) Adjust CDDA Volume %. (CD) ADPCM Volume % [pce_adpcmvolume] (0 to 200 in increments of 10. 100 is default .) Adjust ADPCM Volume %. (CD) CD PSG Volume % [pce_cdpsgvolume] (0 to 200 in increments of 10. 100 is default .) Adjust CD PSG Volume %. (CD) CD Speed [pce_cdspeed] ( 1 /2/4/8) Set the speed of the emulated CD drive. Turbo Delay [pce_Turbo_Delay] ( Fast /Medium/Slow) Adjust turbo delay. Turbo ON/OFF Toggle [pce_Turbo_Toggling] ( disabled /enabled) Enables Turbo ON/OFF inputs. Look at the Joypad section for more information. Alternate Turbo Hotkey [pce_turbo_toggle_hotkey] ( disabled /enabled) Enables Alternate Turbo ON/OFF inputs. You can avoid remapping Button III and IV when switching to 6-button gamepad mode with this. Look at the Joypad section for more information. P1 Turbo I [pce_p0_turbo_I_enable] ( disabled /enabled) Awaiting description. P1 Turbo II [pce_p0_turbo_II_enable] ( disabled /enabled) Awaiting description. P2 Turbo I [pce_p1_turbo_I_enable] ( disabled /enabled) Awaiting description. P2 Turbo II [pce_p1_turbo_II_enable] ( disabled /enabled) Awaiting description. P3 Turbo I [pce_p2_turbo_I_enable] ( disabled /enabled) Awaiting description. P3 Turbo II [pce_p2_turbo_II_enable] ( disabled /enabled) Awaiting description. P4 Turbo I [pce_p3_turbo_I_enable] ( disabled /enabled) Awaiting description. P4 Turbo II [pce_p3_turbo_II_enable] ( disabled /enabled) Awaiting description. P5 Turbo I [pce_p4_turbo_I_enable] ( disabled /enabled) Awaiting description. P5 Turbo II [pce_p4_turbo_II_enable] ( disabled /enabled) Awaiting description.","title":"Core options"},{"location":"library/beetle_pce_fast/#user-1-2-device-types","text":"The Beetle PCE FAST core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): None - Doesn't disable input. PCE Joypad - Joypad Mouse - Mouse","title":"User 1 - 2 device types"},{"location":"library/beetle_pce_fast/#joypad","text":"Which PCE Joypad button mode is in use can be configured by the Mode Switch input. The regular Turbo inputs for 2-button mode are only active when the 'Turbo ON/OFF Toggle' core option is set to On. The Alternate Turbo inputs for 2-button mode are only active when the 'Turbo ON.mdOFF Toggle' core option is set to On and the 'Alternate Turbo Hotkey' core option is set to On. RetroPad Inputs User 1 - 5 input descriptors PCE Joypad 2-button PCE Joypad 6-button II II II III II Turbo On/Off III Select Select Select Run Run Run D-Pad Up D-Pad Up D-Pad Up D-Pad Down D-Pad Down D-Pad Down D-Pad Left D-Pad Left D-Pad Left D-Pad Right D-Pad Right D-Pad Right I I I IV I Turbo On/Off IV V V VI VI Mode Switch Mode Switch Mode Switch Alternate II Turbo On/Off Alternate I Turbo On/Off","title":"Joypad"},{"location":"library/beetle_pce_fast/#mouse","text":"RetroMouse Inputs Mouse Mouse Cursor Mouse Cursor Mouse 1 Mouse Left Button Mouse 2 Mouse Right Button","title":"Mouse"},{"location":"library/beetle_pce_fast/#external-links","text":"Official Mednafen Website Official Mednafen Downloads Libretro Beetle PCE FAST Core info file Libretro Beetle PCE FAST Github Repository Report Libretro Beetle PCE FAST Core Issues Here","title":"External Links"},{"location":"library/beetle_pce_fast/#tg-16","text":"NEC - PC Engine SuperGrafx (Beetle SGX)","title":"TG-16"},{"location":"library/beetle_psx/","text":"PlayStation (Beetle PSX) \u00b6 Last Updated: March 22, 2020 Background \u00b6 Beetle PSX is a port/fork of Mednafen's PSX module to the libretro API. It can be compiled in C++98 mode. Beetle PSX currently runs on Linux, OSX and Windows. Notable additions in this fork are: PBP and CHD file format support, developed by Zapeth; Software renderer internal resolution upscaling, implemented by simias; PGXP subpixel precision, developed by iCatButler; Beetle PSX is built without hardware rendering support and lacks enhancements such as texture filtering, PGXP perspective correct texturing, and more. To take advantage of hardware rendering and the various enhancements that come with it, use Beetle PSX HW instead. The Beetle PSX core has been authored by Mednafen Team The Beetle PSX core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here . BIOS \u00b6 Required or optional firmware files go in the frontend's system directory. Filename Description md5sum scph5500.bin PS1 JP BIOS - Required for JP games 8dd7d5296a650fac7319bce665a6a53c scph5501.bin PS1 US BIOS - Required for US games 490f666e1afb15b7362b406ed1cea246 scph5502.bin PS1 EU BIOS - Required for EU games 32736f17079d0b2b7024407c39bd3050 Extensions \u00b6 Content that can be loaded by the Beetle PSX core have the following file extensions: .cue .toc .m3u .ccd .exe .pbp .chd RetroArch database(s) that are associated with the Beetle PSX core: Sony - PlayStation Features \u00b6 Frontend-level settings or features that the Beetle PSX core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2714 Rumble \u2714 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2714 Username \u2715 Language \u2715 Crop Overscan * \u2715 LEDs \u2715 * Overscan cropping available via Core Options instead of frontend settings Directories \u00b6 The Beetle PSX core's library name is 'Beetle PSX' The Beetle PSX core saves/loads to/from these directories. Frontend's Save directory Memory cards Frontend's State directory File Description *.state# State Geometry and timing \u00b6 The Beetle PSX core's core provided FPS is 59.826 for NTSC games and 49.761 for PAL games (non-interlaced rates) and is toggleable to 59.940 for NTSC games and 50.000 for PAL games (interlaced rates) through core options The Beetle PSX core's core provided sample rate is 44100 Hz The Beetle PSX core's base width is 320 The Beetle PSX core's base height is 240 The Beetle PSX core's max width is 700 when the 'Internal GPU resolution' is set to 1x. Raising the resolution past 1x will increase the max width The Beetle PSX core's max height is 576 when the 'Internal GPU resolution' is set to 1x. Raising the resolution past 1x will increase the max height The Beetle PSX core's core provided aspect ratio is automatically set based on core options Loading content \u00b6 Beetle PSX needs a cue-sheet that points to an image file. A cue sheet, or cue file, is a metadata file which describes how the tracks of a CD or DVD are laid out. If you have e.g. foo.bin , you should create a text file and save it as foo.cue . Most PS1 games are single-track, so the cue file contents should look like this: foobin.cue FILE \"foo.bin\" BINARY TRACK 01 MODE1/2352 INDEX 01 00:00:00 After that, you can load the foo.cue file in RetroArch with the Beetle PSX core. Attention Certain PS1 games are multi-track, so their .cue files might be more complicated. Playing PAL copy protected games \u00b6 PAL copy protected games need a SBI Subchannel file next to the bin/cue files in order to get past the copy protection. Ape Escape (Europe).bin Ape Escape (Europe).cue Ape Escape (Europe).sbi Warning For proper PAL game compatibility, the 'Skip BIOS' core option needs to be set to off. Multiple-disk games \u00b6 If foo is a multiple-disk game, you should have .cue files for each one, e.g. foo (Disc 1).cue , foo (Disc 2).cue , foo (Disc 3).cue . To take advantage of Beetle PSW's Disk Control feature for disk swapping, an index file (a m3u file) should be made. Create a text file and save it as foo.m3u . Then enter your game's .cue files on it. The m3u file contents should look something like this: foo.m3u foo (Disc 1).cue foo (Disc 2).cue foo (Disc 3).cue After that, you can load the foo.m3u file in RetroArch with the Beetle PSX core. Here's a m3u example done with Valkryie Profile Attention Adding multi-track games to a RetroArch playlist is recommended. (Manually add an entry a playlist that points to foo.m3u ) Swapping disks \u00b6 Disks can be swapped through Quick Menu -> Disk Control in RetroArch. If not using .m3u files, .cue files must be manually selected via the Load New Disk legacy feature. If using .m3u files, disks can be swapped by selecting Eject Disk, changing the Current Disk Index to your desired disk, and finally selecting Insert Disk. Compressed content \u00b6 Alternatively to using cue sheets with .bin/.iso files, you can convert your games to .pbp (Playstation Portable update file) or .chd (MAME Compressed Hunks of Data) to reduce file sizes and neaten up your game folder. PBP \u00b6 A recommended .pbp convert tool is PSX2PSP. If converting a multiple-disk game, all disks should be added to the same .pbp file, rather than making a .m3u file for them. Most conversion tools will want a single .bin file for each disk. If your game uses multiple .bin files (tracks) per disk, you will have to mount the cue sheet to a virtual drive and re-burn the images onto a single track before conversion. For multi-disk PAL copy-proected games, change the sbi file syntax from [filename].sbi to [filename]_[disc_number].sbi Final Fantasy IX (Germany).pbp Final Fantasy IX (Germany)_1.sbi Final Fantasy IX (Germany)_2.sbi Final Fantasy IX (Germany)_3.sbi Final Fantasy IX (Germany)_4.sbi Attention RetroArch does not currently have .pbp database due to variability in users' conversion methods. All .pbp games will have to be added to playlists manually. CHD \u00b6 To convert content to CHD format, use the chdman tool found inside the latest MAME distribution and point it to a .cue file, like so: chdman createcd --input foo.cue --output foo.chd Note that the tool currrently does not integrate .sbi files into the .chd, so these must be placed alongside the resulting .chd file in order to properly play games with LibCrypt protection. Attention For multi-disc content, make an .m3u file that lists all the .chd files instead of .cue files. Like the PBP files, content must be added to playlists manually. Saves \u00b6 For game savedata storage, the PSX console used memory cards. The PSX console had two slots for memory cards. In this doc, the first memory card slot will be referred to as 'Memcard slot 0' and the second slot will be referred to as 'Memcard slot 1'. For memory card functionality and usage, the Beetle PSX core will either use the Libretro savedata format or the Mednafen savedata format. Libretro savedata format Mednafen savedata format gamename.srm gamename.slot#.mcr By default , the Beetle PSX core will use Libretro's savedata format for Memcard slot 0 and Mednafen's savedata format for Memcard slot 1. Memcard slot 0 Memcard slot 1 gamename.srm gamename.1.mcr Attention Memory card behavior can be controlled with the following core options (Memcard 0 method, Enable memory card 1, Shared memcards). By default , the filenames of the Memcard savedata will match the loaded cue or m3u or pbp filename, like this: Loaded content: Breath of Fire III (USA).cue Memcard slot 0: Breath of Fire III (USA).srm Memcard slot 1: Breath of Fire III (USA).1.mcr or Loaded content: Final Fantasy VII (USA).m3u Memcard slot 0: Final Fantasy VII (USA).srm Memcard slot 1: Final Fantasy VII (USA).1.mcr or Loaded content: Wild Arms 2 (USA).pbp Memcard slot 0: `Wild Arms 2 (USA).srm Memcard slot 1: `Wild Arms 2 (USA).1.mcr Attention To import your old memory cards from other emulators, you need to rename them to either the Libretro savedata format or the Mednafen savedata format. The Libretro (.srm) savedata format, when used with Beetle PSX, is internally identical to the Mednafen PSX (.mcr) savedata format, and can be converted between one another via renaming. Warning Keep in mind that save states also include the state of the memory card; carelessly loading an old save state will OVEWRITE the memory card, potentially resulting in lost saved games. You can set the 'Don't overwrite SaveRAM on loading savestate' option in RetroArch's Saving settings to On to prevent this. Core options \u00b6 The Beetle PSX core has the following options that can be tweaked from your frontend's core options menu or manually changed via core configuration files. Options are listed below in the following format: Option Name [option_key] (setting1/setting2/...) To manually change an option, search for that option's key in the core configuration file you want to edit and set it to your desired setting value, enclosed in quotations. For example, if you had set the Internal Color Depth to 32bpp and wanted to revert it to 16bpp, you would change beetle_psx_depth = \"32bpp\" to beetle_psx_depth = \"16bpp(native)\" . Manually editing core configuration files is typically unnecessary unless your frontend does not have a method for toggling options. The default setting for each option will be highlighted in bold. Settings with (Restart) means that core has to be shut down for the new setting to be applied on next launch. Internal GPU Resolution [beetle_psx_internal_resolution] ( 1x(native) /2x/4x/8x/16x) Selects internal resolution multiplier. Resolutions higher than 1x(native) improve the fidelity of 3D models at the expense of increased performance requirements. 2D elements are generally unaffected by this setting from the core's perspective. Internal GPU Resolution - 1x Internal GPU Resolution - 2x Dithering Pattern [beetle_psx_dither_mode] ( 1x(native) /internal resolution/disabled) Select dithering pattern. Dithering is used by the original PSX hardware to combat the color banding visible due to 16bpp color depth. '1x(native)' emulates original hardware but can look grainy at higher internal resolutions. 'internal resolution' reduces graininess by allowing for finer dithering at higher Internal GPU Resolutions, but has limited effectiveness in combating color banding if the Internal GPU Resolution is set too high. (Note in the examples below that the 'internal resolution' option is less grainy but has more visible banding than '1x(native)' at 4x Internal GPU Resolution) 'disabled' is for users who otherwise wish to turn off dithering regardless of color banding. Dithering Pattern - 1x Native Dithering Pattern - Internal Resolution Dithering Pattern - Disabled PGXP Operation Mode [beetle_psx_pgxp_mode] ( disabled /memory only/memory + CPU) Enabling the Parallel/Precision Geometry Transform Pipeline (PGXP) allows polygons to be rendered with subpixel precision, eliminating or otherwise diminishing the polygon jitter/wobble visible on original PSX hardware. This distortion results from original hardware using fixed point mathematics when rendering 3D models, thus rounding polygon vertices to the nearest integer pixel. 'disabled' emulates original hardware behavior. 'memory only' mode enables subpixel precision at the cost of increased performance requirements with only minor compatibility issues. 'memory + CPU' mode can further reduce jitter but is highly demanding and is known to cause geometry errors. 'memory only' is recommended for best compatibility. https://www.youtube.com/watch?v=EYCpd_1lPUc Display Internal FPS [beetle_psx_display_internal_fps] ( disabled /enabled) Displays the frame rate that the emulated PSX is drawing at. Requires onscreen notifications to be enabled in the libretro frontend. Reported values may be inaccurate. Display internal FPS - On Line-to-Quad Hack [beetle_psx_line_render] ( default /aggressive/disabled) Certain games employ a special technique for drawing horizontal lines, which involves stretching single-pixel-high triangles across the screen in a manner that causes the PSX hardware to rasterise them as a row of pixels. Examples include Doom/Hexen, and the water effects in Soul Blade. When running such games with an Internal GPU Resolution higher than native, these triangles no longer resolve as a line, causing gaps to appear in the output image. Setting 'Line-to-Quad Hack' to 'Default' solves this issue by detecting small triangles and converting them as required. The 'Aggressive' option will likely introduce visual glitches due to false positives, but is needed for correct rendering of some 'difficult' titles (e.g. Dark Forces, Duke Nukem). Frame Duping (Speedup) [beetle_psx_frame_duping] ( disabled /enabled) When enabled, provides a small performance increase by redrawing/reusing the last rendered frame (instead of presenting a new one) if the content of the current frame is unchanged based on the internal fps heuristic. May cause inaccurate behavior or lost animation frames, so it is not recommended to use this unless necessary. CPU Dynarec [beetle_psx_cpu_dynarec] ( disabled /execute/execute_once/run_interpreter) Dynamically recompile CPU instructions to native instructions. Much faster than interpreter, but CPU timing is less accurate, and may have bugs. Dynarec Code Invalidation [beetle_psx_dynarec_invalidate] ( full /dma) Some games require Full invalidation, some require DMA Only. This option has no effect when CPU Dynarec is not enabled. Dynarec DMA/GPU Event Cycles [beetle_psx_dynarec_eventcycles] ( 128 /256/384/512/640/768/896/1024) Max cycles run by CPU before a GPU or DMA Update is checked, higher number will be faster, has much less impact on beetle interpreter than dynarec. Leave at 128 for default Beetle interpreter behavior when CPU Dynarec is not enabled. CPU Frequency Scaling (Overclock) [beetle_psx_cpu_freq_scale] (50% to 750% in increments of 10%. Default: 100%(native) ) Enable overclocking (or underclocking) of the emulated PSX's CPU. The default frequency of the MIPS R3000A-compatible 32-bit RISC CPU is 33.8688 MHz; running at higher frequencies can eliminate slowdown and improve frame rates in certain games at the expense of increased performance requirements. Note that some games have an internal frame rate limiter and may not benefit from overclocking. It is generally not recommended to adjust this setting as it causes many games or portions of them to run at unintended speeds. This can lead to audio and video desynchronization, among other issues. Leave at default for most games. GTE Overclock [beetle_psx_gte_overclock] ( disabled /enabled) When enabled, reduces the latency of operations involving the emulated PSX's Geometry Transform Engine (CPU coprocessor used for calculations related to 3D projection - i.e. all 3D graphics) to 1 cycle per instruction and additionally eliminates all memory access or cache fetch latency. For games that make heavy use of the GTE, this can greatly improve frame rate (and frame time) stability at the expense of increased performance requirements. Currently unstable -- leave off if unsure. GPU Rasterizer Overclock [beetle_psx_gpu_overclock] ( 1x(native) /2x/4x/8x/16x/32x) Enables overclocking of the 2D rasterizer contained within the emulated PSX's GPU. Does not improve 3D rendering, and in general has little effect. Skip BIOS [beetle_psx_skip_bios] ( disabled /enabled) When enabled, skips the PSX BIOS animation normally displayed with starting content. Enabling this option will cause compatibility issues with a small minority of games (Saga Frontier, PAL copy protected games, etc). Skip BIOS - Off Core-Reported FPS Timing [beetle_psx_core_timing_fps] ( force_progressive /force_interlaced/auto_toggle) Sets FPS timing that the core will report to the frontend. Automatic toggling will allow the core to switch between reporting progressive and interlaced rates, but may cause frontend video/audio driver reinits. Progressive timings are 59.826 for NTSC content and 49.761 for PAL content, and interlaced timings are 59.940 for NTSC content and 50.000 for PAL content. Core Aspect Ratio [beetle_psx_aspect_ratio] ( corrected /uncorrected/4:3) Set core provided aspect ratio. This setting is ignored when the Widescreen Mode Hack or Display Full VRAM options are enabled. \"4:3\" forces the core aspect ratio to 4:3 without taking horizontal overscan cropping or visible scanlines into account. The \"4:3\" setting should not be used and is only provided as a legacy feature for users desiring old incorrect behavior from the core. Widescreen Mode Hack [beetle_psx_widescreen_hack] ( disabled /enabled) Forces content to be rendered with an aspect ratio of 16:9. Produces best results with fully 3D games. Can cause graphical glitches or alignment/stretching issues in games that mix 3D and 2D elements. Leave off for most games. Widescreen mode hack - Off Widescreen mode hack - On Crop Horizontal Overscan [beetle_psx_crop_overscan] ( enabled /disabled) By default, Beetle PSX includes horizontal padding (black bars or 'pillarboxes' on either side of the screen) to emulate the same black bars generated in analog video output by real PSX hardware. This horizontal padding can contain garbage pixels that are generated when the game's width mode is smaller than the display area width in the emulated GPU registers. Enabling 'Crop Horizontal Overscan' will remove this potentially glitchy horizontal overscan region. Not all games will benefit from enabling this setting as shown in the examples below. Crop Overscan - Off (Game with Garbage Pixels) Crop Overscan - On (Game with Garbage Pixels) Crop Overscan - Off (Game with No Issues) Crop Overscan - On (Game with No Issues) This option does not affect vertical overscan. Vertical overscan can be cropped using the Initial/Last Scanline core options. Additional Cropping [beetle_psx_image_crop] ( disabled /1px/2px/3px/4px/5px/6px/7px/8px) When 'Crop Horizontal Overscan' is enabled, this option further reduces the width of the cropped image by the specified number of pixels. Note: This can have unintended consequences. While the absolute width is reduced, the resultant video is still scaled to the currently set aspect ratio. Enabling 'Additional Cropping' may therefore cause horizontal stretching. Offset Cropped Image [beetle_psx_image_offset] ( disabled /-4px/-3px/-2px/-1px/+1px/+2px/+3px/+4px) When 'Crop Horizontal Overscan' is enabled, allows the resultant cropped image to be offset horizontally to the right (positive) or left (negative) by the specified number of pixels. May be used to correct alignment issues. Initial Scanline - NTSC [beetle_psx_initial_scanline] (0 to 40 in increments of 1. Default: 0 ) Selects the first displayed scanline when running NTSC content. Setting a value greater than 0 will reduce the height of output images by cropping pixels from the topmost edge. May be used to counteract letterboxing built in to some games. Last Scanline - NTSC [beetle_psx_last_scanline] (210 to 239 in increments of 1. Default: 239 ) Selects the last displayed scanline when running NTSC content. Setting a value less than 239 will reduce the height of output images by cropping pixels from the bottommost edge. May be used to counteract letterboxing built in to some games. Initial Scanline - PAL [beetle_psx_initial_scanline_pal] (0 to 40 in increments of 1. Default: 0 ) Selects the first displayed scanline when running PAL content. Setting a value greater than 0 will reduce the height of output images by cropping pixels from the topmost edge. May be used to counteract letterboxing built in to some games. Last Scanline - PAL [beetle_psx_last_scanline_pal] (230 to 287 in increments of 1. Default: 287 ) Selects the last displayed scanline when running PAL content. Setting a value less than 287 will reduce the height of output images by cropping pixels from the bottommost edge. May be used to counteract letterboxing built in to some games. CD Access Method (Restart) [beetle_psx_cd_access_method] ( sync /async/precache) Selects method used to read data from content disc images. 'sync' emulates original hardware. 'async' can alleviate stuttering on devices with slow storage. 'precache' loads the entire disc image into memory when starting content, incurring a small startup delay. This can improve in-game loading times and eliminate stutters due to emulated CD access, but may cause issues on systems with low memory. CD Loading Speed [beetle_psx_cd_fastload] ( 2x(native) /4x/6x/8x/10x/12x/14x) Selects disk access speed multiplier. This speedhack can greatly reduce loading times at speeds higher than native but is known to introduce texture corruption errors, timing glitches, or loading screen softlocks in many titles. Some games will not work at all if loading speed is not set to native (e.g. Castlevania: Symphony of the Night). Reduce multiplier value if experiencing loading issues, freezes, etc. Memory Card 0 Method (Restart) [beetle_psx_use_mednafen_memcard0_method] ( libretro /mednafen) Choose the savedata format used for Memory Card 0. See the Saves section above for an explanation regarding the libretro and mednafen formats. libretro is recommended, but mednafen may be used for compatibility with the standalone version of Mednafen. The libretro (.srm) and Mednafen (.mcr) formats are internally identical when used with Beetle PSX. Note: This option must be set to 'mednafen' if the Shared Memcards option is enabled. Enable Memory Card 1 (Restart) [beetle_psx_enable_memcard1] ( enabled /disabled) Selects whether to emulate a second memory card in Slot 1. When disabled, games can only access the memory card in Slot 0. Note: Some games require this option to be disabled for correct operation (e.g. Codename Tenka). Shared Memory Cards (Restart) [beetle_psx_shared_memory_cards] ( disabled /enabled) When enabled, games will save and load using the same memory card files. Note: The \"Memcard 0 Method\" option must be set to 'mednafen' for this option to function properly. When disabled, separate memory card files will be generated for each title. This option is useful for games in series such as Suikoden or Arc the Lad that check for save data from previous titles. Memcard slot 0 Memcard slot 1 mednafen_psx_libretro_shared.0.mcr mednafen_psx_libretro_shared.1.mcr Analog Self-Calibration [beetle_psx_analog_calibration] ( disabled /enabled) When enabled, monitors the max values reached by the input, using it as a calibration heuristic which then scales the analog coordinates sent to the emulator accordingly. For best results, rotate the sticks at max amplitude for the algorithm to get a good estimate of the scaling factor, otherwise it will adjust while playing. While modern analog sticks have circular logical ranges, older analog sticks such as those on the DualShock have logical ranges closer to squares and can report larger values at the intercardinal directions than modern analog sticks can. Games that expect these larger values will have issues controlling with modern analog sticks, which this option can solve by scaling modern analog stick values up. Enable DualShock Analog Mode Toggle [beetle_psx_analog_toggle] ( disabled /enabled) When the input device type is set to DualShock, this option determines whether or not the Analog Button on that device can be toggled. When this option is disabled, the DualShock input device will be locked in Analog Mode where the analog sticks are on. When this option is enabled, the DualShock input device can be toggled between Digital Mode (analog sticks off) and Analog Mode (analog sticks on) much like real hardware by pressing and holding START+SELECT+L1+L2+R1+R2 for one second in lieu of a dedicated Analog Button. Note: Some games may not respond to input when the DualShock is in Analog Mode. Either enable Analog Button Toggle and toggle the DualShock to Digital Mode or change your input device type to PlayStation Controller. Port 1: Multitap Enable [beetle_psx_enable_multitap_port1] ( disabled /enabled) Enables/Disables multitap functionality on port 1. Port 2: Multitap Enable [beetle_psx_enable_multitap_port2] ( disabled /enabled) Enables/Disables multitap functionality on port 2. Gun Input Mode [beetle_psx_gun_input_mode] ( lightgun /touchscreen) When device type is set to 'Guncon / G-Con 45' or 'Justifier', specify whether to use a mouse-controlled 'Light Gun' or 'Touchscreen' input. Gun Cursor [beetle_psx_gun_cursor] ( cross /dot/off) Selects the gun cursor to be displayed on screen while using the the 'Guncon / G-Con 45' and 'Justifier' input device types. When disabled, cross hairs are always hidden. Gun Cursor - Cross Gun Cursor - Dot Gun Cursor - Off Mouse Sensitivity [beetle_psx_mouse_sensitivity] (5% to 200% in increments of 5%. Default: 100% ) Configure the response of the 'Mouse' input device type. NegCon Twist Response [beetle_psx_negcon_response] ( linear /quadratic/cubic) Specifies the analog response when using a RetroPad left analog stick to simulate the 'twist' action of emulated neGcon Controllers . 'linear': Analog stick displacement is mapped linearly to negCon rotation angle. 'quadratic': Analog stick displacement is mapped quadratically to negCon rotation angle. This allows for greater precision when making small movements with the analog stick. 'cubic': Analog stick displacement is mapped cubically to negCon rotation angle. This allows for even greater precision when making small movements with the analog stick, but 'exaggerates' larger movements. Attention A linear response is not recommended when using standard gamepad devices. The negCon 'twist' mechanism is substantially different from conventional analog sticks; linear mapping over-amplifies small displacements of the stick, impairing fine control. A linear response is only appropriate when using racing wheel peripherals. In most cases, the 'quadratic' option should be selected. This provides effective compensation for the physical differences between real/emulated hardware and is the closest approximation of real hardware, enabling smooth/precise analog input. NegCon Twist Deadzone [beetle_psx_negcon_deadzone] ( 0% /5%/10%/15%/20%/25%/30%) Sets the deadzone of the RetroPad left analog stick when simulating the 'twist' action of emulated neGcon Controllers . Used to eliminate drift/unwanted input. Attention Most (all?) negCon compatible titles provide in-game options for setting a 'twist' deadzone value. To avoid loss of precision, the in-game deadzone should always be set to zero. Any analog stick drift should instead be accounted for by configuring the 'NegCon Twist Deadzone' core option. This is particularly important when 'NegCon Twist Response' is set to 'quadratic' or 'cubic'. Xbox gamepads typically require a deadzone of 15-20%. Many Android-compatible bluetooth gamepads have an internal 'hardware' deadzone, allowing the deadzone value here to be set to 0%. For convenience, it is recommended to make use of the 'Options \u2192 Analog Setting 1P' menu of Gran Turismo when calibrating the 'NegCon Twist Deadzone'. This provides a clear and precise representation of 'real' controller input values. User 1 - 8 device types \u00b6 The Beetle PSX core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): None - Input disabled. PlayStation Controller - Joypad - PlayStation Controller (SCPH-1080) DualShock - Joypad - DualShock (SCPH-1200) Analog Controller - Joypad - PlayStation Dual Analog Controller(SCPH-1180) Analog Joystick - Joypad - PlayStation Analog Joystick (SCPH-1110) Guncon / G-Con 45 - Lightgun - Namco Gun Controller (SLEH-00007) Justifier - Lightgun - Konami Justifier lightgun peripheral (SLEH-00005, SLUH-00017) Mouse - Mouse - PlayStation Mouse (SCPH-1090, SCPH-1030) neGcon - Joypad - Namco third party controller Rumble support \u00b6 Rumble only works in the Beetle PSX core when The content being ran has rumble support. The frontend being used has rumble support. The joypad device being used has rumble support. The corresponding user's device type is set to DualShock Multitap support \u00b6 Activating multitap support in compatible games can be configured by the 'Port 1: Multitap enable' and 'Port 2: Multitap enable' core options . Joypad \u00b6 User 1 - 8 input descriptors RetroPad Inputs PlayStation Controller Inputs DualShock Inputs Analog Controller Inputs Analog Joystick Inputs neGcon Inputs Cross Analog button I Square Analog button II Select Start Start D-Pad Up D-Pad Up D-Pad Down D-Pad Down D-Pad Left D-Pad Left D-Pad Right D-Pad Right Circle A Triangle B L1 Left shoulder button (analog) R1 Right shoulder button (digital) L2 Analog button II R2 Analog button I L3 R3 Left Analog X X Left Joystick X Twist Left Analog Y Y Left Joystick Y Right Analog X X Right Joystick X Right Analog Y Y Right Joystick Y Mouse \u00b6 RetroMouse Inputs Mouse Inputs Mouse Cursor Mouse Cursor Mouse 1 Mouse Left Button Mouse 2 Mouse Right Button Lightgun \u00b6 RetroLightgun Inputs Guncon / G-Con 45 Inputs Justifier Inputs Gun Crosshair Guncon / G-Con 45 Crosshair Justifier Crosshair Gun Trigger Guncon / G-Con 45 Trigger Justifier Trigger Gun Reload Guncon / G-Con 45 Reload Justifier Reload Gun Aux A Guncon / G-Con 45 A Justifier Aux Gun Aux B Guncon / G-Con 45 B Gun Start Justifier Start Compatibility \u00b6 A list of known emulation bugs can be found here https://forum.fobby.net/index.php?t=msg&th=1114&start=0& External Links \u00b6 Official Mednafen Website Official Mednafen Downloads Beetle PSX Libretro Core info file Beetle PSX Libretro Github Repository Report Beetle PSX Core Issues Here Libretro PSX cores \u00b6 PlayStation (Beetle PSX HW) PlayStation (PCSX ReARMed)","title":"Sony - PlayStation (Beetle PSX)"},{"location":"library/beetle_psx/#playstation-beetle-psx","text":"Last Updated: March 22, 2020","title":"PlayStation (Beetle PSX)"},{"location":"library/beetle_psx/#background","text":"Beetle PSX is a port/fork of Mednafen's PSX module to the libretro API. It can be compiled in C++98 mode. Beetle PSX currently runs on Linux, OSX and Windows. Notable additions in this fork are: PBP and CHD file format support, developed by Zapeth; Software renderer internal resolution upscaling, implemented by simias; PGXP subpixel precision, developed by iCatButler; Beetle PSX is built without hardware rendering support and lacks enhancements such as texture filtering, PGXP perspective correct texturing, and more. To take advantage of hardware rendering and the various enhancements that come with it, use Beetle PSX HW instead. The Beetle PSX core has been authored by Mednafen Team The Beetle PSX core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Background"},{"location":"library/beetle_psx/#bios","text":"Required or optional firmware files go in the frontend's system directory. Filename Description md5sum scph5500.bin PS1 JP BIOS - Required for JP games 8dd7d5296a650fac7319bce665a6a53c scph5501.bin PS1 US BIOS - Required for US games 490f666e1afb15b7362b406ed1cea246 scph5502.bin PS1 EU BIOS - Required for EU games 32736f17079d0b2b7024407c39bd3050","title":"BIOS"},{"location":"library/beetle_psx/#extensions","text":"Content that can be loaded by the Beetle PSX core have the following file extensions: .cue .toc .m3u .ccd .exe .pbp .chd RetroArch database(s) that are associated with the Beetle PSX core: Sony - PlayStation","title":"Extensions"},{"location":"library/beetle_psx/#features","text":"Frontend-level settings or features that the Beetle PSX core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2714 Rumble \u2714 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2714 Username \u2715 Language \u2715 Crop Overscan * \u2715 LEDs \u2715 * Overscan cropping available via Core Options instead of frontend settings","title":"Features"},{"location":"library/beetle_psx/#directories","text":"The Beetle PSX core's library name is 'Beetle PSX' The Beetle PSX core saves/loads to/from these directories. Frontend's Save directory Memory cards Frontend's State directory File Description *.state# State","title":"Directories"},{"location":"library/beetle_psx/#geometry-and-timing","text":"The Beetle PSX core's core provided FPS is 59.826 for NTSC games and 49.761 for PAL games (non-interlaced rates) and is toggleable to 59.940 for NTSC games and 50.000 for PAL games (interlaced rates) through core options The Beetle PSX core's core provided sample rate is 44100 Hz The Beetle PSX core's base width is 320 The Beetle PSX core's base height is 240 The Beetle PSX core's max width is 700 when the 'Internal GPU resolution' is set to 1x. Raising the resolution past 1x will increase the max width The Beetle PSX core's max height is 576 when the 'Internal GPU resolution' is set to 1x. Raising the resolution past 1x will increase the max height The Beetle PSX core's core provided aspect ratio is automatically set based on core options","title":"Geometry and timing"},{"location":"library/beetle_psx/#loading-content","text":"Beetle PSX needs a cue-sheet that points to an image file. A cue sheet, or cue file, is a metadata file which describes how the tracks of a CD or DVD are laid out. If you have e.g. foo.bin , you should create a text file and save it as foo.cue . Most PS1 games are single-track, so the cue file contents should look like this: foobin.cue FILE \"foo.bin\" BINARY TRACK 01 MODE1/2352 INDEX 01 00:00:00 After that, you can load the foo.cue file in RetroArch with the Beetle PSX core. Attention Certain PS1 games are multi-track, so their .cue files might be more complicated.","title":"Loading content"},{"location":"library/beetle_psx/#playing-pal-copy-protected-games","text":"PAL copy protected games need a SBI Subchannel file next to the bin/cue files in order to get past the copy protection. Ape Escape (Europe).bin Ape Escape (Europe).cue Ape Escape (Europe).sbi Warning For proper PAL game compatibility, the 'Skip BIOS' core option needs to be set to off.","title":"Playing PAL copy protected games"},{"location":"library/beetle_psx/#multiple-disk-games","text":"If foo is a multiple-disk game, you should have .cue files for each one, e.g. foo (Disc 1).cue , foo (Disc 2).cue , foo (Disc 3).cue . To take advantage of Beetle PSW's Disk Control feature for disk swapping, an index file (a m3u file) should be made. Create a text file and save it as foo.m3u . Then enter your game's .cue files on it. The m3u file contents should look something like this: foo.m3u foo (Disc 1).cue foo (Disc 2).cue foo (Disc 3).cue After that, you can load the foo.m3u file in RetroArch with the Beetle PSX core. Here's a m3u example done with Valkryie Profile Attention Adding multi-track games to a RetroArch playlist is recommended. (Manually add an entry a playlist that points to foo.m3u )","title":"Multiple-disk games"},{"location":"library/beetle_psx/#swapping-disks","text":"Disks can be swapped through Quick Menu -> Disk Control in RetroArch. If not using .m3u files, .cue files must be manually selected via the Load New Disk legacy feature. If using .m3u files, disks can be swapped by selecting Eject Disk, changing the Current Disk Index to your desired disk, and finally selecting Insert Disk.","title":"Swapping disks"},{"location":"library/beetle_psx/#compressed-content","text":"Alternatively to using cue sheets with .bin/.iso files, you can convert your games to .pbp (Playstation Portable update file) or .chd (MAME Compressed Hunks of Data) to reduce file sizes and neaten up your game folder.","title":"Compressed content"},{"location":"library/beetle_psx/#pbp","text":"A recommended .pbp convert tool is PSX2PSP. If converting a multiple-disk game, all disks should be added to the same .pbp file, rather than making a .m3u file for them. Most conversion tools will want a single .bin file for each disk. If your game uses multiple .bin files (tracks) per disk, you will have to mount the cue sheet to a virtual drive and re-burn the images onto a single track before conversion. For multi-disk PAL copy-proected games, change the sbi file syntax from [filename].sbi to [filename]_[disc_number].sbi Final Fantasy IX (Germany).pbp Final Fantasy IX (Germany)_1.sbi Final Fantasy IX (Germany)_2.sbi Final Fantasy IX (Germany)_3.sbi Final Fantasy IX (Germany)_4.sbi Attention RetroArch does not currently have .pbp database due to variability in users' conversion methods. All .pbp games will have to be added to playlists manually.","title":"PBP"},{"location":"library/beetle_psx/#chd","text":"To convert content to CHD format, use the chdman tool found inside the latest MAME distribution and point it to a .cue file, like so: chdman createcd --input foo.cue --output foo.chd Note that the tool currrently does not integrate .sbi files into the .chd, so these must be placed alongside the resulting .chd file in order to properly play games with LibCrypt protection. Attention For multi-disc content, make an .m3u file that lists all the .chd files instead of .cue files. Like the PBP files, content must be added to playlists manually.","title":"CHD"},{"location":"library/beetle_psx/#saves","text":"For game savedata storage, the PSX console used memory cards. The PSX console had two slots for memory cards. In this doc, the first memory card slot will be referred to as 'Memcard slot 0' and the second slot will be referred to as 'Memcard slot 1'. For memory card functionality and usage, the Beetle PSX core will either use the Libretro savedata format or the Mednafen savedata format. Libretro savedata format Mednafen savedata format gamename.srm gamename.slot#.mcr By default , the Beetle PSX core will use Libretro's savedata format for Memcard slot 0 and Mednafen's savedata format for Memcard slot 1. Memcard slot 0 Memcard slot 1 gamename.srm gamename.1.mcr Attention Memory card behavior can be controlled with the following core options (Memcard 0 method, Enable memory card 1, Shared memcards). By default , the filenames of the Memcard savedata will match the loaded cue or m3u or pbp filename, like this: Loaded content: Breath of Fire III (USA).cue Memcard slot 0: Breath of Fire III (USA).srm Memcard slot 1: Breath of Fire III (USA).1.mcr or Loaded content: Final Fantasy VII (USA).m3u Memcard slot 0: Final Fantasy VII (USA).srm Memcard slot 1: Final Fantasy VII (USA).1.mcr or Loaded content: Wild Arms 2 (USA).pbp Memcard slot 0: `Wild Arms 2 (USA).srm Memcard slot 1: `Wild Arms 2 (USA).1.mcr Attention To import your old memory cards from other emulators, you need to rename them to either the Libretro savedata format or the Mednafen savedata format. The Libretro (.srm) savedata format, when used with Beetle PSX, is internally identical to the Mednafen PSX (.mcr) savedata format, and can be converted between one another via renaming. Warning Keep in mind that save states also include the state of the memory card; carelessly loading an old save state will OVEWRITE the memory card, potentially resulting in lost saved games. You can set the 'Don't overwrite SaveRAM on loading savestate' option in RetroArch's Saving settings to On to prevent this.","title":"Saves"},{"location":"library/beetle_psx/#core-options","text":"The Beetle PSX core has the following options that can be tweaked from your frontend's core options menu or manually changed via core configuration files. Options are listed below in the following format: Option Name [option_key] (setting1/setting2/...) To manually change an option, search for that option's key in the core configuration file you want to edit and set it to your desired setting value, enclosed in quotations. For example, if you had set the Internal Color Depth to 32bpp and wanted to revert it to 16bpp, you would change beetle_psx_depth = \"32bpp\" to beetle_psx_depth = \"16bpp(native)\" . Manually editing core configuration files is typically unnecessary unless your frontend does not have a method for toggling options. The default setting for each option will be highlighted in bold. Settings with (Restart) means that core has to be shut down for the new setting to be applied on next launch. Internal GPU Resolution [beetle_psx_internal_resolution] ( 1x(native) /2x/4x/8x/16x) Selects internal resolution multiplier. Resolutions higher than 1x(native) improve the fidelity of 3D models at the expense of increased performance requirements. 2D elements are generally unaffected by this setting from the core's perspective. Internal GPU Resolution - 1x Internal GPU Resolution - 2x Dithering Pattern [beetle_psx_dither_mode] ( 1x(native) /internal resolution/disabled) Select dithering pattern. Dithering is used by the original PSX hardware to combat the color banding visible due to 16bpp color depth. '1x(native)' emulates original hardware but can look grainy at higher internal resolutions. 'internal resolution' reduces graininess by allowing for finer dithering at higher Internal GPU Resolutions, but has limited effectiveness in combating color banding if the Internal GPU Resolution is set too high. (Note in the examples below that the 'internal resolution' option is less grainy but has more visible banding than '1x(native)' at 4x Internal GPU Resolution) 'disabled' is for users who otherwise wish to turn off dithering regardless of color banding. Dithering Pattern - 1x Native Dithering Pattern - Internal Resolution Dithering Pattern - Disabled PGXP Operation Mode [beetle_psx_pgxp_mode] ( disabled /memory only/memory + CPU) Enabling the Parallel/Precision Geometry Transform Pipeline (PGXP) allows polygons to be rendered with subpixel precision, eliminating or otherwise diminishing the polygon jitter/wobble visible on original PSX hardware. This distortion results from original hardware using fixed point mathematics when rendering 3D models, thus rounding polygon vertices to the nearest integer pixel. 'disabled' emulates original hardware behavior. 'memory only' mode enables subpixel precision at the cost of increased performance requirements with only minor compatibility issues. 'memory + CPU' mode can further reduce jitter but is highly demanding and is known to cause geometry errors. 'memory only' is recommended for best compatibility. https://www.youtube.com/watch?v=EYCpd_1lPUc Display Internal FPS [beetle_psx_display_internal_fps] ( disabled /enabled) Displays the frame rate that the emulated PSX is drawing at. Requires onscreen notifications to be enabled in the libretro frontend. Reported values may be inaccurate. Display internal FPS - On Line-to-Quad Hack [beetle_psx_line_render] ( default /aggressive/disabled) Certain games employ a special technique for drawing horizontal lines, which involves stretching single-pixel-high triangles across the screen in a manner that causes the PSX hardware to rasterise them as a row of pixels. Examples include Doom/Hexen, and the water effects in Soul Blade. When running such games with an Internal GPU Resolution higher than native, these triangles no longer resolve as a line, causing gaps to appear in the output image. Setting 'Line-to-Quad Hack' to 'Default' solves this issue by detecting small triangles and converting them as required. The 'Aggressive' option will likely introduce visual glitches due to false positives, but is needed for correct rendering of some 'difficult' titles (e.g. Dark Forces, Duke Nukem). Frame Duping (Speedup) [beetle_psx_frame_duping] ( disabled /enabled) When enabled, provides a small performance increase by redrawing/reusing the last rendered frame (instead of presenting a new one) if the content of the current frame is unchanged based on the internal fps heuristic. May cause inaccurate behavior or lost animation frames, so it is not recommended to use this unless necessary. CPU Dynarec [beetle_psx_cpu_dynarec] ( disabled /execute/execute_once/run_interpreter) Dynamically recompile CPU instructions to native instructions. Much faster than interpreter, but CPU timing is less accurate, and may have bugs. Dynarec Code Invalidation [beetle_psx_dynarec_invalidate] ( full /dma) Some games require Full invalidation, some require DMA Only. This option has no effect when CPU Dynarec is not enabled. Dynarec DMA/GPU Event Cycles [beetle_psx_dynarec_eventcycles] ( 128 /256/384/512/640/768/896/1024) Max cycles run by CPU before a GPU or DMA Update is checked, higher number will be faster, has much less impact on beetle interpreter than dynarec. Leave at 128 for default Beetle interpreter behavior when CPU Dynarec is not enabled. CPU Frequency Scaling (Overclock) [beetle_psx_cpu_freq_scale] (50% to 750% in increments of 10%. Default: 100%(native) ) Enable overclocking (or underclocking) of the emulated PSX's CPU. The default frequency of the MIPS R3000A-compatible 32-bit RISC CPU is 33.8688 MHz; running at higher frequencies can eliminate slowdown and improve frame rates in certain games at the expense of increased performance requirements. Note that some games have an internal frame rate limiter and may not benefit from overclocking. It is generally not recommended to adjust this setting as it causes many games or portions of them to run at unintended speeds. This can lead to audio and video desynchronization, among other issues. Leave at default for most games. GTE Overclock [beetle_psx_gte_overclock] ( disabled /enabled) When enabled, reduces the latency of operations involving the emulated PSX's Geometry Transform Engine (CPU coprocessor used for calculations related to 3D projection - i.e. all 3D graphics) to 1 cycle per instruction and additionally eliminates all memory access or cache fetch latency. For games that make heavy use of the GTE, this can greatly improve frame rate (and frame time) stability at the expense of increased performance requirements. Currently unstable -- leave off if unsure. GPU Rasterizer Overclock [beetle_psx_gpu_overclock] ( 1x(native) /2x/4x/8x/16x/32x) Enables overclocking of the 2D rasterizer contained within the emulated PSX's GPU. Does not improve 3D rendering, and in general has little effect. Skip BIOS [beetle_psx_skip_bios] ( disabled /enabled) When enabled, skips the PSX BIOS animation normally displayed with starting content. Enabling this option will cause compatibility issues with a small minority of games (Saga Frontier, PAL copy protected games, etc). Skip BIOS - Off Core-Reported FPS Timing [beetle_psx_core_timing_fps] ( force_progressive /force_interlaced/auto_toggle) Sets FPS timing that the core will report to the frontend. Automatic toggling will allow the core to switch between reporting progressive and interlaced rates, but may cause frontend video/audio driver reinits. Progressive timings are 59.826 for NTSC content and 49.761 for PAL content, and interlaced timings are 59.940 for NTSC content and 50.000 for PAL content. Core Aspect Ratio [beetle_psx_aspect_ratio] ( corrected /uncorrected/4:3) Set core provided aspect ratio. This setting is ignored when the Widescreen Mode Hack or Display Full VRAM options are enabled. \"4:3\" forces the core aspect ratio to 4:3 without taking horizontal overscan cropping or visible scanlines into account. The \"4:3\" setting should not be used and is only provided as a legacy feature for users desiring old incorrect behavior from the core. Widescreen Mode Hack [beetle_psx_widescreen_hack] ( disabled /enabled) Forces content to be rendered with an aspect ratio of 16:9. Produces best results with fully 3D games. Can cause graphical glitches or alignment/stretching issues in games that mix 3D and 2D elements. Leave off for most games. Widescreen mode hack - Off Widescreen mode hack - On Crop Horizontal Overscan [beetle_psx_crop_overscan] ( enabled /disabled) By default, Beetle PSX includes horizontal padding (black bars or 'pillarboxes' on either side of the screen) to emulate the same black bars generated in analog video output by real PSX hardware. This horizontal padding can contain garbage pixels that are generated when the game's width mode is smaller than the display area width in the emulated GPU registers. Enabling 'Crop Horizontal Overscan' will remove this potentially glitchy horizontal overscan region. Not all games will benefit from enabling this setting as shown in the examples below. Crop Overscan - Off (Game with Garbage Pixels) Crop Overscan - On (Game with Garbage Pixels) Crop Overscan - Off (Game with No Issues) Crop Overscan - On (Game with No Issues) This option does not affect vertical overscan. Vertical overscan can be cropped using the Initial/Last Scanline core options. Additional Cropping [beetle_psx_image_crop] ( disabled /1px/2px/3px/4px/5px/6px/7px/8px) When 'Crop Horizontal Overscan' is enabled, this option further reduces the width of the cropped image by the specified number of pixels. Note: This can have unintended consequences. While the absolute width is reduced, the resultant video is still scaled to the currently set aspect ratio. Enabling 'Additional Cropping' may therefore cause horizontal stretching. Offset Cropped Image [beetle_psx_image_offset] ( disabled /-4px/-3px/-2px/-1px/+1px/+2px/+3px/+4px) When 'Crop Horizontal Overscan' is enabled, allows the resultant cropped image to be offset horizontally to the right (positive) or left (negative) by the specified number of pixels. May be used to correct alignment issues. Initial Scanline - NTSC [beetle_psx_initial_scanline] (0 to 40 in increments of 1. Default: 0 ) Selects the first displayed scanline when running NTSC content. Setting a value greater than 0 will reduce the height of output images by cropping pixels from the topmost edge. May be used to counteract letterboxing built in to some games. Last Scanline - NTSC [beetle_psx_last_scanline] (210 to 239 in increments of 1. Default: 239 ) Selects the last displayed scanline when running NTSC content. Setting a value less than 239 will reduce the height of output images by cropping pixels from the bottommost edge. May be used to counteract letterboxing built in to some games. Initial Scanline - PAL [beetle_psx_initial_scanline_pal] (0 to 40 in increments of 1. Default: 0 ) Selects the first displayed scanline when running PAL content. Setting a value greater than 0 will reduce the height of output images by cropping pixels from the topmost edge. May be used to counteract letterboxing built in to some games. Last Scanline - PAL [beetle_psx_last_scanline_pal] (230 to 287 in increments of 1. Default: 287 ) Selects the last displayed scanline when running PAL content. Setting a value less than 287 will reduce the height of output images by cropping pixels from the bottommost edge. May be used to counteract letterboxing built in to some games. CD Access Method (Restart) [beetle_psx_cd_access_method] ( sync /async/precache) Selects method used to read data from content disc images. 'sync' emulates original hardware. 'async' can alleviate stuttering on devices with slow storage. 'precache' loads the entire disc image into memory when starting content, incurring a small startup delay. This can improve in-game loading times and eliminate stutters due to emulated CD access, but may cause issues on systems with low memory. CD Loading Speed [beetle_psx_cd_fastload] ( 2x(native) /4x/6x/8x/10x/12x/14x) Selects disk access speed multiplier. This speedhack can greatly reduce loading times at speeds higher than native but is known to introduce texture corruption errors, timing glitches, or loading screen softlocks in many titles. Some games will not work at all if loading speed is not set to native (e.g. Castlevania: Symphony of the Night). Reduce multiplier value if experiencing loading issues, freezes, etc. Memory Card 0 Method (Restart) [beetle_psx_use_mednafen_memcard0_method] ( libretro /mednafen) Choose the savedata format used for Memory Card 0. See the Saves section above for an explanation regarding the libretro and mednafen formats. libretro is recommended, but mednafen may be used for compatibility with the standalone version of Mednafen. The libretro (.srm) and Mednafen (.mcr) formats are internally identical when used with Beetle PSX. Note: This option must be set to 'mednafen' if the Shared Memcards option is enabled. Enable Memory Card 1 (Restart) [beetle_psx_enable_memcard1] ( enabled /disabled) Selects whether to emulate a second memory card in Slot 1. When disabled, games can only access the memory card in Slot 0. Note: Some games require this option to be disabled for correct operation (e.g. Codename Tenka). Shared Memory Cards (Restart) [beetle_psx_shared_memory_cards] ( disabled /enabled) When enabled, games will save and load using the same memory card files. Note: The \"Memcard 0 Method\" option must be set to 'mednafen' for this option to function properly. When disabled, separate memory card files will be generated for each title. This option is useful for games in series such as Suikoden or Arc the Lad that check for save data from previous titles. Memcard slot 0 Memcard slot 1 mednafen_psx_libretro_shared.0.mcr mednafen_psx_libretro_shared.1.mcr Analog Self-Calibration [beetle_psx_analog_calibration] ( disabled /enabled) When enabled, monitors the max values reached by the input, using it as a calibration heuristic which then scales the analog coordinates sent to the emulator accordingly. For best results, rotate the sticks at max amplitude for the algorithm to get a good estimate of the scaling factor, otherwise it will adjust while playing. While modern analog sticks have circular logical ranges, older analog sticks such as those on the DualShock have logical ranges closer to squares and can report larger values at the intercardinal directions than modern analog sticks can. Games that expect these larger values will have issues controlling with modern analog sticks, which this option can solve by scaling modern analog stick values up. Enable DualShock Analog Mode Toggle [beetle_psx_analog_toggle] ( disabled /enabled) When the input device type is set to DualShock, this option determines whether or not the Analog Button on that device can be toggled. When this option is disabled, the DualShock input device will be locked in Analog Mode where the analog sticks are on. When this option is enabled, the DualShock input device can be toggled between Digital Mode (analog sticks off) and Analog Mode (analog sticks on) much like real hardware by pressing and holding START+SELECT+L1+L2+R1+R2 for one second in lieu of a dedicated Analog Button. Note: Some games may not respond to input when the DualShock is in Analog Mode. Either enable Analog Button Toggle and toggle the DualShock to Digital Mode or change your input device type to PlayStation Controller. Port 1: Multitap Enable [beetle_psx_enable_multitap_port1] ( disabled /enabled) Enables/Disables multitap functionality on port 1. Port 2: Multitap Enable [beetle_psx_enable_multitap_port2] ( disabled /enabled) Enables/Disables multitap functionality on port 2. Gun Input Mode [beetle_psx_gun_input_mode] ( lightgun /touchscreen) When device type is set to 'Guncon / G-Con 45' or 'Justifier', specify whether to use a mouse-controlled 'Light Gun' or 'Touchscreen' input. Gun Cursor [beetle_psx_gun_cursor] ( cross /dot/off) Selects the gun cursor to be displayed on screen while using the the 'Guncon / G-Con 45' and 'Justifier' input device types. When disabled, cross hairs are always hidden. Gun Cursor - Cross Gun Cursor - Dot Gun Cursor - Off Mouse Sensitivity [beetle_psx_mouse_sensitivity] (5% to 200% in increments of 5%. Default: 100% ) Configure the response of the 'Mouse' input device type. NegCon Twist Response [beetle_psx_negcon_response] ( linear /quadratic/cubic) Specifies the analog response when using a RetroPad left analog stick to simulate the 'twist' action of emulated neGcon Controllers . 'linear': Analog stick displacement is mapped linearly to negCon rotation angle. 'quadratic': Analog stick displacement is mapped quadratically to negCon rotation angle. This allows for greater precision when making small movements with the analog stick. 'cubic': Analog stick displacement is mapped cubically to negCon rotation angle. This allows for even greater precision when making small movements with the analog stick, but 'exaggerates' larger movements. Attention A linear response is not recommended when using standard gamepad devices. The negCon 'twist' mechanism is substantially different from conventional analog sticks; linear mapping over-amplifies small displacements of the stick, impairing fine control. A linear response is only appropriate when using racing wheel peripherals. In most cases, the 'quadratic' option should be selected. This provides effective compensation for the physical differences between real/emulated hardware and is the closest approximation of real hardware, enabling smooth/precise analog input. NegCon Twist Deadzone [beetle_psx_negcon_deadzone] ( 0% /5%/10%/15%/20%/25%/30%) Sets the deadzone of the RetroPad left analog stick when simulating the 'twist' action of emulated neGcon Controllers . Used to eliminate drift/unwanted input. Attention Most (all?) negCon compatible titles provide in-game options for setting a 'twist' deadzone value. To avoid loss of precision, the in-game deadzone should always be set to zero. Any analog stick drift should instead be accounted for by configuring the 'NegCon Twist Deadzone' core option. This is particularly important when 'NegCon Twist Response' is set to 'quadratic' or 'cubic'. Xbox gamepads typically require a deadzone of 15-20%. Many Android-compatible bluetooth gamepads have an internal 'hardware' deadzone, allowing the deadzone value here to be set to 0%. For convenience, it is recommended to make use of the 'Options \u2192 Analog Setting 1P' menu of Gran Turismo when calibrating the 'NegCon Twist Deadzone'. This provides a clear and precise representation of 'real' controller input values.","title":"Core options"},{"location":"library/beetle_psx/#user-1-8-device-types","text":"The Beetle PSX core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): None - Input disabled. PlayStation Controller - Joypad - PlayStation Controller (SCPH-1080) DualShock - Joypad - DualShock (SCPH-1200) Analog Controller - Joypad - PlayStation Dual Analog Controller(SCPH-1180) Analog Joystick - Joypad - PlayStation Analog Joystick (SCPH-1110) Guncon / G-Con 45 - Lightgun - Namco Gun Controller (SLEH-00007) Justifier - Lightgun - Konami Justifier lightgun peripheral (SLEH-00005, SLUH-00017) Mouse - Mouse - PlayStation Mouse (SCPH-1090, SCPH-1030) neGcon - Joypad - Namco third party controller","title":"User 1 - 8 device types"},{"location":"library/beetle_psx/#rumble-support","text":"Rumble only works in the Beetle PSX core when The content being ran has rumble support. The frontend being used has rumble support. The joypad device being used has rumble support. The corresponding user's device type is set to DualShock","title":"Rumble support"},{"location":"library/beetle_psx/#multitap-support","text":"Activating multitap support in compatible games can be configured by the 'Port 1: Multitap enable' and 'Port 2: Multitap enable' core options .","title":"Multitap support"},{"location":"library/beetle_psx/#joypad","text":"User 1 - 8 input descriptors RetroPad Inputs PlayStation Controller Inputs DualShock Inputs Analog Controller Inputs Analog Joystick Inputs neGcon Inputs Cross Analog button I Square Analog button II Select Start Start D-Pad Up D-Pad Up D-Pad Down D-Pad Down D-Pad Left D-Pad Left D-Pad Right D-Pad Right Circle A Triangle B L1 Left shoulder button (analog) R1 Right shoulder button (digital) L2 Analog button II R2 Analog button I L3 R3 Left Analog X X Left Joystick X Twist Left Analog Y Y Left Joystick Y Right Analog X X Right Joystick X Right Analog Y Y Right Joystick Y","title":"Joypad"},{"location":"library/beetle_psx/#mouse","text":"RetroMouse Inputs Mouse Inputs Mouse Cursor Mouse Cursor Mouse 1 Mouse Left Button Mouse 2 Mouse Right Button","title":"Mouse"},{"location":"library/beetle_psx/#lightgun","text":"RetroLightgun Inputs Guncon / G-Con 45 Inputs Justifier Inputs Gun Crosshair Guncon / G-Con 45 Crosshair Justifier Crosshair Gun Trigger Guncon / G-Con 45 Trigger Justifier Trigger Gun Reload Guncon / G-Con 45 Reload Justifier Reload Gun Aux A Guncon / G-Con 45 A Justifier Aux Gun Aux B Guncon / G-Con 45 B Gun Start Justifier Start","title":"Lightgun"},{"location":"library/beetle_psx/#compatibility","text":"A list of known emulation bugs can be found here https://forum.fobby.net/index.php?t=msg&th=1114&start=0&","title":"Compatibility"},{"location":"library/beetle_psx/#external-links","text":"Official Mednafen Website Official Mednafen Downloads Beetle PSX Libretro Core info file Beetle PSX Libretro Github Repository Report Beetle PSX Core Issues Here","title":"External Links"},{"location":"library/beetle_psx/#libretro-psx-cores","text":"PlayStation (Beetle PSX HW) PlayStation (PCSX ReARMed)","title":"Libretro PSX cores"},{"location":"library/beetle_psx_hw/","text":"PlayStation (Beetle PSX HW) \u00b6 Last Updated: March 21, 2020 Background \u00b6 Beetle PSX HW is a port/fork of Mednafen's PSX module to the libretro API. It can be compiled in C++98 mode, excluding the Vulkan renderer, which is written in C++11 for the time being. Beetle PSX HW currently runs on Linux, OSX and Windows. Notable additions in this fork are: PBP and CHD file format support, developed by Zapeth; Software renderer internal resolution upscaling, implemented by simias; An OpenGL 3.3 renderer, developed by simias; A Vulkan renderer, developed by TinyTiger; PGXP perspective correct texturing and subpixel precision, developed by iCatButler; The Beetle PSX HW core has been authored by Mednafen Team The Beetle PSX HW core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here . Requirements \u00b6 OpenGL 3.3 for the opengl renderer Vulkan for the vulkan renderer BIOS \u00b6 Required or optional firmware files go in the frontend's system directory. Filename Description md5sum scph5500.bin PS1 JP BIOS - Required for JP games 8dd7d5296a650fac7319bce665a6a53c scph5501.bin PS1 US BIOS - Required for US games 490f666e1afb15b7362b406ed1cea246 scph5502.bin PS1 EU BIOS - Required for EU games 32736f17079d0b2b7024407c39bd3050 Extensions \u00b6 Content that can be loaded by the Beetle PSX HW core have the following file extensions: .cue .toc .m3u .ccd .exe .pbp .chd RetroArch database(s) that are associated with the Beetle PSX HW core: Sony - PlayStation Features \u00b6 Frontend-level settings or features that the Beetle PSX HW core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2714 Rumble \u2714 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2714 Username \u2715 Language \u2715 Crop Overscan * \u2715 LEDs \u2715 * Overscan cropping available via Core Options instead of frontend settings Directories \u00b6 The Beetle PSX HW core's library name is 'Beetle PSX HW' The Beetle PSX HW core saves/loads to/from these directories. Frontend's Save directory Memory cards Frontend's State directory File Description *.state# State Geometry and timing \u00b6 The Beetle PSX HW core's core provided FPS is 59.826 for NTSC games and 49.761 for PAL games (non-interlaced rates) and is toggleable to 59.940 for NTSC games and 50.000 for PAL games (interlaced rates) through core options The Beetle PSX HW core's core provided sample rate is 44100 Hz The Beetle PSX HW core's base width is 320 The Beetle PSX HW core's base height is 240 The Beetle PSX HW core's max width is 700 when the 'Internal GPU resolution' is set to 1x. Raising the resolution past 1x will increase the max width The Beetle PSX HW core's max height is 576 when the 'Internal GPU resolution' is set to 1x. Raising the resolution past 1x will increase the max height The Beetle PSX HW core's core provided aspect ratio is automatically set based on core options Loading content \u00b6 Beetle PSX HW needs a cue-sheet that points to an image file. A cue sheet, or cue file, is a metadata file which describes how the tracks of a CD or DVD are laid out. If you have e.g. foo.bin , you should create a text file and save it as foo.cue . Most PS1 games are single-track, so the cue file contents should look like this: foobin.cue FILE \"foo.bin\" BINARY TRACK 01 MODE1/2352 INDEX 01 00:00:00 After that, you can load the foo.cue file in RetroArch with the Beetle PSX HW core. Attention Certain PS1 games are multi-track, so their .cue files might be more complicated. Playing PAL copy protected games \u00b6 PAL copy protected games need a SBI Subchannel file next to the bin/cue files in order to get past the copy protection. Ape Escape (Europe).bin Ape Escape (Europe).cue Ape Escape (Europe).sbi Warning For proper PAL game compatibility, the 'Skip BIOS' core option needs to be set to off. Multiple-disk games \u00b6 If foo is a multiple-disk game, you should have .cue files for each one, e.g. foo (Disc 1).cue , foo (Disc 2).cue , foo (Disc 3).cue . To take advantage of Beetle PSW HW's Disk Control feature for disk swapping, an index file (a m3u file) should be made. Create a text file and save it as foo.m3u . Then enter your game's .cue files on it. The m3u file contents should look something like this: foo.m3u foo (Disc 1).cue foo (Disc 2).cue foo (Disc 3).cue After that, you can load the foo.m3u file in RetroArch with the Beetle PSX HW core. Here's a m3u example done with Valkryie Profile Attention Adding multi-track games to a RetroArch playlist is recommended. (Manually add an entry a playlist that points to foo.m3u ) Swapping disks \u00b6 Disks can be swapped through Quick Menu -> Disk Control in RetroArch. If not using .m3u files, .cue files must be manually selected via the Load New Disk legacy feature. If using .m3u files, disks can be swapped by selecting Eject Disk, changing the Current Disk Index to your desired disk, and finally selecting Insert Disk. Compressed content \u00b6 Alternatively to using cue sheets with .bin/.iso files, you can convert your games to .pbp (Playstation Portable update file) or .chd (MAME Compressed Hunks of Data) to reduce file sizes and neaten up your game folder. PBP \u00b6 A recommended .pbp convert tool is PSX2PSP. If converting a multiple-disk game, all disks should be added to the same .pbp file, rather than making a .m3u file for them. Most conversion tools will want a single .bin file for each disk. If your game uses multiple .bin files (tracks) per disk, you will have to mount the cue sheet to a virtual drive and re-burn the images onto a single track before conversion. For multi-disk PAL copy-protected games, change the sbi file syntax from [filename].sbi to [filename]_[disc_number].sbi Final Fantasy IX (Germany).pbp Final Fantasy IX (Germany)_1.sbi Final Fantasy IX (Germany)_2.sbi Final Fantasy IX (Germany)_3.sbi Final Fantasy IX (Germany)_4.sbi Attention RetroArch does not currently have .pbp database due to variability in users' conversion methods. All .pbp games will have to be added to playlists manually. CHD \u00b6 To convert content to CHD format, use the chdman tool found inside the latest MAME distribution and point it to a .cue file, like so: chdman createcd --input foo.cue --output foo.chd Note that the tool currrently does not integrate .sbi files into the .chd, so these must be placed alongside the resulting .chd file in order to properly play games with LibCrypt protection. Attention For multi-disc content, make an .m3u file that lists all the .chd files instead of .cue files. Like the PBP files, content must be added to playlists manually. Saves \u00b6 For game savedata storage, the PSX console used memory cards. The PSX console had two slots for memory cards. In this doc, the first memory card slot will be referred to as 'Memcard slot 0' and the second slot will be referred to as 'Memcard slot 1'. For memory card functionality and usage, the Beetle PSX HW core will either use the Libretro savedata format or the Mednafen savedata format. Libretro savedata format Mednafen savedata format gamename.srm gamename.slot#.mcr By default , the Beetle PSX HW core will use Libretro's savedata format for Memcard slot 0 and Mednafen's savedata format for Memcard slot 1. Memcard slot 0 Memcard slot 1 gamename.srm gamename.1.mcr Attention Memory card behavior can be controlled with the following core options (Memcard 0 method, Enable memory card 1, Shared memcards). By default , the filenames of the Memcard savedata will match the loaded cue or m3u or pbp filename, like this: Loaded content: Breath of Fire III (USA).cue Memcard slot 0: Breath of Fire III (USA).srm Memcard slot 1: Breath of Fire III (USA).1.mcr or Loaded content: Final Fantasy VII (USA).m3u Memcard slot 0: Final Fantasy VII (USA).srm Memcard slot 1: Final Fantasy VII (USA).1.mcr or Loaded content: Wild Arms 2 (USA).pbp Memcard slot 0: `Wild Arms 2 (USA).srm Memcard slot 1: `Wild Arms 2 (USA).1.mcr Attention To import your old memory cards from other emulators, you need to rename them to either the Libretro (.srm) savedata format or the Mednafen (.mcr) savedata format. The Libretro (.srm) savedata format, when used with Beetle PSX, is internally identical to the Mednafen PSX (.mcr) savedata format, and can be converted between one another via renaming. Warning Keep in mind that save states also include the state of the memory card; carelessly loading an old save state will OVEWRITE the memory card, potentially resulting in lost saved games. You can set the 'Don't overwrite SaveRAM on loading savestate' option in RetroArch's Saving settings to On to prevent this. Core options \u00b6 The Beetle PSX HW core has the following options that can be tweaked from your frontend's core options menu or manually changed via core configuration files. Options are listed below in the following format: Option Name [option_key] (setting1/setting2/...) To manually change an option, search for that option's key in the core configuration file you want to edit and set it to your desired setting value, enclosed in quotations. For example, if you had set the Internal Color Depth to 32bpp and wanted to revert it to 16bpp, you would change beetle_psx_hw_depth = \"32bpp\" to beetle_psx_hw_depth = \"16bpp(native)\" . Manually editing core configuration files is typically unnecessary unless your frontend does not have a method for toggling options. The default setting for each option will be highlighted in bold. Settings with (Restart) means that core has to be shut down for the new setting to be applied on next launch. Renderer (Restart) [beetle_psx_hw_renderer] ( hardware /hardware_gl/hardware_vk/software) Chooses which video renderer will be used. Software is the most accurate but generally has higher performance requirements when running at internal GPU resolutions higher than 1x. The software renderer also lacks certain enhancements exclusive to the hardware renderer. Hardware is less accurate but may have improved performance over the software renderer at internal GPU resolutions of 2x and above on capable hardware. The hardware renderers also allow various graphical enhancements such as higher color depth, texture filtering, and PGXP. Choosing hardware will automatically select either the Vulkan or OpenGL renderer depending on the current libretro frontend video driver. If the provided frontend video driver is not Vulkan or OpenGL (3.3 or higher) then the core will fall back to the software renderer at 1x internal resolution. hardware_gl and hardware_vk allow the core to ignore the frontend preferred hardware context and attempt to force a specific hardware renderer. If the core is unable to do so, it will fall back to the software renderer at 1x internal resolution. The ability to force specific renderers may not be available on all platforms. The hardware renderers have known issues -- check the compatibility section below or the core's issue tracker for more details. Software Framebuffer [beetle_psx_hw_renderer_software_fb] ( enabled /disabled) OpenGL/Vulkan Only Allows accurate emulation of framebuffer readback effects (e.g. motion blur, FF7 battle swirl, etc.) when using the hardware renderer. If disabled, certain operations are omitted or rendered on the GPU, which can improve performance but may cause graphical errors or cause stuttering . Leave enabled if unsure. Internal GPU Resolution [beetle_psx_hw_internal_resolution] ( 1x(native) /2x/4x/8x/16x) Selects internal resolution multiplier. Resolutions higher than 1x(native) improve the fidelity of 3D models at the expense of increased performance requirements. 2D elements are generally unaffected by this setting from the core's perspective. Internal GPU Resolution - 1x Internal GPU Resolution - 2x Internal Color Depth [beetle_psx_hw_depth] ( 16bpp(native) /32bpp) OpenGL Only The PSX has a limited color depth of 16 bits per pixel (bpp). This leads to banding effects (uneven color gradients) which are smoothed out by original hardware through the use of a dithering pattern. The '16bpp(native)' setting emulates the original 16bpp color depth. Selecting '32 bpp' increases the color depth such that smoother gradients can be achieved without dithering, allowing for a cleaner undithered output. Note the visible horizontal bands on an undithered 16bpp image compared to the same undithered image at 32bpp: Undithered 16bpp Undithered 32bpp This option should be toggled in conjunction with the Dithering Pattern option. The software renderer is locked to 16bpp while the Vulkan renderer will automatically set render at 16bpp if dithering is enabled and 32bpp if dithering is disabled. Dithering Pattern [beetle_psx_hw_dither_mode] ( 1x(native) /internal resolution/disabled) Select dithering pattern. Dithering is used by the original PSX hardware to combat the color banding visible due to 16bpp color depth. This option is less necessary and can be disabled if the Internal Color Depth option is set to '32bpp'. '1x(native)' emulates original hardware but can look grainy at higher internal resolutions. 'internal resolution' reduces graininess by allowing for finer dithering at higher Internal GPU Resolutions, but has limited effectiveness in combating color banding if the Internal GPU Resolution is set too high. (Note in the examples below that the 'internal resolution' option is less grainy but has more visible banding than '1x(native)' at 4x Internal GPU Resolution) 'disabled' is useful to pair with '32bpp' Internal Color Depth where banding is far less visible or for users who otherwise wish to turn off dithering regardless of color banding at 16bpp. Dithering Pattern - 1x Native (16bpp 4x IR) Dithering Pattern - Internal Resolution (16bpp 4x IR) Dithering Pattern - Disabled (16bpp 4x IR) Texture Filtering [beetle_psx_hw_filter] ( nearest /SABR/xBR/bilinear/3-point/JINC2) OpenGL/Vulkan Only Choose per-texture filtering method. Texture filters can modify or enhance the appearance of 3D polygon textures and 2D elements. 'Nearest' emulates original hardware. 'Bilinear' and '3-Point' are smoothing filters, which reduce pixelation via blurring. 'SABR', 'xBR' and 'JINC2' are upscaling filters, which improve texture fidelity/sharpness at the expense of increased performance requirements. nearest SABR xBR bilinear 3-point JINC2 Adaptive Smoothing [beetle_psx_hw_adaptive_smoothing] ( disabled /enabled) Vulkan Only Enable smoothing of 2D artwork and UI elements without blurring 3D rendered objects. Adaptive smoothing - Off Adaptive smoothing - On Supersampling (Downsample to Native Resolution) [beetle_psx_hw_super_sampling] ( disabled /enabled) Vulkan Only When enabled, renders content at the specified Internal GPU Resolution then downsamples the resulting image to native 240p before shaders and resizing are applied by the frontend. Allows games to be displayed at native (low) resolution but with clean anti-aliased 3D objects. Produces best results when applied to titles that mix 2D and 3D elements such as 3D characters on pre-rendered backgrounds. This option is not to be confused with implicit supersampling provided by rendering at a higher Internal GPU Resolution multiplier then downsampling to the frontend's window scale. Supersampling from 1x Internal Resolution with CRT Royale Shader Supersampling from 8x Internal Resolution with CRT Royale Shader Multi-Sampled Anti Aliasing [beetle_psx_hw_msaa] ( 1x /2x/4x/8x/16x) Vulkan Only Apply multi-sample anti-aliasing (MSAA) to rendered content. This is a type of spatial anti-aliasing similar to supersampling, but of somewhat lower quality and with (correspondingly) lower performance requirements. Improves the appearance of 3D objects. MSAA may be clamped internally at a lower value than what it is set at when running at higher Internal GPU Resolutions. MDEC YUV Chroma Filter [beetle_psx_hw_mdec_yuv] ( disabled /enabled) Vulkan Only Improves the quality of FMV playblack by smoothing the chroma channel when converting YcBcR to RGB. This reduces macroblocking artefacts (squares/jagged edges) as shown below: MDEC YUV Chroma Filter On/Off Comparison Wireframe Mode [beetle_psx_hw_wireframe] ( disabled /enabled) OpenGL Only Renders 3D polygons models in outline form without textures or shading. For debug use only. Leave off for normal usage. Wireframe mode - On Display Full VRAM [beetle_psx_hw_display_vram] ( disabled /enabled) OpenGL/Vulkan Only Visualizes full contents of the emulated PSX VRAM. For debug use only. Leave off for normal usage. Display full VRAM - On PGXP Operation Mode [beetle_psx_hw_pgxp_mode] ( disabled /memory only/memory + CPU) Enabling the Parallel/Precision Geometry Transform Pipeline (PGXP) allows polygons to be rendered with subpixel precision, eliminating or otherwise diminishing the polygon jitter/wobble visible on original PSX hardware. This distortion results from original hardware using fixed point mathematics when rendering 3D models, thus rounding polygon vertices to the nearest integer pixel. 'disabled' emulates original hardware behavior. 'memory only' mode enables subpixel precision at the cost of increased performance requirements with only minor compatibility issues. 'memory + CPU' mode can further reduce jitter but is highly demanding and is known to cause geometry errors. 'memory only' is recommended for best compatibility. https://www.youtube.com/watch?v=EYCpd_1lPUc PGXP Vertex Cache [beetle_psx_hw_pgxp_vertex] ( disabled /enabled) OpenGL/Vulkan Only Allows PGXP-enhanced polygon vertex coordinates to be cached when PGXP Operation Mode is also enabled. This option improves performance by allowing subpixel-accurate values to be used across successive polygon draws instead of rebasing from native PSX data each time. Allows for better object alignment and may reduce visible seams, but false positives when querying the cache produces graphical glitches in most games. Recommended to leave disabled. PGXP Perspective Correct Texturing [beetle_psx_hw_pgxp_texture] ( disabled /enabled) OpenGL/Vulkan Only Allows for perspective correct texturing when PGXP Operation Mode is also enabled. Original PSX hardware renders 3D objects with affine texture mapping where texture coordinates are interpolated between polygon vertices in 2D screen space with no consideration of object depth. This causes significant position-dependent distortion and/or blending of textures such as warped lines across floors and walls. PGXP Perspective Correct Texturing accounts correctly for vertex positions in 3D space thereby eliminating this texture distortion at the expense of increased performance requirements. PGXP Texturing - Off PGXP Texturing - On Display Internal FPS [beetle_psx_hw_display_internal_fps] ( disabled /enabled) Displays the frame rate that the emulated PSX is drawing at. Requires onscreen notifications to be enabled in the libretro frontend. Reported values may be inaccurate. Display internal FPS - On Line-to-Quad Hack [beetle_psx_hw_line_render] ( default /aggressive/disabled) Certain games employ a special technique for drawing horizontal lines, which involves stretching single-pixel-high triangles across the screen in a manner that causes the PSX hardware to rasterise them as a row of pixels. Examples include Doom/Hexen, and the water effects in Soul Blade. When running such games with an Internal GPU Resolution higher than native, these triangles no longer resolve as a line, causing gaps to appear in the output image. Setting 'Line-to-Quad Hack' to 'Default' solves this issue by detecting small triangles and converting them as required. The 'Aggressive' option will likely introduce visual glitches due to false positives, but is needed for correct rendering of some 'difficult' titles (e.g. Dark Forces, Duke Nukem). Frame Duping (Speedup) [beetle_psx_hw_frame_duping] ( disabled /enabled) Software Renderer and Vulkan only When enabled, provides a small performance increase by redrawing/reusing the last rendered frame (instead of presenting a new one) if the content of the current frame is unchanged based on the internal fps heuristic. May cause inaccurate behavior or lost animation frames, so it is not recommended to use this unless necessary. CPU Dynarec [beetle_psx_hw_cpu_dynarec] ( disabled /execute/execute_once/run_interpreter) Dynamically recompile CPU instructions to native instructions. Much faster than interpreter, but CPU timing is less accurate, and may have bugs. Dynarec Code Invalidation [beetle_psx_hw_dynarec_invalidate] ( full /dma) Some games require Full invalidation, some require DMA Only. This option has no effect when CPU Dynarec is not enabled. Dynarec DMA/GPU Event Cycles [beetle_psx_hw_dynarec_eventcycles] ( 128 /256/384/512/640/768/896/1024) Max cycles run by CPU before a GPU or DMA Update is checked, higher number will be faster, has much less impact on beetle interpreter than dynarec. Leave at 128 for default Beetle interpreter behavior when CPU Dynarec is not enabled. CPU Frequency Scaling (Overclock) [beetle_psx_hw_cpu_freq_scale] (50% to 750% in increments of 10%. Default: 100%(native) ) Enable overclocking (or underclocking) of the emulated PSX's CPU. The default frequency of the MIPS R3000A-compatible 32-bit RISC CPU is 33.8688 MHz; running at higher frequencies can eliminate slowdown and improve frame rates in certain games at the expense of increased performance requirements. Note that some games have an internal frame rate limiter and may not benefit from overclocking. It is generally not recommended to adjust this setting as it causes many games or portions of them to run at unintended speeds. This can lead to audio and video desynchronization, among other issues. Leave at default for most games. GTE Overclock [beetle_psx_hw_gte_overclock] ( disabled /enabled) When enabled, reduces the latency of operations involving the emulated PSX's Geometry Transform Engine (CPU coprocessor used for calculations related to 3D projection - i.e. all 3D graphics) to 1 cycle per instruction and additionally eliminates all memory access or cache fetch latency. For games that make heavy use of the GTE, this can greatly improve frame rate (and frame time) stability at the expense of increased performance requirements. Currently unstable -- leave off if unsure. GPU Rasterizer Overclock [beetle_psx_hw_gpu_overclock] ( 1x(native) /2x/4x/8x/16x/32x) Enables overclocking of the 2D rasterizer contained within the emulated PSX's GPU. Does not improve 3D rendering, and in general has little effect. Skip BIOS [beetle_psx_hw_skip_bios] ( disabled /enabled) When enabled, skips the PSX BIOS animation normally displayed with starting content. Enabling this option will cause compatibility issues with a small minority of games (Saga Frontier, PAL copy protected games, etc). Skip BIOS - Off Core-Reported FPS Timing [beetle_psx_hw_core_timing_fps] ( force_progressive /force_interlaced/auto_toggle) Sets FPS timing that the core will report to the frontend. Automatic toggling will allow the core to switch between reporting progressive and interlaced rates, but may cause frontend video/audio driver reinits. Progressive timings are 59.826 for NTSC content and 49.761 for PAL content, and interlaced timings are 59.940 for NTSC content and 50.000 for PAL content. Core Aspect Ratio [beetle_psx_hw_aspect_ratio] ( corrected /uncorrected/4:3) Set core provided aspect ratio. This setting is ignored when the Widescreen Mode Hack or Display Full VRAM options are enabled. \"4:3\" forces the core aspect ratio to 4:3 without taking horizontal overscan cropping or visible scanlines into account. The \"4:3\" setting should not be used and is only provided as a legacy feature for users desiring old incorrect behavior from the core. Widescreen Mode Hack [beetle_psx_hw_widescreen_hack] ( disabled /enabled) Forces content to be rendered with an aspect ratio of 16:9. Produces best results with fully 3D games. Can cause graphical glitches or alignment/stretching issues in games that mix 3D and 2D elements. Leave off for most games. Widescreen mode hack - Off Widescreen mode hack - On Crop Horizontal Overscan [beetle_psx_hw_crop_overscan] ( enabled /disabled) By default, Beetle PSX includes horizontal padding (black bars or 'pillarboxes' on either side of the screen) to emulate the same black bars generated in analog video output by real PSX hardware. This horizontal padding can contain garbage pixels that are generated when the game's width mode is smaller than the display area width in the emulated GPU registers. Enabling 'Crop Horizontal Overscan' will remove this potentially glitchy horizontal overscan region. Not all games will benefit from enabling this setting as shown in the examples below. Crop Overscan - Off (Game with Garbage Pixels) Crop Overscan - On (Game with Garbage Pixels) Crop Overscan - Off (Game with No Issues) Crop Overscan - On (Game with No Issues) This option does not affect vertical overscan. Vertical overscan can be cropped using the Initial/Last Scanline core options. Additional Cropping [beetle_psx_hw_image_crop] ( disabled /1px/2px/3px/4px/5px/6px/7px/8px) Software Renderer Only When 'Crop Horizontal Overscan' is enabled, this option further reduces the width of the cropped image by the specified number of pixels. Note: This can have unintended consequences. While the absolute width is reduced, the resultant video is still scaled to the currently set aspect ratio. Enabling 'Additional Cropping' may therefore cause horizontal stretching. Offset Cropped Image [beetle_psx_hw_image_offset] ( disabled /-4px/-3px/-2px/-1px/+1px/+2px/+3px/+4px) Software Renderer Only When 'Crop Horizontal Overscan' is enabled, allows the resultant cropped image to be offset horizontally to the right (positive) or left (negative) by the specified number of pixels. May be used to correct alignment issues. Horizontal Image Offset (GPU Cycles) [beetle_psx_hw_image_offset_cycles] (-24 to +24 in increments of 1. Default: 0 ) OpenGL/Vulkan Only Horizontally offsets the outputted image by the specified number of GPU timing cycles. Currently only for the hardware renderers and functions like 'Offset Cropped Image', but at a finer granularity and does not require 'Crop Horizontal Overscan' to be enabled for this option to have an effect. Initial Scanline - NTSC [beetle_psx_hw_initial_scanline] (0 to 40 in increments of 1. Default: 0 ) Selects the first displayed scanline when running NTSC content. Setting a value greater than 0 will reduce the height of output images by cropping pixels from the topmost edge. May be used to counteract letterboxing built in to some games. Last Scanline - NTSC [beetle_psx_hw_last_scanline] (210 to 239 in increments of 1. Default: 239 ) Selects the last displayed scanline when running NTSC content. Setting a value less than 239 will reduce the height of output images by cropping pixels from the bottommost edge. May be used to counteract letterboxing built in to some games. Initial Scanline - PAL [beetle_psx_hw_initial_scanline_pal] (0 to 40 in increments of 1. Default: 0 ) Selects the first displayed scanline when running PAL content. Setting a value greater than 0 will reduce the height of output images by cropping pixels from the topmost edge. May be used to counteract letterboxing built in to some games. Last Scanline - PAL [beetle_psx_hw_last_scanline_pal] (230 to 287 in increments of 1. Default: 287 ) Selects the last displayed scanline when running PAL content. Setting a value less than 287 will reduce the height of output images by cropping pixels from the bottommost edge. May be used to counteract letterboxing built in to some games. CD Access Method (Restart) [beetle_psx_hw_cd_access_method] ( sync /async/precache) Selects method used to read data from content disc images. 'sync' emulates original hardware. 'async' can alleviate stuttering on devices with slow storage. 'precache' loads the entire disc image into memory when starting content, incurring a small startup delay. This can improve in-game loading times and eliminate stutters due to emulated CD access, but may cause issues on systems with low memory. CD Loading Speed [beetle_psx_hw_cd_fastload] ( 2x(native) /4x/6x/8x/10x/12x/14x) Selects disk access speed multiplier. This speedhack can greatly reduce loading times at speeds higher than native but is known to introduce texture corruption errors, timing glitches, or loading screen softlocks in many titles. Some games will not work at all if loading speed is not set to native (e.g. Castlevania: Symphony of the Night). Reduce multiplier value if experiencing loading issues, freezes, etc. Memory Card 0 Method (Restart) [beetle_psx_hw_use_mednafen_memcard0_method] ( libretro /mednafen) Choose the savedata format used for Memory Card 0. See the Saves section above for an explanation regarding the libretro and mednafen formats. libretro is recommended, but mednafen may be used for compatibility with the standalone version of Mednafen. The libretro (.srm) and Mednafen (.mcr) formats are internally identical when used with Beetle PSX. Note: This option must be set to 'mednafen' if the Shared Memcards option is enabled. Enable Memory Card 1 (Restart) [beetle_psx_hw_enable_memcard1] ( enabled /disabled) Selects whether to emulate a second memory card in Slot 1. When disabled, games can only access the memory card in Slot 0. Note: Some games require this option to be disabled for correct operation (e.g. Codename Tenka). Shared Memory Cards (Restart) [beetle_psx_hw_shared_memory_cards] ( disabled /enabled) When enabled, games will save and load using the same memory card files. Note: The \"Memcard 0 Method\" option must be set to 'mednafen' for this option to function properly. When disabled, separate memory card files will be generated for each title. This option is useful for games in series such as Suikoden or Arc the Lad that check for save data from previous titles. Memcard slot 0 Memcard slot 1 mednafen_psx_libretro_shared.0.mcr mednafen_psx_libretro_shared.1.mcr Analog Self-Calibration [beetle_psx_hw_analog_calibration] ( disabled /enabled) When enabled, monitors the max values reached by the input, using it as a calibration heuristic which then scales the analog coordinates sent to the emulator accordingly. For best results, rotate the sticks at max amplitude for the algorithm to get a good estimate of the scaling factor, otherwise it will adjust while playing. While modern analog sticks have circular logical ranges, older analog sticks such as those on the DualShock have logical ranges closer to squares and can report larger values at the intercardinal directions than modern analog sticks can. Games that expect these larger values will have issues controlling with modern analog sticks, which this option can solve by scaling modern analog stick values up. Enable DualShock Analog Mode Toggle [beetle_psx_hw_analog_toggle] ( disabled /enabled) When the input device type is set to DualShock, this option determines whether or not the Analog Button on that device can be toggled. When this option is disabled, the DualShock input device will be locked in Analog Mode where the analog sticks are on. When this option is enabled, the DualShock input device can be toggled between Digital Mode (analog sticks off) and Analog Mode (analog sticks on) much like real hardware by pressing and holding START+SELECT+L1+L2+R1+R2 for one second in lieu of a dedicated Analog Button. Note: Some games may not respond to input when the DualShock is in Analog Mode. Either enable Analog Button Toggle and toggle the DualShock to Digital Mode or change your input device type to PlayStation Controller. Port 1: Multitap Enable [beetle_psx_hw_enable_multitap_port1] ( disabled /enabled) Enables/Disables multitap functionality on port 1. Port 2: Multitap Enable [beetle_psx_hw_enable_multitap_port2] ( disabled /enabled) Enables/Disables multitap functionality on port 2. Gun Input Mode [beetle_psx_hw_gun_input_mode] ( lightgun /touchscreen) When device type is set to 'Guncon / G-Con 45' or 'Justifier', specify whether to use a mouse-controlled 'Light Gun' or 'Touchscreen' input. Gun Cursor [beetle_psx_hw_gun_cursor] ( cross /dot/off) Selects the gun cursor to be displayed on screen while using the the 'Guncon / G-Con 45' and 'Justifier' input device types. When disabled, cross hairs are always hidden. Gun Cursor - Cross Gun Cursor - Dot Gun Cursor - Off Mouse Sensitivity [beetle_psx_hw_mouse_sensitivity] (5% to 200% in increments of 5%. Default: 100% ) Configure the response of the 'Mouse' input device type. NegCon Twist Response [beetle_psx_hw_negcon_response] ( linear /quadratic/cubic) Specifies the analog response when using a RetroPad left analog stick to simulate the 'twist' action of emulated neGcon Controllers . 'linear': Analog stick displacement is mapped linearly to negCon rotation angle. 'quadratic': Analog stick displacement is mapped quadratically to negCon rotation angle. This allows for greater precision when making small movements with the analog stick. 'cubic': Analog stick displacement is mapped cubically to negCon rotation angle. This allows for even greater precision when making small movements with the analog stick, but 'exaggerates' larger movements. Attention A linear response is not recommended when using standard gamepad devices. The negCon 'twist' mechanism is substantially different from conventional analog sticks; linear mapping over-amplifies small displacements of the stick, impairing fine control. A linear response is only appropriate when using racing wheel peripherals. In most cases, the 'quadratic' option should be selected. This provides effective compensation for the physical differences between real/emulated hardware and is the closest approximation of real hardware, enabling smooth/precise analog input. NegCon Twist Deadzone [beetle_psx_hw_negcon_deadzone] ( 0% /5%/10%/15%/20%/25%/30%) Sets the deadzone of the RetroPad left analog stick when simulating the 'twist' action of emulated neGcon Controllers . Used to eliminate drift/unwanted input. Attention Most (all?) negCon compatible titles provide in-game options for setting a 'twist' deadzone value. To avoid loss of precision, the in-game deadzone should always be set to zero. Any analog stick drift should instead be accounted for by configuring the 'NegCon Twist Deadzone' core option. This is particularly important when 'NegCon Twist Response' is set to 'quadratic' or 'cubic'. Xbox gamepads typically require a deadzone of 15-20%. Many Android-compatible bluetooth gamepads have an internal 'hardware' deadzone, allowing the deadzone value here to be set to 0%. For convenience, it is recommended to make use of the 'Options \u2192 Analog Setting 1P' menu of Gran Turismo when calibrating the 'NegCon Twist Deadzone'. This provides a clear and precise representation of 'real' controller input values. User 1 - 8 device types \u00b6 The Beetle PSX HW core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): None - Input disabled. PlayStation Controller - Joypad - PlayStation Controller (SCPH-1080) DualShock - Joypad - DualShock (SCPH-1200) Analog Controller - Joypad - PlayStation Dual Analog Controller(SCPH-1180) Analog Joystick - Joypad - PlayStation Analog Joystick (SCPH-1110) Guncon / G-Con 45 - Lightgun - Namco Gun Controller (SLEH-00007) Justifier - Lightgun - Konami Justifier lightgun peripheral (SLEH-00005, SLUH-00017) Mouse - Mouse - PlayStation Mouse (SCPH-1090, SCPH-1030) neGcon - Joypad - Namco third party controller Rumble support \u00b6 Rumble only works in the Beetle PSX HW core when The content being ran has rumble support. The frontend being used has rumble support. The joypad device being used has rumble support. The corresponding user's device type is set to DualShock Multitap support \u00b6 'Port 1: Multitap enable' and 'Port 2: Multitap enable' core options . Joypad \u00b6 User 1 - 8 input descriptors RetroPad Inputs PlayStation Controller Inputs DualShock Inputs Analog Controller Inputs Analog Joystick Inputs neGcon Inputs Cross Analog button I Square Analog button II Select Start Start D-Pad Up D-Pad Up D-Pad Down D-Pad Down D-Pad Left D-Pad Left D-Pad Right D-Pad Right Circle A Triangle B L1 Left shoulder button (analog) R1 Right shoulder button (digital) L2 Analog button II R2 Analog button I L3 R3 Left Analog X X Left Joystick X Twist Left Analog Y Y Left Joystick Y Right Analog X X Right Joystick X Right Analog Y Y Right Joystick Y Mouse \u00b6 RetroMouse Inputs Mouse Inputs Mouse Cursor Mouse Cursor Mouse 1 Mouse Left Button Mouse 2 Mouse Right Button Lightgun \u00b6 RetroLightgun Inputs Guncon / G-Con 45 Inputs Justifier Inputs Gun Crosshair Guncon / G-Con 45 Crosshair Justifier Crosshair Gun Trigger Guncon / G-Con 45 Trigger Justifier Trigger Gun Reload Guncon / G-Con 45 Reload Justifier Reload Gun Aux A Guncon / G-Con 45 A Justifier Aux Gun Aux B Guncon / G-Con 45 B Gun Start Justifier Start Compatibility \u00b6 Expect bugs with hardware renderer enhancements. When using the run-ahead latency reduction feature, the \"second instance\" setting will break the hardware renderer. Hardware renderer currently has a number of issues with interlacing shaders and outputting on CRTs. Use the software renderer for the time being. A list of known emulation bugs when using the software renderer can be found here https://forum.fobby.net/index.php?t=msg&th=1114&start=0& Issue tracker for the hardware renderer can be found here https://github.com/libretro/beetle-psx-libretro/issues External Links \u00b6 Official Mednafen Website Official Mednafen Downloads Beetle PSX HW Libretro Core info file Beetle PSX HW Libretro Github Repository Report Beetle PSX HW Core Issues Here Libretro PSX cores \u00b6 PlayStation (Beetle PSX) PlayStation (PCSX ReARMed)","title":"Sony - PlayStation (Beetle PSX HW)"},{"location":"library/beetle_psx_hw/#playstation-beetle-psx-hw","text":"Last Updated: March 21, 2020","title":"PlayStation (Beetle PSX HW)"},{"location":"library/beetle_psx_hw/#background","text":"Beetle PSX HW is a port/fork of Mednafen's PSX module to the libretro API. It can be compiled in C++98 mode, excluding the Vulkan renderer, which is written in C++11 for the time being. Beetle PSX HW currently runs on Linux, OSX and Windows. Notable additions in this fork are: PBP and CHD file format support, developed by Zapeth; Software renderer internal resolution upscaling, implemented by simias; An OpenGL 3.3 renderer, developed by simias; A Vulkan renderer, developed by TinyTiger; PGXP perspective correct texturing and subpixel precision, developed by iCatButler; The Beetle PSX HW core has been authored by Mednafen Team The Beetle PSX HW core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Background"},{"location":"library/beetle_psx_hw/#requirements","text":"OpenGL 3.3 for the opengl renderer Vulkan for the vulkan renderer","title":"Requirements"},{"location":"library/beetle_psx_hw/#bios","text":"Required or optional firmware files go in the frontend's system directory. Filename Description md5sum scph5500.bin PS1 JP BIOS - Required for JP games 8dd7d5296a650fac7319bce665a6a53c scph5501.bin PS1 US BIOS - Required for US games 490f666e1afb15b7362b406ed1cea246 scph5502.bin PS1 EU BIOS - Required for EU games 32736f17079d0b2b7024407c39bd3050","title":"BIOS"},{"location":"library/beetle_psx_hw/#extensions","text":"Content that can be loaded by the Beetle PSX HW core have the following file extensions: .cue .toc .m3u .ccd .exe .pbp .chd RetroArch database(s) that are associated with the Beetle PSX HW core: Sony - PlayStation","title":"Extensions"},{"location":"library/beetle_psx_hw/#features","text":"Frontend-level settings or features that the Beetle PSX HW core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2714 Rumble \u2714 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2714 Username \u2715 Language \u2715 Crop Overscan * \u2715 LEDs \u2715 * Overscan cropping available via Core Options instead of frontend settings","title":"Features"},{"location":"library/beetle_psx_hw/#directories","text":"The Beetle PSX HW core's library name is 'Beetle PSX HW' The Beetle PSX HW core saves/loads to/from these directories. Frontend's Save directory Memory cards Frontend's State directory File Description *.state# State","title":"Directories"},{"location":"library/beetle_psx_hw/#geometry-and-timing","text":"The Beetle PSX HW core's core provided FPS is 59.826 for NTSC games and 49.761 for PAL games (non-interlaced rates) and is toggleable to 59.940 for NTSC games and 50.000 for PAL games (interlaced rates) through core options The Beetle PSX HW core's core provided sample rate is 44100 Hz The Beetle PSX HW core's base width is 320 The Beetle PSX HW core's base height is 240 The Beetle PSX HW core's max width is 700 when the 'Internal GPU resolution' is set to 1x. Raising the resolution past 1x will increase the max width The Beetle PSX HW core's max height is 576 when the 'Internal GPU resolution' is set to 1x. Raising the resolution past 1x will increase the max height The Beetle PSX HW core's core provided aspect ratio is automatically set based on core options","title":"Geometry and timing"},{"location":"library/beetle_psx_hw/#loading-content","text":"Beetle PSX HW needs a cue-sheet that points to an image file. A cue sheet, or cue file, is a metadata file which describes how the tracks of a CD or DVD are laid out. If you have e.g. foo.bin , you should create a text file and save it as foo.cue . Most PS1 games are single-track, so the cue file contents should look like this: foobin.cue FILE \"foo.bin\" BINARY TRACK 01 MODE1/2352 INDEX 01 00:00:00 After that, you can load the foo.cue file in RetroArch with the Beetle PSX HW core. Attention Certain PS1 games are multi-track, so their .cue files might be more complicated.","title":"Loading content"},{"location":"library/beetle_psx_hw/#playing-pal-copy-protected-games","text":"PAL copy protected games need a SBI Subchannel file next to the bin/cue files in order to get past the copy protection. Ape Escape (Europe).bin Ape Escape (Europe).cue Ape Escape (Europe).sbi Warning For proper PAL game compatibility, the 'Skip BIOS' core option needs to be set to off.","title":"Playing PAL copy protected games"},{"location":"library/beetle_psx_hw/#multiple-disk-games","text":"If foo is a multiple-disk game, you should have .cue files for each one, e.g. foo (Disc 1).cue , foo (Disc 2).cue , foo (Disc 3).cue . To take advantage of Beetle PSW HW's Disk Control feature for disk swapping, an index file (a m3u file) should be made. Create a text file and save it as foo.m3u . Then enter your game's .cue files on it. The m3u file contents should look something like this: foo.m3u foo (Disc 1).cue foo (Disc 2).cue foo (Disc 3).cue After that, you can load the foo.m3u file in RetroArch with the Beetle PSX HW core. Here's a m3u example done with Valkryie Profile Attention Adding multi-track games to a RetroArch playlist is recommended. (Manually add an entry a playlist that points to foo.m3u )","title":"Multiple-disk games"},{"location":"library/beetle_psx_hw/#swapping-disks","text":"Disks can be swapped through Quick Menu -> Disk Control in RetroArch. If not using .m3u files, .cue files must be manually selected via the Load New Disk legacy feature. If using .m3u files, disks can be swapped by selecting Eject Disk, changing the Current Disk Index to your desired disk, and finally selecting Insert Disk.","title":"Swapping disks"},{"location":"library/beetle_psx_hw/#compressed-content","text":"Alternatively to using cue sheets with .bin/.iso files, you can convert your games to .pbp (Playstation Portable update file) or .chd (MAME Compressed Hunks of Data) to reduce file sizes and neaten up your game folder.","title":"Compressed content"},{"location":"library/beetle_psx_hw/#pbp","text":"A recommended .pbp convert tool is PSX2PSP. If converting a multiple-disk game, all disks should be added to the same .pbp file, rather than making a .m3u file for them. Most conversion tools will want a single .bin file for each disk. If your game uses multiple .bin files (tracks) per disk, you will have to mount the cue sheet to a virtual drive and re-burn the images onto a single track before conversion. For multi-disk PAL copy-protected games, change the sbi file syntax from [filename].sbi to [filename]_[disc_number].sbi Final Fantasy IX (Germany).pbp Final Fantasy IX (Germany)_1.sbi Final Fantasy IX (Germany)_2.sbi Final Fantasy IX (Germany)_3.sbi Final Fantasy IX (Germany)_4.sbi Attention RetroArch does not currently have .pbp database due to variability in users' conversion methods. All .pbp games will have to be added to playlists manually.","title":"PBP"},{"location":"library/beetle_psx_hw/#chd","text":"To convert content to CHD format, use the chdman tool found inside the latest MAME distribution and point it to a .cue file, like so: chdman createcd --input foo.cue --output foo.chd Note that the tool currrently does not integrate .sbi files into the .chd, so these must be placed alongside the resulting .chd file in order to properly play games with LibCrypt protection. Attention For multi-disc content, make an .m3u file that lists all the .chd files instead of .cue files. Like the PBP files, content must be added to playlists manually.","title":"CHD"},{"location":"library/beetle_psx_hw/#saves","text":"For game savedata storage, the PSX console used memory cards. The PSX console had two slots for memory cards. In this doc, the first memory card slot will be referred to as 'Memcard slot 0' and the second slot will be referred to as 'Memcard slot 1'. For memory card functionality and usage, the Beetle PSX HW core will either use the Libretro savedata format or the Mednafen savedata format. Libretro savedata format Mednafen savedata format gamename.srm gamename.slot#.mcr By default , the Beetle PSX HW core will use Libretro's savedata format for Memcard slot 0 and Mednafen's savedata format for Memcard slot 1. Memcard slot 0 Memcard slot 1 gamename.srm gamename.1.mcr Attention Memory card behavior can be controlled with the following core options (Memcard 0 method, Enable memory card 1, Shared memcards). By default , the filenames of the Memcard savedata will match the loaded cue or m3u or pbp filename, like this: Loaded content: Breath of Fire III (USA).cue Memcard slot 0: Breath of Fire III (USA).srm Memcard slot 1: Breath of Fire III (USA).1.mcr or Loaded content: Final Fantasy VII (USA).m3u Memcard slot 0: Final Fantasy VII (USA).srm Memcard slot 1: Final Fantasy VII (USA).1.mcr or Loaded content: Wild Arms 2 (USA).pbp Memcard slot 0: `Wild Arms 2 (USA).srm Memcard slot 1: `Wild Arms 2 (USA).1.mcr Attention To import your old memory cards from other emulators, you need to rename them to either the Libretro (.srm) savedata format or the Mednafen (.mcr) savedata format. The Libretro (.srm) savedata format, when used with Beetle PSX, is internally identical to the Mednafen PSX (.mcr) savedata format, and can be converted between one another via renaming. Warning Keep in mind that save states also include the state of the memory card; carelessly loading an old save state will OVEWRITE the memory card, potentially resulting in lost saved games. You can set the 'Don't overwrite SaveRAM on loading savestate' option in RetroArch's Saving settings to On to prevent this.","title":"Saves"},{"location":"library/beetle_psx_hw/#core-options","text":"The Beetle PSX HW core has the following options that can be tweaked from your frontend's core options menu or manually changed via core configuration files. Options are listed below in the following format: Option Name [option_key] (setting1/setting2/...) To manually change an option, search for that option's key in the core configuration file you want to edit and set it to your desired setting value, enclosed in quotations. For example, if you had set the Internal Color Depth to 32bpp and wanted to revert it to 16bpp, you would change beetle_psx_hw_depth = \"32bpp\" to beetle_psx_hw_depth = \"16bpp(native)\" . Manually editing core configuration files is typically unnecessary unless your frontend does not have a method for toggling options. The default setting for each option will be highlighted in bold. Settings with (Restart) means that core has to be shut down for the new setting to be applied on next launch. Renderer (Restart) [beetle_psx_hw_renderer] ( hardware /hardware_gl/hardware_vk/software) Chooses which video renderer will be used. Software is the most accurate but generally has higher performance requirements when running at internal GPU resolutions higher than 1x. The software renderer also lacks certain enhancements exclusive to the hardware renderer. Hardware is less accurate but may have improved performance over the software renderer at internal GPU resolutions of 2x and above on capable hardware. The hardware renderers also allow various graphical enhancements such as higher color depth, texture filtering, and PGXP. Choosing hardware will automatically select either the Vulkan or OpenGL renderer depending on the current libretro frontend video driver. If the provided frontend video driver is not Vulkan or OpenGL (3.3 or higher) then the core will fall back to the software renderer at 1x internal resolution. hardware_gl and hardware_vk allow the core to ignore the frontend preferred hardware context and attempt to force a specific hardware renderer. If the core is unable to do so, it will fall back to the software renderer at 1x internal resolution. The ability to force specific renderers may not be available on all platforms. The hardware renderers have known issues -- check the compatibility section below or the core's issue tracker for more details. Software Framebuffer [beetle_psx_hw_renderer_software_fb] ( enabled /disabled) OpenGL/Vulkan Only Allows accurate emulation of framebuffer readback effects (e.g. motion blur, FF7 battle swirl, etc.) when using the hardware renderer. If disabled, certain operations are omitted or rendered on the GPU, which can improve performance but may cause graphical errors or cause stuttering . Leave enabled if unsure. Internal GPU Resolution [beetle_psx_hw_internal_resolution] ( 1x(native) /2x/4x/8x/16x) Selects internal resolution multiplier. Resolutions higher than 1x(native) improve the fidelity of 3D models at the expense of increased performance requirements. 2D elements are generally unaffected by this setting from the core's perspective. Internal GPU Resolution - 1x Internal GPU Resolution - 2x Internal Color Depth [beetle_psx_hw_depth] ( 16bpp(native) /32bpp) OpenGL Only The PSX has a limited color depth of 16 bits per pixel (bpp). This leads to banding effects (uneven color gradients) which are smoothed out by original hardware through the use of a dithering pattern. The '16bpp(native)' setting emulates the original 16bpp color depth. Selecting '32 bpp' increases the color depth such that smoother gradients can be achieved without dithering, allowing for a cleaner undithered output. Note the visible horizontal bands on an undithered 16bpp image compared to the same undithered image at 32bpp: Undithered 16bpp Undithered 32bpp This option should be toggled in conjunction with the Dithering Pattern option. The software renderer is locked to 16bpp while the Vulkan renderer will automatically set render at 16bpp if dithering is enabled and 32bpp if dithering is disabled. Dithering Pattern [beetle_psx_hw_dither_mode] ( 1x(native) /internal resolution/disabled) Select dithering pattern. Dithering is used by the original PSX hardware to combat the color banding visible due to 16bpp color depth. This option is less necessary and can be disabled if the Internal Color Depth option is set to '32bpp'. '1x(native)' emulates original hardware but can look grainy at higher internal resolutions. 'internal resolution' reduces graininess by allowing for finer dithering at higher Internal GPU Resolutions, but has limited effectiveness in combating color banding if the Internal GPU Resolution is set too high. (Note in the examples below that the 'internal resolution' option is less grainy but has more visible banding than '1x(native)' at 4x Internal GPU Resolution) 'disabled' is useful to pair with '32bpp' Internal Color Depth where banding is far less visible or for users who otherwise wish to turn off dithering regardless of color banding at 16bpp. Dithering Pattern - 1x Native (16bpp 4x IR) Dithering Pattern - Internal Resolution (16bpp 4x IR) Dithering Pattern - Disabled (16bpp 4x IR) Texture Filtering [beetle_psx_hw_filter] ( nearest /SABR/xBR/bilinear/3-point/JINC2) OpenGL/Vulkan Only Choose per-texture filtering method. Texture filters can modify or enhance the appearance of 3D polygon textures and 2D elements. 'Nearest' emulates original hardware. 'Bilinear' and '3-Point' are smoothing filters, which reduce pixelation via blurring. 'SABR', 'xBR' and 'JINC2' are upscaling filters, which improve texture fidelity/sharpness at the expense of increased performance requirements. nearest SABR xBR bilinear 3-point JINC2 Adaptive Smoothing [beetle_psx_hw_adaptive_smoothing] ( disabled /enabled) Vulkan Only Enable smoothing of 2D artwork and UI elements without blurring 3D rendered objects. Adaptive smoothing - Off Adaptive smoothing - On Supersampling (Downsample to Native Resolution) [beetle_psx_hw_super_sampling] ( disabled /enabled) Vulkan Only When enabled, renders content at the specified Internal GPU Resolution then downsamples the resulting image to native 240p before shaders and resizing are applied by the frontend. Allows games to be displayed at native (low) resolution but with clean anti-aliased 3D objects. Produces best results when applied to titles that mix 2D and 3D elements such as 3D characters on pre-rendered backgrounds. This option is not to be confused with implicit supersampling provided by rendering at a higher Internal GPU Resolution multiplier then downsampling to the frontend's window scale. Supersampling from 1x Internal Resolution with CRT Royale Shader Supersampling from 8x Internal Resolution with CRT Royale Shader Multi-Sampled Anti Aliasing [beetle_psx_hw_msaa] ( 1x /2x/4x/8x/16x) Vulkan Only Apply multi-sample anti-aliasing (MSAA) to rendered content. This is a type of spatial anti-aliasing similar to supersampling, but of somewhat lower quality and with (correspondingly) lower performance requirements. Improves the appearance of 3D objects. MSAA may be clamped internally at a lower value than what it is set at when running at higher Internal GPU Resolutions. MDEC YUV Chroma Filter [beetle_psx_hw_mdec_yuv] ( disabled /enabled) Vulkan Only Improves the quality of FMV playblack by smoothing the chroma channel when converting YcBcR to RGB. This reduces macroblocking artefacts (squares/jagged edges) as shown below: MDEC YUV Chroma Filter On/Off Comparison Wireframe Mode [beetle_psx_hw_wireframe] ( disabled /enabled) OpenGL Only Renders 3D polygons models in outline form without textures or shading. For debug use only. Leave off for normal usage. Wireframe mode - On Display Full VRAM [beetle_psx_hw_display_vram] ( disabled /enabled) OpenGL/Vulkan Only Visualizes full contents of the emulated PSX VRAM. For debug use only. Leave off for normal usage. Display full VRAM - On PGXP Operation Mode [beetle_psx_hw_pgxp_mode] ( disabled /memory only/memory + CPU) Enabling the Parallel/Precision Geometry Transform Pipeline (PGXP) allows polygons to be rendered with subpixel precision, eliminating or otherwise diminishing the polygon jitter/wobble visible on original PSX hardware. This distortion results from original hardware using fixed point mathematics when rendering 3D models, thus rounding polygon vertices to the nearest integer pixel. 'disabled' emulates original hardware behavior. 'memory only' mode enables subpixel precision at the cost of increased performance requirements with only minor compatibility issues. 'memory + CPU' mode can further reduce jitter but is highly demanding and is known to cause geometry errors. 'memory only' is recommended for best compatibility. https://www.youtube.com/watch?v=EYCpd_1lPUc PGXP Vertex Cache [beetle_psx_hw_pgxp_vertex] ( disabled /enabled) OpenGL/Vulkan Only Allows PGXP-enhanced polygon vertex coordinates to be cached when PGXP Operation Mode is also enabled. This option improves performance by allowing subpixel-accurate values to be used across successive polygon draws instead of rebasing from native PSX data each time. Allows for better object alignment and may reduce visible seams, but false positives when querying the cache produces graphical glitches in most games. Recommended to leave disabled. PGXP Perspective Correct Texturing [beetle_psx_hw_pgxp_texture] ( disabled /enabled) OpenGL/Vulkan Only Allows for perspective correct texturing when PGXP Operation Mode is also enabled. Original PSX hardware renders 3D objects with affine texture mapping where texture coordinates are interpolated between polygon vertices in 2D screen space with no consideration of object depth. This causes significant position-dependent distortion and/or blending of textures such as warped lines across floors and walls. PGXP Perspective Correct Texturing accounts correctly for vertex positions in 3D space thereby eliminating this texture distortion at the expense of increased performance requirements. PGXP Texturing - Off PGXP Texturing - On Display Internal FPS [beetle_psx_hw_display_internal_fps] ( disabled /enabled) Displays the frame rate that the emulated PSX is drawing at. Requires onscreen notifications to be enabled in the libretro frontend. Reported values may be inaccurate. Display internal FPS - On Line-to-Quad Hack [beetle_psx_hw_line_render] ( default /aggressive/disabled) Certain games employ a special technique for drawing horizontal lines, which involves stretching single-pixel-high triangles across the screen in a manner that causes the PSX hardware to rasterise them as a row of pixels. Examples include Doom/Hexen, and the water effects in Soul Blade. When running such games with an Internal GPU Resolution higher than native, these triangles no longer resolve as a line, causing gaps to appear in the output image. Setting 'Line-to-Quad Hack' to 'Default' solves this issue by detecting small triangles and converting them as required. The 'Aggressive' option will likely introduce visual glitches due to false positives, but is needed for correct rendering of some 'difficult' titles (e.g. Dark Forces, Duke Nukem). Frame Duping (Speedup) [beetle_psx_hw_frame_duping] ( disabled /enabled) Software Renderer and Vulkan only When enabled, provides a small performance increase by redrawing/reusing the last rendered frame (instead of presenting a new one) if the content of the current frame is unchanged based on the internal fps heuristic. May cause inaccurate behavior or lost animation frames, so it is not recommended to use this unless necessary. CPU Dynarec [beetle_psx_hw_cpu_dynarec] ( disabled /execute/execute_once/run_interpreter) Dynamically recompile CPU instructions to native instructions. Much faster than interpreter, but CPU timing is less accurate, and may have bugs. Dynarec Code Invalidation [beetle_psx_hw_dynarec_invalidate] ( full /dma) Some games require Full invalidation, some require DMA Only. This option has no effect when CPU Dynarec is not enabled. Dynarec DMA/GPU Event Cycles [beetle_psx_hw_dynarec_eventcycles] ( 128 /256/384/512/640/768/896/1024) Max cycles run by CPU before a GPU or DMA Update is checked, higher number will be faster, has much less impact on beetle interpreter than dynarec. Leave at 128 for default Beetle interpreter behavior when CPU Dynarec is not enabled. CPU Frequency Scaling (Overclock) [beetle_psx_hw_cpu_freq_scale] (50% to 750% in increments of 10%. Default: 100%(native) ) Enable overclocking (or underclocking) of the emulated PSX's CPU. The default frequency of the MIPS R3000A-compatible 32-bit RISC CPU is 33.8688 MHz; running at higher frequencies can eliminate slowdown and improve frame rates in certain games at the expense of increased performance requirements. Note that some games have an internal frame rate limiter and may not benefit from overclocking. It is generally not recommended to adjust this setting as it causes many games or portions of them to run at unintended speeds. This can lead to audio and video desynchronization, among other issues. Leave at default for most games. GTE Overclock [beetle_psx_hw_gte_overclock] ( disabled /enabled) When enabled, reduces the latency of operations involving the emulated PSX's Geometry Transform Engine (CPU coprocessor used for calculations related to 3D projection - i.e. all 3D graphics) to 1 cycle per instruction and additionally eliminates all memory access or cache fetch latency. For games that make heavy use of the GTE, this can greatly improve frame rate (and frame time) stability at the expense of increased performance requirements. Currently unstable -- leave off if unsure. GPU Rasterizer Overclock [beetle_psx_hw_gpu_overclock] ( 1x(native) /2x/4x/8x/16x/32x) Enables overclocking of the 2D rasterizer contained within the emulated PSX's GPU. Does not improve 3D rendering, and in general has little effect. Skip BIOS [beetle_psx_hw_skip_bios] ( disabled /enabled) When enabled, skips the PSX BIOS animation normally displayed with starting content. Enabling this option will cause compatibility issues with a small minority of games (Saga Frontier, PAL copy protected games, etc). Skip BIOS - Off Core-Reported FPS Timing [beetle_psx_hw_core_timing_fps] ( force_progressive /force_interlaced/auto_toggle) Sets FPS timing that the core will report to the frontend. Automatic toggling will allow the core to switch between reporting progressive and interlaced rates, but may cause frontend video/audio driver reinits. Progressive timings are 59.826 for NTSC content and 49.761 for PAL content, and interlaced timings are 59.940 for NTSC content and 50.000 for PAL content. Core Aspect Ratio [beetle_psx_hw_aspect_ratio] ( corrected /uncorrected/4:3) Set core provided aspect ratio. This setting is ignored when the Widescreen Mode Hack or Display Full VRAM options are enabled. \"4:3\" forces the core aspect ratio to 4:3 without taking horizontal overscan cropping or visible scanlines into account. The \"4:3\" setting should not be used and is only provided as a legacy feature for users desiring old incorrect behavior from the core. Widescreen Mode Hack [beetle_psx_hw_widescreen_hack] ( disabled /enabled) Forces content to be rendered with an aspect ratio of 16:9. Produces best results with fully 3D games. Can cause graphical glitches or alignment/stretching issues in games that mix 3D and 2D elements. Leave off for most games. Widescreen mode hack - Off Widescreen mode hack - On Crop Horizontal Overscan [beetle_psx_hw_crop_overscan] ( enabled /disabled) By default, Beetle PSX includes horizontal padding (black bars or 'pillarboxes' on either side of the screen) to emulate the same black bars generated in analog video output by real PSX hardware. This horizontal padding can contain garbage pixels that are generated when the game's width mode is smaller than the display area width in the emulated GPU registers. Enabling 'Crop Horizontal Overscan' will remove this potentially glitchy horizontal overscan region. Not all games will benefit from enabling this setting as shown in the examples below. Crop Overscan - Off (Game with Garbage Pixels) Crop Overscan - On (Game with Garbage Pixels) Crop Overscan - Off (Game with No Issues) Crop Overscan - On (Game with No Issues) This option does not affect vertical overscan. Vertical overscan can be cropped using the Initial/Last Scanline core options. Additional Cropping [beetle_psx_hw_image_crop] ( disabled /1px/2px/3px/4px/5px/6px/7px/8px) Software Renderer Only When 'Crop Horizontal Overscan' is enabled, this option further reduces the width of the cropped image by the specified number of pixels. Note: This can have unintended consequences. While the absolute width is reduced, the resultant video is still scaled to the currently set aspect ratio. Enabling 'Additional Cropping' may therefore cause horizontal stretching. Offset Cropped Image [beetle_psx_hw_image_offset] ( disabled /-4px/-3px/-2px/-1px/+1px/+2px/+3px/+4px) Software Renderer Only When 'Crop Horizontal Overscan' is enabled, allows the resultant cropped image to be offset horizontally to the right (positive) or left (negative) by the specified number of pixels. May be used to correct alignment issues. Horizontal Image Offset (GPU Cycles) [beetle_psx_hw_image_offset_cycles] (-24 to +24 in increments of 1. Default: 0 ) OpenGL/Vulkan Only Horizontally offsets the outputted image by the specified number of GPU timing cycles. Currently only for the hardware renderers and functions like 'Offset Cropped Image', but at a finer granularity and does not require 'Crop Horizontal Overscan' to be enabled for this option to have an effect. Initial Scanline - NTSC [beetle_psx_hw_initial_scanline] (0 to 40 in increments of 1. Default: 0 ) Selects the first displayed scanline when running NTSC content. Setting a value greater than 0 will reduce the height of output images by cropping pixels from the topmost edge. May be used to counteract letterboxing built in to some games. Last Scanline - NTSC [beetle_psx_hw_last_scanline] (210 to 239 in increments of 1. Default: 239 ) Selects the last displayed scanline when running NTSC content. Setting a value less than 239 will reduce the height of output images by cropping pixels from the bottommost edge. May be used to counteract letterboxing built in to some games. Initial Scanline - PAL [beetle_psx_hw_initial_scanline_pal] (0 to 40 in increments of 1. Default: 0 ) Selects the first displayed scanline when running PAL content. Setting a value greater than 0 will reduce the height of output images by cropping pixels from the topmost edge. May be used to counteract letterboxing built in to some games. Last Scanline - PAL [beetle_psx_hw_last_scanline_pal] (230 to 287 in increments of 1. Default: 287 ) Selects the last displayed scanline when running PAL content. Setting a value less than 287 will reduce the height of output images by cropping pixels from the bottommost edge. May be used to counteract letterboxing built in to some games. CD Access Method (Restart) [beetle_psx_hw_cd_access_method] ( sync /async/precache) Selects method used to read data from content disc images. 'sync' emulates original hardware. 'async' can alleviate stuttering on devices with slow storage. 'precache' loads the entire disc image into memory when starting content, incurring a small startup delay. This can improve in-game loading times and eliminate stutters due to emulated CD access, but may cause issues on systems with low memory. CD Loading Speed [beetle_psx_hw_cd_fastload] ( 2x(native) /4x/6x/8x/10x/12x/14x) Selects disk access speed multiplier. This speedhack can greatly reduce loading times at speeds higher than native but is known to introduce texture corruption errors, timing glitches, or loading screen softlocks in many titles. Some games will not work at all if loading speed is not set to native (e.g. Castlevania: Symphony of the Night). Reduce multiplier value if experiencing loading issues, freezes, etc. Memory Card 0 Method (Restart) [beetle_psx_hw_use_mednafen_memcard0_method] ( libretro /mednafen) Choose the savedata format used for Memory Card 0. See the Saves section above for an explanation regarding the libretro and mednafen formats. libretro is recommended, but mednafen may be used for compatibility with the standalone version of Mednafen. The libretro (.srm) and Mednafen (.mcr) formats are internally identical when used with Beetle PSX. Note: This option must be set to 'mednafen' if the Shared Memcards option is enabled. Enable Memory Card 1 (Restart) [beetle_psx_hw_enable_memcard1] ( enabled /disabled) Selects whether to emulate a second memory card in Slot 1. When disabled, games can only access the memory card in Slot 0. Note: Some games require this option to be disabled for correct operation (e.g. Codename Tenka). Shared Memory Cards (Restart) [beetle_psx_hw_shared_memory_cards] ( disabled /enabled) When enabled, games will save and load using the same memory card files. Note: The \"Memcard 0 Method\" option must be set to 'mednafen' for this option to function properly. When disabled, separate memory card files will be generated for each title. This option is useful for games in series such as Suikoden or Arc the Lad that check for save data from previous titles. Memcard slot 0 Memcard slot 1 mednafen_psx_libretro_shared.0.mcr mednafen_psx_libretro_shared.1.mcr Analog Self-Calibration [beetle_psx_hw_analog_calibration] ( disabled /enabled) When enabled, monitors the max values reached by the input, using it as a calibration heuristic which then scales the analog coordinates sent to the emulator accordingly. For best results, rotate the sticks at max amplitude for the algorithm to get a good estimate of the scaling factor, otherwise it will adjust while playing. While modern analog sticks have circular logical ranges, older analog sticks such as those on the DualShock have logical ranges closer to squares and can report larger values at the intercardinal directions than modern analog sticks can. Games that expect these larger values will have issues controlling with modern analog sticks, which this option can solve by scaling modern analog stick values up. Enable DualShock Analog Mode Toggle [beetle_psx_hw_analog_toggle] ( disabled /enabled) When the input device type is set to DualShock, this option determines whether or not the Analog Button on that device can be toggled. When this option is disabled, the DualShock input device will be locked in Analog Mode where the analog sticks are on. When this option is enabled, the DualShock input device can be toggled between Digital Mode (analog sticks off) and Analog Mode (analog sticks on) much like real hardware by pressing and holding START+SELECT+L1+L2+R1+R2 for one second in lieu of a dedicated Analog Button. Note: Some games may not respond to input when the DualShock is in Analog Mode. Either enable Analog Button Toggle and toggle the DualShock to Digital Mode or change your input device type to PlayStation Controller. Port 1: Multitap Enable [beetle_psx_hw_enable_multitap_port1] ( disabled /enabled) Enables/Disables multitap functionality on port 1. Port 2: Multitap Enable [beetle_psx_hw_enable_multitap_port2] ( disabled /enabled) Enables/Disables multitap functionality on port 2. Gun Input Mode [beetle_psx_hw_gun_input_mode] ( lightgun /touchscreen) When device type is set to 'Guncon / G-Con 45' or 'Justifier', specify whether to use a mouse-controlled 'Light Gun' or 'Touchscreen' input. Gun Cursor [beetle_psx_hw_gun_cursor] ( cross /dot/off) Selects the gun cursor to be displayed on screen while using the the 'Guncon / G-Con 45' and 'Justifier' input device types. When disabled, cross hairs are always hidden. Gun Cursor - Cross Gun Cursor - Dot Gun Cursor - Off Mouse Sensitivity [beetle_psx_hw_mouse_sensitivity] (5% to 200% in increments of 5%. Default: 100% ) Configure the response of the 'Mouse' input device type. NegCon Twist Response [beetle_psx_hw_negcon_response] ( linear /quadratic/cubic) Specifies the analog response when using a RetroPad left analog stick to simulate the 'twist' action of emulated neGcon Controllers . 'linear': Analog stick displacement is mapped linearly to negCon rotation angle. 'quadratic': Analog stick displacement is mapped quadratically to negCon rotation angle. This allows for greater precision when making small movements with the analog stick. 'cubic': Analog stick displacement is mapped cubically to negCon rotation angle. This allows for even greater precision when making small movements with the analog stick, but 'exaggerates' larger movements. Attention A linear response is not recommended when using standard gamepad devices. The negCon 'twist' mechanism is substantially different from conventional analog sticks; linear mapping over-amplifies small displacements of the stick, impairing fine control. A linear response is only appropriate when using racing wheel peripherals. In most cases, the 'quadratic' option should be selected. This provides effective compensation for the physical differences between real/emulated hardware and is the closest approximation of real hardware, enabling smooth/precise analog input. NegCon Twist Deadzone [beetle_psx_hw_negcon_deadzone] ( 0% /5%/10%/15%/20%/25%/30%) Sets the deadzone of the RetroPad left analog stick when simulating the 'twist' action of emulated neGcon Controllers . Used to eliminate drift/unwanted input. Attention Most (all?) negCon compatible titles provide in-game options for setting a 'twist' deadzone value. To avoid loss of precision, the in-game deadzone should always be set to zero. Any analog stick drift should instead be accounted for by configuring the 'NegCon Twist Deadzone' core option. This is particularly important when 'NegCon Twist Response' is set to 'quadratic' or 'cubic'. Xbox gamepads typically require a deadzone of 15-20%. Many Android-compatible bluetooth gamepads have an internal 'hardware' deadzone, allowing the deadzone value here to be set to 0%. For convenience, it is recommended to make use of the 'Options \u2192 Analog Setting 1P' menu of Gran Turismo when calibrating the 'NegCon Twist Deadzone'. This provides a clear and precise representation of 'real' controller input values.","title":"Core options"},{"location":"library/beetle_psx_hw/#user-1-8-device-types","text":"The Beetle PSX HW core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): None - Input disabled. PlayStation Controller - Joypad - PlayStation Controller (SCPH-1080) DualShock - Joypad - DualShock (SCPH-1200) Analog Controller - Joypad - PlayStation Dual Analog Controller(SCPH-1180) Analog Joystick - Joypad - PlayStation Analog Joystick (SCPH-1110) Guncon / G-Con 45 - Lightgun - Namco Gun Controller (SLEH-00007) Justifier - Lightgun - Konami Justifier lightgun peripheral (SLEH-00005, SLUH-00017) Mouse - Mouse - PlayStation Mouse (SCPH-1090, SCPH-1030) neGcon - Joypad - Namco third party controller","title":"User 1 - 8 device types"},{"location":"library/beetle_psx_hw/#rumble-support","text":"Rumble only works in the Beetle PSX HW core when The content being ran has rumble support. The frontend being used has rumble support. The joypad device being used has rumble support. The corresponding user's device type is set to DualShock","title":"Rumble support"},{"location":"library/beetle_psx_hw/#multitap-support","text":"'Port 1: Multitap enable' and 'Port 2: Multitap enable' core options .","title":"Multitap support"},{"location":"library/beetle_psx_hw/#joypad","text":"User 1 - 8 input descriptors RetroPad Inputs PlayStation Controller Inputs DualShock Inputs Analog Controller Inputs Analog Joystick Inputs neGcon Inputs Cross Analog button I Square Analog button II Select Start Start D-Pad Up D-Pad Up D-Pad Down D-Pad Down D-Pad Left D-Pad Left D-Pad Right D-Pad Right Circle A Triangle B L1 Left shoulder button (analog) R1 Right shoulder button (digital) L2 Analog button II R2 Analog button I L3 R3 Left Analog X X Left Joystick X Twist Left Analog Y Y Left Joystick Y Right Analog X X Right Joystick X Right Analog Y Y Right Joystick Y","title":"Joypad"},{"location":"library/beetle_psx_hw/#mouse","text":"RetroMouse Inputs Mouse Inputs Mouse Cursor Mouse Cursor Mouse 1 Mouse Left Button Mouse 2 Mouse Right Button","title":"Mouse"},{"location":"library/beetle_psx_hw/#lightgun","text":"RetroLightgun Inputs Guncon / G-Con 45 Inputs Justifier Inputs Gun Crosshair Guncon / G-Con 45 Crosshair Justifier Crosshair Gun Trigger Guncon / G-Con 45 Trigger Justifier Trigger Gun Reload Guncon / G-Con 45 Reload Justifier Reload Gun Aux A Guncon / G-Con 45 A Justifier Aux Gun Aux B Guncon / G-Con 45 B Gun Start Justifier Start","title":"Lightgun"},{"location":"library/beetle_psx_hw/#compatibility","text":"Expect bugs with hardware renderer enhancements. When using the run-ahead latency reduction feature, the \"second instance\" setting will break the hardware renderer. Hardware renderer currently has a number of issues with interlacing shaders and outputting on CRTs. Use the software renderer for the time being. A list of known emulation bugs when using the software renderer can be found here https://forum.fobby.net/index.php?t=msg&th=1114&start=0& Issue tracker for the hardware renderer can be found here https://github.com/libretro/beetle-psx-libretro/issues","title":"Compatibility"},{"location":"library/beetle_psx_hw/#external-links","text":"Official Mednafen Website Official Mednafen Downloads Beetle PSX HW Libretro Core info file Beetle PSX HW Libretro Github Repository Report Beetle PSX HW Core Issues Here","title":"External Links"},{"location":"library/beetle_psx_hw/#libretro-psx-cores","text":"PlayStation (Beetle PSX) PlayStation (PCSX ReARMed)","title":"Libretro PSX cores"},{"location":"library/beetle_saturn/","text":"Sega - Saturn (Beetle Saturn) \u00b6 Background \u00b6 Port of standalone Mednafen Saturn to libretro. The Beetle Saturn core has been authored by Mednafen Team The Beetle Saturn core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the Beetle Saturn core have the following file extensions: .cue .toc .m3u .ccd .chd RetroArch database(s) that are associated with the Beetle Saturn core: Sega - Saturn BIOS \u00b6 Required or optional firmware files go in the frontend's system directory. Attention The King of Fighters '95 and Ultraman: Hikari no Kyojin Densetsu ROM Cartridges can be manually selected with the 'Cartridge' core option . Filename Description md5sum sega_101.bin Saturn JP BIOS - Required for JP games 85ec9ca47d8f6807718151cbcca8b964 mpr-17933.bin Saturn US.mdEU BIOS - Required for US/EU games 3240872c70984b6cbfda1586cab68dbe mpr-18811-mx.ic1 The King of Fighters '95 ROM Cartridge - Required for this game 255113ba943c92a54facd25a10fd780c mpr-19367-mx.ic1 Ultraman: Hikari no Kyojin Densetsu ROM Cartridge - Required for this game 1cd19988d1d72a3e7caa0b73234c96b4 Features \u00b6 Frontend-level settings or features that the Beetle Saturn core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats - Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2714 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The Beetle Saturn core's library name is 'Beetle Saturn' The Beetle Saturn core saves/loads to/from these directories. Frontend's Save directory File Description *.bcr External cartridge backup save *.bkr Internal save *.smpc SMPC's emulated Real-Time Clock save Frontend's State directory File Description *.state# State Geometry and timing \u00b6 The Beetle Saturn core's core provided FPS is 59.88 for NTSC games and 49.96 for PAL games The Beetle Saturn core's core provided sample rate is 44100 Hz The Beetle Saturn core's base width is 320 The Beetle Saturn core's base height is 240 The Beetle Saturn core's max width is 704 The Beetle Saturn core's max height is 576 The Beetle Saturn core's core provided aspect ratio is 4/3 Loading Saturn Sega content \u00b6 Beetle Saturn needs a cue-sheet that points to an image file. A cue sheet, or cue file, is a metadata file which describes how the tracks of a CD or DVD are laid out. If you have e.g. foo.bin , you should create a text file and save it as foo.cue . If you're playing a single-track Saturn game, then the cue file contents should look like this: foobin.cue FILE \"foo.bin\" BINARY TRACK 01 MODE1/2352 INDEX 01 00:00:00 After that, you can load the foo.cue file in RetroArch with the Beetle Saturn core. Attention Certain Saturn games are multi-track, so their .cue files might be more complicated. Multiple-disk games \u00b6 If foo is a multiple-disk game, you should have .cue files for each one, e.g. foo (Disc 1).cue , foo (Disc 2).cue , foo (Disc 3).cue . To take advantage of Beetle Saturn's Disk Control feature for disk swapping, an index file (a m3u file) should be made. Create a text file and save it as foo.m3u . Then enter your game's .cue files on it. The m3u file contents should look something like this: foo.m3u foo (Disc 1).cue foo (Disc 2).cue foo (Disc 3).cue Swapping disks \u00b6 Swapping disks follows this procedure Open tray (Disk Cycle Tray Status) Change the Disk Index to the disk you want to swap to. Close tray (Disk Cycle Tray Status) Return to the game and wait a few seconds to let it take effect After that, you can load the foo.m3u file in RetroArch with the Beetle Saturn core. Core options \u00b6 The Beetle Saturn core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. System Region [beetle_saturn_region] ( Auto Detect |Japan|North America|Europe|South Korea|Asia (NTSC)|Asia (PAL)|Brazil|Latin America) Choose which region the system is from. Cartridge [beetle_saturn_cart] ( Auto Detect |None|Backup Memory|Extended RAM (1MB)|Extended RAM (4MB)|The King of Fighters '95|Ultraman: Hikari no Kyojin Densetsu) A list of games that require a cartridge can be found here . 6Player Adaptor on Port 1 [beetle_saturn_multitap_port1] ( disabled |enabled) Enable multitap on Saturn port 1. 6Player Adaptor on Port 2 [beetle_saturn_multitap_port2] ( disabled |enabled) Enable multitap on Saturn port 2. Analog Stick Deadzone [beetle_saturn_analog_stick_deadzone] ( 15% |20%|25%|30%|0%|5%|10%) Configure the '3D Control Pad' Device Type's analog deadzone. Trigger Deadzone [beetle_saturn_trigger_deadzone] ( 15% |20%|25%|30%|0%|5%|10%) Configure the '3D Control Pad' Device Type's trigger deadzone. Mouse Sensitivity [beetle_saturn_mouse_sensitivity] (5% to 200% in increments of 5%. 100% is default ) Configure the 'Mouse' device type's sensitivity. Gun Crosshair [beetle_saturn_virtuagun_crosshair] ( Cross |Dot|Off) Choose the crosshair for the 'Stunner' and 'Virtua Gun' device types. Setting it to Off disables the crosshair. Gun - Crosshair - Cross Gun - Crosshair - Dot Gun - Crosshair - Off CD Image Cache (restart) [beetle_saturn_cdimagecache] ( disabled |enabled) Loads the complete image in memory at startup. Can potentially decrease loading times at the cost of increased startup time. Requires a restart in order for a change to take effect. Mid-frame Input Synchronization [beetle_saturn_midsync] ( disabled |enabled) Mid-frame synchronization can reduce input latency, but it will increase CPU requirements. Automatically set RTC on game load [beetle_saturn_autortc] ( enabled |disabled) Automatically set the SMPC's emulated Real-Time Clock to the host system's current time and date upon game load. BIOS language [beetle_saturn_autortc_lang] ( english |german|french|spanish|italian|japanese) Self explanatory. Also affects language used in some games (e.g. the European release of \"Panzer Dragoon\"). Horizontal Overscan Mask [beetle_saturn_horizontal_overscan] (0 to 60 in increments of 2. 0 is default ) Self-explanatory. Initial scanline [beetle_saturn_initial_scanline] (0 to 40 in increments of 1. 0 is default ) Adjust the first displayed scanline in NTSC mode. Last scanline [beetle_saturn_last_scanline] (210 to 239 in increments of 1. 239 is default ) Adjust the last displayed scanline in NTSC mode. Initial scanline PAL [beetle_saturn_initial_scanline_pal] (0 to 60 in increments of 1. 16 is default ) Adjust the first displayed scanline in NTSC mode. Last scanline PAL [beetle_saturn_last_scanline_pal] (230 to 287 in increments of 1. 271 is default ) Adjust the last displayed scanline in PAL mode. Enable Horizontal Blend(blur) [beetle_saturn_horizontal_blend] ( disabled |enabled) Enable horizontal blend(blur) filter. Has a more noticeable effect with the Saturn's higher horizontal resolution modes(640/704). Enable Horizontal Blend(blur) - Off Enable Horizontal Blend(blur) - On User 1 - 12 device types \u00b6 The Beetle Saturn core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): None - Input disabled. Control Pad - Joypad 3D Control Pad - Analog Arcade Racer - Analog Mission Stick - Analog Mouse - Mouse Stunner - Lightgun Twin-Stick - Analog Virtua Gun - Lightgun Dual Mission Sticks - Analog - Panzer Dragoon Zwei only Multitap \u00b6 Activating multitap support in compatible games can be configured by the '6Player Adaptor on Port 1' and '6Player Adaptor on Port 2' core options . Joypad \u00b6 RetroPad Inputs User 1 - 12 input descriptors Control Pad 3D Control Pad Arcade Racer Mission Stick Twin-Stick Dual Mission Sticks A Button A Button A Button A Button A Button A Button X Button X Button X Button X Button X Button X Button Mode Switch Mode Switch Start Button Start Button Start Button Start Button Start Button Start Button Start Button D-Pad Up D-Pad Up D-Pad Up D-Pad Down D-Pad Down D-Pad Down D-Pad Left D-Pad Left D-Pad Left D-Pad Right D-Pad Right D-Pad Right B Button B Button B Button B Button B Button B Button Y Button Y Button Y Button Y Button Y Button Y Button Z Button Z Button Z Button Z Button Z Button Left Stick Button Z Button C Button C Button C Button C Button C Button Right Stick Button C Button L Button L Button L Button Left shift paddle (Up) L Button Left Stick Trigger L Button R Button R Button R Button Right shift paddle (Down) R Button Right Stick Trigger R Button Throttle latch Throttle latch X Analog X Analog X Analog wheel Analog Stick X Left Stick X Left Analog Stick X Y Analog Y Analog Y Analog Stick Y Left Stick Y Left Analog Stick Y X Analog X (Right) Right Stick X Right Analog Stick X Y Analog Y (Right) Throttle Right Stick Y Right Analog Stick Y Mouse \u00b6 RetroMouse Inputs Mouse Mouse Cursor Mouse Cursor Mouse 1 Mouse A Mouse 2 Mouse B Mouse 3 Mouse C Mouse 4 Mouse Start Mouse 5 Mouse Start Lightgun \u00b6 RetroLightgun Inputs Stunner Virtua Gun Gun Crosshair Stunner Crosshair Virtua Gun Crosshair Gun Trigger Stunner Trigger Virtua Gun Trigger Gun Reload Stunner Reload Virtua Gun Reload Gun Start Stunner Start Virtua Gun Start External Links \u00b6 Official Mednafen Website Official Mednafen Downloads Libretro Beetle Saturn Core info file Libretro Beetle Saturn Github Repository Report Libretro Beetle Saturn Core Issues Here Saturn \u00b6 Sega - Saturn (Beetle Saturn) Sega - Saturn (Yabause)","title":"Sega - Saturn (Beetle Saturn)"},{"location":"library/beetle_saturn/#sega-saturn-beetle-saturn","text":"","title":"Sega - Saturn (Beetle Saturn)"},{"location":"library/beetle_saturn/#background","text":"Port of standalone Mednafen Saturn to libretro. The Beetle Saturn core has been authored by Mednafen Team The Beetle Saturn core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Background"},{"location":"library/beetle_saturn/#extensions","text":"Content that can be loaded by the Beetle Saturn core have the following file extensions: .cue .toc .m3u .ccd .chd RetroArch database(s) that are associated with the Beetle Saturn core: Sega - Saturn","title":"Extensions"},{"location":"library/beetle_saturn/#bios","text":"Required or optional firmware files go in the frontend's system directory. Attention The King of Fighters '95 and Ultraman: Hikari no Kyojin Densetsu ROM Cartridges can be manually selected with the 'Cartridge' core option . Filename Description md5sum sega_101.bin Saturn JP BIOS - Required for JP games 85ec9ca47d8f6807718151cbcca8b964 mpr-17933.bin Saturn US.mdEU BIOS - Required for US/EU games 3240872c70984b6cbfda1586cab68dbe mpr-18811-mx.ic1 The King of Fighters '95 ROM Cartridge - Required for this game 255113ba943c92a54facd25a10fd780c mpr-19367-mx.ic1 Ultraman: Hikari no Kyojin Densetsu ROM Cartridge - Required for this game 1cd19988d1d72a3e7caa0b73234c96b4","title":"BIOS"},{"location":"library/beetle_saturn/#features","text":"Frontend-level settings or features that the Beetle Saturn core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats - Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2714 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/beetle_saturn/#directories","text":"The Beetle Saturn core's library name is 'Beetle Saturn' The Beetle Saturn core saves/loads to/from these directories. Frontend's Save directory File Description *.bcr External cartridge backup save *.bkr Internal save *.smpc SMPC's emulated Real-Time Clock save Frontend's State directory File Description *.state# State","title":"Directories"},{"location":"library/beetle_saturn/#geometry-and-timing","text":"The Beetle Saturn core's core provided FPS is 59.88 for NTSC games and 49.96 for PAL games The Beetle Saturn core's core provided sample rate is 44100 Hz The Beetle Saturn core's base width is 320 The Beetle Saturn core's base height is 240 The Beetle Saturn core's max width is 704 The Beetle Saturn core's max height is 576 The Beetle Saturn core's core provided aspect ratio is 4/3","title":"Geometry and timing"},{"location":"library/beetle_saturn/#loading-saturn-sega-content","text":"Beetle Saturn needs a cue-sheet that points to an image file. A cue sheet, or cue file, is a metadata file which describes how the tracks of a CD or DVD are laid out. If you have e.g. foo.bin , you should create a text file and save it as foo.cue . If you're playing a single-track Saturn game, then the cue file contents should look like this: foobin.cue FILE \"foo.bin\" BINARY TRACK 01 MODE1/2352 INDEX 01 00:00:00 After that, you can load the foo.cue file in RetroArch with the Beetle Saturn core. Attention Certain Saturn games are multi-track, so their .cue files might be more complicated.","title":"Loading Saturn Sega content"},{"location":"library/beetle_saturn/#multiple-disk-games","text":"If foo is a multiple-disk game, you should have .cue files for each one, e.g. foo (Disc 1).cue , foo (Disc 2).cue , foo (Disc 3).cue . To take advantage of Beetle Saturn's Disk Control feature for disk swapping, an index file (a m3u file) should be made. Create a text file and save it as foo.m3u . Then enter your game's .cue files on it. The m3u file contents should look something like this: foo.m3u foo (Disc 1).cue foo (Disc 2).cue foo (Disc 3).cue","title":"Multiple-disk games"},{"location":"library/beetle_saturn/#swapping-disks","text":"Swapping disks follows this procedure Open tray (Disk Cycle Tray Status) Change the Disk Index to the disk you want to swap to. Close tray (Disk Cycle Tray Status) Return to the game and wait a few seconds to let it take effect After that, you can load the foo.m3u file in RetroArch with the Beetle Saturn core.","title":"Swapping disks"},{"location":"library/beetle_saturn/#core-options","text":"The Beetle Saturn core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. System Region [beetle_saturn_region] ( Auto Detect |Japan|North America|Europe|South Korea|Asia (NTSC)|Asia (PAL)|Brazil|Latin America) Choose which region the system is from. Cartridge [beetle_saturn_cart] ( Auto Detect |None|Backup Memory|Extended RAM (1MB)|Extended RAM (4MB)|The King of Fighters '95|Ultraman: Hikari no Kyojin Densetsu) A list of games that require a cartridge can be found here . 6Player Adaptor on Port 1 [beetle_saturn_multitap_port1] ( disabled |enabled) Enable multitap on Saturn port 1. 6Player Adaptor on Port 2 [beetle_saturn_multitap_port2] ( disabled |enabled) Enable multitap on Saturn port 2. Analog Stick Deadzone [beetle_saturn_analog_stick_deadzone] ( 15% |20%|25%|30%|0%|5%|10%) Configure the '3D Control Pad' Device Type's analog deadzone. Trigger Deadzone [beetle_saturn_trigger_deadzone] ( 15% |20%|25%|30%|0%|5%|10%) Configure the '3D Control Pad' Device Type's trigger deadzone. Mouse Sensitivity [beetle_saturn_mouse_sensitivity] (5% to 200% in increments of 5%. 100% is default ) Configure the 'Mouse' device type's sensitivity. Gun Crosshair [beetle_saturn_virtuagun_crosshair] ( Cross |Dot|Off) Choose the crosshair for the 'Stunner' and 'Virtua Gun' device types. Setting it to Off disables the crosshair. Gun - Crosshair - Cross Gun - Crosshair - Dot Gun - Crosshair - Off CD Image Cache (restart) [beetle_saturn_cdimagecache] ( disabled |enabled) Loads the complete image in memory at startup. Can potentially decrease loading times at the cost of increased startup time. Requires a restart in order for a change to take effect. Mid-frame Input Synchronization [beetle_saturn_midsync] ( disabled |enabled) Mid-frame synchronization can reduce input latency, but it will increase CPU requirements. Automatically set RTC on game load [beetle_saturn_autortc] ( enabled |disabled) Automatically set the SMPC's emulated Real-Time Clock to the host system's current time and date upon game load. BIOS language [beetle_saturn_autortc_lang] ( english |german|french|spanish|italian|japanese) Self explanatory. Also affects language used in some games (e.g. the European release of \"Panzer Dragoon\"). Horizontal Overscan Mask [beetle_saturn_horizontal_overscan] (0 to 60 in increments of 2. 0 is default ) Self-explanatory. Initial scanline [beetle_saturn_initial_scanline] (0 to 40 in increments of 1. 0 is default ) Adjust the first displayed scanline in NTSC mode. Last scanline [beetle_saturn_last_scanline] (210 to 239 in increments of 1. 239 is default ) Adjust the last displayed scanline in NTSC mode. Initial scanline PAL [beetle_saturn_initial_scanline_pal] (0 to 60 in increments of 1. 16 is default ) Adjust the first displayed scanline in NTSC mode. Last scanline PAL [beetle_saturn_last_scanline_pal] (230 to 287 in increments of 1. 271 is default ) Adjust the last displayed scanline in PAL mode. Enable Horizontal Blend(blur) [beetle_saturn_horizontal_blend] ( disabled |enabled) Enable horizontal blend(blur) filter. Has a more noticeable effect with the Saturn's higher horizontal resolution modes(640/704). Enable Horizontal Blend(blur) - Off Enable Horizontal Blend(blur) - On","title":"Core options"},{"location":"library/beetle_saturn/#user-1-12-device-types","text":"The Beetle Saturn core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): None - Input disabled. Control Pad - Joypad 3D Control Pad - Analog Arcade Racer - Analog Mission Stick - Analog Mouse - Mouse Stunner - Lightgun Twin-Stick - Analog Virtua Gun - Lightgun Dual Mission Sticks - Analog - Panzer Dragoon Zwei only","title":"User 1 - 12 device types"},{"location":"library/beetle_saturn/#multitap","text":"Activating multitap support in compatible games can be configured by the '6Player Adaptor on Port 1' and '6Player Adaptor on Port 2' core options .","title":"Multitap"},{"location":"library/beetle_saturn/#joypad","text":"RetroPad Inputs User 1 - 12 input descriptors Control Pad 3D Control Pad Arcade Racer Mission Stick Twin-Stick Dual Mission Sticks A Button A Button A Button A Button A Button A Button X Button X Button X Button X Button X Button X Button Mode Switch Mode Switch Start Button Start Button Start Button Start Button Start Button Start Button Start Button D-Pad Up D-Pad Up D-Pad Up D-Pad Down D-Pad Down D-Pad Down D-Pad Left D-Pad Left D-Pad Left D-Pad Right D-Pad Right D-Pad Right B Button B Button B Button B Button B Button B Button Y Button Y Button Y Button Y Button Y Button Y Button Z Button Z Button Z Button Z Button Z Button Left Stick Button Z Button C Button C Button C Button C Button C Button Right Stick Button C Button L Button L Button L Button Left shift paddle (Up) L Button Left Stick Trigger L Button R Button R Button R Button Right shift paddle (Down) R Button Right Stick Trigger R Button Throttle latch Throttle latch X Analog X Analog X Analog wheel Analog Stick X Left Stick X Left Analog Stick X Y Analog Y Analog Y Analog Stick Y Left Stick Y Left Analog Stick Y X Analog X (Right) Right Stick X Right Analog Stick X Y Analog Y (Right) Throttle Right Stick Y Right Analog Stick Y","title":"Joypad"},{"location":"library/beetle_saturn/#mouse","text":"RetroMouse Inputs Mouse Mouse Cursor Mouse Cursor Mouse 1 Mouse A Mouse 2 Mouse B Mouse 3 Mouse C Mouse 4 Mouse Start Mouse 5 Mouse Start","title":"Mouse"},{"location":"library/beetle_saturn/#lightgun","text":"RetroLightgun Inputs Stunner Virtua Gun Gun Crosshair Stunner Crosshair Virtua Gun Crosshair Gun Trigger Stunner Trigger Virtua Gun Trigger Gun Reload Stunner Reload Virtua Gun Reload Gun Start Stunner Start Virtua Gun Start","title":"Lightgun"},{"location":"library/beetle_saturn/#external-links","text":"Official Mednafen Website Official Mednafen Downloads Libretro Beetle Saturn Core info file Libretro Beetle Saturn Github Repository Report Libretro Beetle Saturn Core Issues Here","title":"External Links"},{"location":"library/beetle_saturn/#saturn","text":"Sega - Saturn (Beetle Saturn) Sega - Saturn (Yabause)","title":"Saturn"},{"location":"library/beetle_sgx/","text":"NEC - PC Engine SuperGrafx (Beetle SuperGrafx) \u00b6 Background \u00b6 Standalone port of Mednafen PCE Fast to libretro. The Beetle SuperGrafx core has been authored by Mednafen Team The Beetle SuperGrafx core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here . BIOS \u00b6 Required or optional firmware files go in RetroArch's system directory. Attention Which PCE CD BIOS file the Beetle SuperGrafx core will use can be configured by the 'CD BIOS' core option . Attention Any CD-ROM System BIOS will work, but some of them are known to be incompatible with certain games. Filename Description md5sum syscard3.pce Super CD-ROM2 System V3.xx - Required 38179df8f4ac870017db21ebcbf53114 syscard2.pce CD-ROM System V2.xx - Optional syscard1.pce CD-ROM System V1.xx - Optional gexpress.pce Game Express CD Card - Optional Extensions \u00b6 Content that can be loaded by the Beetle SuperGrafx core have the following file extensions: .pce .sgx .cue .ccd .chd RetroArch database(s) that are associated with the Beetle SuperGrafx core: NEC - PC Engine - TurboGrafx 16 NEC - PC Engine CD - TurboGrafx-CD NEC - PC Engine SuperGrafx Features \u00b6 Frontend-level settings or features that the Beetle Saturn core respects. Feature Supported Restart \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2714 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The Beetle SuperGrafx core's library name is 'Beetle SuperGrafx' The Beetle SuperGrafx core saves/loads to/from these directories. Frontend's Save directory File Description *.srm Save Frontend's State directory File Description *.state# State Geometry and timing \u00b6 The Beetle SuperGrafx core's core provided FPS is 59.82 The Beetle SuperGrafx core's core provided sample rate is 44100 Hz The Beetle SuperGrafx core's base width is 512 The Beetle SuperGrafx core's base height is dependent on the 'Initial scanline' and 'Last scanline' core options . The Beetle SuperGrafx core's max width is 512 The Beetle SuperGrafx core's max height is 243 The Beetle SuperGrafx core's core provided aspect ratio is dependent on the 'Aspect Ratio' core option . Loading PC Engine CD content \u00b6 To load PC Engine CD content, Beetle SuperGrafx needs a cue-sheet that points to an image file. A cue sheet, or cue file, is a metadata file which describes how the tracks of a CD or DVD are laid out. If you have e.g. foo.bin , you should create a text file and save it as foo.cue . If you're playing a single-track Saturn game, then the cue file contents should look like this: foobin.cue FILE \"foo.bin\" BINARY TRACK 01 MODE1/2352 INDEX 01 00:00:00 After that, you can load the foo.cue file in RetroArch with the Beetle SuperGrafx core. Certain PC Engine content are multi-track, so their .cue files might be more complicated. CHD \u00b6 Alternatively to using cue sheets with .bin/.iso files, you can convert your games to .chd (MAME Compressed Hunks of Data) to reduce file sizes and neaten up your game folder. To convert content to CHD format, use the chdman tool found inside the latest MAME distribution and point it to a .cue file, like so: chdman createcd --input foo.cue --output foo.chd Core options \u00b6 The Beetle SuperGrafx core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. CD Image Cache (Restart) [sgx_cdimagecache] ( disabled |enabled) Loads the complete image in memory at startup. Can potentially decrease loading times at the cost of increased startup time. CD Bios (Restart) [sgx_cdbios] ( System Card 3 |Games Express|System Card 1|System Card 2) Select which PC Engine CD BIOS to use. Look at the BIOS section for more information. Force SuperGrafx Emulation (Restart) [sgx_forcesgx] ( disabled |enabled) This is helpful to run homebrew games or isolate games that will not run in SuperGrafx mode. (like Space Harrier). Savestates are not compatible with each mode. It's better to leave this option at default (Off) unless needed. Known Supergrafx games (like Dai-Makaimura, Aldyns) will automatically switch to SuperGrafx regardless of this option. No Sprite Limit [sgx_nospritelimit] ( disabled |enabled) Remove 16-sprites-per-scanline hardware limit. CPU Overclock Multiplier (Restart) [sgx_ocmultiplier] ( 1 |2|3|4|5|6|7|8|9|10|20|30|40|50) Overclock the emulated CPU. Horizontal Overscan (352 Width Mode Only) [sgx_hoverscan] (300 to 352 in increments of 2. 352 in default .) Modify the horizontal overscan. Initial scanline [sgx_initial_scanline] (0 to 40 in increments of 1. 3 is default. ) Adjust first display scanline. Last scanline [sgx_last_scanline] (208 to 242 in increments of 1. 242 is default. ) Adjust last display scanline. (CD) CDDA Volume % [sgx_cddavolume] (0 to 200 in increments of 10. 100 is default .) Modify CDDA Volume %. (CD) ADPCM Volume % [sgx_adpcmvolume] (0 to 200 in increments of 10. 100 is default .) Modify ADPCM Volume %. (CD) CD PSG Volume %; [sgx_cdpsgvolume] (0 to 200 in increments of 10. 100 is default .) Modify CD PSG Volume %. (CD) CD Speed [sgx_cdspeed] ( 1 |2|4|8) Set the speed of the emulated CD drive. Turbo Delay [sgx_turbo_delay] ( 3 |4|5|6|7|8|9|10|11|12|13|14|15|30|60|2) Adjust turbo delay. Turbo ON/OFF Toggle [sgx_turbo_toggle] ( disabled |enabled) Enables Turbo ON/OFF inputs. Look at the Joypad section for more information. Alternate Turbo Hotkey [sgx_turbo_toggle_hotkey] ( disabled |enabled) Enables Alternate Turbo ON/OFF inputs. You can avoid remapping Button III and IV when switching to 6-button gamepad mode with this. Look at the Joypad section for more information. Disable Soft Reset (RUN+SELECT) [sgx_disable_softreset] ( disabled |enabled) Pressing RUN and SELECT simultaneously on PCE gamepad will SOFT RESET the console. This is a default hardware behaviour. Set this to enabled if you want the soft reset functionality turned off. Allow Opposing Directions [sgx_up_down_allowed] ( disabled |enabled) Enabling this will allow pressing / quickly alternating / holding both left and right (or up and down in some games) directions at the same time. This may cause movement based glitches to occur in certain games. It's best to keep this core option disabled. Mouse Sensitivity [sgx_mouse_sensitivity] (1.00 to 5.00 in increments of 0.25. 1.00 is default .) Configure the PCE Mouse device type's sensitivity. Aspect Ratio [sgx_aspect_ratio] ( auto |6:5|4:3) Select an auto (PAR) aspect ratio, or a 6:5 (Used to be default) aspect ratio, or a 4:3 TV aspect ratio. When using games that constantly switches between 256 and 352 modes and using auto aspect, its best to set Horizontal width to 342 as to minimize resizing and extra black lines since this width is in ratio of 256-width mode(or something like that, just test with Asuka 100% which is one of the game that switches between these modes) User 1 - 5 device types \u00b6 The Beetle SuperGrafx core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): None - Input is disabled. PCE Joypad - Joypad PCE Mouse - Mouse Joypad \u00b6 Use the Mode Switch input to switch between button modes. The regular Turbo inputs for 2-button mode are only active when the 'Turbo ON/OFF Toggle' core option is set to On. The Alternate Turbo inputs for 2-button mode are only active when the 'Turbo ON.mdOFF Toggle' core option is set to On and the 'Alternate Turbo Hotkey' core option is set to On. RetroPad Inputs User 1 - 5 input descriptors PCE Joypad 2-button PCE Joypad 6-button II II II III II Turbo On/Off III Select Select Select Run Run Run D-Pad Up D-Pad Up D-Pad Up D-Pad Down D-Pad Down D-Pad Down D-Pad Left D-Pad Left D-Pad Left D-Pad Right D-Pad Right D-Pad Right I I I IV I Turbo On/Off IV V V VI VI Mode Switch Mode Switch Mode Switch Alternate II Turbo On/Off Alternate I Turbo On/Off Mouse \u00b6 RetroMouse Inputs PCE Mouse Mouse Cursor PCE Mouse Cursor Mouse 1 PCE Mouse Left Button Mouse 2 PCE Mouse Right Button Mouse 3 PCE Mouse Start Button Select (Joypad) Start (Joypad) External Links \u00b6 Official Mednafen Website Official Mednafen Downloads Libretro Beetle SuperGrafx Core info file Libretro Beetle SuperGrafx Github Repository Report Libretro Beetle SuperGrafx Core Issues Here TG-16 \u00b6 NEC - PC Engine / CD (Beetle PCE FAST)","title":"NEC - PC Engine SuperGrafx (Beetle SGX)"},{"location":"library/beetle_sgx/#nec-pc-engine-supergrafx-beetle-supergrafx","text":"","title":"NEC - PC Engine SuperGrafx (Beetle SuperGrafx)"},{"location":"library/beetle_sgx/#background","text":"Standalone port of Mednafen PCE Fast to libretro. The Beetle SuperGrafx core has been authored by Mednafen Team The Beetle SuperGrafx core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Background"},{"location":"library/beetle_sgx/#bios","text":"Required or optional firmware files go in RetroArch's system directory. Attention Which PCE CD BIOS file the Beetle SuperGrafx core will use can be configured by the 'CD BIOS' core option . Attention Any CD-ROM System BIOS will work, but some of them are known to be incompatible with certain games. Filename Description md5sum syscard3.pce Super CD-ROM2 System V3.xx - Required 38179df8f4ac870017db21ebcbf53114 syscard2.pce CD-ROM System V2.xx - Optional syscard1.pce CD-ROM System V1.xx - Optional gexpress.pce Game Express CD Card - Optional","title":"BIOS"},{"location":"library/beetle_sgx/#extensions","text":"Content that can be loaded by the Beetle SuperGrafx core have the following file extensions: .pce .sgx .cue .ccd .chd RetroArch database(s) that are associated with the Beetle SuperGrafx core: NEC - PC Engine - TurboGrafx 16 NEC - PC Engine CD - TurboGrafx-CD NEC - PC Engine SuperGrafx","title":"Extensions"},{"location":"library/beetle_sgx/#features","text":"Frontend-level settings or features that the Beetle Saturn core respects. Feature Supported Restart \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2714 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/beetle_sgx/#directories","text":"The Beetle SuperGrafx core's library name is 'Beetle SuperGrafx' The Beetle SuperGrafx core saves/loads to/from these directories. Frontend's Save directory File Description *.srm Save Frontend's State directory File Description *.state# State","title":"Directories"},{"location":"library/beetle_sgx/#geometry-and-timing","text":"The Beetle SuperGrafx core's core provided FPS is 59.82 The Beetle SuperGrafx core's core provided sample rate is 44100 Hz The Beetle SuperGrafx core's base width is 512 The Beetle SuperGrafx core's base height is dependent on the 'Initial scanline' and 'Last scanline' core options . The Beetle SuperGrafx core's max width is 512 The Beetle SuperGrafx core's max height is 243 The Beetle SuperGrafx core's core provided aspect ratio is dependent on the 'Aspect Ratio' core option .","title":"Geometry and timing"},{"location":"library/beetle_sgx/#loading-pc-engine-cd-content","text":"To load PC Engine CD content, Beetle SuperGrafx needs a cue-sheet that points to an image file. A cue sheet, or cue file, is a metadata file which describes how the tracks of a CD or DVD are laid out. If you have e.g. foo.bin , you should create a text file and save it as foo.cue . If you're playing a single-track Saturn game, then the cue file contents should look like this: foobin.cue FILE \"foo.bin\" BINARY TRACK 01 MODE1/2352 INDEX 01 00:00:00 After that, you can load the foo.cue file in RetroArch with the Beetle SuperGrafx core. Certain PC Engine content are multi-track, so their .cue files might be more complicated.","title":"Loading PC Engine CD content"},{"location":"library/beetle_sgx/#chd","text":"Alternatively to using cue sheets with .bin/.iso files, you can convert your games to .chd (MAME Compressed Hunks of Data) to reduce file sizes and neaten up your game folder. To convert content to CHD format, use the chdman tool found inside the latest MAME distribution and point it to a .cue file, like so: chdman createcd --input foo.cue --output foo.chd","title":"CHD"},{"location":"library/beetle_sgx/#core-options","text":"The Beetle SuperGrafx core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. CD Image Cache (Restart) [sgx_cdimagecache] ( disabled |enabled) Loads the complete image in memory at startup. Can potentially decrease loading times at the cost of increased startup time. CD Bios (Restart) [sgx_cdbios] ( System Card 3 |Games Express|System Card 1|System Card 2) Select which PC Engine CD BIOS to use. Look at the BIOS section for more information. Force SuperGrafx Emulation (Restart) [sgx_forcesgx] ( disabled |enabled) This is helpful to run homebrew games or isolate games that will not run in SuperGrafx mode. (like Space Harrier). Savestates are not compatible with each mode. It's better to leave this option at default (Off) unless needed. Known Supergrafx games (like Dai-Makaimura, Aldyns) will automatically switch to SuperGrafx regardless of this option. No Sprite Limit [sgx_nospritelimit] ( disabled |enabled) Remove 16-sprites-per-scanline hardware limit. CPU Overclock Multiplier (Restart) [sgx_ocmultiplier] ( 1 |2|3|4|5|6|7|8|9|10|20|30|40|50) Overclock the emulated CPU. Horizontal Overscan (352 Width Mode Only) [sgx_hoverscan] (300 to 352 in increments of 2. 352 in default .) Modify the horizontal overscan. Initial scanline [sgx_initial_scanline] (0 to 40 in increments of 1. 3 is default. ) Adjust first display scanline. Last scanline [sgx_last_scanline] (208 to 242 in increments of 1. 242 is default. ) Adjust last display scanline. (CD) CDDA Volume % [sgx_cddavolume] (0 to 200 in increments of 10. 100 is default .) Modify CDDA Volume %. (CD) ADPCM Volume % [sgx_adpcmvolume] (0 to 200 in increments of 10. 100 is default .) Modify ADPCM Volume %. (CD) CD PSG Volume %; [sgx_cdpsgvolume] (0 to 200 in increments of 10. 100 is default .) Modify CD PSG Volume %. (CD) CD Speed [sgx_cdspeed] ( 1 |2|4|8) Set the speed of the emulated CD drive. Turbo Delay [sgx_turbo_delay] ( 3 |4|5|6|7|8|9|10|11|12|13|14|15|30|60|2) Adjust turbo delay. Turbo ON/OFF Toggle [sgx_turbo_toggle] ( disabled |enabled) Enables Turbo ON/OFF inputs. Look at the Joypad section for more information. Alternate Turbo Hotkey [sgx_turbo_toggle_hotkey] ( disabled |enabled) Enables Alternate Turbo ON/OFF inputs. You can avoid remapping Button III and IV when switching to 6-button gamepad mode with this. Look at the Joypad section for more information. Disable Soft Reset (RUN+SELECT) [sgx_disable_softreset] ( disabled |enabled) Pressing RUN and SELECT simultaneously on PCE gamepad will SOFT RESET the console. This is a default hardware behaviour. Set this to enabled if you want the soft reset functionality turned off. Allow Opposing Directions [sgx_up_down_allowed] ( disabled |enabled) Enabling this will allow pressing / quickly alternating / holding both left and right (or up and down in some games) directions at the same time. This may cause movement based glitches to occur in certain games. It's best to keep this core option disabled. Mouse Sensitivity [sgx_mouse_sensitivity] (1.00 to 5.00 in increments of 0.25. 1.00 is default .) Configure the PCE Mouse device type's sensitivity. Aspect Ratio [sgx_aspect_ratio] ( auto |6:5|4:3) Select an auto (PAR) aspect ratio, or a 6:5 (Used to be default) aspect ratio, or a 4:3 TV aspect ratio. When using games that constantly switches between 256 and 352 modes and using auto aspect, its best to set Horizontal width to 342 as to minimize resizing and extra black lines since this width is in ratio of 256-width mode(or something like that, just test with Asuka 100% which is one of the game that switches between these modes)","title":"Core options"},{"location":"library/beetle_sgx/#user-1-5-device-types","text":"The Beetle SuperGrafx core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): None - Input is disabled. PCE Joypad - Joypad PCE Mouse - Mouse","title":"User 1 - 5 device types"},{"location":"library/beetle_sgx/#joypad","text":"Use the Mode Switch input to switch between button modes. The regular Turbo inputs for 2-button mode are only active when the 'Turbo ON/OFF Toggle' core option is set to On. The Alternate Turbo inputs for 2-button mode are only active when the 'Turbo ON.mdOFF Toggle' core option is set to On and the 'Alternate Turbo Hotkey' core option is set to On. RetroPad Inputs User 1 - 5 input descriptors PCE Joypad 2-button PCE Joypad 6-button II II II III II Turbo On/Off III Select Select Select Run Run Run D-Pad Up D-Pad Up D-Pad Up D-Pad Down D-Pad Down D-Pad Down D-Pad Left D-Pad Left D-Pad Left D-Pad Right D-Pad Right D-Pad Right I I I IV I Turbo On/Off IV V V VI VI Mode Switch Mode Switch Mode Switch Alternate II Turbo On/Off Alternate I Turbo On/Off","title":"Joypad"},{"location":"library/beetle_sgx/#mouse","text":"RetroMouse Inputs PCE Mouse Mouse Cursor PCE Mouse Cursor Mouse 1 PCE Mouse Left Button Mouse 2 PCE Mouse Right Button Mouse 3 PCE Mouse Start Button Select (Joypad) Start (Joypad)","title":"Mouse"},{"location":"library/beetle_sgx/#external-links","text":"Official Mednafen Website Official Mednafen Downloads Libretro Beetle SuperGrafx Core info file Libretro Beetle SuperGrafx Github Repository Report Libretro Beetle SuperGrafx Core Issues Here","title":"External Links"},{"location":"library/beetle_sgx/#tg-16","text":"NEC - PC Engine / CD (Beetle PCE FAST)","title":"TG-16"},{"location":"library/beetle_vb/","text":"Nintendo - Virtual Boy (Beetle VB) \u00b6 Background \u00b6 Port of Mednafen VB to libretro. Author/License \u00b6 The Beetle VB core has been authored by Mednafen Team The Beetle VB core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the Beetle VB core have the following file extensions: .vb .vboy .bin Databases \u00b6 RetroArch database(s) that are associated with the Beetle VB core: Nintendo - Virtual Boy Features \u00b6 Frontend-level settings or features that the Beetle VB core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay (State based) \u2714 (not link-cable emulation) Core Options \u2714 RetroAchievements \u2714 Cheats (Cheats menu) \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2714 LEDs \u2715 Directories \u00b6 The Beetle VB core's directory name is 'Beetle VB' The Beetle VB core saves/loads to/from these directories. Frontend's Save directory 'content-name'.srm (Cartridge battery save) Frontend's State directory 'content-name'.state# (State) Geometry and timing \u00b6 The Beetle VB core's core provided FPS is 50.27 The Beetle VB core's core provided sample rate is 44100 Hz The Beetle VB core's core provided aspect ratio is 12/7 Core options \u00b6 The Beetle VB core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Anaglyph preset (restart) [vb_anaglyph_preset] ( Off /red & blue/red & cyan/red & electric cyan/red & green/green & magenta/yellow & blue) Select anaglyph 3D mode. Attention These Analglyph preset screenshots have been taken with the Palette core option set to black & red. Anaglyph preset - Off Anaglyph preset - red & blue Anaglyph preset - red & cyan Anaglyph preset - red & electric cyan Anaglyph preset - red & green Anaglyph preset - green & magenta Anaglyph preset - yellow & blue Palette (restart) [vb_color_mode] ( black & red /black & white) Choose which color palette to use. Palette - black & red Palette - black & white Right Analog to Digital [vb_right_analog_to_digital] ( Off /On/invert x/invert y/invert both) Self-explanatory. Controllers \u00b6 The Beetle VB core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 device types \u00b6 None - Doesn't disable input. RetroPad - Joypad Retropad w/Analog - Joypad - There's no reason to switch to this. Controller tables \u00b6 Joypad \u00b6 Attention The Right D-Pad X and Right D-Pad Y inputs are only active when the 'Right Analog to Digital' core option is set to anything other than Off. User 1 Remap descriptors RetroPad Inputs B Select Start Left D-Pad Up Left D-Pad Down Left D-Pad Left Left D-Pad Right A L R Right D-Pad Up Right D-Pad Left Right D-Pad Down Right D-Pad Right Right D-Pad X X Right D-Pad Y Y Compatibility \u00b6 Awaiting description. External Links \u00b6 Official Mednafen Website Official Mednafen Downloads Official Mednafen Virtual Boy Documentation Libretro Beetle VB Core info file Libretro Beetle VB Github Repository Report Libretro Beetle VB Core Issues Here","title":"Nintendo - Virtual Boy (Beetle VB)"},{"location":"library/beetle_vb/#nintendo-virtual-boy-beetle-vb","text":"","title":"Nintendo - Virtual Boy (Beetle VB)"},{"location":"library/beetle_vb/#background","text":"Port of Mednafen VB to libretro.","title":"Background"},{"location":"library/beetle_vb/#authorlicense","text":"The Beetle VB core has been authored by Mednafen Team The Beetle VB core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/beetle_vb/#extensions","text":"Content that can be loaded by the Beetle VB core have the following file extensions: .vb .vboy .bin","title":"Extensions"},{"location":"library/beetle_vb/#databases","text":"RetroArch database(s) that are associated with the Beetle VB core: Nintendo - Virtual Boy","title":"Databases"},{"location":"library/beetle_vb/#features","text":"Frontend-level settings or features that the Beetle VB core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay (State based) \u2714 (not link-cable emulation) Core Options \u2714 RetroAchievements \u2714 Cheats (Cheats menu) \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2714 LEDs \u2715","title":"Features"},{"location":"library/beetle_vb/#directories","text":"The Beetle VB core's directory name is 'Beetle VB' The Beetle VB core saves/loads to/from these directories. Frontend's Save directory 'content-name'.srm (Cartridge battery save) Frontend's State directory 'content-name'.state# (State)","title":"Directories"},{"location":"library/beetle_vb/#geometry-and-timing","text":"The Beetle VB core's core provided FPS is 50.27 The Beetle VB core's core provided sample rate is 44100 Hz The Beetle VB core's core provided aspect ratio is 12/7","title":"Geometry and timing"},{"location":"library/beetle_vb/#core-options","text":"The Beetle VB core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Anaglyph preset (restart) [vb_anaglyph_preset] ( Off /red & blue/red & cyan/red & electric cyan/red & green/green & magenta/yellow & blue) Select anaglyph 3D mode. Attention These Analglyph preset screenshots have been taken with the Palette core option set to black & red. Anaglyph preset - Off Anaglyph preset - red & blue Anaglyph preset - red & cyan Anaglyph preset - red & electric cyan Anaglyph preset - red & green Anaglyph preset - green & magenta Anaglyph preset - yellow & blue Palette (restart) [vb_color_mode] ( black & red /black & white) Choose which color palette to use. Palette - black & red Palette - black & white Right Analog to Digital [vb_right_analog_to_digital] ( Off /On/invert x/invert y/invert both) Self-explanatory.","title":"Core options"},{"location":"library/beetle_vb/#controllers","text":"The Beetle VB core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/beetle_vb/#user-1-device-types","text":"None - Doesn't disable input. RetroPad - Joypad Retropad w/Analog - Joypad - There's no reason to switch to this.","title":"User 1 device types"},{"location":"library/beetle_vb/#controller-tables","text":"","title":"Controller tables"},{"location":"library/beetle_vb/#joypad","text":"Attention The Right D-Pad X and Right D-Pad Y inputs are only active when the 'Right Analog to Digital' core option is set to anything other than Off. User 1 Remap descriptors RetroPad Inputs B Select Start Left D-Pad Up Left D-Pad Down Left D-Pad Left Left D-Pad Right A L R Right D-Pad Up Right D-Pad Left Right D-Pad Down Right D-Pad Right Right D-Pad X X Right D-Pad Y Y","title":"Joypad"},{"location":"library/beetle_vb/#compatibility","text":"Awaiting description.","title":"Compatibility"},{"location":"library/beetle_vb/#external-links","text":"Official Mednafen Website Official Mednafen Downloads Official Mednafen Virtual Boy Documentation Libretro Beetle VB Core info file Libretro Beetle VB Github Repository Report Libretro Beetle VB Core Issues Here","title":"External Links"},{"location":"library/bios/","text":"Verifying that you have the right BIOS \u00b6 It is very important that the following requirements are met: Location Name File Hash (md5sum) Location \u00b6 Ensure that you have placed the BIOS file(s) in the correct location. Usually is the system folder, which can be located in RetroArch by going to: Settings->Directory->System/BIOS (look at the right column). The specific core information page will tell you where exactly. (you may need to create a subfolder) Name \u00b6 Verify that the file(s) have the same name and extension that appears in the core info/docs page. Remember that some operating systems are case sensitive. File Hash (md5sum) \u00b6 Last, but probably the most important part of all, the hash of your BIOS should match the one in the docs. What is a hash? \u00b6 A File Hash is a string of characters that uniquely identifies a file. Why should i care? \u00b6 If i rename dog.jpg to bios.bin , how would you know? If the dump is not the version that the core needs, or if the file integrity is compromised (corrupted), unexpected things ( bad ) can happen. A file can become corrupted by errors in transmission, write errors during copying or moving, faulty storage media, software bugs, etc. How do i check it? \u00b6 You need two things, a piece of software that can generate a hash from your file and a known valid file hash for the comparison, you will find the correct hash in the corresponding core information page (links below) As for the software, some operating systems have tools integrated in the commandline that can do the job, but if you prefer a graphical interface look for something like Open-Hashtool, HashMyFiles, etc Links to the core specific BIOS information \u00b6 System Core Link 3DO Opera BIOS information 5200/Atari 8-bit computers Atari800 BIOS information 7800 ProSystem BIOS information Arcade MAME2003 BIOS information Arcade MAME2003+ BIOS information Arcade MAME2010 BIOS information Dreamcast Flycast BIOS information DS DeSmuME BIOS information GameBoy/GameBoy Color Emux GB BIOS information GameBoy/GameBoy Color Gambatte BIOS information GameBoy/GameBoy Color Gearboy BIOS information GameBoy/GameBoy Color SameBoy BIOS information GameBoy Advance Beetle GBA BIOS information GameBoy Advance gpSP BIOS information GameBoy Advance mGBA BIOS information GameBoy Advance VBA Next BIOS information Gamecube/Wii Dolphin BIOS information Intellivision FreeIntv BIOS information Lynx Beetle Lynx BIOS information Lynx Handy BIOS information Master System Emux SMS BIOS information MS/GG SMS Plus GX BIOS information MS/GG/MD/CD Genesis Plus GX BIOS information MS/MD/CD/32X PicoDrive BIOS information MSX/SVI/ColecoVision/SG-1000 blueMSX BIOS information MSX fMSX BIOS information NES/Famicom FCEUmm BIOS information NES/Famicom Nestopia UE BIOS information NES/Famicom Mesen BIOS information Odyssey2/Videopac+ O2EM BIOS information PC-98 Neko Project II Kai BIOS information PC Engine/CD Beetle PCE FAST BIOS information PCE SuperGrafx Beetle SGX BIOS information PC-FX Beetle PC-FX BIOS information PlayStation Beetle PSX BIOS information PlayStation Beetle PSX HW BIOS information PlayStation PCSX ReARMed BIOS information Pok\u00e9mon Mini PokeMini BIOS information PSP PPSSPP BIOS information Saturn Beetle Saturn BIOS information Saturn Yabause BIOS information Sharp - X68000 PX68k BIOS information SNES/Super Famicom bsnes Accuracy BIOS information SNES/Super Famicom bsnes Balanced BIOS information SNES/Super Famicom bsnes Performance BIOS information SNES/Super Famicom bsnes-mercury Acc BIOS information SNES/Super Famicom bsnes-mercury Bal BIOS information SNES/Super Famicom bsnes-mercury Perf BIOS information SNES/Super Famicom nSide Balanced BIOS information SNES/Super Famicom higan Accuracy BIOS information SNES/Super Famicom Mesen-S BIOS information ST/STE/TT/Falcon Hatari BIOS information Thomson - MO/TO Theodore BIOS information Vectrex vecx BIOS information ZX Spectrum Fuse BIOS information","title":"BIOS Information Hub"},{"location":"library/bios/#verifying-that-you-have-the-right-bios","text":"It is very important that the following requirements are met: Location Name File Hash (md5sum)","title":"Verifying that you have the right BIOS"},{"location":"library/bios/#location","text":"Ensure that you have placed the BIOS file(s) in the correct location. Usually is the system folder, which can be located in RetroArch by going to: Settings->Directory->System/BIOS (look at the right column). The specific core information page will tell you where exactly. (you may need to create a subfolder)","title":"Location"},{"location":"library/bios/#name","text":"Verify that the file(s) have the same name and extension that appears in the core info/docs page. Remember that some operating systems are case sensitive.","title":"Name"},{"location":"library/bios/#file-hash-md5sum","text":"Last, but probably the most important part of all, the hash of your BIOS should match the one in the docs.","title":"File Hash (md5sum)"},{"location":"library/bios/#what-is-a-hash","text":"A File Hash is a string of characters that uniquely identifies a file.","title":"What is a hash?"},{"location":"library/bios/#why-should-i-care","text":"If i rename dog.jpg to bios.bin , how would you know? If the dump is not the version that the core needs, or if the file integrity is compromised (corrupted), unexpected things ( bad ) can happen. A file can become corrupted by errors in transmission, write errors during copying or moving, faulty storage media, software bugs, etc.","title":"Why should i care?"},{"location":"library/bios/#how-do-i-check-it","text":"You need two things, a piece of software that can generate a hash from your file and a known valid file hash for the comparison, you will find the correct hash in the corresponding core information page (links below) As for the software, some operating systems have tools integrated in the commandline that can do the job, but if you prefer a graphical interface look for something like Open-Hashtool, HashMyFiles, etc","title":"How do i check it?"},{"location":"library/bios/#links-to-the-core-specific-bios-information","text":"System Core Link 3DO Opera BIOS information 5200/Atari 8-bit computers Atari800 BIOS information 7800 ProSystem BIOS information Arcade MAME2003 BIOS information Arcade MAME2003+ BIOS information Arcade MAME2010 BIOS information Dreamcast Flycast BIOS information DS DeSmuME BIOS information GameBoy/GameBoy Color Emux GB BIOS information GameBoy/GameBoy Color Gambatte BIOS information GameBoy/GameBoy Color Gearboy BIOS information GameBoy/GameBoy Color SameBoy BIOS information GameBoy Advance Beetle GBA BIOS information GameBoy Advance gpSP BIOS information GameBoy Advance mGBA BIOS information GameBoy Advance VBA Next BIOS information Gamecube/Wii Dolphin BIOS information Intellivision FreeIntv BIOS information Lynx Beetle Lynx BIOS information Lynx Handy BIOS information Master System Emux SMS BIOS information MS/GG SMS Plus GX BIOS information MS/GG/MD/CD Genesis Plus GX BIOS information MS/MD/CD/32X PicoDrive BIOS information MSX/SVI/ColecoVision/SG-1000 blueMSX BIOS information MSX fMSX BIOS information NES/Famicom FCEUmm BIOS information NES/Famicom Nestopia UE BIOS information NES/Famicom Mesen BIOS information Odyssey2/Videopac+ O2EM BIOS information PC-98 Neko Project II Kai BIOS information PC Engine/CD Beetle PCE FAST BIOS information PCE SuperGrafx Beetle SGX BIOS information PC-FX Beetle PC-FX BIOS information PlayStation Beetle PSX BIOS information PlayStation Beetle PSX HW BIOS information PlayStation PCSX ReARMed BIOS information Pok\u00e9mon Mini PokeMini BIOS information PSP PPSSPP BIOS information Saturn Beetle Saturn BIOS information Saturn Yabause BIOS information Sharp - X68000 PX68k BIOS information SNES/Super Famicom bsnes Accuracy BIOS information SNES/Super Famicom bsnes Balanced BIOS information SNES/Super Famicom bsnes Performance BIOS information SNES/Super Famicom bsnes-mercury Acc BIOS information SNES/Super Famicom bsnes-mercury Bal BIOS information SNES/Super Famicom bsnes-mercury Perf BIOS information SNES/Super Famicom nSide Balanced BIOS information SNES/Super Famicom higan Accuracy BIOS information SNES/Super Famicom Mesen-S BIOS information ST/STE/TT/Falcon Hatari BIOS information Thomson - MO/TO Theodore BIOS information Vectrex vecx BIOS information ZX Spectrum Fuse BIOS information","title":"Links to the core specific BIOS information"},{"location":"library/bluemsx/","text":"MSX/SVI/ColecoVision/SG-1000 (blueMSX) \u00b6 Background \u00b6 blueMSX is a cycle accurate emulator that emulates all generations of MSX computers as well as SVI, ColecoVision and Sega SG-1000. Author/License \u00b6 The blueMSX core has been authored by Daniel Vik The blueMSX core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the blueMSX core have the following file extensions: .rom .ri .mx1 .mx2 .col .dsk .cas .sg .sc .m3u Databases \u00b6 RetroArch database(s) that are associated with the blueMSX core: Microsoft - MSX Microsoft - MSX2 Coleco - ColecoVision Sega - SG-1000 BIOS \u00b6 The blueMSX core requires the 'Databases' and 'Machines' folders from a full installation of blueMSX. You can download the 'Databases' and 'Machines' folders from an official full standalone blueMSX emulator installation . Get blueMSXv282full.zip near the bottom of the page. Move/Copy the 'Databases' and 'Machines' Folders to RetroArch's System directory. Features \u00b6 Frontend-level settings or features that the blueMSX core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2714 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The blueMSX core's library name is 'blueMSX' The blueMSX core saves/loads to/from these directories. Frontend's System directory File Description bluemsx.ini blueMSX Config bluemsx_history.ini blueMSX History Geometry and timing \u00b6 The blueMSX core's core provided FPS is 60 The blueMSX core's core provided sample rate is 44100 Hz The blueMSX core's base width is (Base width) The blueMSX core's base height is (Base height) The blueMSX core's max width is (Max width) The blueMSX core's max height is (Max height) The blueMSX core's core provided aspect ratio is (Ratio) Usage \u00b6 ColecoVision Gamepad Mapping is as follow: Button 1 as Retropad A Button 2 as Retropad B Dial keys 1 to 8 as X, Y, R, L, R2, L2, R3, L3 Star (*) as Select, Hash (#) as Start 0 & 9 are on keyboard 1 & 2 for Player 1 0 & 9 are on keyboard 3 & 4 for Player 2. To play SpectraVideo cassettes type 'cload' then 'run' or BLOAD ''CAS:'',R depending on the game. Multiple-disk games \u00b6 If foo is a multiple-disk game, you should have .dsk files for each one, e.g. foo (Disk 1).dsk , foo (Disk 2).dsk , foo (Disk 3).dsk . To take advantage of BlueMSX Disk Control feature for disk swapping, an index file (a m3u file) should be made. Create a text file and save it as foo.m3u . Then enter your game's .dsk files on it. The m3u file contents should look something like this: foo.m3u foo (Disk 1).dsk foo (Disk 2).dsk foo (Disk 3).dsk After that, you can load the foo.m3u file in RetroArch with the BlueMSX core. An alternative is to append disks to the current playlist via the \"Disk Image Append\" option RetroArch menu. Core options \u00b6 The blueMSX core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Machine Type (Restart) [bluemsx_msxtype] ( Auto |MSX|MSXturboR|MSX2|MSX2+|SEGA - SG-1000|SEGA - SC-3000|SEGA - SF-7000|SVI - Spectravideo SVI-318|SVI - Spectravideo SVI-328|SVI - Spectravideo SVI-328 MK2|ColecoVision|Coleco (Spectravideo SVI-603)) Manually select the machine type you would like the core to start in. Crop Overscan [bluemsx_overscan] ( disabled |enabled|MSX2) Forces cropping of overscanned frames Crop Overscan Off Crop Overscan On Crop Overscan MSX2 VDP Sync Type (Restart) [bluemsx_vdp_synctype] ( Auto |50Hz|60Hz) Match the game/machine region frequency to avoid emulated speed issues. No Sprite Limit [bluemsx_nospritelimits] ( OFF |ON) Remove the 4 sprite per line limit which can reduce or remove sprite flicker in some games. Sound YM2413 Enable (Restart) [bluemsx_ym2413_enable] ( enabled |disabled) Awaiting description. Cart Mapper Type (Restart) [bluemsx_cartmapper] ( Auto |Normal|mirrored|basic|0x4000|0xC000|ascii8|ascii8sram|ascii16|ascii16sram| ascii16nf|konami4|konami4nf|konami5|konamisynth|korean80|korean90|korean126| MegaFlashRomScc|MegaFlashRomSccPlus|msxdos2|scc|sccexpanded|sccmirrored|sccplus| snatcher|sdsnatcher|SegaBasic|SG1000|SG1000Castle|SG1000RamA|SG1000RamB|SC3000) When a ROM game or application is in the database, the emulator uses the databases to apply the correct mapper. If the sha1 value of a dump is not yet in the databases, it uses an automatic mapper detection system, but it can fail in some cases. In this situation, you can manually select the correct mapper. Controllers \u00b6 The blueMSX core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 device types \u00b6 None - Doesn't disable input. There's no reason to switch to this. RetroPad - Joypad RetroKeyboard - Keyboard - Keyboard inputs are always active. Has keymapper support. RetroPad Keyboard Map - Joypad - Awaiting description. User 2 device types \u00b6 None - Doesn't disable input. There's no reason to switch to this. RetroPad - Joypad RetroKeyboard - Keyboard - Keyboard inputs are always active. Controller tables \u00b6 Joypad \u00b6 User 1 and 2 Remap descriptors for 'RetroPad' device type RetroPad Inputs blueMSX core inputs Button 2 Button 2, Coleco Button 2 Button 3 Button 3, Coleco #2 Select Select, Coleco Star (*) Start Start, Coleco Hash (#) Joy Up Joy Up Joy Down Joy Down Joy Left Joy Left Joy Right Joy Right Button 1 Button 1, Coleco Button 1 Button 4 Button 4, Coleco #1 Button 5 Button 5, Coleco #4 Button 6 Button 6, Coleco #3 Button 7 Button 7, Coleco #6 Button 8 Button 8, Coleco #5 Button 9 Button 9. Coleco #8 Button 10 Button 10, Coleco #7 Keyboard \u00b6 RetroKeyboard Inputs RetroKeyboard Keyboard Backspace BACKSPACE Keyboard Tab TAB Keyboard Return RETURN Keyboard Pause PAUSE Keyboard Escape ESCAPE Keyboard Space SPACE Keyboard Quote ' COLON Keyboard Comma , COMMA Keyboard Minus - NEGATIVE Keyboard Period . PERIOD Keyboard Slash / DIVIDE Keyboard 0 0 Keyboard 1 1, Player 1 Coleco #0 Keyboard 2 2, Player 1 Coleco #9 Keyboard 3 3, Player 2 Coleco #0 Keyboard 4 4, Player 2 Coleco #9 Keyboard 5 5 Keyboard 6 6 Keyboard 7 7 Keyboard 8 8 Keyboard 9 9 Keyboard Semicolon ; SEMICOLON Keyboard Equals = CIRCUMFLEX Keyboard Left Bracket [ LEFT BRACKET Keyboard Backslash \\ BACKSLASH (YEN) Keyboard Right Bracket ] RIGHT BRACKET Keyboard Backquote ` AT Keyboard a A Keyboard b B Keyboard c C Keyboard d D Keyboard e E Keyboard f F Keyboard g G Keyboard h H Keyboard i I Keyboard j J Keyboard k K Keyboard l L Keyboard m M Keyboard n N Keyboard o O Keyboard p P Keyboard q Q Keyboard r R Keyboard s S Keyboard t T Keyboard u U Keyboard v V Keyboard w W Keyboard x X Keyboard y Y Keyboard z Z Keyboard Delete DELETE Keyboard Keypad 0 NUMPAD 0 Keyboard Keypad 1 NUMPAD 1 Keyboard Keypad 2 NUMPAD 2 Keyboard Keypad 3 NUMPAD 3 Keyboard Keypad 4 NUMPAD 4 Keyboard Keypad 5 NUMPAD 5 Keyboard Keypad 6 NUMPAD 6 Keyboard Keypad 7 NUMPAD 7 Keyboard Keypad 8 NUMPAD 8 Keyboard Keypad 9 NUMPAD 9 Keyboard Keypad Period . NUMPAD COMMA Keyboard Keypad Divide / NUMPAD DIVIDE Keyboard Keypad Multiply * NUMPAD MULTIPLY Keyboard Keypad Minus - NUMPAD SUBTRACTION Keyboard Keypad Plus + NUMPAD ADD Keyboard Keypad Enter NUMPAD PERIOD Keyboard Up UP Keyboard Down DOWN Keyboard Right RIGHT Keyboard Left LEFT Keyboard Insert INSERT Keyboard Home CLS Keyboard End STOP Keyboard Page Up SELECT Keyboard F1 F1 Keyboard F2 F2 Keyboard F3 F3 Keyboard F4 F4 Keyboard F5 F5 Keyboard Caps Lock CAPS Keyboard Right Shift RIGHT SHIFT Keyboard Left Shift LEFT SHIFT Keyboard Left Control CONTROL Keyboard Left Alt GRAPH Keyboard Print PRINT Supported combinations Keyboard Left or Right Shift + Keyboard 0 = UNDERSCORE Compatibility \u00b6 blueMSX Manual External Links \u00b6 Official blueMSX Website Official blueMSX SourceForge Repository Libretro blueMSX Core info file Libretro blueMSX Github Repository Report Libretro blueMSX Core Issues Here See also \u00b6 Sega - SG-1000 \u00b6 Sega - MS/GG/MD/CD (Genesis Plus GX) Sega - MS/GG/SG-1000 (Gearsystem) Microsoft - MSX \u00b6 Microsoft - MSX (fMSX) Microsoft - MSX2 \u00b6 Microsoft - MSX (fMSX)","title":"MSX/SVI/ColecoVision/SG-1000 (blueMSX)"},{"location":"library/bluemsx/#msxsvicolecovisionsg-1000-bluemsx","text":"","title":"MSX/SVI/ColecoVision/SG-1000 (blueMSX)"},{"location":"library/bluemsx/#background","text":"blueMSX is a cycle accurate emulator that emulates all generations of MSX computers as well as SVI, ColecoVision and Sega SG-1000.","title":"Background"},{"location":"library/bluemsx/#authorlicense","text":"The blueMSX core has been authored by Daniel Vik The blueMSX core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/bluemsx/#extensions","text":"Content that can be loaded by the blueMSX core have the following file extensions: .rom .ri .mx1 .mx2 .col .dsk .cas .sg .sc .m3u","title":"Extensions"},{"location":"library/bluemsx/#databases","text":"RetroArch database(s) that are associated with the blueMSX core: Microsoft - MSX Microsoft - MSX2 Coleco - ColecoVision Sega - SG-1000","title":"Databases"},{"location":"library/bluemsx/#bios","text":"The blueMSX core requires the 'Databases' and 'Machines' folders from a full installation of blueMSX. You can download the 'Databases' and 'Machines' folders from an official full standalone blueMSX emulator installation . Get blueMSXv282full.zip near the bottom of the page. Move/Copy the 'Databases' and 'Machines' Folders to RetroArch's System directory.","title":"BIOS"},{"location":"library/bluemsx/#features","text":"Frontend-level settings or features that the blueMSX core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2714 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/bluemsx/#directories","text":"The blueMSX core's library name is 'blueMSX' The blueMSX core saves/loads to/from these directories. Frontend's System directory File Description bluemsx.ini blueMSX Config bluemsx_history.ini blueMSX History","title":"Directories"},{"location":"library/bluemsx/#geometry-and-timing","text":"The blueMSX core's core provided FPS is 60 The blueMSX core's core provided sample rate is 44100 Hz The blueMSX core's base width is (Base width) The blueMSX core's base height is (Base height) The blueMSX core's max width is (Max width) The blueMSX core's max height is (Max height) The blueMSX core's core provided aspect ratio is (Ratio)","title":"Geometry and timing"},{"location":"library/bluemsx/#usage","text":"ColecoVision Gamepad Mapping is as follow: Button 1 as Retropad A Button 2 as Retropad B Dial keys 1 to 8 as X, Y, R, L, R2, L2, R3, L3 Star (*) as Select, Hash (#) as Start 0 & 9 are on keyboard 1 & 2 for Player 1 0 & 9 are on keyboard 3 & 4 for Player 2. To play SpectraVideo cassettes type 'cload' then 'run' or BLOAD ''CAS:'',R depending on the game.","title":"Usage"},{"location":"library/bluemsx/#multiple-disk-games","text":"If foo is a multiple-disk game, you should have .dsk files for each one, e.g. foo (Disk 1).dsk , foo (Disk 2).dsk , foo (Disk 3).dsk . To take advantage of BlueMSX Disk Control feature for disk swapping, an index file (a m3u file) should be made. Create a text file and save it as foo.m3u . Then enter your game's .dsk files on it. The m3u file contents should look something like this: foo.m3u foo (Disk 1).dsk foo (Disk 2).dsk foo (Disk 3).dsk After that, you can load the foo.m3u file in RetroArch with the BlueMSX core. An alternative is to append disks to the current playlist via the \"Disk Image Append\" option RetroArch menu.","title":"Multiple-disk games"},{"location":"library/bluemsx/#core-options","text":"The blueMSX core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Machine Type (Restart) [bluemsx_msxtype] ( Auto |MSX|MSXturboR|MSX2|MSX2+|SEGA - SG-1000|SEGA - SC-3000|SEGA - SF-7000|SVI - Spectravideo SVI-318|SVI - Spectravideo SVI-328|SVI - Spectravideo SVI-328 MK2|ColecoVision|Coleco (Spectravideo SVI-603)) Manually select the machine type you would like the core to start in. Crop Overscan [bluemsx_overscan] ( disabled |enabled|MSX2) Forces cropping of overscanned frames Crop Overscan Off Crop Overscan On Crop Overscan MSX2 VDP Sync Type (Restart) [bluemsx_vdp_synctype] ( Auto |50Hz|60Hz) Match the game/machine region frequency to avoid emulated speed issues. No Sprite Limit [bluemsx_nospritelimits] ( OFF |ON) Remove the 4 sprite per line limit which can reduce or remove sprite flicker in some games. Sound YM2413 Enable (Restart) [bluemsx_ym2413_enable] ( enabled |disabled) Awaiting description. Cart Mapper Type (Restart) [bluemsx_cartmapper] ( Auto |Normal|mirrored|basic|0x4000|0xC000|ascii8|ascii8sram|ascii16|ascii16sram| ascii16nf|konami4|konami4nf|konami5|konamisynth|korean80|korean90|korean126| MegaFlashRomScc|MegaFlashRomSccPlus|msxdos2|scc|sccexpanded|sccmirrored|sccplus| snatcher|sdsnatcher|SegaBasic|SG1000|SG1000Castle|SG1000RamA|SG1000RamB|SC3000) When a ROM game or application is in the database, the emulator uses the databases to apply the correct mapper. If the sha1 value of a dump is not yet in the databases, it uses an automatic mapper detection system, but it can fail in some cases. In this situation, you can manually select the correct mapper.","title":"Core options"},{"location":"library/bluemsx/#controllers","text":"The blueMSX core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/bluemsx/#user-1-device-types","text":"None - Doesn't disable input. There's no reason to switch to this. RetroPad - Joypad RetroKeyboard - Keyboard - Keyboard inputs are always active. Has keymapper support. RetroPad Keyboard Map - Joypad - Awaiting description.","title":"User 1 device types"},{"location":"library/bluemsx/#user-2-device-types","text":"None - Doesn't disable input. There's no reason to switch to this. RetroPad - Joypad RetroKeyboard - Keyboard - Keyboard inputs are always active.","title":"User 2 device types"},{"location":"library/bluemsx/#controller-tables","text":"","title":"Controller tables"},{"location":"library/bluemsx/#joypad","text":"User 1 and 2 Remap descriptors for 'RetroPad' device type RetroPad Inputs blueMSX core inputs Button 2 Button 2, Coleco Button 2 Button 3 Button 3, Coleco #2 Select Select, Coleco Star (*) Start Start, Coleco Hash (#) Joy Up Joy Up Joy Down Joy Down Joy Left Joy Left Joy Right Joy Right Button 1 Button 1, Coleco Button 1 Button 4 Button 4, Coleco #1 Button 5 Button 5, Coleco #4 Button 6 Button 6, Coleco #3 Button 7 Button 7, Coleco #6 Button 8 Button 8, Coleco #5 Button 9 Button 9. Coleco #8 Button 10 Button 10, Coleco #7","title":"Joypad"},{"location":"library/bluemsx/#keyboard","text":"RetroKeyboard Inputs RetroKeyboard Keyboard Backspace BACKSPACE Keyboard Tab TAB Keyboard Return RETURN Keyboard Pause PAUSE Keyboard Escape ESCAPE Keyboard Space SPACE Keyboard Quote ' COLON Keyboard Comma , COMMA Keyboard Minus - NEGATIVE Keyboard Period . PERIOD Keyboard Slash / DIVIDE Keyboard 0 0 Keyboard 1 1, Player 1 Coleco #0 Keyboard 2 2, Player 1 Coleco #9 Keyboard 3 3, Player 2 Coleco #0 Keyboard 4 4, Player 2 Coleco #9 Keyboard 5 5 Keyboard 6 6 Keyboard 7 7 Keyboard 8 8 Keyboard 9 9 Keyboard Semicolon ; SEMICOLON Keyboard Equals = CIRCUMFLEX Keyboard Left Bracket [ LEFT BRACKET Keyboard Backslash \\ BACKSLASH (YEN) Keyboard Right Bracket ] RIGHT BRACKET Keyboard Backquote ` AT Keyboard a A Keyboard b B Keyboard c C Keyboard d D Keyboard e E Keyboard f F Keyboard g G Keyboard h H Keyboard i I Keyboard j J Keyboard k K Keyboard l L Keyboard m M Keyboard n N Keyboard o O Keyboard p P Keyboard q Q Keyboard r R Keyboard s S Keyboard t T Keyboard u U Keyboard v V Keyboard w W Keyboard x X Keyboard y Y Keyboard z Z Keyboard Delete DELETE Keyboard Keypad 0 NUMPAD 0 Keyboard Keypad 1 NUMPAD 1 Keyboard Keypad 2 NUMPAD 2 Keyboard Keypad 3 NUMPAD 3 Keyboard Keypad 4 NUMPAD 4 Keyboard Keypad 5 NUMPAD 5 Keyboard Keypad 6 NUMPAD 6 Keyboard Keypad 7 NUMPAD 7 Keyboard Keypad 8 NUMPAD 8 Keyboard Keypad 9 NUMPAD 9 Keyboard Keypad Period . NUMPAD COMMA Keyboard Keypad Divide / NUMPAD DIVIDE Keyboard Keypad Multiply * NUMPAD MULTIPLY Keyboard Keypad Minus - NUMPAD SUBTRACTION Keyboard Keypad Plus + NUMPAD ADD Keyboard Keypad Enter NUMPAD PERIOD Keyboard Up UP Keyboard Down DOWN Keyboard Right RIGHT Keyboard Left LEFT Keyboard Insert INSERT Keyboard Home CLS Keyboard End STOP Keyboard Page Up SELECT Keyboard F1 F1 Keyboard F2 F2 Keyboard F3 F3 Keyboard F4 F4 Keyboard F5 F5 Keyboard Caps Lock CAPS Keyboard Right Shift RIGHT SHIFT Keyboard Left Shift LEFT SHIFT Keyboard Left Control CONTROL Keyboard Left Alt GRAPH Keyboard Print PRINT Supported combinations Keyboard Left or Right Shift + Keyboard 0 = UNDERSCORE","title":"Keyboard"},{"location":"library/bluemsx/#compatibility","text":"blueMSX Manual","title":"Compatibility"},{"location":"library/bluemsx/#external-links","text":"Official blueMSX Website Official blueMSX SourceForge Repository Libretro blueMSX Core info file Libretro blueMSX Github Repository Report Libretro blueMSX Core Issues Here","title":"External Links"},{"location":"library/bluemsx/#see-also","text":"","title":"See also"},{"location":"library/bluemsx/#sega-sg-1000","text":"Sega - MS/GG/MD/CD (Genesis Plus GX) Sega - MS/GG/SG-1000 (Gearsystem)","title":"Sega - SG-1000"},{"location":"library/bluemsx/#microsoft-msx","text":"Microsoft - MSX (fMSX)","title":"Microsoft - MSX"},{"location":"library/bluemsx/#microsoft-msx2","text":"Microsoft - MSX (fMSX)","title":"Microsoft - MSX2"},{"location":"library/bnes/","text":"Nintendo - NES / Famicom (bnes) \u00b6 Background \u00b6 A port of bNES v083 to libretro. Author/License \u00b6 The bnes core has been authored by byuu Ryphecha The bnes core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the bnes core have the following file extensions: .nes Databases \u00b6 RetroArch database(s) that are associated with the bnes core: Nintendo - Nintendo Entertainment System Features \u00b6 Frontend-level settings or features that the bnes core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2715 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The bnes core's directory name is 'bnes' The bnes core saves/loads to/from these directories. Frontend's Save directory 'content-name'.srm (Cartridge battery save) Frontend's State directory 'content-name'.state# (State) Geometry and timing \u00b6 The bnes core's core provided FPS is 60 The bnes core's core provided sample rate is 32000 Hz The bnes core's core provided aspect ratio is 16/15 Controllers \u00b6 The bnes core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 - 2 device types \u00b6 None - Doesn't disable input. RetroPad - Joypad RetroPad w/Analog - Joypad - There is no reason to switch to this. Controller tables \u00b6 Joypad \u00b6 User 1 - 2 Remap descriptors RetroPad Inputs B Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A Compatibility \u00b6 Game Issue Crisis Force Graphical glitches. (1) Huge Insect No enemies spawn. Lagrange Point No music. Ms. Pac-Man (Tengen version) Graphical glitches on the sides of the screen. Skull & Crossbones Crashes on start. (1) External Links \u00b6 Official higan Website Official higan Downloads Libretro bnes Core info file Libretro bnes Github Repository Report Libretro bnes Core Issues Here See also \u00b6 Nintendo - Nintendo Entertainment System \u00b6 Nintendo - NES / Famicom (Emux NES) Nintendo - NES / Famicom (FCEUmm) Nintendo - NES / Famicom (Mesen) Nintendo - NES / Famicom (Nestopia UE) Nintendo - NES / Famicom (QuickNES)","title":"Nintendo - NES (bnes)"},{"location":"library/bnes/#nintendo-nes-famicom-bnes","text":"","title":"Nintendo - NES / Famicom (bnes)"},{"location":"library/bnes/#background","text":"A port of bNES v083 to libretro.","title":"Background"},{"location":"library/bnes/#authorlicense","text":"The bnes core has been authored by byuu Ryphecha The bnes core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/bnes/#extensions","text":"Content that can be loaded by the bnes core have the following file extensions: .nes","title":"Extensions"},{"location":"library/bnes/#databases","text":"RetroArch database(s) that are associated with the bnes core: Nintendo - Nintendo Entertainment System","title":"Databases"},{"location":"library/bnes/#features","text":"Frontend-level settings or features that the bnes core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2715 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/bnes/#directories","text":"The bnes core's directory name is 'bnes' The bnes core saves/loads to/from these directories. Frontend's Save directory 'content-name'.srm (Cartridge battery save) Frontend's State directory 'content-name'.state# (State)","title":"Directories"},{"location":"library/bnes/#geometry-and-timing","text":"The bnes core's core provided FPS is 60 The bnes core's core provided sample rate is 32000 Hz The bnes core's core provided aspect ratio is 16/15","title":"Geometry and timing"},{"location":"library/bnes/#controllers","text":"The bnes core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/bnes/#user-1-2-device-types","text":"None - Doesn't disable input. RetroPad - Joypad RetroPad w/Analog - Joypad - There is no reason to switch to this.","title":"User 1 - 2 device types"},{"location":"library/bnes/#controller-tables","text":"","title":"Controller tables"},{"location":"library/bnes/#joypad","text":"User 1 - 2 Remap descriptors RetroPad Inputs B Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A","title":"Joypad"},{"location":"library/bnes/#compatibility","text":"Game Issue Crisis Force Graphical glitches. (1) Huge Insect No enemies spawn. Lagrange Point No music. Ms. Pac-Man (Tengen version) Graphical glitches on the sides of the screen. Skull & Crossbones Crashes on start. (1)","title":"Compatibility"},{"location":"library/bnes/#external-links","text":"Official higan Website Official higan Downloads Libretro bnes Core info file Libretro bnes Github Repository Report Libretro bnes Core Issues Here","title":"External Links"},{"location":"library/bnes/#see-also","text":"","title":"See also"},{"location":"library/bnes/#nintendo-nintendo-entertainment-system","text":"Nintendo - NES / Famicom (Emux NES) Nintendo - NES / Famicom (FCEUmm) Nintendo - NES / Famicom (Mesen) Nintendo - NES / Famicom (Nestopia UE) Nintendo - NES / Famicom (QuickNES)","title":"Nintendo - Nintendo Entertainment System"},{"location":"library/bsnes_accuracy/","text":"Nintendo - SNES / Famicom (bsnes Accuracy) \u00b6 Background \u00b6 bsnes is a Super Nintendo emulator that began development on 2004-10-14. It focuses on accuracy and clean code above all else. It never uses speed or compatibilty hacks. As a result, the minimum system requirements are greater than with other emulators. bsnes comes in three different profiles (accuracy, balanced and performance) which contain minor differences in the PPU (graphics) emulation. This core has been compiled with the Accuracy profile. Highly accurate SNES emulation. Whether to use the Accuracy, or Balanced or Performance core depends on how much accuracy you want to give up for game performance. Please check the compatibility section for more information. Author/License \u00b6 The bsnes Accuracy core has been authored by byuu The bsnes Accuracy core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the bsnes Accuracy core have the following file extensions: .sfc .smc .bml Databases \u00b6 RetroArch database(s) that are associated with the bsnes Accuracy core: Nintendo - Super Nintendo Entertainment System Nintendo - Super Nintendo Entertainment System Hacks Nintendo - Sufami Turbo BIOS \u00b6 Required or optional firmware files go in the frontend's system directory. Attention The bsnes Accuracy core uses split ROMS for special chip games . Notable DSP1/DSP1B Games: Super Mario Kart Pilotwings Notable DSP2 Games: Dungeon Master Notable DSP3 Games: SD Gundam GX Notable DSP4 Games: Top Gear 3000 Notable Cx4 Games: Mega Man X2 Mega Man X3 Filename Description md5sum dsp1.data.rom DSP1 co-processor firmware 3d81b45fa0c2aa8b852dfb1ece7c0971 dsp1.program.rom DSP1 co-processor firmware ae209fbe789fbf11a48aea5ab1197321 dsp1b.data.rom DSP1B co-processor firmware 1e3f568634a7d8284020dddc0ae905bc dsp1b.program.rom DSP1B co-processor firmware d10f446888e097cbf500f3f663cf4f6d dsp2.data.rom DSP2 co-processor firmware e9417e29223b139c3c4b635a2a3b8744 dsp2.program.rom DSP2 co-processor firmware aa6e5922a3ed5ded54f24247c11143c5 dsp3.data.rom DSP3 co-processor firmware 0a81210c0a940b997dd9843281008ee6 dsp3.program.rom DSP3 co-processor firmware d99ca4562818d49cee1f242705bba6f8 dsp4.data.rom DSP4 co-processor firmware ee4990879eb68e3cbca239c5bc20303d dsp4.program.rom DSP4 co-processor firmware a151023b948b90ffc23a5b594bb6fef2 cx4.data.rom CX4 co-processor firmware 037ac4296b6b6a5c47c440188d3c72e3 st010.data.rom ST010 co-processor firmware 254d70762b6f59f99c27c395aba7d07d st010.program.rom ST010 co-processor firmware 1d70019179a59a566a0bb5d3f2845544 st011.data.rom ST011 co-processor firmware 10bd3f4aa949737ab9836512c35bcc29 st011.program.rom ST011 co-processor firmware 95222ebf1c0c2990bcf25db43743f032 st018.data.rom ST018 co-processor firmware 49c898b60d0f15e90d0ba780dd12f366 st018.program.rom ST018 co-processor firmware dda40ccd57390c96e49d30a041f9a9e7 sgb.boot.rom Super Game Boy BIOS Features \u00b6 Frontend-level settings or features that the bsnes Accuracy core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2715 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse - Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2714 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2714 LEDs \u2715 Directories \u00b6 The bsnes Accuracy core's internal core name is 'bsnes' The bsnes Accuracy core saves/loads to/from these directories. Frontend's Save directory 'content-name'.srm (Cartridge battery save) Frontend's State directory 'content-name'.state# (State) Geometry and timing \u00b6 The bsnes Accuracy core's core provided FPS is 60.0988118623 for NTSC games and 50.0069789082 for PAL games. The bsnes Accuracy core's core provided sample rate is 32040.5 Hz The bsnes Accuracy core's core provided aspect ratio is 4/3 Super GameBoy \u00b6 Warning Super GameBoy support in this core is Windows only , and has buggy save state support and visual glitches . Use the higan Accuracy core or the nSide Balanced core for simplified, functional, and easily accessible Super Gameboy support. For Super GameBoy support, you need sgb.boot.rom (in RetroArch's System directory), a GameBoy ROM and a Super GameBoy ROM. Please note that the Game Boy and Super GameBoy ROMs have to be unzipped. Super GameBoy is supported via the Subsystem API. There are two ways to access the Subsystem API. One way is to access the Subsystem API through RetroArch's GUI like this. First, we load our GameBoy ROM through 'Load Super GameBoy' in RetroArch's Main Menu. Next, we load our Super GameBoy ROM through 'Load Super GameBoy' in RetroArch's Menu Menu. Then, we start the content by selecting 'Start GameBoy' In RetroArch's Menu Menu. The other way is to launch RetroArch with commandline like this. retroarch -L {path to bsnes core} {path to Super GameBoy ROM} --subsystem sgb {path to GameBoy rom} MSU-1 \u00b6 Attention MSU-1 support in this core is complex. Use the Snes9x core for simplified and easily accessible MSU-1 support. MSU-1 support can be used by loading a correct .bml file. There's documentation for loading MSU-1 games in standalone higan here . Controllers \u00b6 The bsnes Accuracy core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 device types \u00b6 None - Disables input. SNES Joypad - Joypad SNES Mouse - Mouse User 2 device types \u00b6 None - Disables input. SNES Joypad - Joypad SNES Mouse - Mouse Multitap - Joypad - Allows for up to five players to play together in multitap games. SuperScope - Lightgun Justifier - Lightgun Justifiers - Lightgun - Two Justifiers are plugged in, for two-player Justifier games. Multitap support \u00b6 Activating multitap support in compatible games can be configured by switching to the Multitap device type for User 2. Controller tables \u00b6 Joypad \u00b6 User 1 - 5 Remap descriptors RetroPad Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R Mouse \u00b6 RetroMouse Inputs SNES Mouse Mouse Cursor SNES Mouse Cursor Mouse 1 SNES Mouse Left Button Mouse 2 SNES Mouse Right Button Lightgun \u00b6 RetroLightgun Inputs SuperScope Justifier(s) Gun Crosshair SuperScope Crosshair Justifier Crosshair Gun Trigger SuperScope Trigger Justifier Trigger Gun Aux A SuperScope Cursor Gun Aux B SuperScope Turbo Gun Start SuperScope Pause Justifier Start Compatibility \u00b6 The bsnes Accuracy core fully emulates all SNES games that have ever been officially released. External Links \u00b6 Official higan Website Official higan Upstream Downloads Libretro bsnes Accuracy Core info file Libretro bsnes Accuracy Github Repository Report Libretro bsnes Accuracy Core Issues Here See also \u00b6 Nintendo - Sufami Turbo \u00b6 Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2005) Nintendo - SNES / Famicom (Snes9x 2010) Nintendo - Super Nintendo Entertainment System (+ Hacks) \u00b6 Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (nSide Balanced) Nintendo - SNES / Famicom (Mesen-S) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2005) Nintendo - SNES / Famicom (Snes9x 2010)","title":"Nintendo - SNES / Famicom (bsnes Accuracy)"},{"location":"library/bsnes_accuracy/#nintendo-snes-famicom-bsnes-accuracy","text":"","title":"Nintendo - SNES / Famicom (bsnes Accuracy)"},{"location":"library/bsnes_accuracy/#background","text":"bsnes is a Super Nintendo emulator that began development on 2004-10-14. It focuses on accuracy and clean code above all else. It never uses speed or compatibilty hacks. As a result, the minimum system requirements are greater than with other emulators. bsnes comes in three different profiles (accuracy, balanced and performance) which contain minor differences in the PPU (graphics) emulation. This core has been compiled with the Accuracy profile. Highly accurate SNES emulation. Whether to use the Accuracy, or Balanced or Performance core depends on how much accuracy you want to give up for game performance. Please check the compatibility section for more information.","title":"Background"},{"location":"library/bsnes_accuracy/#authorlicense","text":"The bsnes Accuracy core has been authored by byuu The bsnes Accuracy core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/bsnes_accuracy/#extensions","text":"Content that can be loaded by the bsnes Accuracy core have the following file extensions: .sfc .smc .bml","title":"Extensions"},{"location":"library/bsnes_accuracy/#databases","text":"RetroArch database(s) that are associated with the bsnes Accuracy core: Nintendo - Super Nintendo Entertainment System Nintendo - Super Nintendo Entertainment System Hacks Nintendo - Sufami Turbo","title":"Databases"},{"location":"library/bsnes_accuracy/#bios","text":"Required or optional firmware files go in the frontend's system directory. Attention The bsnes Accuracy core uses split ROMS for special chip games . Notable DSP1/DSP1B Games: Super Mario Kart Pilotwings Notable DSP2 Games: Dungeon Master Notable DSP3 Games: SD Gundam GX Notable DSP4 Games: Top Gear 3000 Notable Cx4 Games: Mega Man X2 Mega Man X3 Filename Description md5sum dsp1.data.rom DSP1 co-processor firmware 3d81b45fa0c2aa8b852dfb1ece7c0971 dsp1.program.rom DSP1 co-processor firmware ae209fbe789fbf11a48aea5ab1197321 dsp1b.data.rom DSP1B co-processor firmware 1e3f568634a7d8284020dddc0ae905bc dsp1b.program.rom DSP1B co-processor firmware d10f446888e097cbf500f3f663cf4f6d dsp2.data.rom DSP2 co-processor firmware e9417e29223b139c3c4b635a2a3b8744 dsp2.program.rom DSP2 co-processor firmware aa6e5922a3ed5ded54f24247c11143c5 dsp3.data.rom DSP3 co-processor firmware 0a81210c0a940b997dd9843281008ee6 dsp3.program.rom DSP3 co-processor firmware d99ca4562818d49cee1f242705bba6f8 dsp4.data.rom DSP4 co-processor firmware ee4990879eb68e3cbca239c5bc20303d dsp4.program.rom DSP4 co-processor firmware a151023b948b90ffc23a5b594bb6fef2 cx4.data.rom CX4 co-processor firmware 037ac4296b6b6a5c47c440188d3c72e3 st010.data.rom ST010 co-processor firmware 254d70762b6f59f99c27c395aba7d07d st010.program.rom ST010 co-processor firmware 1d70019179a59a566a0bb5d3f2845544 st011.data.rom ST011 co-processor firmware 10bd3f4aa949737ab9836512c35bcc29 st011.program.rom ST011 co-processor firmware 95222ebf1c0c2990bcf25db43743f032 st018.data.rom ST018 co-processor firmware 49c898b60d0f15e90d0ba780dd12f366 st018.program.rom ST018 co-processor firmware dda40ccd57390c96e49d30a041f9a9e7 sgb.boot.rom Super Game Boy BIOS","title":"BIOS"},{"location":"library/bsnes_accuracy/#features","text":"Frontend-level settings or features that the bsnes Accuracy core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2715 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse - Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2714 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2714 LEDs \u2715","title":"Features"},{"location":"library/bsnes_accuracy/#directories","text":"The bsnes Accuracy core's internal core name is 'bsnes' The bsnes Accuracy core saves/loads to/from these directories. Frontend's Save directory 'content-name'.srm (Cartridge battery save) Frontend's State directory 'content-name'.state# (State)","title":"Directories"},{"location":"library/bsnes_accuracy/#geometry-and-timing","text":"The bsnes Accuracy core's core provided FPS is 60.0988118623 for NTSC games and 50.0069789082 for PAL games. The bsnes Accuracy core's core provided sample rate is 32040.5 Hz The bsnes Accuracy core's core provided aspect ratio is 4/3","title":"Geometry and timing"},{"location":"library/bsnes_accuracy/#super-gameboy","text":"Warning Super GameBoy support in this core is Windows only , and has buggy save state support and visual glitches . Use the higan Accuracy core or the nSide Balanced core for simplified, functional, and easily accessible Super Gameboy support. For Super GameBoy support, you need sgb.boot.rom (in RetroArch's System directory), a GameBoy ROM and a Super GameBoy ROM. Please note that the Game Boy and Super GameBoy ROMs have to be unzipped. Super GameBoy is supported via the Subsystem API. There are two ways to access the Subsystem API. One way is to access the Subsystem API through RetroArch's GUI like this. First, we load our GameBoy ROM through 'Load Super GameBoy' in RetroArch's Main Menu. Next, we load our Super GameBoy ROM through 'Load Super GameBoy' in RetroArch's Menu Menu. Then, we start the content by selecting 'Start GameBoy' In RetroArch's Menu Menu. The other way is to launch RetroArch with commandline like this. retroarch -L {path to bsnes core} {path to Super GameBoy ROM} --subsystem sgb {path to GameBoy rom}","title":"Super GameBoy"},{"location":"library/bsnes_accuracy/#msu-1","text":"Attention MSU-1 support in this core is complex. Use the Snes9x core for simplified and easily accessible MSU-1 support. MSU-1 support can be used by loading a correct .bml file. There's documentation for loading MSU-1 games in standalone higan here .","title":"MSU-1"},{"location":"library/bsnes_accuracy/#controllers","text":"The bsnes Accuracy core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/bsnes_accuracy/#user-1-device-types","text":"None - Disables input. SNES Joypad - Joypad SNES Mouse - Mouse","title":"User 1 device types"},{"location":"library/bsnes_accuracy/#user-2-device-types","text":"None - Disables input. SNES Joypad - Joypad SNES Mouse - Mouse Multitap - Joypad - Allows for up to five players to play together in multitap games. SuperScope - Lightgun Justifier - Lightgun Justifiers - Lightgun - Two Justifiers are plugged in, for two-player Justifier games.","title":"User 2 device types"},{"location":"library/bsnes_accuracy/#multitap-support","text":"Activating multitap support in compatible games can be configured by switching to the Multitap device type for User 2.","title":"Multitap support"},{"location":"library/bsnes_accuracy/#controller-tables","text":"","title":"Controller tables"},{"location":"library/bsnes_accuracy/#joypad","text":"User 1 - 5 Remap descriptors RetroPad Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R","title":"Joypad"},{"location":"library/bsnes_accuracy/#mouse","text":"RetroMouse Inputs SNES Mouse Mouse Cursor SNES Mouse Cursor Mouse 1 SNES Mouse Left Button Mouse 2 SNES Mouse Right Button","title":"Mouse"},{"location":"library/bsnes_accuracy/#lightgun","text":"RetroLightgun Inputs SuperScope Justifier(s) Gun Crosshair SuperScope Crosshair Justifier Crosshair Gun Trigger SuperScope Trigger Justifier Trigger Gun Aux A SuperScope Cursor Gun Aux B SuperScope Turbo Gun Start SuperScope Pause Justifier Start","title":"Lightgun"},{"location":"library/bsnes_accuracy/#compatibility","text":"The bsnes Accuracy core fully emulates all SNES games that have ever been officially released.","title":"Compatibility"},{"location":"library/bsnes_accuracy/#external-links","text":"Official higan Website Official higan Upstream Downloads Libretro bsnes Accuracy Core info file Libretro bsnes Accuracy Github Repository Report Libretro bsnes Accuracy Core Issues Here","title":"External Links"},{"location":"library/bsnes_accuracy/#see-also","text":"","title":"See also"},{"location":"library/bsnes_accuracy/#nintendo-sufami-turbo","text":"Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2005) Nintendo - SNES / Famicom (Snes9x 2010)","title":"Nintendo - Sufami Turbo"},{"location":"library/bsnes_accuracy/#nintendo-super-nintendo-entertainment-system-hacks","text":"Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (nSide Balanced) Nintendo - SNES / Famicom (Mesen-S) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2005) Nintendo - SNES / Famicom (Snes9x 2010)","title":"Nintendo - Super Nintendo Entertainment System (+ Hacks)"},{"location":"library/bsnes_balanced/","text":"Nintendo - SNES / Famicom (bsnes Balanced) \u00b6 Background \u00b6 bsnes is a Super Nintendo emulator that began development on 2004-10-14. It focuses on accuracy and clean code above all else. It never uses speed or compatibilty hacks. As a result, the minimum system requirements are greater than with other emulators. bsnes comes in three different profiles (accuracy, balanced and performance) which contain minor differences in the PPU (graphics) emulation. This core has been compiled with the Balanced profile. Highly accurate SNES emulation. Whether to use the Accuracy, or Balanced or Performance core depends on how much accuracy you want to give up for game performance. Please check the compatibility section for more information. Author/License \u00b6 The bsnes Balanced core has been authored by byuu The bsnes Balanced core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the bsnes Balanced core have the following file extensions: .sfc .smc .bml Databases \u00b6 RetroArch database(s) that are associated with the bsnes Balanced core: Nintendo - Super Nintendo Entertainment System Nintendo - Super Nintendo Entertainment System Hacks Nintendo - Sufami Turbo BIOS \u00b6 Required or optional firmware files go in the frontend's system directory. Attention The bsnes Balanced core uses split ROMS for special chip games . Notable DSP1/DSP1B Games: Super Mario Kart Pilotwings Notable DSP2 Games: Dungeon Master Notable DSP3 Games: SD Gundam GX Notable DSP4 Games: Top Gear 3000 Notable Cx4 Games: Mega Man X2 Mega Man X3 Filename Description md5sum dsp1.data.rom DSP1 co-processor firmware 3d81b45fa0c2aa8b852dfb1ece7c0971 dsp1.program.rom DSP1 co-processor firmware ae209fbe789fbf11a48aea5ab1197321 dsp1b.data.rom DSP1B co-processor firmware 1e3f568634a7d8284020dddc0ae905bc dsp1b.program.rom DSP1B co-processor firmware d10f446888e097cbf500f3f663cf4f6d dsp2.data.rom DSP2 co-processor firmware e9417e29223b139c3c4b635a2a3b8744 dsp2.program.rom DSP2 co-processor firmware aa6e5922a3ed5ded54f24247c11143c5 dsp3.data.rom DSP3 co-processor firmware 0a81210c0a940b997dd9843281008ee6 dsp3.program.rom DSP3 co-processor firmware d99ca4562818d49cee1f242705bba6f8 dsp4.data.rom DSP4 co-processor firmware ee4990879eb68e3cbca239c5bc20303d dsp4.program.rom DSP4 co-processor firmware a151023b948b90ffc23a5b594bb6fef2 cx4.data.rom CX4 co-processor firmware 037ac4296b6b6a5c47c440188d3c72e3 st010.data.rom ST010 co-processor firmware 254d70762b6f59f99c27c395aba7d07d st010.program.rom ST010 co-processor firmware 1d70019179a59a566a0bb5d3f2845544 st011.data.rom ST011 co-processor firmware 10bd3f4aa949737ab9836512c35bcc29 st011.program.rom ST011 co-processor firmware 95222ebf1c0c2990bcf25db43743f032 st018.data.rom ST018 co-processor firmware 49c898b60d0f15e90d0ba780dd12f366 st018.program.rom ST018 co-processor firmware dda40ccd57390c96e49d30a041f9a9e7 sgb.boot.rom Super Game Boy BIOS Features \u00b6 Frontend-level settings or features that the bsnes Balanced core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2715 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse - Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2714 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2714 LEDs \u2715 Directories \u00b6 The bsnes Balanced core's internal core name is 'bsnes' The bsnes Balanced core saves/loads to/from these directories. Frontend's Save directory 'content-name'.srm (Cartridge battery save) Frontend's State directory 'content-name'.state# (State) Geometry and timing \u00b6 The bsnes Balanced core's core provided FPS is 60.0988118623 for NTSC games and 50.0069789082 for PAL games. The bsnes Balanced core's core provided sample rate is 32040.5 Hz The bsnes Balanced core's core provided aspect ratio is 4/3 Super GameBoy \u00b6 Warning Super GameBoy support in this core is Windows only , and has buggy save state support and visual glitches . Use the higan Accuracy core or the nSide Balanced core for simplified, functional, and easily accessible Super Gameboy support. For Super GameBoy support, you need sgb.boot.rom (in RetroArch's System directory), a GameBoy ROM and a Super GameBoy ROM. Please note that the Game Boy and Super GameBoy ROMs have to be unzipped. Super GameBoy is supported via the Subsystem API. There are two ways to access the Subsystem API. One way is to access the Subsystem API through RetroArch's GUI like this. First, we load our GameBoy ROM through 'Load Super GameBoy' in RetroArch's Main Menu. Next, we load our Super GameBoy ROM through 'Load Super GameBoy' in RetroArch's Menu Menu. Then, we start the content by selecting 'Start GameBoy' In RetroArch's Menu Menu. The other way is to launch RetroArch with commandline like this. retroarch -L {path to bsnes core} {path to Super GameBoy ROM} --subsystem sgb {path to GameBoy rom} MSU-1 \u00b6 Attention MSU-1 support in this core is complex. Use the Snes9x core for simplified and easily accessible MSU-1 support. MSU-1 support can be used by loading a correct .bml file. There's documentation for loading MSU-1 games in standalone higan here . Controllers \u00b6 The bsnes Balanced core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 device types \u00b6 None - Disables input. SNES Joypad - Joypad SNES Mouse - Mouse User 2 device types \u00b6 None - Disables input. SNES Joypad - Joypad SNES Mouse - Mouse Multitap - Joypad - Allows for up to five players to play together in multitap games. SuperScope - Lightgun Justifier - Lightgun Justifiers - Lightgun - Two Justifiers are plugged in, for two-player Justifier games. Multitap support \u00b6 Activating multitap support in compatible games can be configured by switching to the Multitap device type for User 2. Controller tables \u00b6 Joypad \u00b6 User 1 - 5 Remap descriptors RetroPad Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R Mouse \u00b6 RetroMouse Inputs SNES Mouse Mouse Cursor SNES Mouse Cursor Mouse 1 SNES Mouse Left Button Mouse 2 SNES Mouse Right Button Lightgun \u00b6 RetroLightgun Inputs SuperScope Justifier(s) Gun Crosshair SuperScope Crosshair Justifier Crosshair Gun Trigger SuperScope Trigger Justifier Trigger Gun Aux A SuperScope Cursor Gun Aux B SuperScope Turbo Gun Start SuperScope Pause Justifier Start Compatibility \u00b6 Game Issue A.S.P. Air Strike Patrol Black lines show up during gameplay. The shadow below the aircraft is missing. External Links \u00b6 Official higan Website Official higan Upstream Downloads Libretro bsnes Balanced Core info file Libretro bsnes Balanced Github Repository Report Libretro bsnes Balanced Core Issues Here See also \u00b6 Nintendo - Sufami Turbo \u00b6 Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2005) Nintendo - SNES / Famicom (Snes9x 2010) Nintendo - Super Nintendo Entertainment System (+ Hacks) \u00b6 Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (nSide Balanced) Nintendo - SNES / Famicom (Mesen-S) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2005) Nintendo - SNES / Famicom (Snes9x 2010)","title":"Nintendo - SNES / Famicom (bsnes Balanced)"},{"location":"library/bsnes_balanced/#nintendo-snes-famicom-bsnes-balanced","text":"","title":"Nintendo - SNES / Famicom (bsnes Balanced)"},{"location":"library/bsnes_balanced/#background","text":"bsnes is a Super Nintendo emulator that began development on 2004-10-14. It focuses on accuracy and clean code above all else. It never uses speed or compatibilty hacks. As a result, the minimum system requirements are greater than with other emulators. bsnes comes in three different profiles (accuracy, balanced and performance) which contain minor differences in the PPU (graphics) emulation. This core has been compiled with the Balanced profile. Highly accurate SNES emulation. Whether to use the Accuracy, or Balanced or Performance core depends on how much accuracy you want to give up for game performance. Please check the compatibility section for more information.","title":"Background"},{"location":"library/bsnes_balanced/#authorlicense","text":"The bsnes Balanced core has been authored by byuu The bsnes Balanced core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/bsnes_balanced/#extensions","text":"Content that can be loaded by the bsnes Balanced core have the following file extensions: .sfc .smc .bml","title":"Extensions"},{"location":"library/bsnes_balanced/#databases","text":"RetroArch database(s) that are associated with the bsnes Balanced core: Nintendo - Super Nintendo Entertainment System Nintendo - Super Nintendo Entertainment System Hacks Nintendo - Sufami Turbo","title":"Databases"},{"location":"library/bsnes_balanced/#bios","text":"Required or optional firmware files go in the frontend's system directory. Attention The bsnes Balanced core uses split ROMS for special chip games . Notable DSP1/DSP1B Games: Super Mario Kart Pilotwings Notable DSP2 Games: Dungeon Master Notable DSP3 Games: SD Gundam GX Notable DSP4 Games: Top Gear 3000 Notable Cx4 Games: Mega Man X2 Mega Man X3 Filename Description md5sum dsp1.data.rom DSP1 co-processor firmware 3d81b45fa0c2aa8b852dfb1ece7c0971 dsp1.program.rom DSP1 co-processor firmware ae209fbe789fbf11a48aea5ab1197321 dsp1b.data.rom DSP1B co-processor firmware 1e3f568634a7d8284020dddc0ae905bc dsp1b.program.rom DSP1B co-processor firmware d10f446888e097cbf500f3f663cf4f6d dsp2.data.rom DSP2 co-processor firmware e9417e29223b139c3c4b635a2a3b8744 dsp2.program.rom DSP2 co-processor firmware aa6e5922a3ed5ded54f24247c11143c5 dsp3.data.rom DSP3 co-processor firmware 0a81210c0a940b997dd9843281008ee6 dsp3.program.rom DSP3 co-processor firmware d99ca4562818d49cee1f242705bba6f8 dsp4.data.rom DSP4 co-processor firmware ee4990879eb68e3cbca239c5bc20303d dsp4.program.rom DSP4 co-processor firmware a151023b948b90ffc23a5b594bb6fef2 cx4.data.rom CX4 co-processor firmware 037ac4296b6b6a5c47c440188d3c72e3 st010.data.rom ST010 co-processor firmware 254d70762b6f59f99c27c395aba7d07d st010.program.rom ST010 co-processor firmware 1d70019179a59a566a0bb5d3f2845544 st011.data.rom ST011 co-processor firmware 10bd3f4aa949737ab9836512c35bcc29 st011.program.rom ST011 co-processor firmware 95222ebf1c0c2990bcf25db43743f032 st018.data.rom ST018 co-processor firmware 49c898b60d0f15e90d0ba780dd12f366 st018.program.rom ST018 co-processor firmware dda40ccd57390c96e49d30a041f9a9e7 sgb.boot.rom Super Game Boy BIOS","title":"BIOS"},{"location":"library/bsnes_balanced/#features","text":"Frontend-level settings or features that the bsnes Balanced core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2715 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse - Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2714 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2714 LEDs \u2715","title":"Features"},{"location":"library/bsnes_balanced/#directories","text":"The bsnes Balanced core's internal core name is 'bsnes' The bsnes Balanced core saves/loads to/from these directories. Frontend's Save directory 'content-name'.srm (Cartridge battery save) Frontend's State directory 'content-name'.state# (State)","title":"Directories"},{"location":"library/bsnes_balanced/#geometry-and-timing","text":"The bsnes Balanced core's core provided FPS is 60.0988118623 for NTSC games and 50.0069789082 for PAL games. The bsnes Balanced core's core provided sample rate is 32040.5 Hz The bsnes Balanced core's core provided aspect ratio is 4/3","title":"Geometry and timing"},{"location":"library/bsnes_balanced/#super-gameboy","text":"Warning Super GameBoy support in this core is Windows only , and has buggy save state support and visual glitches . Use the higan Accuracy core or the nSide Balanced core for simplified, functional, and easily accessible Super Gameboy support. For Super GameBoy support, you need sgb.boot.rom (in RetroArch's System directory), a GameBoy ROM and a Super GameBoy ROM. Please note that the Game Boy and Super GameBoy ROMs have to be unzipped. Super GameBoy is supported via the Subsystem API. There are two ways to access the Subsystem API. One way is to access the Subsystem API through RetroArch's GUI like this. First, we load our GameBoy ROM through 'Load Super GameBoy' in RetroArch's Main Menu. Next, we load our Super GameBoy ROM through 'Load Super GameBoy' in RetroArch's Menu Menu. Then, we start the content by selecting 'Start GameBoy' In RetroArch's Menu Menu. The other way is to launch RetroArch with commandline like this. retroarch -L {path to bsnes core} {path to Super GameBoy ROM} --subsystem sgb {path to GameBoy rom}","title":"Super GameBoy"},{"location":"library/bsnes_balanced/#msu-1","text":"Attention MSU-1 support in this core is complex. Use the Snes9x core for simplified and easily accessible MSU-1 support. MSU-1 support can be used by loading a correct .bml file. There's documentation for loading MSU-1 games in standalone higan here .","title":"MSU-1"},{"location":"library/bsnes_balanced/#controllers","text":"The bsnes Balanced core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/bsnes_balanced/#user-1-device-types","text":"None - Disables input. SNES Joypad - Joypad SNES Mouse - Mouse","title":"User 1 device types"},{"location":"library/bsnes_balanced/#user-2-device-types","text":"None - Disables input. SNES Joypad - Joypad SNES Mouse - Mouse Multitap - Joypad - Allows for up to five players to play together in multitap games. SuperScope - Lightgun Justifier - Lightgun Justifiers - Lightgun - Two Justifiers are plugged in, for two-player Justifier games.","title":"User 2 device types"},{"location":"library/bsnes_balanced/#multitap-support","text":"Activating multitap support in compatible games can be configured by switching to the Multitap device type for User 2.","title":"Multitap support"},{"location":"library/bsnes_balanced/#controller-tables","text":"","title":"Controller tables"},{"location":"library/bsnes_balanced/#joypad","text":"User 1 - 5 Remap descriptors RetroPad Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R","title":"Joypad"},{"location":"library/bsnes_balanced/#mouse","text":"RetroMouse Inputs SNES Mouse Mouse Cursor SNES Mouse Cursor Mouse 1 SNES Mouse Left Button Mouse 2 SNES Mouse Right Button","title":"Mouse"},{"location":"library/bsnes_balanced/#lightgun","text":"RetroLightgun Inputs SuperScope Justifier(s) Gun Crosshair SuperScope Crosshair Justifier Crosshair Gun Trigger SuperScope Trigger Justifier Trigger Gun Aux A SuperScope Cursor Gun Aux B SuperScope Turbo Gun Start SuperScope Pause Justifier Start","title":"Lightgun"},{"location":"library/bsnes_balanced/#compatibility","text":"Game Issue A.S.P. Air Strike Patrol Black lines show up during gameplay. The shadow below the aircraft is missing.","title":"Compatibility"},{"location":"library/bsnes_balanced/#external-links","text":"Official higan Website Official higan Upstream Downloads Libretro bsnes Balanced Core info file Libretro bsnes Balanced Github Repository Report Libretro bsnes Balanced Core Issues Here","title":"External Links"},{"location":"library/bsnes_balanced/#see-also","text":"","title":"See also"},{"location":"library/bsnes_balanced/#nintendo-sufami-turbo","text":"Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2005) Nintendo - SNES / Famicom (Snes9x 2010)","title":"Nintendo - Sufami Turbo"},{"location":"library/bsnes_balanced/#nintendo-super-nintendo-entertainment-system-hacks","text":"Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (nSide Balanced) Nintendo - SNES / Famicom (Mesen-S) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2005) Nintendo - SNES / Famicom (Snes9x 2010)","title":"Nintendo - Super Nintendo Entertainment System (+ Hacks)"},{"location":"library/bsnes_cplusplus98/","text":"Nintendo - SNES / Famicom (bsnes C++98 (v085)) \u00b6 Background \u00b6 bsnes c++98 is a special fork from around v085 that's been backported to work with older compilers. Many platforms Libretro supports such as various consoles (PlayStation 3) are stuck with super-old compilers that don't support the latest c++ features that are in the newer bsnes v094 ports. There's no reason to use this core now expect for edge cases on less compatible platforms. Author/License \u00b6 The bsnes C++98 (v085) core has been authored by byuu Themaister Ver GreenEyes The bsnes C++98 (v085) core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the bsnes C++98 (v085) core have the following file extensions: .sfc .smc Databases \u00b6 RetroArch database(s) that are associated with the bsnes C++98 (v085) core: Nintendo - Super Nintendo Entertainment System Nintendo - Super Nintendo Entertainment System Hacks Nintendo - Sufami Turbo Features \u00b6 Frontend-level settings or features that the bsnes C++98 (v085) core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2715 RetroAchievements \u2714 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2714 LEDs \u2715 Directories \u00b6 The bsnes C++98 (v085) core's internal core name is '\"bSNES' The bsnes C++98 (v085) core saves/loads to/from these directories. Frontend's Save directory 'content-name'.srm (Cartridge battery save) Frontend's State directory 'content-name'.state# (State) Geometry and timing \u00b6 The bsnes C++98 (v085) core's core provided FPS is 60.0988118623 for NTSC games and 50.0069789082 for PAL games. The bsnes C++98 (v085) core's core provided sample rate is 32040.5 Hz. The bsnes C++98 (v085) core's core provided aspect ratio is (Ratio) Controllers \u00b6 The bsnes C++98 (v085) core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 device types \u00b6 None - Doesn't disable input. SNES Joypad - Joypad SNES Mouse - Mouse User 2 device types \u00b6 None - Doesn't disable input. SNES Joypad - Joypad SNES Mouse - Mouse Multitap - Joypad - Allows for up to five players to play together in mulitap games. SuperScope - Lightgun Justifier - Lightgun Justifiers - Lightgun - Two Justifiers are plugged in, for two-player Justifier games. Multitap support \u00b6 Activating multitap support in compatible games can be configured by switching to the Multitap device type for User 2. Controller tables \u00b6 Joypad \u00b6 User 1 - 5 Remap descriptors RetroPad Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R Mouse \u00b6 RetroMouse Inputs SNES Mouse Mouse Cursor SNES Mouse Cursor Mouse 1 SNES Mouse Left Button Mouse 2 SNES Mouse Right Button Lightgun \u00b6 RetroLightgun Inputs SuperScope Justifier(s) Gun Crosshair SuperScope Crosshair Justifier Crosshair Gun Trigger SuperScope Trigger Justifier Trigger Gun Aux A SuperScope Cursor Gun Aux B SuperScope Turbo Gun Start SuperScope Pause Justifier Start Compatibility \u00b6 Awaiting description. External Links \u00b6 Official higan Website Official higan Upstream Downloads Libretro bsnes C++98 (v085) Core info file Libretro bsnes C++98 (v085) Github Repository Report Libretro bsnes C++98 (v085) Core Issues Here See also \u00b6 Nintendo - Sufami Turbo \u00b6 Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2005) Nintendo - SNES / Famicom (Snes9x 2010) Nintendo - Super Nintendo Entertainment System (+ Hacks) \u00b6 Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (nSide Balanced) Nintendo - SNES / Famicom (Mesen-S) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2005) Nintendo - SNES / Famicom (Snes9x 2010)","title":"Nintendo - SNES / Famicom (bsnes C++98 (v085))"},{"location":"library/bsnes_cplusplus98/#nintendo-snes-famicom-bsnes-c98-v085","text":"","title":"Nintendo - SNES / Famicom (bsnes C++98 (v085))"},{"location":"library/bsnes_cplusplus98/#background","text":"bsnes c++98 is a special fork from around v085 that's been backported to work with older compilers. Many platforms Libretro supports such as various consoles (PlayStation 3) are stuck with super-old compilers that don't support the latest c++ features that are in the newer bsnes v094 ports. There's no reason to use this core now expect for edge cases on less compatible platforms.","title":"Background"},{"location":"library/bsnes_cplusplus98/#authorlicense","text":"The bsnes C++98 (v085) core has been authored by byuu Themaister Ver GreenEyes The bsnes C++98 (v085) core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/bsnes_cplusplus98/#extensions","text":"Content that can be loaded by the bsnes C++98 (v085) core have the following file extensions: .sfc .smc","title":"Extensions"},{"location":"library/bsnes_cplusplus98/#databases","text":"RetroArch database(s) that are associated with the bsnes C++98 (v085) core: Nintendo - Super Nintendo Entertainment System Nintendo - Super Nintendo Entertainment System Hacks Nintendo - Sufami Turbo","title":"Databases"},{"location":"library/bsnes_cplusplus98/#features","text":"Frontend-level settings or features that the bsnes C++98 (v085) core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2715 RetroAchievements \u2714 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2714 LEDs \u2715","title":"Features"},{"location":"library/bsnes_cplusplus98/#directories","text":"The bsnes C++98 (v085) core's internal core name is '\"bSNES' The bsnes C++98 (v085) core saves/loads to/from these directories. Frontend's Save directory 'content-name'.srm (Cartridge battery save) Frontend's State directory 'content-name'.state# (State)","title":"Directories"},{"location":"library/bsnes_cplusplus98/#geometry-and-timing","text":"The bsnes C++98 (v085) core's core provided FPS is 60.0988118623 for NTSC games and 50.0069789082 for PAL games. The bsnes C++98 (v085) core's core provided sample rate is 32040.5 Hz. The bsnes C++98 (v085) core's core provided aspect ratio is (Ratio)","title":"Geometry and timing"},{"location":"library/bsnes_cplusplus98/#controllers","text":"The bsnes C++98 (v085) core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/bsnes_cplusplus98/#user-1-device-types","text":"None - Doesn't disable input. SNES Joypad - Joypad SNES Mouse - Mouse","title":"User 1 device types"},{"location":"library/bsnes_cplusplus98/#user-2-device-types","text":"None - Doesn't disable input. SNES Joypad - Joypad SNES Mouse - Mouse Multitap - Joypad - Allows for up to five players to play together in mulitap games. SuperScope - Lightgun Justifier - Lightgun Justifiers - Lightgun - Two Justifiers are plugged in, for two-player Justifier games.","title":"User 2 device types"},{"location":"library/bsnes_cplusplus98/#multitap-support","text":"Activating multitap support in compatible games can be configured by switching to the Multitap device type for User 2.","title":"Multitap support"},{"location":"library/bsnes_cplusplus98/#controller-tables","text":"","title":"Controller tables"},{"location":"library/bsnes_cplusplus98/#joypad","text":"User 1 - 5 Remap descriptors RetroPad Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R","title":"Joypad"},{"location":"library/bsnes_cplusplus98/#mouse","text":"RetroMouse Inputs SNES Mouse Mouse Cursor SNES Mouse Cursor Mouse 1 SNES Mouse Left Button Mouse 2 SNES Mouse Right Button","title":"Mouse"},{"location":"library/bsnes_cplusplus98/#lightgun","text":"RetroLightgun Inputs SuperScope Justifier(s) Gun Crosshair SuperScope Crosshair Justifier Crosshair Gun Trigger SuperScope Trigger Justifier Trigger Gun Aux A SuperScope Cursor Gun Aux B SuperScope Turbo Gun Start SuperScope Pause Justifier Start","title":"Lightgun"},{"location":"library/bsnes_cplusplus98/#compatibility","text":"Awaiting description.","title":"Compatibility"},{"location":"library/bsnes_cplusplus98/#external-links","text":"Official higan Website Official higan Upstream Downloads Libretro bsnes C++98 (v085) Core info file Libretro bsnes C++98 (v085) Github Repository Report Libretro bsnes C++98 (v085) Core Issues Here","title":"External Links"},{"location":"library/bsnes_cplusplus98/#see-also","text":"","title":"See also"},{"location":"library/bsnes_cplusplus98/#nintendo-sufami-turbo","text":"Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2005) Nintendo - SNES / Famicom (Snes9x 2010)","title":"Nintendo - Sufami Turbo"},{"location":"library/bsnes_cplusplus98/#nintendo-super-nintendo-entertainment-system-hacks","text":"Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (nSide Balanced) Nintendo - SNES / Famicom (Mesen-S) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2005) Nintendo - SNES / Famicom (Snes9x 2010)","title":"Nintendo - Super Nintendo Entertainment System (+ Hacks)"},{"location":"library/bsnes_mercury_accuracy/","text":"Nintendo - SNES / Famicom (bsnes-mercury Accuracy) \u00b6 Background \u00b6 bsnes-mercury is a fork of higan, aiming to restore some useful features that have been removed, as well as improving performance a bit. Maximum accuracy is still uncompromisable; anything that affects accuracy is optional and off by default. This core has been compiled with the Accuracy profile. Improvements include: Improved framerate Faster ROM loading HLE emulation of some special chips is optionally restored (defaults to LLE), to improve performance and reduce reliance on those chip ROMs (they're not really easy to find). Chips for which no HLE emulation was developed (ST-0011 and ST-0018) are still LLE. SuperFX overclock is now available (off by default, of course); if enabled, it makes SuperFX look quite a lot smoother. The bsnes-mercury cores are not less accurate at default settings than the mainline bsnes cores (you have to explicitly enable 2 core options to switch to the less accurate special chip HLE). Author/License \u00b6 The bsnes-mercury Accuracy core has been authored by byuu Alcaro The bsnes-mercury Accuracy core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the bsnes-mercury Accuracy core have the following file extensions: .sfc .smc .bml Databases \u00b6 RetroArch database(s) that are associated with the bsnes-mercury Accuracy core: Nintendo - Super Nintendo Entertainment System Nintendo - Super Nintendo Entertainment System Hacks Nintendo - Sufami Turbo BIOS \u00b6 Required or optional firmware files go in the frontend's system directory. Filename Description md5sum dsp1.data.rom DSP1 co-processor firmware 3d81b45fa0c2aa8b852dfb1ece7c0971 dsp1.program.rom DSP1 co-processor firmware ae209fbe789fbf11a48aea5ab1197321 dsp1b.data.rom DSP1B co-processor firmware 1e3f568634a7d8284020dddc0ae905bc dsp1b.program.rom DSP1B co-processor firmware d10f446888e097cbf500f3f663cf4f6d dsp2.data.rom DSP2 co-processor firmware e9417e29223b139c3c4b635a2a3b8744 dsp2.program.rom DSP2 co-processor firmware aa6e5922a3ed5ded54f24247c11143c5 dsp3.data.rom DSP3 co-processor firmware 0a81210c0a940b997dd9843281008ee6 dsp3.program.rom DSP3 co-processor firmware d99ca4562818d49cee1f242705bba6f8 dsp4.data.rom DSP4 co-processor firmware ee4990879eb68e3cbca239c5bc20303d dsp4.program.rom DSP4 co-processor firmware a151023b948b90ffc23a5b594bb6fef2 cx4.data.rom CX4 co-processor firmware 037ac4296b6b6a5c47c440188d3c72e3 st010.data.rom ST010 co-processor firmware 254d70762b6f59f99c27c395aba7d07d st010.program.rom ST010 co-processor firmware 1d70019179a59a566a0bb5d3f2845544 st011.data.rom ST011 co-processor firmware 10bd3f4aa949737ab9836512c35bcc29 st011.program.rom ST011 co-processor firmware 95222ebf1c0c2990bcf25db43743f032 st018.data.rom ST018 co-processor firmware 49c898b60d0f15e90d0ba780dd12f366 st018.program.rom ST018 co-processor firmware dda40ccd57390c96e49d30a041f9a9e7 sgb.boot.rom Super Game Boy BIOS Features \u00b6 Frontend-level settings or features that the bsnes-mercury Accuracy core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse - Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2714 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The bsnes-mercury Accuracy core's internal core name is 'bsnes-mercury' The bsnes-mercury Accuracy core saves/loads to/from these directories. Frontend's Save directory 'content-name'.srm (Cartridge battery save) Frontend's State directory 'content-name'.state# (State) Geometry and timing \u00b6 The bsnes-mercury Accuracy core's core provided FPS is 60.0988118623 for NTSC games and 50.0069789082 for PAL games. The bsnes-mercury Accuracy core's core provided sample rate is 32040.5 Hz The bsnes-mercury Accuracy core's core provided aspect ratio is dependent on the 'Preferred aspect ratio' core option . Super GameBoy \u00b6 Warning Super GameBoy support in this core is Windows only , and has buggy save state support and visual glitches . Use the higan Accuracy core or the nSide Balanced core for simplified, functional, and easily accessible Super Gameboy support. For Super GameBoy support, you need sgb.boot.rom (in RetroArch's System directory), a GameBoy ROM and a Super GameBoy ROM. Please note that the Game Boy and Super GameBoy ROMs have to be unzipped. Super GameBoy is supported via the Subsystem API. There are two ways to access the Subsystem API. One way is to access the Subsystem API through RetroArch's GUI like this. First, we load our GameBoy ROM through 'Load Super GameBoy' in RetroArch's Main Menu. Next, we load our Super GameBoy ROM through 'Load Super GameBoy' in RetroArch's Menu Menu. Then, we start the content by selecting 'Start GameBoy' In RetroArch's Menu Menu. The other way is to launch RetroArch with commandline like this. retroarch -L {path to bsnes core} {path to Super GameBoy ROM} --subsystem sgb {path to GameBoy rom} MSU-1 \u00b6 Attention MSU-1 support in this core is complex. Use the Snes9x core for simplified and easily accessible MSU-1 support. MSU-1 support can be used by loading a correct .bml file. There's documentation for loading MSU-1 games in standalone higan here . Core options \u00b6 The bsnes-mercury Accuracy core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Allow settings to reduce accuracy [bsnes_violate_accuracy] ( disabled |enabled) Respect accuracy-impacting settings. Special chip accuracy [bsnes_chip_hle] ( LLE |HLE) **The Allow settings to reduce accuracy core option must be enabled in order for this to function properly. ** Choose whether to use LLE (real BIOS) or HLE (emulated BIOS) for enhancement chips. HLE is less accurate but also less demanding for the special chips. The ST-0011 and ST-0018 co-processors cannot be HLE'd. SuperFX speed [bsnes_superfx_overclock] ( 100% |150%|200%|300%|400%|500%|1000%) The Allow settings to reduce accuracy core option must be enabled in order for this to function properly. Overclock the SuperFX chip . 100% is stock clockspeed. System region [bsnes_region] ( auto |ntsc|pal) Choose which region the system is from. Preferred aspect ratio [bsnes_aspect_ratio] ( auto |ntsc|pal) Choose the preferred aspect ratio. RetroArch's aspect ratio must be set to Core provided in the Video seetings. Crop overscan [bsnes_crop_overscan] ( disabled |enabled) Crop out the potentially random glitchy video output that would have been hidden by the bezel around the edge of a standard-definition television screen. Gamma ramp (requires restart) [bsnes_gamma_ramp] ( disabled |enabled) Simulates the way a console\u2019s display device differs from modern computer monitor\u2019s colour reproduction. In particular, it simulates the slightly-different gamma correction used by the Super Famicom. Gamma ramp - Disabled Gamma ramp - Enabled Controllers \u00b6 The bsnes-mercury Accuracy core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 device types \u00b6 None - Doesn't disable input. SNES Joypad - Joypad SNES Mouse - Mouse User 2 device types \u00b6 None - Doesn't disable input. SNES Joypad - Joypad SNES Mouse - Mouse Multitap - Joypad - Allows for up to five players to play together in multitap games. SuperScope - Lightgun Justifier - Lightgun Justifiers - Lightgun - Two Justifiers are plugged in, for two-player Justifier games. Multitap support \u00b6 Activating multitap support in compatible games can be configured by switching to the Multitap device type for User 2. Controller tables \u00b6 Joypad \u00b6 User 1 - 5 Remap descriptors RetroPad Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R Mouse \u00b6 RetroMouse Inputs SNES Mouse Mouse Cursor SNES Mouse Cursor Mouse 1 SNES Mouse Left Button Mouse 2 SNES Mouse Right Button Lightgun \u00b6 RetroLightgun Inputs SuperScope Justifier(s) Gun Crosshair SuperScope Crosshair Justifier Crosshair Gun Trigger SuperScope Trigger Justifier Trigger Gun Aux A SuperScope Cursor Gun Aux B SuperScope Turbo Gun Start SuperScope Pause Justifier Start Compatibility \u00b6 The bsnes-mercury Accuracy core fully emulates all SNES games that have ever been officially released. External Links \u00b6 Official higan Website Official higan Upstream Downloads Libretro bsnes-mercury Accuracy Core info file Libretro bsnes-mercury Accuracy Github Repository Report Libretro bsnes-mercury Accuracy Core Issues Here See also \u00b6 Nintendo - Sufami Turbo \u00b6 Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2005) Nintendo - SNES / Famicom (Snes9x 2010) Nintendo - Super Nintendo Entertainment System (+ Hacks) \u00b6 Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (nSide Balanced) Nintendo - SNES / Famicom (Mesen-S) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2005) Nintendo - SNES / Famicom (Snes9x 2010)","title":"Nintendo - SNES / Famicom (bsnes-mercury Accuracy)"},{"location":"library/bsnes_mercury_accuracy/#nintendo-snes-famicom-bsnes-mercury-accuracy","text":"","title":"Nintendo - SNES / Famicom (bsnes-mercury Accuracy)"},{"location":"library/bsnes_mercury_accuracy/#background","text":"bsnes-mercury is a fork of higan, aiming to restore some useful features that have been removed, as well as improving performance a bit. Maximum accuracy is still uncompromisable; anything that affects accuracy is optional and off by default. This core has been compiled with the Accuracy profile. Improvements include: Improved framerate Faster ROM loading HLE emulation of some special chips is optionally restored (defaults to LLE), to improve performance and reduce reliance on those chip ROMs (they're not really easy to find). Chips for which no HLE emulation was developed (ST-0011 and ST-0018) are still LLE. SuperFX overclock is now available (off by default, of course); if enabled, it makes SuperFX look quite a lot smoother. The bsnes-mercury cores are not less accurate at default settings than the mainline bsnes cores (you have to explicitly enable 2 core options to switch to the less accurate special chip HLE).","title":"Background"},{"location":"library/bsnes_mercury_accuracy/#authorlicense","text":"The bsnes-mercury Accuracy core has been authored by byuu Alcaro The bsnes-mercury Accuracy core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/bsnes_mercury_accuracy/#extensions","text":"Content that can be loaded by the bsnes-mercury Accuracy core have the following file extensions: .sfc .smc .bml","title":"Extensions"},{"location":"library/bsnes_mercury_accuracy/#databases","text":"RetroArch database(s) that are associated with the bsnes-mercury Accuracy core: Nintendo - Super Nintendo Entertainment System Nintendo - Super Nintendo Entertainment System Hacks Nintendo - Sufami Turbo","title":"Databases"},{"location":"library/bsnes_mercury_accuracy/#bios","text":"Required or optional firmware files go in the frontend's system directory. Filename Description md5sum dsp1.data.rom DSP1 co-processor firmware 3d81b45fa0c2aa8b852dfb1ece7c0971 dsp1.program.rom DSP1 co-processor firmware ae209fbe789fbf11a48aea5ab1197321 dsp1b.data.rom DSP1B co-processor firmware 1e3f568634a7d8284020dddc0ae905bc dsp1b.program.rom DSP1B co-processor firmware d10f446888e097cbf500f3f663cf4f6d dsp2.data.rom DSP2 co-processor firmware e9417e29223b139c3c4b635a2a3b8744 dsp2.program.rom DSP2 co-processor firmware aa6e5922a3ed5ded54f24247c11143c5 dsp3.data.rom DSP3 co-processor firmware 0a81210c0a940b997dd9843281008ee6 dsp3.program.rom DSP3 co-processor firmware d99ca4562818d49cee1f242705bba6f8 dsp4.data.rom DSP4 co-processor firmware ee4990879eb68e3cbca239c5bc20303d dsp4.program.rom DSP4 co-processor firmware a151023b948b90ffc23a5b594bb6fef2 cx4.data.rom CX4 co-processor firmware 037ac4296b6b6a5c47c440188d3c72e3 st010.data.rom ST010 co-processor firmware 254d70762b6f59f99c27c395aba7d07d st010.program.rom ST010 co-processor firmware 1d70019179a59a566a0bb5d3f2845544 st011.data.rom ST011 co-processor firmware 10bd3f4aa949737ab9836512c35bcc29 st011.program.rom ST011 co-processor firmware 95222ebf1c0c2990bcf25db43743f032 st018.data.rom ST018 co-processor firmware 49c898b60d0f15e90d0ba780dd12f366 st018.program.rom ST018 co-processor firmware dda40ccd57390c96e49d30a041f9a9e7 sgb.boot.rom Super Game Boy BIOS","title":"BIOS"},{"location":"library/bsnes_mercury_accuracy/#features","text":"Frontend-level settings or features that the bsnes-mercury Accuracy core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse - Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2714 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/bsnes_mercury_accuracy/#directories","text":"The bsnes-mercury Accuracy core's internal core name is 'bsnes-mercury' The bsnes-mercury Accuracy core saves/loads to/from these directories. Frontend's Save directory 'content-name'.srm (Cartridge battery save) Frontend's State directory 'content-name'.state# (State)","title":"Directories"},{"location":"library/bsnes_mercury_accuracy/#geometry-and-timing","text":"The bsnes-mercury Accuracy core's core provided FPS is 60.0988118623 for NTSC games and 50.0069789082 for PAL games. The bsnes-mercury Accuracy core's core provided sample rate is 32040.5 Hz The bsnes-mercury Accuracy core's core provided aspect ratio is dependent on the 'Preferred aspect ratio' core option .","title":"Geometry and timing"},{"location":"library/bsnes_mercury_accuracy/#super-gameboy","text":"Warning Super GameBoy support in this core is Windows only , and has buggy save state support and visual glitches . Use the higan Accuracy core or the nSide Balanced core for simplified, functional, and easily accessible Super Gameboy support. For Super GameBoy support, you need sgb.boot.rom (in RetroArch's System directory), a GameBoy ROM and a Super GameBoy ROM. Please note that the Game Boy and Super GameBoy ROMs have to be unzipped. Super GameBoy is supported via the Subsystem API. There are two ways to access the Subsystem API. One way is to access the Subsystem API through RetroArch's GUI like this. First, we load our GameBoy ROM through 'Load Super GameBoy' in RetroArch's Main Menu. Next, we load our Super GameBoy ROM through 'Load Super GameBoy' in RetroArch's Menu Menu. Then, we start the content by selecting 'Start GameBoy' In RetroArch's Menu Menu. The other way is to launch RetroArch with commandline like this. retroarch -L {path to bsnes core} {path to Super GameBoy ROM} --subsystem sgb {path to GameBoy rom}","title":"Super GameBoy"},{"location":"library/bsnes_mercury_accuracy/#msu-1","text":"Attention MSU-1 support in this core is complex. Use the Snes9x core for simplified and easily accessible MSU-1 support. MSU-1 support can be used by loading a correct .bml file. There's documentation for loading MSU-1 games in standalone higan here .","title":"MSU-1"},{"location":"library/bsnes_mercury_accuracy/#core-options","text":"The bsnes-mercury Accuracy core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Allow settings to reduce accuracy [bsnes_violate_accuracy] ( disabled |enabled) Respect accuracy-impacting settings. Special chip accuracy [bsnes_chip_hle] ( LLE |HLE) **The Allow settings to reduce accuracy core option must be enabled in order for this to function properly. ** Choose whether to use LLE (real BIOS) or HLE (emulated BIOS) for enhancement chips. HLE is less accurate but also less demanding for the special chips. The ST-0011 and ST-0018 co-processors cannot be HLE'd. SuperFX speed [bsnes_superfx_overclock] ( 100% |150%|200%|300%|400%|500%|1000%) The Allow settings to reduce accuracy core option must be enabled in order for this to function properly. Overclock the SuperFX chip . 100% is stock clockspeed. System region [bsnes_region] ( auto |ntsc|pal) Choose which region the system is from. Preferred aspect ratio [bsnes_aspect_ratio] ( auto |ntsc|pal) Choose the preferred aspect ratio. RetroArch's aspect ratio must be set to Core provided in the Video seetings. Crop overscan [bsnes_crop_overscan] ( disabled |enabled) Crop out the potentially random glitchy video output that would have been hidden by the bezel around the edge of a standard-definition television screen. Gamma ramp (requires restart) [bsnes_gamma_ramp] ( disabled |enabled) Simulates the way a console\u2019s display device differs from modern computer monitor\u2019s colour reproduction. In particular, it simulates the slightly-different gamma correction used by the Super Famicom. Gamma ramp - Disabled Gamma ramp - Enabled","title":"Core options"},{"location":"library/bsnes_mercury_accuracy/#controllers","text":"The bsnes-mercury Accuracy core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/bsnes_mercury_accuracy/#user-1-device-types","text":"None - Doesn't disable input. SNES Joypad - Joypad SNES Mouse - Mouse","title":"User 1 device types"},{"location":"library/bsnes_mercury_accuracy/#user-2-device-types","text":"None - Doesn't disable input. SNES Joypad - Joypad SNES Mouse - Mouse Multitap - Joypad - Allows for up to five players to play together in multitap games. SuperScope - Lightgun Justifier - Lightgun Justifiers - Lightgun - Two Justifiers are plugged in, for two-player Justifier games.","title":"User 2 device types"},{"location":"library/bsnes_mercury_accuracy/#multitap-support","text":"Activating multitap support in compatible games can be configured by switching to the Multitap device type for User 2.","title":"Multitap support"},{"location":"library/bsnes_mercury_accuracy/#controller-tables","text":"","title":"Controller tables"},{"location":"library/bsnes_mercury_accuracy/#joypad","text":"User 1 - 5 Remap descriptors RetroPad Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R","title":"Joypad"},{"location":"library/bsnes_mercury_accuracy/#mouse","text":"RetroMouse Inputs SNES Mouse Mouse Cursor SNES Mouse Cursor Mouse 1 SNES Mouse Left Button Mouse 2 SNES Mouse Right Button","title":"Mouse"},{"location":"library/bsnes_mercury_accuracy/#lightgun","text":"RetroLightgun Inputs SuperScope Justifier(s) Gun Crosshair SuperScope Crosshair Justifier Crosshair Gun Trigger SuperScope Trigger Justifier Trigger Gun Aux A SuperScope Cursor Gun Aux B SuperScope Turbo Gun Start SuperScope Pause Justifier Start","title":"Lightgun"},{"location":"library/bsnes_mercury_accuracy/#compatibility","text":"The bsnes-mercury Accuracy core fully emulates all SNES games that have ever been officially released.","title":"Compatibility"},{"location":"library/bsnes_mercury_accuracy/#external-links","text":"Official higan Website Official higan Upstream Downloads Libretro bsnes-mercury Accuracy Core info file Libretro bsnes-mercury Accuracy Github Repository Report Libretro bsnes-mercury Accuracy Core Issues Here","title":"External Links"},{"location":"library/bsnes_mercury_accuracy/#see-also","text":"","title":"See also"},{"location":"library/bsnes_mercury_accuracy/#nintendo-sufami-turbo","text":"Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2005) Nintendo - SNES / Famicom (Snes9x 2010)","title":"Nintendo - Sufami Turbo"},{"location":"library/bsnes_mercury_accuracy/#nintendo-super-nintendo-entertainment-system-hacks","text":"Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (nSide Balanced) Nintendo - SNES / Famicom (Mesen-S) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2005) Nintendo - SNES / Famicom (Snes9x 2010)","title":"Nintendo - Super Nintendo Entertainment System (+ Hacks)"},{"location":"library/bsnes_mercury_balanced/","text":"Nintendo - SNES / Famicom (bsnes-mercury Balanced) \u00b6 Background \u00b6 bsnes-mercury is a fork of higan, aiming to restore some useful features that have been removed, as well as improving performance a bit. Maximum accuracy is still uncompromisable; anything that affects accuracy is optional and off by default. This core has been compiled with the Balanced profile. Improvements include: Improved framerate Faster ROM loading HLE emulation of some special chips is optionally restored (defaults to LLE), to improve performance and reduce reliance on those chip ROMs (they're not really easy to find). Chips for which no HLE emulation was developed (ST-0011 and ST-0018) are still LLE. SuperFX overclock is now available (off by default, of course); if enabled, it makes SuperFX look quite a lot smoother. The bsnes-mercury cores are not less accurate at default settings than the mainline bsnes cores (you have to explicitly enable 2 core options to switch to the less accurate special chip HLE). Author/License \u00b6 The bsnes-mercury Balanced core has been authored by byuu Alcaro The bsnes-mercury Balanced core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the bsnes-mercury Balanced core have the following file extensions: .sfc .smc .bml Databases \u00b6 RetroArch database(s) that are associated with the bsnes-mercury Balanced core: Nintendo - Super Nintendo Entertainment System Nintendo - Super Nintendo Entertainment System Hacks Nintendo - Sufami Turbo BIOS \u00b6 Required or optional firmware files go in the frontend's system directory. Filename Description md5sum dsp1.data.rom DSP1 co-processor firmware 3d81b45fa0c2aa8b852dfb1ece7c0971 dsp1.program.rom DSP1 co-processor firmware ae209fbe789fbf11a48aea5ab1197321 dsp1b.data.rom DSP1B co-processor firmware 1e3f568634a7d8284020dddc0ae905bc dsp1b.program.rom DSP1B co-processor firmware d10f446888e097cbf500f3f663cf4f6d dsp2.data.rom DSP2 co-processor firmware e9417e29223b139c3c4b635a2a3b8744 dsp2.program.rom DSP2 co-processor firmware aa6e5922a3ed5ded54f24247c11143c5 dsp3.data.rom DSP3 co-processor firmware 0a81210c0a940b997dd9843281008ee6 dsp3.program.rom DSP3 co-processor firmware d99ca4562818d49cee1f242705bba6f8 dsp4.data.rom DSP4 co-processor firmware ee4990879eb68e3cbca239c5bc20303d dsp4.program.rom DSP4 co-processor firmware a151023b948b90ffc23a5b594bb6fef2 cx4.data.rom CX4 co-processor firmware 037ac4296b6b6a5c47c440188d3c72e3 st010.data.rom ST010 co-processor firmware 254d70762b6f59f99c27c395aba7d07d st010.program.rom ST010 co-processor firmware 1d70019179a59a566a0bb5d3f2845544 st011.data.rom ST011 co-processor firmware 10bd3f4aa949737ab9836512c35bcc29 st011.program.rom ST011 co-processor firmware 95222ebf1c0c2990bcf25db43743f032 st018.data.rom ST018 co-processor firmware 49c898b60d0f15e90d0ba780dd12f366 st018.program.rom ST018 co-processor firmware dda40ccd57390c96e49d30a041f9a9e7 sgb.boot.rom Super Game Boy BIOS Features \u00b6 Frontend-level settings or features that the bsnes-mercury Balanced core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse - Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2714 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The bsnes-mercury Balanced core's internal core name is 'bsnes-mercury' The bsnes-mercury Balanced core saves/loads to/from these directories. Frontend's Save directory 'content-name'.srm (Cartridge battery save) Frontend's State directory 'content-name'.state# (State) Geometry and timing \u00b6 The bsnes-mercury Balanced core's core provided FPS is 60.0988118623 for NTSC games and 50.0069789082 for PAL games. The bsnes-mercury Balanced core's core provided sample rate is 32040.5 Hz The bsnes-mercury Balanced core's core provided aspect ratio is dependent on the 'Preferred aspect ratio' core option . Super GameBoy \u00b6 Warning Super GameBoy support in this core is Windows only , and has buggy save state support and visual glitches . Use the higan Accuracy core or the nSide Balanced core for simplified, functional, and easily accessible Super Gameboy support. For Super GameBoy support, you need sgb.boot.rom (in RetroArch's System directory), a GameBoy ROM and a Super GameBoy ROM. Please note that the Game Boy and Super GameBoy ROMs have to be unzipped. Super GameBoy is supported via the Subsystem API. There are two ways to access the Subsystem API. One way is to access the Subsystem API through RetroArch's GUI like this. First, we load our GameBoy ROM through 'Load Super GameBoy' in RetroArch's Main Menu. Next, we load our Super GameBoy ROM through 'Load Super GameBoy' in RetroArch's Menu Menu. Then, we start the content by selecting 'Start GameBoy' In RetroArch's Menu Menu. The other way is to launch RetroArch with commandline like this. retroarch -L {path to bsnes core} {path to Super GameBoy ROM} --subsystem sgb {path to GameBoy rom} MSU-1 \u00b6 Attention MSU-1 support in this core is complex. Use the Snes9x core for simplified and easily accessible MSU-1 support. MSU-1 support can be used by loading a correct .bml file. There's documentation for loading MSU-1 games in standalone higan here . Core options \u00b6 The bsnes-mercury Balanced core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Allow settings to reduce accuracy [bsnes_violate_accuracy] ( disabled |enabled) Respect accuracy-impacting settings. Special chip accuracy [bsnes_chip_hle] ( LLE |HLE) **The Allow settings to reduce accuracy core option must be enabled in order for this to function properly. ** Choose whether to use LLE (real BIOS) or HLE (emulated BIOS) for enhancement chips. HLE is less accurate but also less demanding for the special chips. The ST-0011 and ST-0018 co-processors cannot be HLE'd. SuperFX speed [bsnes_superfx_overclock] ( 100% |150%|200%|300%|400%|500%|1000%) The Allow settings to reduce accuracy core option must be enabled in order for this to function properly. Overclock the SuperFX chip . 100% is stock clockspeed. System region [bsnes_region] ( auto |ntsc|pal) Choose which region the system is from. Preferred aspect ratio [bsnes_aspect_ratio] ( auto |ntsc|pal) Choose the preferred aspect ratio. RetroArch's aspect ratio must be set to Core provided in the Video seetings. Crop overscan [bsnes_crop_overscan] ( disabled |enabled) Crop out the potentially random glitchy video output that would have been hidden by the bezel around the edge of a standard-definition television screen. Gamma ramp (requires restart) [bsnes_gamma_ramp] ( disabled |enabled) Simulates the way a console\u2019s display device differs from modern computer monitor\u2019s colour reproduction. In particular, it simulates the slightly-different gamma correction used by the Super Famicom. Gamma ramp - Disabled Gamma ramp - Enabled Controllers \u00b6 The bsnes-mercury Balanced core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 device types \u00b6 None - Doesn't disable input. SNES Joypad - Joypad SNES Mouse - Mouse User 2 device types \u00b6 None - Doesn't disable input. SNES Joypad - Joypad SNES Mouse - Mouse Multitap - Joypad - Allows for up to five players to play together in multitap games. SuperScope - Lightgun Justifier - Lightgun Justifiers - Lightgun - Two Justifiers are plugged in, for two-player Justifier games. Multitap support \u00b6 Activating multitap support in compatible games can be configured by switching to the Multitap device type for User 2. Controller tables \u00b6 Joypad \u00b6 User 1 - 5 Remap descriptors RetroPad Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R Mouse \u00b6 RetroMouse Inputs SNES Mouse Mouse Cursor SNES Mouse Cursor Mouse 1 SNES Mouse Left Button Mouse 2 SNES Mouse Right Button Lightgun \u00b6 RetroLightgun Inputs SuperScope Justifier(s) Gun Crosshair SuperScope Crosshair Justifier Crosshair Gun Trigger SuperScope Trigger Justifier Trigger Gun Aux A SuperScope Cursor Gun Aux B SuperScope Turbo Gun Start SuperScope Pause Justifier Start Compatibility \u00b6 Game Issue A.S.P. Air Strike Patrol Black lines show up during gameplay. The shadow below the aircraft is missing. External Links \u00b6 Official higan Website Official higan Upstream Downloads Libretro bsnes-mercury Balanced Core info file Libretro bsnes-mercury Balanced Github Repository Report Libretro bsnes-mercury Balanced Core Issues Here See also \u00b6 Nintendo - Sufami Turbo \u00b6 Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2005) Nintendo - SNES / Famicom (Snes9x 2010) Nintendo - Super Nintendo Entertainment System (+ Hacks) \u00b6 Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (nSide Balanced) Nintendo - SNES / Famicom (Mesen-S) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2005) Nintendo - SNES / Famicom (Snes9x 2010)","title":"Nintendo - SNES / Famicom (bsnes-mercury Balanced)"},{"location":"library/bsnes_mercury_balanced/#nintendo-snes-famicom-bsnes-mercury-balanced","text":"","title":"Nintendo - SNES / Famicom (bsnes-mercury Balanced)"},{"location":"library/bsnes_mercury_balanced/#background","text":"bsnes-mercury is a fork of higan, aiming to restore some useful features that have been removed, as well as improving performance a bit. Maximum accuracy is still uncompromisable; anything that affects accuracy is optional and off by default. This core has been compiled with the Balanced profile. Improvements include: Improved framerate Faster ROM loading HLE emulation of some special chips is optionally restored (defaults to LLE), to improve performance and reduce reliance on those chip ROMs (they're not really easy to find). Chips for which no HLE emulation was developed (ST-0011 and ST-0018) are still LLE. SuperFX overclock is now available (off by default, of course); if enabled, it makes SuperFX look quite a lot smoother. The bsnes-mercury cores are not less accurate at default settings than the mainline bsnes cores (you have to explicitly enable 2 core options to switch to the less accurate special chip HLE).","title":"Background"},{"location":"library/bsnes_mercury_balanced/#authorlicense","text":"The bsnes-mercury Balanced core has been authored by byuu Alcaro The bsnes-mercury Balanced core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/bsnes_mercury_balanced/#extensions","text":"Content that can be loaded by the bsnes-mercury Balanced core have the following file extensions: .sfc .smc .bml","title":"Extensions"},{"location":"library/bsnes_mercury_balanced/#databases","text":"RetroArch database(s) that are associated with the bsnes-mercury Balanced core: Nintendo - Super Nintendo Entertainment System Nintendo - Super Nintendo Entertainment System Hacks Nintendo - Sufami Turbo","title":"Databases"},{"location":"library/bsnes_mercury_balanced/#bios","text":"Required or optional firmware files go in the frontend's system directory. Filename Description md5sum dsp1.data.rom DSP1 co-processor firmware 3d81b45fa0c2aa8b852dfb1ece7c0971 dsp1.program.rom DSP1 co-processor firmware ae209fbe789fbf11a48aea5ab1197321 dsp1b.data.rom DSP1B co-processor firmware 1e3f568634a7d8284020dddc0ae905bc dsp1b.program.rom DSP1B co-processor firmware d10f446888e097cbf500f3f663cf4f6d dsp2.data.rom DSP2 co-processor firmware e9417e29223b139c3c4b635a2a3b8744 dsp2.program.rom DSP2 co-processor firmware aa6e5922a3ed5ded54f24247c11143c5 dsp3.data.rom DSP3 co-processor firmware 0a81210c0a940b997dd9843281008ee6 dsp3.program.rom DSP3 co-processor firmware d99ca4562818d49cee1f242705bba6f8 dsp4.data.rom DSP4 co-processor firmware ee4990879eb68e3cbca239c5bc20303d dsp4.program.rom DSP4 co-processor firmware a151023b948b90ffc23a5b594bb6fef2 cx4.data.rom CX4 co-processor firmware 037ac4296b6b6a5c47c440188d3c72e3 st010.data.rom ST010 co-processor firmware 254d70762b6f59f99c27c395aba7d07d st010.program.rom ST010 co-processor firmware 1d70019179a59a566a0bb5d3f2845544 st011.data.rom ST011 co-processor firmware 10bd3f4aa949737ab9836512c35bcc29 st011.program.rom ST011 co-processor firmware 95222ebf1c0c2990bcf25db43743f032 st018.data.rom ST018 co-processor firmware 49c898b60d0f15e90d0ba780dd12f366 st018.program.rom ST018 co-processor firmware dda40ccd57390c96e49d30a041f9a9e7 sgb.boot.rom Super Game Boy BIOS","title":"BIOS"},{"location":"library/bsnes_mercury_balanced/#features","text":"Frontend-level settings or features that the bsnes-mercury Balanced core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse - Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2714 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/bsnes_mercury_balanced/#directories","text":"The bsnes-mercury Balanced core's internal core name is 'bsnes-mercury' The bsnes-mercury Balanced core saves/loads to/from these directories. Frontend's Save directory 'content-name'.srm (Cartridge battery save) Frontend's State directory 'content-name'.state# (State)","title":"Directories"},{"location":"library/bsnes_mercury_balanced/#geometry-and-timing","text":"The bsnes-mercury Balanced core's core provided FPS is 60.0988118623 for NTSC games and 50.0069789082 for PAL games. The bsnes-mercury Balanced core's core provided sample rate is 32040.5 Hz The bsnes-mercury Balanced core's core provided aspect ratio is dependent on the 'Preferred aspect ratio' core option .","title":"Geometry and timing"},{"location":"library/bsnes_mercury_balanced/#super-gameboy","text":"Warning Super GameBoy support in this core is Windows only , and has buggy save state support and visual glitches . Use the higan Accuracy core or the nSide Balanced core for simplified, functional, and easily accessible Super Gameboy support. For Super GameBoy support, you need sgb.boot.rom (in RetroArch's System directory), a GameBoy ROM and a Super GameBoy ROM. Please note that the Game Boy and Super GameBoy ROMs have to be unzipped. Super GameBoy is supported via the Subsystem API. There are two ways to access the Subsystem API. One way is to access the Subsystem API through RetroArch's GUI like this. First, we load our GameBoy ROM through 'Load Super GameBoy' in RetroArch's Main Menu. Next, we load our Super GameBoy ROM through 'Load Super GameBoy' in RetroArch's Menu Menu. Then, we start the content by selecting 'Start GameBoy' In RetroArch's Menu Menu. The other way is to launch RetroArch with commandline like this. retroarch -L {path to bsnes core} {path to Super GameBoy ROM} --subsystem sgb {path to GameBoy rom}","title":"Super GameBoy"},{"location":"library/bsnes_mercury_balanced/#msu-1","text":"Attention MSU-1 support in this core is complex. Use the Snes9x core for simplified and easily accessible MSU-1 support. MSU-1 support can be used by loading a correct .bml file. There's documentation for loading MSU-1 games in standalone higan here .","title":"MSU-1"},{"location":"library/bsnes_mercury_balanced/#core-options","text":"The bsnes-mercury Balanced core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Allow settings to reduce accuracy [bsnes_violate_accuracy] ( disabled |enabled) Respect accuracy-impacting settings. Special chip accuracy [bsnes_chip_hle] ( LLE |HLE) **The Allow settings to reduce accuracy core option must be enabled in order for this to function properly. ** Choose whether to use LLE (real BIOS) or HLE (emulated BIOS) for enhancement chips. HLE is less accurate but also less demanding for the special chips. The ST-0011 and ST-0018 co-processors cannot be HLE'd. SuperFX speed [bsnes_superfx_overclock] ( 100% |150%|200%|300%|400%|500%|1000%) The Allow settings to reduce accuracy core option must be enabled in order for this to function properly. Overclock the SuperFX chip . 100% is stock clockspeed. System region [bsnes_region] ( auto |ntsc|pal) Choose which region the system is from. Preferred aspect ratio [bsnes_aspect_ratio] ( auto |ntsc|pal) Choose the preferred aspect ratio. RetroArch's aspect ratio must be set to Core provided in the Video seetings. Crop overscan [bsnes_crop_overscan] ( disabled |enabled) Crop out the potentially random glitchy video output that would have been hidden by the bezel around the edge of a standard-definition television screen. Gamma ramp (requires restart) [bsnes_gamma_ramp] ( disabled |enabled) Simulates the way a console\u2019s display device differs from modern computer monitor\u2019s colour reproduction. In particular, it simulates the slightly-different gamma correction used by the Super Famicom. Gamma ramp - Disabled Gamma ramp - Enabled","title":"Core options"},{"location":"library/bsnes_mercury_balanced/#controllers","text":"The bsnes-mercury Balanced core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/bsnes_mercury_balanced/#user-1-device-types","text":"None - Doesn't disable input. SNES Joypad - Joypad SNES Mouse - Mouse","title":"User 1 device types"},{"location":"library/bsnes_mercury_balanced/#user-2-device-types","text":"None - Doesn't disable input. SNES Joypad - Joypad SNES Mouse - Mouse Multitap - Joypad - Allows for up to five players to play together in multitap games. SuperScope - Lightgun Justifier - Lightgun Justifiers - Lightgun - Two Justifiers are plugged in, for two-player Justifier games.","title":"User 2 device types"},{"location":"library/bsnes_mercury_balanced/#multitap-support","text":"Activating multitap support in compatible games can be configured by switching to the Multitap device type for User 2.","title":"Multitap support"},{"location":"library/bsnes_mercury_balanced/#controller-tables","text":"","title":"Controller tables"},{"location":"library/bsnes_mercury_balanced/#joypad","text":"User 1 - 5 Remap descriptors RetroPad Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R","title":"Joypad"},{"location":"library/bsnes_mercury_balanced/#mouse","text":"RetroMouse Inputs SNES Mouse Mouse Cursor SNES Mouse Cursor Mouse 1 SNES Mouse Left Button Mouse 2 SNES Mouse Right Button","title":"Mouse"},{"location":"library/bsnes_mercury_balanced/#lightgun","text":"RetroLightgun Inputs SuperScope Justifier(s) Gun Crosshair SuperScope Crosshair Justifier Crosshair Gun Trigger SuperScope Trigger Justifier Trigger Gun Aux A SuperScope Cursor Gun Aux B SuperScope Turbo Gun Start SuperScope Pause Justifier Start","title":"Lightgun"},{"location":"library/bsnes_mercury_balanced/#compatibility","text":"Game Issue A.S.P. Air Strike Patrol Black lines show up during gameplay. The shadow below the aircraft is missing.","title":"Compatibility"},{"location":"library/bsnes_mercury_balanced/#external-links","text":"Official higan Website Official higan Upstream Downloads Libretro bsnes-mercury Balanced Core info file Libretro bsnes-mercury Balanced Github Repository Report Libretro bsnes-mercury Balanced Core Issues Here","title":"External Links"},{"location":"library/bsnes_mercury_balanced/#see-also","text":"","title":"See also"},{"location":"library/bsnes_mercury_balanced/#nintendo-sufami-turbo","text":"Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2005) Nintendo - SNES / Famicom (Snes9x 2010)","title":"Nintendo - Sufami Turbo"},{"location":"library/bsnes_mercury_balanced/#nintendo-super-nintendo-entertainment-system-hacks","text":"Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (nSide Balanced) Nintendo - SNES / Famicom (Mesen-S) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2005) Nintendo - SNES / Famicom (Snes9x 2010)","title":"Nintendo - Super Nintendo Entertainment System (+ Hacks)"},{"location":"library/bsnes_mercury_performance/","text":"Nintendo - SNES / Famicom (bsnes-mercury Performance) \u00b6 Background \u00b6 bsnes-mercury is a fork of higan, aiming to restore some useful features that have been removed, as well as improving performance a bit. Maximum accuracy is still uncompromisable; anything that affects accuracy is optional and off by default. This core has been compiled with the Performance profile. Improvements include: Improved framerate Faster ROM loading HLE emulation of some special chips is optionally restored (defaults to LLE), to improve performance and reduce reliance on those chip ROMs (they're not really easy to find). Chips for which no HLE emulation was developed (ST-0011 and ST-0018) are still LLE. SuperFX overclock is now available (off by default, of course); if enabled, it makes SuperFX look quite a lot smoother. The bsnes-mercury cores are not less accurate at default settings than the mainline bsnes cores (you have to explicitly enable 2 core options to switch to the less accurate special chip HLE). Author/License \u00b6 The bsnes-mercury Performance core has been authored by byuu Alcaro The bsnes-mercury Performance core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the bsnes-mercury Performance core have the following file extensions: .sfc .smc .bml Databases \u00b6 RetroArch database(s) that are associated with the bsnes-mercury Performance core: Nintendo - Super Nintendo Entertainment System Nintendo - Super Nintendo Entertainment System Hacks Nintendo - Sufami Turbo BIOS \u00b6 Required or optional firmware files go in the frontend's system directory. Filename Description md5sum dsp1.data.rom DSP1 co-processor firmware 3d81b45fa0c2aa8b852dfb1ece7c0971 dsp1.program.rom DSP1 co-processor firmware ae209fbe789fbf11a48aea5ab1197321 dsp1b.data.rom DSP1B co-processor firmware 1e3f568634a7d8284020dddc0ae905bc dsp1b.program.rom DSP1B co-processor firmware d10f446888e097cbf500f3f663cf4f6d dsp2.data.rom DSP2 co-processor firmware e9417e29223b139c3c4b635a2a3b8744 dsp2.program.rom DSP2 co-processor firmware aa6e5922a3ed5ded54f24247c11143c5 dsp3.data.rom DSP3 co-processor firmware 0a81210c0a940b997dd9843281008ee6 dsp3.program.rom DSP3 co-processor firmware d99ca4562818d49cee1f242705bba6f8 dsp4.data.rom DSP4 co-processor firmware ee4990879eb68e3cbca239c5bc20303d dsp4.program.rom DSP4 co-processor firmware a151023b948b90ffc23a5b594bb6fef2 cx4.data.rom CX4 co-processor firmware 037ac4296b6b6a5c47c440188d3c72e3 st010.data.rom ST010 co-processor firmware 254d70762b6f59f99c27c395aba7d07d st010.program.rom ST010 co-processor firmware 1d70019179a59a566a0bb5d3f2845544 st011.data.rom ST011 co-processor firmware 10bd3f4aa949737ab9836512c35bcc29 st011.program.rom ST011 co-processor firmware 95222ebf1c0c2990bcf25db43743f032 st018.data.rom ST018 co-processor firmware 49c898b60d0f15e90d0ba780dd12f366 st018.program.rom ST018 co-processor firmware dda40ccd57390c96e49d30a041f9a9e7 sgb.boot.rom Super Game Boy BIOS Features \u00b6 Frontend-level settings or features that the bsnes-mercury Performance core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse - Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2714 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The bsnes-mercury Performance core's internal core name is 'bsnes-mercury' The bsnes-mercury Performance core saves/loads to/from these directories. Frontend's Save directory 'content-name'.srm (Cartridge battery save) Frontend's State directory 'content-name'.state# (State) Geometry and timing \u00b6 The bsnes-mercury Performance core's core provided FPS is 60.0988118623 for NTSC games and 50.0069789082 for PAL games. The bsnes-mercury Performance core's core provided sample rate is 32040.5 Hz The bsnes-mercury Performance core's core provided aspect ratio is dependent on the 'Preferred aspect ratio' core option . Super GameBoy \u00b6 Warning Super GameBoy support in this core is Windows only , and has buggy save state support and visual glitches . Use the higan Accuracy core or the nSide Balanced core for simplified, functional, and easily accessible Super Gameboy support. For Super GameBoy support, you need sgb.boot.rom (in RetroArch's System directory), a GameBoy ROM and a Super GameBoy ROM. Please note that the Game Boy and Super GameBoy ROMs have to be unzipped. Super GameBoy is supported via the Subsystem API. There are two ways to access the Subsystem API. One way is to access the Subsystem API through RetroArch's GUI like this. First, we load our GameBoy ROM through 'Load Super GameBoy' in RetroArch's Main Menu. Next, we load our Super GameBoy ROM through 'Load Super GameBoy' in RetroArch's Menu Menu. Then, we start the content by selecting 'Start GameBoy' In RetroArch's Menu Menu. The other way is to launch RetroArch with commandline like this. retroarch -L {path to bsnes core} {path to Super GameBoy ROM} --subsystem sgb {path to GameBoy rom} MSU-1 \u00b6 Attention MSU-1 support in this core is complex. Use the Snes9x core for simplified and easily accessible MSU-1 support. MSU-1 support can be used by loading a correct .bml file. There's documentation for loading MSU-1 games in standalone higan here . Core options \u00b6 The bsnes-mercury Performance core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Allow settings to reduce accuracy [bsnes_violate_accuracy] ( disabled |enabled) Respect accuracy-impacting settings. Special chip accuracy [bsnes_chip_hle] ( LLE |HLE) **The Allow settings to reduce accuracy core option must be enabled in order for this to function properly. ** Choose whether to use LLE (real BIOS) or HLE (emulated BIOS) for enhancement chips. HLE is less accurate but also less demanding for the special chips. The ST-0011 and ST-0018 co-processors cannot be HLE'd. SuperFX speed [bsnes_superfx_overclock] ( 100% |150%|200%|300%|400%|500%|1000%) The Allow settings to reduce accuracy core option must be enabled in order for this to function properly. Overclock the SuperFX chip . 100% is stock clockspeed. System region [bsnes_region] ( auto |ntsc|pal) Choose which region the system is from. Preferred aspect ratio [bsnes_aspect_ratio] ( auto |ntsc|pal) Choose the preferred aspect ratio. RetroArch's aspect ratio must be set to Core provided in the Video seetings. Crop overscan [bsnes_crop_overscan] ( disabled |enabled) Crop out the potentially random glitchy video output that would have been hidden by the bezel around the edge of a standard-definition television screen. Gamma ramp (requires restart) [bsnes_gamma_ramp] ( disabled |enabled) Simulates the way a console\u2019s display device differs from modern computer monitor\u2019s colour reproduction. In particular, it simulates the slightly-different gamma correction used by the Super Famicom. Gamma ramp - Disabled Gamma ramp - Enabled Controllers \u00b6 The bsnes-mercury Performance core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 device types \u00b6 None - Doesn't disable input. SNES Joypad - Joypad SNES Mouse - Mouse User 2 device types \u00b6 None - Doesn't disable input. SNES Joypad - Joypad SNES Mouse - Mouse Multitap - Joypad - Allows for up to five players to play together in multitap games. SuperScope - Lightgun Justifier - Lightgun Justifiers - Lightgun - Two Justifiers are plugged in, for two-player Justifier games. Multitap support \u00b6 Activating multitap support in compatible games can be configured by switching to the Multitap device type for User 2. Controller tables \u00b6 Joypad \u00b6 User 1 - 5 Remap descriptors RetroPad Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R Mouse \u00b6 RetroMouse Inputs SNES Mouse Mouse Cursor SNES Mouse Cursor Mouse 1 SNES Mouse Left Button Mouse 2 SNES Mouse Right Button Lightgun \u00b6 RetroLightgun Inputs SuperScope Justifier(s) Gun Crosshair SuperScope Crosshair Justifier Crosshair Gun Trigger SuperScope Trigger Justifier Trigger Gun Aux A SuperScope Cursor Gun Aux B SuperScope Turbo Gun Start SuperScope Pause Justifier Start Compatibility \u00b6 Game Issue A.S.P. Air Strike Patrol Black lines show up during gameplay. The shadow below the aircraft is missing. Funaki Masakatsu Hybrid Wrestler \u2013 Tougi Denshou Corrupted graphics on the Pancrase logo screen. Mecarobot Golf The ground \"wobbles\" during gameplay. Mega Man X2 Only displays a black screen. Mega Man X3 Only displays a black screen. Mortal Kombat II Various glitched graphics. NHL \u201994 Corrupted line on the NHL logo screen. Tetris Attack Lots of flickering on the VS. CPU mode map screen. External Links \u00b6 Official higan Website Official higan Upstream Downloads Libretro bsnes-mercury Performance Core info file Libretro bsnes-mercury Performance Github Repository Report Libretro bsnes-mercury Performance Core Issues Here See also \u00b6 Nintendo - Sufami Turbo \u00b6 Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2005) Nintendo - SNES / Famicom (Snes9x 2010) Nintendo - Super Nintendo Entertainment System (+ Hacks) \u00b6 Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (nSide Balanced) Nintendo - SNES / Famicom (Mesen-S) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2005) Nintendo - SNES / Famicom (Snes9x 2010)","title":"Nintendo - SNES / Famicom (bsnes-mercury Performance)"},{"location":"library/bsnes_mercury_performance/#nintendo-snes-famicom-bsnes-mercury-performance","text":"","title":"Nintendo - SNES / Famicom (bsnes-mercury Performance)"},{"location":"library/bsnes_mercury_performance/#background","text":"bsnes-mercury is a fork of higan, aiming to restore some useful features that have been removed, as well as improving performance a bit. Maximum accuracy is still uncompromisable; anything that affects accuracy is optional and off by default. This core has been compiled with the Performance profile. Improvements include: Improved framerate Faster ROM loading HLE emulation of some special chips is optionally restored (defaults to LLE), to improve performance and reduce reliance on those chip ROMs (they're not really easy to find). Chips for which no HLE emulation was developed (ST-0011 and ST-0018) are still LLE. SuperFX overclock is now available (off by default, of course); if enabled, it makes SuperFX look quite a lot smoother. The bsnes-mercury cores are not less accurate at default settings than the mainline bsnes cores (you have to explicitly enable 2 core options to switch to the less accurate special chip HLE).","title":"Background"},{"location":"library/bsnes_mercury_performance/#authorlicense","text":"The bsnes-mercury Performance core has been authored by byuu Alcaro The bsnes-mercury Performance core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/bsnes_mercury_performance/#extensions","text":"Content that can be loaded by the bsnes-mercury Performance core have the following file extensions: .sfc .smc .bml","title":"Extensions"},{"location":"library/bsnes_mercury_performance/#databases","text":"RetroArch database(s) that are associated with the bsnes-mercury Performance core: Nintendo - Super Nintendo Entertainment System Nintendo - Super Nintendo Entertainment System Hacks Nintendo - Sufami Turbo","title":"Databases"},{"location":"library/bsnes_mercury_performance/#bios","text":"Required or optional firmware files go in the frontend's system directory. Filename Description md5sum dsp1.data.rom DSP1 co-processor firmware 3d81b45fa0c2aa8b852dfb1ece7c0971 dsp1.program.rom DSP1 co-processor firmware ae209fbe789fbf11a48aea5ab1197321 dsp1b.data.rom DSP1B co-processor firmware 1e3f568634a7d8284020dddc0ae905bc dsp1b.program.rom DSP1B co-processor firmware d10f446888e097cbf500f3f663cf4f6d dsp2.data.rom DSP2 co-processor firmware e9417e29223b139c3c4b635a2a3b8744 dsp2.program.rom DSP2 co-processor firmware aa6e5922a3ed5ded54f24247c11143c5 dsp3.data.rom DSP3 co-processor firmware 0a81210c0a940b997dd9843281008ee6 dsp3.program.rom DSP3 co-processor firmware d99ca4562818d49cee1f242705bba6f8 dsp4.data.rom DSP4 co-processor firmware ee4990879eb68e3cbca239c5bc20303d dsp4.program.rom DSP4 co-processor firmware a151023b948b90ffc23a5b594bb6fef2 cx4.data.rom CX4 co-processor firmware 037ac4296b6b6a5c47c440188d3c72e3 st010.data.rom ST010 co-processor firmware 254d70762b6f59f99c27c395aba7d07d st010.program.rom ST010 co-processor firmware 1d70019179a59a566a0bb5d3f2845544 st011.data.rom ST011 co-processor firmware 10bd3f4aa949737ab9836512c35bcc29 st011.program.rom ST011 co-processor firmware 95222ebf1c0c2990bcf25db43743f032 st018.data.rom ST018 co-processor firmware 49c898b60d0f15e90d0ba780dd12f366 st018.program.rom ST018 co-processor firmware dda40ccd57390c96e49d30a041f9a9e7 sgb.boot.rom Super Game Boy BIOS","title":"BIOS"},{"location":"library/bsnes_mercury_performance/#features","text":"Frontend-level settings or features that the bsnes-mercury Performance core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse - Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2714 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/bsnes_mercury_performance/#directories","text":"The bsnes-mercury Performance core's internal core name is 'bsnes-mercury' The bsnes-mercury Performance core saves/loads to/from these directories. Frontend's Save directory 'content-name'.srm (Cartridge battery save) Frontend's State directory 'content-name'.state# (State)","title":"Directories"},{"location":"library/bsnes_mercury_performance/#geometry-and-timing","text":"The bsnes-mercury Performance core's core provided FPS is 60.0988118623 for NTSC games and 50.0069789082 for PAL games. The bsnes-mercury Performance core's core provided sample rate is 32040.5 Hz The bsnes-mercury Performance core's core provided aspect ratio is dependent on the 'Preferred aspect ratio' core option .","title":"Geometry and timing"},{"location":"library/bsnes_mercury_performance/#super-gameboy","text":"Warning Super GameBoy support in this core is Windows only , and has buggy save state support and visual glitches . Use the higan Accuracy core or the nSide Balanced core for simplified, functional, and easily accessible Super Gameboy support. For Super GameBoy support, you need sgb.boot.rom (in RetroArch's System directory), a GameBoy ROM and a Super GameBoy ROM. Please note that the Game Boy and Super GameBoy ROMs have to be unzipped. Super GameBoy is supported via the Subsystem API. There are two ways to access the Subsystem API. One way is to access the Subsystem API through RetroArch's GUI like this. First, we load our GameBoy ROM through 'Load Super GameBoy' in RetroArch's Main Menu. Next, we load our Super GameBoy ROM through 'Load Super GameBoy' in RetroArch's Menu Menu. Then, we start the content by selecting 'Start GameBoy' In RetroArch's Menu Menu. The other way is to launch RetroArch with commandline like this. retroarch -L {path to bsnes core} {path to Super GameBoy ROM} --subsystem sgb {path to GameBoy rom}","title":"Super GameBoy"},{"location":"library/bsnes_mercury_performance/#msu-1","text":"Attention MSU-1 support in this core is complex. Use the Snes9x core for simplified and easily accessible MSU-1 support. MSU-1 support can be used by loading a correct .bml file. There's documentation for loading MSU-1 games in standalone higan here .","title":"MSU-1"},{"location":"library/bsnes_mercury_performance/#core-options","text":"The bsnes-mercury Performance core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Allow settings to reduce accuracy [bsnes_violate_accuracy] ( disabled |enabled) Respect accuracy-impacting settings. Special chip accuracy [bsnes_chip_hle] ( LLE |HLE) **The Allow settings to reduce accuracy core option must be enabled in order for this to function properly. ** Choose whether to use LLE (real BIOS) or HLE (emulated BIOS) for enhancement chips. HLE is less accurate but also less demanding for the special chips. The ST-0011 and ST-0018 co-processors cannot be HLE'd. SuperFX speed [bsnes_superfx_overclock] ( 100% |150%|200%|300%|400%|500%|1000%) The Allow settings to reduce accuracy core option must be enabled in order for this to function properly. Overclock the SuperFX chip . 100% is stock clockspeed. System region [bsnes_region] ( auto |ntsc|pal) Choose which region the system is from. Preferred aspect ratio [bsnes_aspect_ratio] ( auto |ntsc|pal) Choose the preferred aspect ratio. RetroArch's aspect ratio must be set to Core provided in the Video seetings. Crop overscan [bsnes_crop_overscan] ( disabled |enabled) Crop out the potentially random glitchy video output that would have been hidden by the bezel around the edge of a standard-definition television screen. Gamma ramp (requires restart) [bsnes_gamma_ramp] ( disabled |enabled) Simulates the way a console\u2019s display device differs from modern computer monitor\u2019s colour reproduction. In particular, it simulates the slightly-different gamma correction used by the Super Famicom. Gamma ramp - Disabled Gamma ramp - Enabled","title":"Core options"},{"location":"library/bsnes_mercury_performance/#controllers","text":"The bsnes-mercury Performance core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/bsnes_mercury_performance/#user-1-device-types","text":"None - Doesn't disable input. SNES Joypad - Joypad SNES Mouse - Mouse","title":"User 1 device types"},{"location":"library/bsnes_mercury_performance/#user-2-device-types","text":"None - Doesn't disable input. SNES Joypad - Joypad SNES Mouse - Mouse Multitap - Joypad - Allows for up to five players to play together in multitap games. SuperScope - Lightgun Justifier - Lightgun Justifiers - Lightgun - Two Justifiers are plugged in, for two-player Justifier games.","title":"User 2 device types"},{"location":"library/bsnes_mercury_performance/#multitap-support","text":"Activating multitap support in compatible games can be configured by switching to the Multitap device type for User 2.","title":"Multitap support"},{"location":"library/bsnes_mercury_performance/#controller-tables","text":"","title":"Controller tables"},{"location":"library/bsnes_mercury_performance/#joypad","text":"User 1 - 5 Remap descriptors RetroPad Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R","title":"Joypad"},{"location":"library/bsnes_mercury_performance/#mouse","text":"RetroMouse Inputs SNES Mouse Mouse Cursor SNES Mouse Cursor Mouse 1 SNES Mouse Left Button Mouse 2 SNES Mouse Right Button","title":"Mouse"},{"location":"library/bsnes_mercury_performance/#lightgun","text":"RetroLightgun Inputs SuperScope Justifier(s) Gun Crosshair SuperScope Crosshair Justifier Crosshair Gun Trigger SuperScope Trigger Justifier Trigger Gun Aux A SuperScope Cursor Gun Aux B SuperScope Turbo Gun Start SuperScope Pause Justifier Start","title":"Lightgun"},{"location":"library/bsnes_mercury_performance/#compatibility","text":"Game Issue A.S.P. Air Strike Patrol Black lines show up during gameplay. The shadow below the aircraft is missing. Funaki Masakatsu Hybrid Wrestler \u2013 Tougi Denshou Corrupted graphics on the Pancrase logo screen. Mecarobot Golf The ground \"wobbles\" during gameplay. Mega Man X2 Only displays a black screen. Mega Man X3 Only displays a black screen. Mortal Kombat II Various glitched graphics. NHL \u201994 Corrupted line on the NHL logo screen. Tetris Attack Lots of flickering on the VS. CPU mode map screen.","title":"Compatibility"},{"location":"library/bsnes_mercury_performance/#external-links","text":"Official higan Website Official higan Upstream Downloads Libretro bsnes-mercury Performance Core info file Libretro bsnes-mercury Performance Github Repository Report Libretro bsnes-mercury Performance Core Issues Here","title":"External Links"},{"location":"library/bsnes_mercury_performance/#see-also","text":"","title":"See also"},{"location":"library/bsnes_mercury_performance/#nintendo-sufami-turbo","text":"Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2005) Nintendo - SNES / Famicom (Snes9x 2010)","title":"Nintendo - Sufami Turbo"},{"location":"library/bsnes_mercury_performance/#nintendo-super-nintendo-entertainment-system-hacks","text":"Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (nSide Balanced) Nintendo - SNES / Famicom (Mesen-S) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2005) Nintendo - SNES / Famicom (Snes9x 2010)","title":"Nintendo - Super Nintendo Entertainment System (+ Hacks)"},{"location":"library/bsnes_performance/","text":"Nintendo - SNES / Famicom (bsnes Performance) \u00b6 Background \u00b6 bsnes is a Super Nintendo emulator that began development on 2004-10-14. It focuses on accuracy and clean code above all else. It never uses speed or compatibilty hacks. As a result, the minimum system requirements are greater than with other emulators. bsnes comes in three different profiles (accuracy, balanced and performance) which contain minor differences in the PPU (graphics) emulation. This core has been compiled with the Performance profile. Highly accurate SNES emulation. Whether to use the Accuracy, or Balanced or Performance core depends on how much accuracy you want to give up for game performance. Please check the compatibility section for more information. Author/License \u00b6 The bsnes Performance core has been authored by byuu The bsnes Performance core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the bsnes Performance core have the following file extensions: .sfc .smc .bml Databases \u00b6 RetroArch database(s) that are associated with the bsnes Performance core: Nintendo - Super Nintendo Entertainment System Nintendo - Super Nintendo Entertainment System Hacks Nintendo - Sufami Turbo BIOS \u00b6 Required or optional firmware files go in the frontend's system directory. Attention The bsnes Performance core uses split ROMS for special chip games . Notable DSP1/DSP1B Games: Super Mario Kart Pilotwings Notable DSP2 Games: Dungeon Master Notable DSP3 Games: SD Gundam GX Notable DSP4 Games: Top Gear 3000 Notable Cx4 Games: Mega Man X2 Mega Man X3 Filename Description md5sum dsp1.data.rom DSP1 co-processor firmware 3d81b45fa0c2aa8b852dfb1ece7c0971 dsp1.program.rom DSP1 co-processor firmware ae209fbe789fbf11a48aea5ab1197321 dsp1b.data.rom DSP1B co-processor firmware 1e3f568634a7d8284020dddc0ae905bc dsp1b.program.rom DSP1B co-processor firmware d10f446888e097cbf500f3f663cf4f6d dsp2.data.rom DSP2 co-processor firmware e9417e29223b139c3c4b635a2a3b8744 dsp2.program.rom DSP2 co-processor firmware aa6e5922a3ed5ded54f24247c11143c5 dsp3.data.rom DSP3 co-processor firmware 0a81210c0a940b997dd9843281008ee6 dsp3.program.rom DSP3 co-processor firmware d99ca4562818d49cee1f242705bba6f8 dsp4.data.rom DSP4 co-processor firmware ee4990879eb68e3cbca239c5bc20303d dsp4.program.rom DSP4 co-processor firmware a151023b948b90ffc23a5b594bb6fef2 cx4.data.rom CX4 co-processor firmware 037ac4296b6b6a5c47c440188d3c72e3 st010.data.rom ST010 co-processor firmware 254d70762b6f59f99c27c395aba7d07d st010.program.rom ST010 co-processor firmware 1d70019179a59a566a0bb5d3f2845544 st011.data.rom ST011 co-processor firmware 10bd3f4aa949737ab9836512c35bcc29 st011.program.rom ST011 co-processor firmware 95222ebf1c0c2990bcf25db43743f032 st018.data.rom ST018 co-processor firmware 49c898b60d0f15e90d0ba780dd12f366 st018.program.rom ST018 co-processor firmware dda40ccd57390c96e49d30a041f9a9e7 sgb.boot.rom Super Game Boy BIOS Features \u00b6 Frontend-level settings or features that the bsnes Performance core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2715 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse - Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2714 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2714 LEDs \u2715 Directories \u00b6 The bsnes Performance core's internal core name is 'bsnes' The bsnes Performance core saves/loads to/from these directories. Frontend's Save directory 'content-name'.srm (Cartridge battery save) Frontend's State directory 'content-name'.state# (State) Geometry and timing \u00b6 The bsnes Performance core's core provided FPS is 60.0988118623 for NTSC games and 50.0069789082 for PAL games. The bsnes Performance core's core provided sample rate is 32040.5 Hz The bsnes Performance core's core provided aspect ratio is 4/3 Super GameBoy \u00b6 Warning Super GameBoy support in this core is Windows only , and has buggy save state support and visual glitches . Use the higan Accuracy core or the nSide Balanced core for simplified, functional, and easily accessible Super Gameboy support. For Super GameBoy support, you need sgb.boot.rom (in RetroArch's System directory), a GameBoy ROM and a Super GameBoy ROM. Please note that the Game Boy and Super GameBoy ROMs have to be unzipped. Super GameBoy is supported via the Subsystem API. There are two ways to access the Subsystem API. One way is to access the Subsystem API through RetroArch's GUI like this. First, we load our GameBoy ROM through 'Load Super GameBoy' in RetroArch's Main Menu. Next, we load our Super GameBoy ROM through 'Load Super GameBoy' in RetroArch's Menu Menu. Then, we start the content by selecting 'Start GameBoy' In RetroArch's Menu Menu. The other way is to launch RetroArch with commandline like this. retroarch -L {path to bsnes core} {path to Super GameBoy ROM} --subsystem sgb {path to GameBoy rom} MSU-1 \u00b6 Attention MSU-1 support in this core is complex. Use the Snes9x core for simplified and easily accessible MSU-1 support. MSU-1 support can be used by loading a correct .bml file. There's documentation for loading MSU-1 games in standalone higan here . Controllers \u00b6 The bsnes Performance core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 device types \u00b6 None - Disables input. SNES Joypad - Joypad SNES Mouse - Mouse User 2 device types \u00b6 None - Disables input. SNES Joypad - Joypad SNES Mouse - Mouse Multitap - Joypad - Allows for up to five players to play together in multitap games. SuperScope - Lightgun Justifier - Lightgun Justifiers - Lightgun - Two Justifiers are plugged in, for two-player Justifier games. Multitap support \u00b6 Activating multitap support in compatible games can be configured by switching to the Multitap device type for User 2. Controller tables \u00b6 Joypad \u00b6 User 1 - 5 Remap descriptors RetroPad Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R Mouse \u00b6 RetroMouse Inputs SNES Mouse Mouse Cursor SNES Mouse Cursor Mouse 1 SNES Mouse Left Button Mouse 2 SNES Mouse Right Button Lightgun \u00b6 RetroLightgun Inputs SuperScope Justifier(s) Gun Crosshair SuperScope Crosshair Justifier Crosshair Gun Trigger SuperScope Trigger Justifier Trigger Gun Aux A SuperScope Cursor Gun Aux B SuperScope Turbo Gun Start SuperScope Pause Justifier Start Compatibility \u00b6 Game Issue A.S.P. Air Strike Patrol Black lines show up during gameplay. The shadow below the aircraft is missing. Funaki Masakatsu Hybrid Wrestler \u2013 Tougi Denshou Corrupted graphics on the Pancrase logo screen. Mecarobot Golf The ground \"wobbles\" during gameplay. Mega Man X2 Only displays a black screen. Mega Man X3 Only displays a black screen. Mortal Kombat II Various glitched graphics. NHL \u201994 Corrupted line on the NHL logo screen. Tetris Attack Lots of flickering on the VS. CPU mode map screen. External Links \u00b6 Official higan Website Official higan Upstream Downloads Libretro bsnes Performance Core info file Libretro bsnes Performance Github Repository Report Libretro bsnes Performance Core Issues Here See also \u00b6 Nintendo - Sufami Turbo \u00b6 Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2005) Nintendo - SNES / Famicom (Snes9x 2010) Nintendo - Super Nintendo Entertainment System (+ Hacks) \u00b6 Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (nSide Balanced) Nintendo - SNES / Famicom (Mesen-S) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2005) Nintendo - SNES / Famicom (Snes9x 2010)","title":"Nintendo - SNES / Famicom (bsnes Performance)"},{"location":"library/bsnes_performance/#nintendo-snes-famicom-bsnes-performance","text":"","title":"Nintendo - SNES / Famicom (bsnes Performance)"},{"location":"library/bsnes_performance/#background","text":"bsnes is a Super Nintendo emulator that began development on 2004-10-14. It focuses on accuracy and clean code above all else. It never uses speed or compatibilty hacks. As a result, the minimum system requirements are greater than with other emulators. bsnes comes in three different profiles (accuracy, balanced and performance) which contain minor differences in the PPU (graphics) emulation. This core has been compiled with the Performance profile. Highly accurate SNES emulation. Whether to use the Accuracy, or Balanced or Performance core depends on how much accuracy you want to give up for game performance. Please check the compatibility section for more information.","title":"Background"},{"location":"library/bsnes_performance/#authorlicense","text":"The bsnes Performance core has been authored by byuu The bsnes Performance core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/bsnes_performance/#extensions","text":"Content that can be loaded by the bsnes Performance core have the following file extensions: .sfc .smc .bml","title":"Extensions"},{"location":"library/bsnes_performance/#databases","text":"RetroArch database(s) that are associated with the bsnes Performance core: Nintendo - Super Nintendo Entertainment System Nintendo - Super Nintendo Entertainment System Hacks Nintendo - Sufami Turbo","title":"Databases"},{"location":"library/bsnes_performance/#bios","text":"Required or optional firmware files go in the frontend's system directory. Attention The bsnes Performance core uses split ROMS for special chip games . Notable DSP1/DSP1B Games: Super Mario Kart Pilotwings Notable DSP2 Games: Dungeon Master Notable DSP3 Games: SD Gundam GX Notable DSP4 Games: Top Gear 3000 Notable Cx4 Games: Mega Man X2 Mega Man X3 Filename Description md5sum dsp1.data.rom DSP1 co-processor firmware 3d81b45fa0c2aa8b852dfb1ece7c0971 dsp1.program.rom DSP1 co-processor firmware ae209fbe789fbf11a48aea5ab1197321 dsp1b.data.rom DSP1B co-processor firmware 1e3f568634a7d8284020dddc0ae905bc dsp1b.program.rom DSP1B co-processor firmware d10f446888e097cbf500f3f663cf4f6d dsp2.data.rom DSP2 co-processor firmware e9417e29223b139c3c4b635a2a3b8744 dsp2.program.rom DSP2 co-processor firmware aa6e5922a3ed5ded54f24247c11143c5 dsp3.data.rom DSP3 co-processor firmware 0a81210c0a940b997dd9843281008ee6 dsp3.program.rom DSP3 co-processor firmware d99ca4562818d49cee1f242705bba6f8 dsp4.data.rom DSP4 co-processor firmware ee4990879eb68e3cbca239c5bc20303d dsp4.program.rom DSP4 co-processor firmware a151023b948b90ffc23a5b594bb6fef2 cx4.data.rom CX4 co-processor firmware 037ac4296b6b6a5c47c440188d3c72e3 st010.data.rom ST010 co-processor firmware 254d70762b6f59f99c27c395aba7d07d st010.program.rom ST010 co-processor firmware 1d70019179a59a566a0bb5d3f2845544 st011.data.rom ST011 co-processor firmware 10bd3f4aa949737ab9836512c35bcc29 st011.program.rom ST011 co-processor firmware 95222ebf1c0c2990bcf25db43743f032 st018.data.rom ST018 co-processor firmware 49c898b60d0f15e90d0ba780dd12f366 st018.program.rom ST018 co-processor firmware dda40ccd57390c96e49d30a041f9a9e7 sgb.boot.rom Super Game Boy BIOS","title":"BIOS"},{"location":"library/bsnes_performance/#features","text":"Frontend-level settings or features that the bsnes Performance core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2715 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse - Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2714 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2714 LEDs \u2715","title":"Features"},{"location":"library/bsnes_performance/#directories","text":"The bsnes Performance core's internal core name is 'bsnes' The bsnes Performance core saves/loads to/from these directories. Frontend's Save directory 'content-name'.srm (Cartridge battery save) Frontend's State directory 'content-name'.state# (State)","title":"Directories"},{"location":"library/bsnes_performance/#geometry-and-timing","text":"The bsnes Performance core's core provided FPS is 60.0988118623 for NTSC games and 50.0069789082 for PAL games. The bsnes Performance core's core provided sample rate is 32040.5 Hz The bsnes Performance core's core provided aspect ratio is 4/3","title":"Geometry and timing"},{"location":"library/bsnes_performance/#super-gameboy","text":"Warning Super GameBoy support in this core is Windows only , and has buggy save state support and visual glitches . Use the higan Accuracy core or the nSide Balanced core for simplified, functional, and easily accessible Super Gameboy support. For Super GameBoy support, you need sgb.boot.rom (in RetroArch's System directory), a GameBoy ROM and a Super GameBoy ROM. Please note that the Game Boy and Super GameBoy ROMs have to be unzipped. Super GameBoy is supported via the Subsystem API. There are two ways to access the Subsystem API. One way is to access the Subsystem API through RetroArch's GUI like this. First, we load our GameBoy ROM through 'Load Super GameBoy' in RetroArch's Main Menu. Next, we load our Super GameBoy ROM through 'Load Super GameBoy' in RetroArch's Menu Menu. Then, we start the content by selecting 'Start GameBoy' In RetroArch's Menu Menu. The other way is to launch RetroArch with commandline like this. retroarch -L {path to bsnes core} {path to Super GameBoy ROM} --subsystem sgb {path to GameBoy rom}","title":"Super GameBoy"},{"location":"library/bsnes_performance/#msu-1","text":"Attention MSU-1 support in this core is complex. Use the Snes9x core for simplified and easily accessible MSU-1 support. MSU-1 support can be used by loading a correct .bml file. There's documentation for loading MSU-1 games in standalone higan here .","title":"MSU-1"},{"location":"library/bsnes_performance/#controllers","text":"The bsnes Performance core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/bsnes_performance/#user-1-device-types","text":"None - Disables input. SNES Joypad - Joypad SNES Mouse - Mouse","title":"User 1 device types"},{"location":"library/bsnes_performance/#user-2-device-types","text":"None - Disables input. SNES Joypad - Joypad SNES Mouse - Mouse Multitap - Joypad - Allows for up to five players to play together in multitap games. SuperScope - Lightgun Justifier - Lightgun Justifiers - Lightgun - Two Justifiers are plugged in, for two-player Justifier games.","title":"User 2 device types"},{"location":"library/bsnes_performance/#multitap-support","text":"Activating multitap support in compatible games can be configured by switching to the Multitap device type for User 2.","title":"Multitap support"},{"location":"library/bsnes_performance/#controller-tables","text":"","title":"Controller tables"},{"location":"library/bsnes_performance/#joypad","text":"User 1 - 5 Remap descriptors RetroPad Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R","title":"Joypad"},{"location":"library/bsnes_performance/#mouse","text":"RetroMouse Inputs SNES Mouse Mouse Cursor SNES Mouse Cursor Mouse 1 SNES Mouse Left Button Mouse 2 SNES Mouse Right Button","title":"Mouse"},{"location":"library/bsnes_performance/#lightgun","text":"RetroLightgun Inputs SuperScope Justifier(s) Gun Crosshair SuperScope Crosshair Justifier Crosshair Gun Trigger SuperScope Trigger Justifier Trigger Gun Aux A SuperScope Cursor Gun Aux B SuperScope Turbo Gun Start SuperScope Pause Justifier Start","title":"Lightgun"},{"location":"library/bsnes_performance/#compatibility","text":"Game Issue A.S.P. Air Strike Patrol Black lines show up during gameplay. The shadow below the aircraft is missing. Funaki Masakatsu Hybrid Wrestler \u2013 Tougi Denshou Corrupted graphics on the Pancrase logo screen. Mecarobot Golf The ground \"wobbles\" during gameplay. Mega Man X2 Only displays a black screen. Mega Man X3 Only displays a black screen. Mortal Kombat II Various glitched graphics. NHL \u201994 Corrupted line on the NHL logo screen. Tetris Attack Lots of flickering on the VS. CPU mode map screen.","title":"Compatibility"},{"location":"library/bsnes_performance/#external-links","text":"Official higan Website Official higan Upstream Downloads Libretro bsnes Performance Core info file Libretro bsnes Performance Github Repository Report Libretro bsnes Performance Core Issues Here","title":"External Links"},{"location":"library/bsnes_performance/#see-also","text":"","title":"See also"},{"location":"library/bsnes_performance/#nintendo-sufami-turbo","text":"Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2005) Nintendo - SNES / Famicom (Snes9x 2010)","title":"Nintendo - Sufami Turbo"},{"location":"library/bsnes_performance/#nintendo-super-nintendo-entertainment-system-hacks","text":"Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (nSide Balanced) Nintendo - SNES / Famicom (Mesen-S) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2005) Nintendo - SNES / Famicom (Snes9x 2010)","title":"Nintendo - Super Nintendo Entertainment System (+ Hacks)"},{"location":"library/cannonball/","text":"Cannonball \u00b6 Background \u00b6 This is an OutRun game engine recreation written by Chris White in 2014. It has been ported to the libretro API. Features \u00b6 Smoother 60fps gameplay True Widescreen Play Mode Force Feedback support Custom Track support from LayOut New Game Modes (Continuous Mode & Time Trial Mode) Many, many more enhancements The Cannonball core has been authored by Chris White The Cannonball core is licensed under Non-commercial A summary of the licenses behind RetroArch and its cores can be found here . How to start the Cannonball core: \u00b6 To start the Cannonball core, you need to obtain Cannonball's data files. You can do this by going to RetroArch's main menu screen and selecting 'Online Updater'. From there, select 'Content Downloader'. Select 'Cannonball', then select 'CannonBall.zip'. This should download and extract this file to RetroArch's Downloads directory. Next, follow this guide and place OutRun Revision B ROMs in the CannonBall directory. Below is a pictured example of a working Cannonball setup. Go back to RetroArch's main menu screen. Select 'Load Content', then 'Downloads'. Select the 'CannonBall' directory, then select 'CannonBall.game'. If you are asked which core to select, choose 'Cannonball'. The content should now start running! Extensions \u00b6 Content that can be loaded by the Cannonball core have the following file extensions: .game .88 RetroArch database(s) that are associated with the Cannonball core: Cannonball Features \u00b6 Frontend-level settings or features that the Cannonball core respects. Feature Supported Restart \u2715 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The Cannonball core's library name is 'Cannonball' The Cannonball core saves/loads to/from these directories. Frontend's Home directory File Description config.xml Config File hiscores.xml Hiscores File Geometry and timing \u00b6 The Cannonball core's core provided FPS is 60 when the Video Framerate core option is set to Smooth (60) The Cannonball core's core provided FPS is 120 when the Video Framerate core option is set to Ultra Smooth (120) The Cannonball core's core provided FPS is 60 when the Video Framerate core option is set to Original (60/30) The Cannonball core's core provided sample rate is 44100 Hz The Cannonball core's base width is 320 The Cannonball core's base height is 224 The Cannonball core's max width is 640 The Cannonball core's max height is 640 The Cannonball core's core provided aspect ratio is 4/3 when the Video Widescreen Mode core option is set to Off The Cannonball core's core provided aspect ratio is 16/9 when the Video Widescreen Mode core option is set to On Core options \u00b6 The Cannonball core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Menu At Start [cannonball_menu_enabled] ( ON |OFF) When enabled; the Cannonball core shows the main menu upon startup. When disabled; the Cannonball core goes into attract mode upon startup. Menu Road Scroll Speed [cannonball_menu_road_scroll_speed] ( 50 |60|70|80|90|100|150|200|300|400|500|5|10|15|20|25|30|40) Use this to configure the speed at which the road on the Main Menu scrolls at. Video Widescreen Mode [cannonball_video_widescreen] ( ON |OFF) Explained here . Video High-Resolution Mode [cannonball_video_hires] ( OFF |ON) The original game ran at 320x224. This mode doubles that resolution to 640x448. However, rather than simply doubling up the display, the sprites and road are rendered at a higher resolution where possible. Video Framerate [cannonball_video_fps] ( Smooth (60) |Ultra Smooth (120)|Original (60/30)) Explained here . Advertise Sound [cannonball_sound_advertise] ( ON |OFF) Play sounds in attract mode. Preview Music [cannonball_sound_preview] ( ON |OFF) Preview the music tracks at the point of selection in-game. The original game did not have this option and you would not hear the audio track until the game started. Fix Samples (use opr-10188.71f) [cannonball_sound_fix_samples] ( ON |OFF) Explained here . Gear Mode [cannonball_gear] ( Manual |Manual Cabinet|Manual 2 Buttons|Automatic) Change the gear shift behaviour. Useful to configure based on your target hardware. 0 = Manual (Click to shift, for normal play) 1 = Manual (Hold to shift, for cabinet play) 2 = Manual (Separate Buttons for High/Low) 3 = Automatic (No need to change gear) Analog Controls (off to allow digital speed setup) [cannonball_analog] ( ON |OFF) Self-explanatory. Digital Steer Speed [cannonball_steer_speed] ( 3 |4|5|6|7|8|9|1|2) Awaiting description. Digital Pedal Speed [cannonball_pedal_speed] ( 4 |5|6|7|8|9|1|2|3) Awaiting description. Time [cannonball_dip_time] ( Easy (80s) |Normal (75s)|Hard (72s)|Very Hard (70s)|Infinite Time) Explained here . Traffic [cannonball_dip_traffic] ( Normal |Hard|Very Hard|No Traffic|Easy) Explained here . Freeplay Mode [cannonball_freeplay] ( OFF |ON) Awaiting description. Use Japanese Tracks Version [cannonball_jap] ( OFF |ON) Explained here Use Prototype Stage 1 [cannonball_prototype] ( OFF |ON) Explained here . Objects Limit Enhanced [cannonball_level_objects] ( ON |OFF) Explained here Original Traffic Patterns Randomization [cannonball_randomgen] ( ON |OFF) Awaiting description. Force AI To Play [cannonball_force_ai] ( OFF |ON) Awaiting description. Fix Original Game Bugs [cannonball_fix_bugs] ( ON |OFF) Explained here Fix Timing Bugs [cannonball_fix_timer] ( OFF |ON) Awaiting description. Display Debug Info For LayOut [cannonball_layout_debug] ( OFF |ON) Awaiting description. New Attract [cannonball_new_attract] ( ON |OFF) Explained here . Time Trial Laps [cannonball_ttrial_laps] ( 3 |4|5|1|2) Awaiting description. Time Trial Traffic Amount [cannonball_ttrial_traffic] ( 3 |4|5|6|7|8|0|1|2) Awaiting description. Continuous Mode Traffic Amount [cannonball_cont_traffic] ( 3 |4|5|6|7|8|0|1|2) Awaiting description. Joypad \u00b6 RetroPad Inputs User 1 input descriptors Accelerate Brake Coin Start Up Down Left Right Gear Gear Adjust View Go Back To Menu X Analog X Y Analog Y External Links \u00b6 Official Cannoball Github Wiki Official Cannonball Github Repository Libretro Cannonball Core info file Libretro Cannonball Github Repository Report Libretro Cannonball Core Issues Here","title":"Cannonball"},{"location":"library/cannonball/#cannonball","text":"","title":"Cannonball"},{"location":"library/cannonball/#background","text":"This is an OutRun game engine recreation written by Chris White in 2014. It has been ported to the libretro API.","title":"Background"},{"location":"library/cannonball/#features","text":"Smoother 60fps gameplay True Widescreen Play Mode Force Feedback support Custom Track support from LayOut New Game Modes (Continuous Mode & Time Trial Mode) Many, many more enhancements The Cannonball core has been authored by Chris White The Cannonball core is licensed under Non-commercial A summary of the licenses behind RetroArch and its cores can be found here .","title":"Features"},{"location":"library/cannonball/#how-to-start-the-cannonball-core","text":"To start the Cannonball core, you need to obtain Cannonball's data files. You can do this by going to RetroArch's main menu screen and selecting 'Online Updater'. From there, select 'Content Downloader'. Select 'Cannonball', then select 'CannonBall.zip'. This should download and extract this file to RetroArch's Downloads directory. Next, follow this guide and place OutRun Revision B ROMs in the CannonBall directory. Below is a pictured example of a working Cannonball setup. Go back to RetroArch's main menu screen. Select 'Load Content', then 'Downloads'. Select the 'CannonBall' directory, then select 'CannonBall.game'. If you are asked which core to select, choose 'Cannonball'. The content should now start running!","title":"How to start the Cannonball core:"},{"location":"library/cannonball/#extensions","text":"Content that can be loaded by the Cannonball core have the following file extensions: .game .88 RetroArch database(s) that are associated with the Cannonball core: Cannonball","title":"Extensions"},{"location":"library/cannonball/#features_1","text":"Frontend-level settings or features that the Cannonball core respects. Feature Supported Restart \u2715 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/cannonball/#directories","text":"The Cannonball core's library name is 'Cannonball' The Cannonball core saves/loads to/from these directories. Frontend's Home directory File Description config.xml Config File hiscores.xml Hiscores File","title":"Directories"},{"location":"library/cannonball/#geometry-and-timing","text":"The Cannonball core's core provided FPS is 60 when the Video Framerate core option is set to Smooth (60) The Cannonball core's core provided FPS is 120 when the Video Framerate core option is set to Ultra Smooth (120) The Cannonball core's core provided FPS is 60 when the Video Framerate core option is set to Original (60/30) The Cannonball core's core provided sample rate is 44100 Hz The Cannonball core's base width is 320 The Cannonball core's base height is 224 The Cannonball core's max width is 640 The Cannonball core's max height is 640 The Cannonball core's core provided aspect ratio is 4/3 when the Video Widescreen Mode core option is set to Off The Cannonball core's core provided aspect ratio is 16/9 when the Video Widescreen Mode core option is set to On","title":"Geometry and timing"},{"location":"library/cannonball/#core-options","text":"The Cannonball core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Menu At Start [cannonball_menu_enabled] ( ON |OFF) When enabled; the Cannonball core shows the main menu upon startup. When disabled; the Cannonball core goes into attract mode upon startup. Menu Road Scroll Speed [cannonball_menu_road_scroll_speed] ( 50 |60|70|80|90|100|150|200|300|400|500|5|10|15|20|25|30|40) Use this to configure the speed at which the road on the Main Menu scrolls at. Video Widescreen Mode [cannonball_video_widescreen] ( ON |OFF) Explained here . Video High-Resolution Mode [cannonball_video_hires] ( OFF |ON) The original game ran at 320x224. This mode doubles that resolution to 640x448. However, rather than simply doubling up the display, the sprites and road are rendered at a higher resolution where possible. Video Framerate [cannonball_video_fps] ( Smooth (60) |Ultra Smooth (120)|Original (60/30)) Explained here . Advertise Sound [cannonball_sound_advertise] ( ON |OFF) Play sounds in attract mode. Preview Music [cannonball_sound_preview] ( ON |OFF) Preview the music tracks at the point of selection in-game. The original game did not have this option and you would not hear the audio track until the game started. Fix Samples (use opr-10188.71f) [cannonball_sound_fix_samples] ( ON |OFF) Explained here . Gear Mode [cannonball_gear] ( Manual |Manual Cabinet|Manual 2 Buttons|Automatic) Change the gear shift behaviour. Useful to configure based on your target hardware. 0 = Manual (Click to shift, for normal play) 1 = Manual (Hold to shift, for cabinet play) 2 = Manual (Separate Buttons for High/Low) 3 = Automatic (No need to change gear) Analog Controls (off to allow digital speed setup) [cannonball_analog] ( ON |OFF) Self-explanatory. Digital Steer Speed [cannonball_steer_speed] ( 3 |4|5|6|7|8|9|1|2) Awaiting description. Digital Pedal Speed [cannonball_pedal_speed] ( 4 |5|6|7|8|9|1|2|3) Awaiting description. Time [cannonball_dip_time] ( Easy (80s) |Normal (75s)|Hard (72s)|Very Hard (70s)|Infinite Time) Explained here . Traffic [cannonball_dip_traffic] ( Normal |Hard|Very Hard|No Traffic|Easy) Explained here . Freeplay Mode [cannonball_freeplay] ( OFF |ON) Awaiting description. Use Japanese Tracks Version [cannonball_jap] ( OFF |ON) Explained here Use Prototype Stage 1 [cannonball_prototype] ( OFF |ON) Explained here . Objects Limit Enhanced [cannonball_level_objects] ( ON |OFF) Explained here Original Traffic Patterns Randomization [cannonball_randomgen] ( ON |OFF) Awaiting description. Force AI To Play [cannonball_force_ai] ( OFF |ON) Awaiting description. Fix Original Game Bugs [cannonball_fix_bugs] ( ON |OFF) Explained here Fix Timing Bugs [cannonball_fix_timer] ( OFF |ON) Awaiting description. Display Debug Info For LayOut [cannonball_layout_debug] ( OFF |ON) Awaiting description. New Attract [cannonball_new_attract] ( ON |OFF) Explained here . Time Trial Laps [cannonball_ttrial_laps] ( 3 |4|5|1|2) Awaiting description. Time Trial Traffic Amount [cannonball_ttrial_traffic] ( 3 |4|5|6|7|8|0|1|2) Awaiting description. Continuous Mode Traffic Amount [cannonball_cont_traffic] ( 3 |4|5|6|7|8|0|1|2) Awaiting description.","title":"Core options"},{"location":"library/cannonball/#joypad","text":"RetroPad Inputs User 1 input descriptors Accelerate Brake Coin Start Up Down Left Right Gear Gear Adjust View Go Back To Menu X Analog X Y Analog Y","title":"Joypad"},{"location":"library/cannonball/#external-links","text":"Official Cannoball Github Wiki Official Cannonball Github Repository Libretro Cannonball Core info file Libretro Cannonball Github Repository Report Libretro Cannonball Core Issues Here","title":"External Links"},{"location":"library/caprice32/","text":"Amstrad - CPC (Caprice32) \u00b6 Background \u00b6 Caprice32 is a software emulator of the Amstrad CPC 8bit home computer series running on Linux and Windows. The emulator faithfully imitates the CPC464, CPC664, CPC6128, CPC6128+ and GX4000 models. By recreating the operations of all hardware components at a low level, the emulator achieves a high degree of compatibility with original CPC software. These programs or games can be run unmodified at real-time or higher speeds, depending on the emulator host environment. Author/License \u00b6 The Caprice32 core has been authored by Ulrich Doewich David Colmenero (D_Skywalk) Colin Pitrat The Caprice32 core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the Caprice32 core have the following file extensions: .dsk .sna .tap .cdt .voc .m3u .cpr .zip Databases \u00b6 RetroArch database(s) that are associated with the Caprice32 core: Amstrad - CPC (TOSEC) Features \u00b6 Frontend-level settings or features that the Caprice32 core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2714 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The Caprice32 core's internal core name is 'cap32'. The Caprice32 core saves/loads to/from these directories. Loaded content's directory 'content-name'#.SNA (SNA) M3U and Disk control \u00b6 When you have a multi disk game, you can use a m3u file to specify each disk of the game and change them from the RetroArch Disk control interface. A M3U file is a simple text file with one disk per line (see https://en.wikipedia.org/wiki/M3U ). Example: Alive (F).m3u 1 2 Alive (F) - Disk 1A.dsk Alive (F) - Disk 1B.dsk Path can be absolute or relative to the location of the M3U file. When a game ask for it, you can change the current disk in the RetroArch 'Disk Control' menu: Eject the current disk with 'Disk Cycle Tray Status' Select the right disk index Insert the new disk with 'Disk Cycle Tray Status' Geometry and timing \u00b6 The Caprice32 core's core provided FPS is 50 The Caprice32 core's core provided sample rate is 44.100 The Caprice32 core's core provided aspect ratio is \u00be Usage \u00b6 The Caprice32 core has a virtual keyboard GUI that can be accessed through User 1's RetroPad Y input. The mouse cursor can be controlled by RetroPad D-Pad inputs when the RetroPad Select input is pressed. Here are some actions you can do in page 2 of the virtual keyboard GUI. \"EXT\" EXIT EMU \"SNA\" SAVE SNA \"DSK\" SWITCH DSK DRIVE A/B \"Col\" SWITCH FGCOL ON/OFF Core options \u00b6 The Caprice32 core has the following option(s) that can be tweaked from the core options menu. Tip Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Core option Description Default Autorun If enabled, the core will run the first bas/bin found in the DSK. cap32_autorun = \"enabled|disabled\" enabled Combo Key See Combo list below. cap32_combokey = \"select|y|b|disabled\" select Internal resolution Self-explanatory. cap32_resolution = \"384x272|400x300\" 384x272 Model (Restart) Choose which Amstrad CPC model to emulate. cap32_model = \"6128|464|6128+\" 6128 Ram size (Restart) CPC physical RAM size in kB. cap32_ram = \"128|64|192|512|576\" 128 Status Bar Not yet implemented, future option. cap32_statusbar = \"disabled|enabled\" disabled Monitor Type Choose between a color display or a monochrome display. cap32_scr_tube = \"color|green|white\" color Monitor Intensity Screen cathodic tube intensity. cap32_scr_intensity = \"5|6|7|8|9|10|11|12|13|14|15\" 5 CPC Language (Restart) Choose between english, french or spanish keyboard layout. cap32_lang_layout = \"english|french|spanish\" english User 1 Joystick Configuration Select Joy/Overlay configuration for player 1. cap32_retrojoy0 = \"joystick|qaop|incentive\" joystick User 2 Joystick Configuration Select Joy/Overlay configuration for player 2. cap32_retrojoy1 = \"joystick|qaop|incentive|joystick_port2\" joystick cap32_scr_tube = color cap32_scr_tube = green Attention These 'scr_intensity' core option screenshots have been taken with the 'cap32_scr_tube' core option set to 'color'. scr_intensity = 5 scr_intensity = 15 Controllers \u00b6 The Caprice32 core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 - 2 device types \u00b6 None - Doesn't disable input. There's no reason to switch to this. RetroPad - Joypad - Don't use this. Switch to Amstrad Joystick for joypad input. Amstrad Joystick - Joypad - Use this for joypad input. Amstrad Keyboard - Keyboard - Keyboard input are always active. Has keymapper support. Other controllers \u00b6 Mouse - The mouse cursor in the Virtual Keyboard GUI can be controlled with mouse inputs. Controller tables \u00b6 JOY CONFIG DEFAULT (JOYSTICK) \u00b6 User 1 Remap descriptors RetroPad Inputs Amstrad Joystick B FIRE1 Y SPACE Start J (to select Joy in games) Up JOY UP Down JOY DOWN Left JOY LEFT Right JOY RIGHT A FIRE2 X S L INTRO R SHIFT L2 CTRL R2 COPY Select COMBO (see bellow) L3 R3 JOY CONFIG QAOP (GENERAL KEYB) \u00b6 User 1 Remap descriptors RetroPad Inputs Amstrad Joystick B F1 Y F2 Start K (to select Keyb in games) Up Q Down A Left O Right P A SPACE X H L INTRO R SHIFT L2 CTRL R2 COPY Select COMBO (see bellow) L3 R3 JOY INCENTIVE ( INCENTIVE GAMES ) \u00b6 User 1 Remap descriptors RetroPad Inputs Amstrad Joystick B SPACE Y W Start F Up CURSOR UP Down CURSOR DOWN Left CURSOR LEFT Right CURSOR RIGHT A A X C L P R L L2 R R2 U Select COMBO (see bellow) L3 R3 COMBO LIST \u00b6 If you press SELECT you could make a combo with other buttons: Combo RetroPad Inputs Amstrad Writes Select + B + CAT Select + Y + |CPM Select + Start + RUN\"DISK RUN\"DISC Select + Up + |TAPE RUN\" Select + Down + SHOW V-KEYBOARD Select + Left + [1], [Y] Select + Right + [2], [N] Select + A + [3], [R] Select + X + [4], [S] This combos are useful to load games and select options in game-menus. Keyboard \u00b6 English layout RetroKeyboard Special Inputs Amstrad Keyboard Keypad 0 CPC_KEY_F0 Keyboard Keypad 1 CPC_KEY_F1 Keyboard Keypad 2 CPC_KEY_F2 Keyboard Keypad 3 CPC_KEY_F3 Keyboard Keypad 4 CPC_KEY_F4 Keyboard Keypad 5 CPC_KEY_F5 Keyboard Keypad 6 CPC_KEY_F6 Keyboard Keypad 7 CPC_KEY_F7 Keyboard Keypad 8 CPC_KEY_F8 Keyboard Keypad 9 CPC_KEY_F9 Keyboard Keypad Period . CPC_KEY_FDOT Keyboard Keypad Enter CPC_KEY_SMALL_ENTER Keyboard Delete CPC_KEY_CLR Keyboard Insert CHANGE CURSOR/JOY EMULATION Keyboard Home PLAY TAPE Keyboard End STOP TAPE Keyboard Page Up TAPE REWIND Keyboard Page Down - Keyboard F9 SHOW V-KEYBOARD Keyboard F10 MAIN GUI Keyboard Right Alt CPC_KEY_COPY Keyboard Left Alt CPC_KEY_COPY Keyboard Custom Binds \u00b6 Choose AMSTRAD KEYBOARD in Quick Menu > Controls to customize your retropad keys per game. Mouse \u00b6 RetroMouse Inputs Virtual Keyboard GUI Inputs Mouse Cursor Mouse Cursor Mouse 1 Mouse Left Button External Links \u00b6 Official Caprice32 Github Repository Libretro Caprice32 Core info file Libretro Caprice32 Github Repository Report Libretro Caprice32 Core Issues Here See also \u00b6 Amstrad - CPC \u00b6 Amstrad - CPC (CrocoDS)","title":"Amstrad - CPC (Caprice32)"},{"location":"library/caprice32/#amstrad-cpc-caprice32","text":"","title":"Amstrad - CPC (Caprice32)"},{"location":"library/caprice32/#background","text":"Caprice32 is a software emulator of the Amstrad CPC 8bit home computer series running on Linux and Windows. The emulator faithfully imitates the CPC464, CPC664, CPC6128, CPC6128+ and GX4000 models. By recreating the operations of all hardware components at a low level, the emulator achieves a high degree of compatibility with original CPC software. These programs or games can be run unmodified at real-time or higher speeds, depending on the emulator host environment.","title":"Background"},{"location":"library/caprice32/#authorlicense","text":"The Caprice32 core has been authored by Ulrich Doewich David Colmenero (D_Skywalk) Colin Pitrat The Caprice32 core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/caprice32/#extensions","text":"Content that can be loaded by the Caprice32 core have the following file extensions: .dsk .sna .tap .cdt .voc .m3u .cpr .zip","title":"Extensions"},{"location":"library/caprice32/#databases","text":"RetroArch database(s) that are associated with the Caprice32 core: Amstrad - CPC (TOSEC)","title":"Databases"},{"location":"library/caprice32/#features","text":"Frontend-level settings or features that the Caprice32 core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2714 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/caprice32/#directories","text":"The Caprice32 core's internal core name is 'cap32'. The Caprice32 core saves/loads to/from these directories. Loaded content's directory 'content-name'#.SNA (SNA)","title":"Directories"},{"location":"library/caprice32/#m3u-and-disk-control","text":"When you have a multi disk game, you can use a m3u file to specify each disk of the game and change them from the RetroArch Disk control interface. A M3U file is a simple text file with one disk per line (see https://en.wikipedia.org/wiki/M3U ). Example: Alive (F).m3u 1 2 Alive (F) - Disk 1A.dsk Alive (F) - Disk 1B.dsk Path can be absolute or relative to the location of the M3U file. When a game ask for it, you can change the current disk in the RetroArch 'Disk Control' menu: Eject the current disk with 'Disk Cycle Tray Status' Select the right disk index Insert the new disk with 'Disk Cycle Tray Status'","title":"M3U and Disk control"},{"location":"library/caprice32/#geometry-and-timing","text":"The Caprice32 core's core provided FPS is 50 The Caprice32 core's core provided sample rate is 44.100 The Caprice32 core's core provided aspect ratio is \u00be","title":"Geometry and timing"},{"location":"library/caprice32/#usage","text":"The Caprice32 core has a virtual keyboard GUI that can be accessed through User 1's RetroPad Y input. The mouse cursor can be controlled by RetroPad D-Pad inputs when the RetroPad Select input is pressed. Here are some actions you can do in page 2 of the virtual keyboard GUI. \"EXT\" EXIT EMU \"SNA\" SAVE SNA \"DSK\" SWITCH DSK DRIVE A/B \"Col\" SWITCH FGCOL ON/OFF","title":"Usage"},{"location":"library/caprice32/#core-options","text":"The Caprice32 core has the following option(s) that can be tweaked from the core options menu. Tip Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Core option Description Default Autorun If enabled, the core will run the first bas/bin found in the DSK. cap32_autorun = \"enabled|disabled\" enabled Combo Key See Combo list below. cap32_combokey = \"select|y|b|disabled\" select Internal resolution Self-explanatory. cap32_resolution = \"384x272|400x300\" 384x272 Model (Restart) Choose which Amstrad CPC model to emulate. cap32_model = \"6128|464|6128+\" 6128 Ram size (Restart) CPC physical RAM size in kB. cap32_ram = \"128|64|192|512|576\" 128 Status Bar Not yet implemented, future option. cap32_statusbar = \"disabled|enabled\" disabled Monitor Type Choose between a color display or a monochrome display. cap32_scr_tube = \"color|green|white\" color Monitor Intensity Screen cathodic tube intensity. cap32_scr_intensity = \"5|6|7|8|9|10|11|12|13|14|15\" 5 CPC Language (Restart) Choose between english, french or spanish keyboard layout. cap32_lang_layout = \"english|french|spanish\" english User 1 Joystick Configuration Select Joy/Overlay configuration for player 1. cap32_retrojoy0 = \"joystick|qaop|incentive\" joystick User 2 Joystick Configuration Select Joy/Overlay configuration for player 2. cap32_retrojoy1 = \"joystick|qaop|incentive|joystick_port2\" joystick cap32_scr_tube = color cap32_scr_tube = green Attention These 'scr_intensity' core option screenshots have been taken with the 'cap32_scr_tube' core option set to 'color'. scr_intensity = 5 scr_intensity = 15","title":"Core options"},{"location":"library/caprice32/#controllers","text":"The Caprice32 core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/caprice32/#user-1-2-device-types","text":"None - Doesn't disable input. There's no reason to switch to this. RetroPad - Joypad - Don't use this. Switch to Amstrad Joystick for joypad input. Amstrad Joystick - Joypad - Use this for joypad input. Amstrad Keyboard - Keyboard - Keyboard input are always active. Has keymapper support.","title":"User 1 - 2 device types"},{"location":"library/caprice32/#other-controllers","text":"Mouse - The mouse cursor in the Virtual Keyboard GUI can be controlled with mouse inputs.","title":"Other controllers"},{"location":"library/caprice32/#controller-tables","text":"","title":"Controller tables"},{"location":"library/caprice32/#joy-config-default-joystick","text":"User 1 Remap descriptors RetroPad Inputs Amstrad Joystick B FIRE1 Y SPACE Start J (to select Joy in games) Up JOY UP Down JOY DOWN Left JOY LEFT Right JOY RIGHT A FIRE2 X S L INTRO R SHIFT L2 CTRL R2 COPY Select COMBO (see bellow) L3 R3","title":"JOY CONFIG DEFAULT (JOYSTICK)"},{"location":"library/caprice32/#joy-config-qaop-general-keyb","text":"User 1 Remap descriptors RetroPad Inputs Amstrad Joystick B F1 Y F2 Start K (to select Keyb in games) Up Q Down A Left O Right P A SPACE X H L INTRO R SHIFT L2 CTRL R2 COPY Select COMBO (see bellow) L3 R3","title":"JOY CONFIG QAOP (GENERAL KEYB)"},{"location":"library/caprice32/#joy-incentive-incentive-games","text":"User 1 Remap descriptors RetroPad Inputs Amstrad Joystick B SPACE Y W Start F Up CURSOR UP Down CURSOR DOWN Left CURSOR LEFT Right CURSOR RIGHT A A X C L P R L L2 R R2 U Select COMBO (see bellow) L3 R3","title":"JOY INCENTIVE (INCENTIVE GAMES)"},{"location":"library/caprice32/#combo-list","text":"If you press SELECT you could make a combo with other buttons: Combo RetroPad Inputs Amstrad Writes Select + B + CAT Select + Y + |CPM Select + Start + RUN\"DISK RUN\"DISC Select + Up + |TAPE RUN\" Select + Down + SHOW V-KEYBOARD Select + Left + [1], [Y] Select + Right + [2], [N] Select + A + [3], [R] Select + X + [4], [S] This combos are useful to load games and select options in game-menus.","title":"COMBO LIST"},{"location":"library/caprice32/#keyboard","text":"English layout RetroKeyboard Special Inputs Amstrad Keyboard Keypad 0 CPC_KEY_F0 Keyboard Keypad 1 CPC_KEY_F1 Keyboard Keypad 2 CPC_KEY_F2 Keyboard Keypad 3 CPC_KEY_F3 Keyboard Keypad 4 CPC_KEY_F4 Keyboard Keypad 5 CPC_KEY_F5 Keyboard Keypad 6 CPC_KEY_F6 Keyboard Keypad 7 CPC_KEY_F7 Keyboard Keypad 8 CPC_KEY_F8 Keyboard Keypad 9 CPC_KEY_F9 Keyboard Keypad Period . CPC_KEY_FDOT Keyboard Keypad Enter CPC_KEY_SMALL_ENTER Keyboard Delete CPC_KEY_CLR Keyboard Insert CHANGE CURSOR/JOY EMULATION Keyboard Home PLAY TAPE Keyboard End STOP TAPE Keyboard Page Up TAPE REWIND Keyboard Page Down - Keyboard F9 SHOW V-KEYBOARD Keyboard F10 MAIN GUI Keyboard Right Alt CPC_KEY_COPY Keyboard Left Alt CPC_KEY_COPY","title":"Keyboard"},{"location":"library/caprice32/#keyboard-custom-binds","text":"Choose AMSTRAD KEYBOARD in Quick Menu > Controls to customize your retropad keys per game.","title":"Keyboard Custom Binds"},{"location":"library/caprice32/#mouse","text":"RetroMouse Inputs Virtual Keyboard GUI Inputs Mouse Cursor Mouse Cursor Mouse 1 Mouse Left Button","title":"Mouse"},{"location":"library/caprice32/#external-links","text":"Official Caprice32 Github Repository Libretro Caprice32 Core info file Libretro Caprice32 Github Repository Report Libretro Caprice32 Core Issues Here","title":"External Links"},{"location":"library/caprice32/#see-also","text":"","title":"See also"},{"location":"library/caprice32/#amstrad-cpc","text":"Amstrad - CPC (CrocoDS)","title":"Amstrad - CPC"},{"location":"library/chailove/","text":"ChaiLove \u00b6 Background \u00b6 ChaiLove is a framework for making 2D games with ChaiScript . ChaiLove games can be played with LibRetro/RetroArch through the ChaiLove core. How to start the ChaiLove core: \u00b6 As an example showcasing loading content with Chailove core, we will load the Floppy Bird game hosted on RetroArch's Content Downloader. You can do this by going to RetroArch's main menu screen and selecting 'Online Updater'. From there, select 'Content Downloader'. Select 'ChaiLove', then select 'Floppy Bird.chailove'. This should download and extract this file to RetroArch's Downloads directory. Go back to RetroArch's main menu screen. Select 'Load Content', then 'Downloads'. Select 'Floppy Bird.chailove'. If you are asked which core to select, choose 'ChaiLove'. The content should now start running! Author/License \u00b6 The ChaiLove core has been authored by Rob Loach The ChaiLove core is licensed under MIT A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the ChaiLove core have the following file extensions: .chai .chailove Databases \u00b6 RetroArch database(s) that are associated with the ChaiLove core: ChaiLove Features \u00b6 Frontend-level settings or features that the ChaiLove core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2715 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2714 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2714 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The ChaiLove core's internal core name is 'ChaiLove' The ChaiLove core saves/loads to/from these directories. Frontend's State directory 'content-name'.state# (State) Geometry and timing \u00b6 The ChaiLove core's core provided FPS is 60 The ChaiLove core's core provided sample rate is 44100 Hz The ChaiLove core's core provided aspect ratio is game provided Core options \u00b6 The ChaiLove core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Alpha Blending [chailove_alphablending] ( enabled |disabled) Enable or disable alpha blending (transparency). Alpha Blending - On Alpha Blending - Off High Quality [chailove_highquality] ( enabled |disabled) Enable or disable extra visual features. High Quality - On High Quality - Off Controllers \u00b6 The ChaiLove core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 - 5 device types \u00b6 None - Doesn't disable input. RetroPad - Joypad - Stay on this. RetroPad w/Analog - Joypad - There's no reason to switch to this. Controller tables \u00b6 Joypad \u00b6 Attention What the buttons do are game specific. User 1 - 5 Remap descriptors RetroPad Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R External Links \u00b6 ChaiScript Website ChaiLove API Documentation Website ChaiLove Github Wiki Libretro ChaiLove Core info file Libretro ChaiLove Github Repository Report Libretro ChaiLove Core Issues Here Floppy Bird See also \u00b6 Custom Engine \u00b6 Lua Engine (Lutro)","title":"ChaiLove"},{"location":"library/chailove/#chailove","text":"","title":"ChaiLove"},{"location":"library/chailove/#background","text":"ChaiLove is a framework for making 2D games with ChaiScript . ChaiLove games can be played with LibRetro/RetroArch through the ChaiLove core.","title":"Background"},{"location":"library/chailove/#how-to-start-the-chailove-core","text":"As an example showcasing loading content with Chailove core, we will load the Floppy Bird game hosted on RetroArch's Content Downloader. You can do this by going to RetroArch's main menu screen and selecting 'Online Updater'. From there, select 'Content Downloader'. Select 'ChaiLove', then select 'Floppy Bird.chailove'. This should download and extract this file to RetroArch's Downloads directory. Go back to RetroArch's main menu screen. Select 'Load Content', then 'Downloads'. Select 'Floppy Bird.chailove'. If you are asked which core to select, choose 'ChaiLove'. The content should now start running!","title":"How to start the ChaiLove core:"},{"location":"library/chailove/#authorlicense","text":"The ChaiLove core has been authored by Rob Loach The ChaiLove core is licensed under MIT A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/chailove/#extensions","text":"Content that can be loaded by the ChaiLove core have the following file extensions: .chai .chailove","title":"Extensions"},{"location":"library/chailove/#databases","text":"RetroArch database(s) that are associated with the ChaiLove core: ChaiLove","title":"Databases"},{"location":"library/chailove/#features","text":"Frontend-level settings or features that the ChaiLove core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2715 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2714 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2714 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/chailove/#directories","text":"The ChaiLove core's internal core name is 'ChaiLove' The ChaiLove core saves/loads to/from these directories. Frontend's State directory 'content-name'.state# (State)","title":"Directories"},{"location":"library/chailove/#geometry-and-timing","text":"The ChaiLove core's core provided FPS is 60 The ChaiLove core's core provided sample rate is 44100 Hz The ChaiLove core's core provided aspect ratio is game provided","title":"Geometry and timing"},{"location":"library/chailove/#core-options","text":"The ChaiLove core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Alpha Blending [chailove_alphablending] ( enabled |disabled) Enable or disable alpha blending (transparency). Alpha Blending - On Alpha Blending - Off High Quality [chailove_highquality] ( enabled |disabled) Enable or disable extra visual features. High Quality - On High Quality - Off","title":"Core options"},{"location":"library/chailove/#controllers","text":"The ChaiLove core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/chailove/#user-1-5-device-types","text":"None - Doesn't disable input. RetroPad - Joypad - Stay on this. RetroPad w/Analog - Joypad - There's no reason to switch to this.","title":"User 1 - 5 device types"},{"location":"library/chailove/#controller-tables","text":"","title":"Controller tables"},{"location":"library/chailove/#joypad","text":"Attention What the buttons do are game specific. User 1 - 5 Remap descriptors RetroPad Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R","title":"Joypad"},{"location":"library/chailove/#external-links","text":"ChaiScript Website ChaiLove API Documentation Website ChaiLove Github Wiki Libretro ChaiLove Core info file Libretro ChaiLove Github Repository Report Libretro ChaiLove Core Issues Here Floppy Bird","title":"External Links"},{"location":"library/chailove/#see-also","text":"","title":"See also"},{"location":"library/chailove/#custom-engine","text":"Lua Engine (Lutro)","title":"Custom Engine"},{"location":"library/citra/","text":"Nintendo - 3DS (Citra) \u00b6 Background \u00b6 Citra is an experimental open-source Nintendo 3DS emulator/debugger written in C++. It is written with portability in mind. The Citra core has been authored by Citra Emulation Project The Citra core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here . Requirements \u00b6 OpenGL 3.3 or higher Warning There is currently no \u2018working\u2019 macOS version available. This is because this core requires OpenGL core 3.3 context, and RetroArch on macOS currently does not support this. We will have to add support for this to a future version of RetroArch on macOS before this core will start to work on it. Extensions \u00b6 Content that can be loaded by the Citra core have the following file extensions: .3ds .3dsx .elf .axf .cci .cxi .app RetroArch database(s) that are associated with the Citra core: Nintendo - Nintendo 3DS Features \u00b6 Frontend-level settings or features that the Citra core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The Citra core's library name is 'Citra' The Citra core saves/loads to/from these directories. Frontend's Save directory Citra System and Save files Geometry and timing \u00b6 The Citra core's core provided FPS is 60.0 The Citra core's core provided sample rate is 32728 Hz The Citra core's base width is (Base width) The Citra core's base height is (Base height) The Citra core's max width is (Max width) The Citra core's max height is (Max height) The Citra core's core provided aspect ratio is (Ratio) Core options \u00b6 The Citra core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Enable CPU JIT [citra_use_cpu_jit] ( enabled |disabled) Enable Citra's 'dynarmic' dynamic recomplier. Can improve performance. Instructions that are not implemented by the recompiler fall back into the interpreter CPU core. If disabled, Citra will solely use the Interpreter CPU core. Enable hardware renderer [citra_use_hw_renderer] ( enabled |disabled) Awaiting description. Enable shader JIT [citra_use_shader_jit] ( enabled |disabled) Awaiting description. Resolution scale factor [citra_resolution_factor] ( 1x (Native) |2x|3x|4x|5x|6x|7x|8x|9x|10x) Self-explanatory. Screen layout positioning - Default Top-Bottom Screen Screen layout positioning - Single Screen Only Screen layout positioning - Large Screen, Small Screen) Screen layout positioning [citra_layout_option] ( Default Top-Bottom Screen |Single Screen Only|Large Screen, Small Screen|Side by Side) Awaiting description. Prominent 3DS screen [citra_swap_screen] ( Top |Bottom) Awaiting description. Right analog function [citra_analog_function] ( C-Stick and Touchscreen Pointer |Touchscreen Pointer|C-Stick) Awaiting description. Emulated pointer deadzone (%) [citra_deadzone] ( 15 |20|25|30|35|0|5|10) Awaiting description. Enable virtual SD card [citra_use_virtual_sd] ( enabled |disabled) Awaiting description. Savegame location [citra_use_libretro_save_path] ( LibRetro Default |Citra Default) Awaiting description. 3DS system model [citra_is_new_3ds] ( Old 3DS |New 3DS) Awaiting description. 3DS system region [citra_region_value] ( Auto |Japan|USA|Europe|Australia|China|Korea|Taiwan) Awaiting description. \"Enable GDB stub [citra_use_gdbstub] ( disabled |enabled) Awaiting description. Joypad \u00b6 User 1 input descriptors RetroPad Inputs Citra inputs B B Y Y Select Select Start Start Up Up Down Down Left Left Right Right A A X X L L R R ZL ZL ZR ZR Home Home Touch Screen Touch Touch Screen Touch X Circle Pad X Y Circle Pad Y X Right analog function Y Right analog function Mouse \u00b6 RetroMouse Inputs Citra inputs Mouse Cursor Touchscreen Pointer Mouse 1 Touch Screen Touch Pointer \u00b6 RetroPointer Inputs Citra inputs or Pointer Position Touchscreen Pointer or Pointer Pressed Touch Screen Touch Compatibility \u00b6 Citra Game Compatibility List External Links \u00b6 Official Citra Website Official Citra Github Repository Libretro Citra Core info file Libretro Citra Github Repository Report Libretro Citra Core Issues Here Nintendo - Nintendo 3DS \u00b6 Nintendo - 3DS (Citra Canary/Experimental)","title":"Nintendo - 3DS (Citra)"},{"location":"library/citra/#nintendo-3ds-citra","text":"","title":"Nintendo - 3DS (Citra)"},{"location":"library/citra/#background","text":"Citra is an experimental open-source Nintendo 3DS emulator/debugger written in C++. It is written with portability in mind. The Citra core has been authored by Citra Emulation Project The Citra core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Background"},{"location":"library/citra/#requirements","text":"OpenGL 3.3 or higher Warning There is currently no \u2018working\u2019 macOS version available. This is because this core requires OpenGL core 3.3 context, and RetroArch on macOS currently does not support this. We will have to add support for this to a future version of RetroArch on macOS before this core will start to work on it.","title":"Requirements"},{"location":"library/citra/#extensions","text":"Content that can be loaded by the Citra core have the following file extensions: .3ds .3dsx .elf .axf .cci .cxi .app RetroArch database(s) that are associated with the Citra core: Nintendo - Nintendo 3DS","title":"Extensions"},{"location":"library/citra/#features","text":"Frontend-level settings or features that the Citra core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/citra/#directories","text":"The Citra core's library name is 'Citra' The Citra core saves/loads to/from these directories. Frontend's Save directory Citra System and Save files","title":"Directories"},{"location":"library/citra/#geometry-and-timing","text":"The Citra core's core provided FPS is 60.0 The Citra core's core provided sample rate is 32728 Hz The Citra core's base width is (Base width) The Citra core's base height is (Base height) The Citra core's max width is (Max width) The Citra core's max height is (Max height) The Citra core's core provided aspect ratio is (Ratio)","title":"Geometry and timing"},{"location":"library/citra/#core-options","text":"The Citra core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Enable CPU JIT [citra_use_cpu_jit] ( enabled |disabled) Enable Citra's 'dynarmic' dynamic recomplier. Can improve performance. Instructions that are not implemented by the recompiler fall back into the interpreter CPU core. If disabled, Citra will solely use the Interpreter CPU core. Enable hardware renderer [citra_use_hw_renderer] ( enabled |disabled) Awaiting description. Enable shader JIT [citra_use_shader_jit] ( enabled |disabled) Awaiting description. Resolution scale factor [citra_resolution_factor] ( 1x (Native) |2x|3x|4x|5x|6x|7x|8x|9x|10x) Self-explanatory. Screen layout positioning - Default Top-Bottom Screen Screen layout positioning - Single Screen Only Screen layout positioning - Large Screen, Small Screen) Screen layout positioning [citra_layout_option] ( Default Top-Bottom Screen |Single Screen Only|Large Screen, Small Screen|Side by Side) Awaiting description. Prominent 3DS screen [citra_swap_screen] ( Top |Bottom) Awaiting description. Right analog function [citra_analog_function] ( C-Stick and Touchscreen Pointer |Touchscreen Pointer|C-Stick) Awaiting description. Emulated pointer deadzone (%) [citra_deadzone] ( 15 |20|25|30|35|0|5|10) Awaiting description. Enable virtual SD card [citra_use_virtual_sd] ( enabled |disabled) Awaiting description. Savegame location [citra_use_libretro_save_path] ( LibRetro Default |Citra Default) Awaiting description. 3DS system model [citra_is_new_3ds] ( Old 3DS |New 3DS) Awaiting description. 3DS system region [citra_region_value] ( Auto |Japan|USA|Europe|Australia|China|Korea|Taiwan) Awaiting description. \"Enable GDB stub [citra_use_gdbstub] ( disabled |enabled) Awaiting description.","title":"Core options"},{"location":"library/citra/#joypad","text":"User 1 input descriptors RetroPad Inputs Citra inputs B B Y Y Select Select Start Start Up Up Down Down Left Left Right Right A A X X L L R R ZL ZL ZR ZR Home Home Touch Screen Touch Touch Screen Touch X Circle Pad X Y Circle Pad Y X Right analog function Y Right analog function","title":"Joypad"},{"location":"library/citra/#mouse","text":"RetroMouse Inputs Citra inputs Mouse Cursor Touchscreen Pointer Mouse 1 Touch Screen Touch","title":"Mouse"},{"location":"library/citra/#pointer","text":"RetroPointer Inputs Citra inputs or Pointer Position Touchscreen Pointer or Pointer Pressed Touch Screen Touch","title":"Pointer"},{"location":"library/citra/#compatibility","text":"Citra Game Compatibility List","title":"Compatibility"},{"location":"library/citra/#external-links","text":"Official Citra Website Official Citra Github Repository Libretro Citra Core info file Libretro Citra Github Repository Report Libretro Citra Core Issues Here","title":"External Links"},{"location":"library/citra/#nintendo-nintendo-3ds","text":"Nintendo - 3DS (Citra Canary/Experimental)","title":"Nintendo - Nintendo 3DS"},{"location":"library/citra_canary/","text":"Nintendo - 3DS (Citra Canary/Experimental) \u00b6 Background \u00b6 Citra is an experimental open-source Nintendo 3DS emulator/debugger written in C++. It is written with portability in mind. Citra Canary is the new performance-optimized version of Citra. The Citra Canary/Experimental core has been authored by Citra Emulation Project The Citra Canary/Experimental core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here . Requirements \u00b6 OpenGL 3.3 or higher Warning There is currently no \u2018working\u2019 macOS version available. This is because this core requires OpenGL core 3.3 context, and RetroArch on macOS currently does not support this. We will have to add support for this to a future version of RetroArch on macOS before this core will start to work on it. Extensions \u00b6 Content that can be loaded by the Citra Canary/Experimental core have the following file extensions: .3ds .3dsx .elf .axf .cci .cxi .app RetroArch database(s) that are associated with the Citra Canary/Experimental core: Nintendo - Nintendo 3DS Features \u00b6 Frontend-level settings or features that the Citra Canary/Experimental core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The Citra Canary/Experimental core's library name is 'Citra' The Citra Canary/Experimental core saves/loads to/from these directories. Frontend's Save directory Citra System and Save files Geometry and timing \u00b6 The Citra Canary/Experimental core's core provided FPS is 60.0 The Citra Canary/Experimental core's core provided sample rate is 32728 Hz The Citra Canary/Experimental core's base width is (Base width) The Citra Canary/Experimental core's base height is (Base height) The Citra Canary/Experimental core's max width is (Max width) The Citra Canary/Experimental core's max height is (Max height) The Citra Canary/Experimental core's core provided aspect ratio is (Ratio) Core options \u00b6 The Citra Canary/Experimental core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Enable CPU JIT [citra_use_cpu_jit] ( enabled |disabled) Enable Citra's 'dynarmic' dynamic recomplier. Can improve performance. Instructions that are not implemented by the recompiler fall back into the interpreter CPU core. If disabled, Citra will solely use the Interpreter CPU core. Select Renderer [citra_renderer] ( enabled |disabled) Awaiting description. Enable shader JIT [citra_use_shader_jit] ( enabled |disabled) Awaiting description. Resolution scale factor [citra_resolution_factor] ( 1x (Native) |2x|3x|4x|5x|6x|7x|8x|9x|10x) Self-explanatory. Screen layout positioning - Default Top-Bottom Screen Screen layout positioning - Single Screen Only Screen layout positioning - Large Screen, Small Screen) Screen layout positioning [citra_layout_option] ( Default Top-Bottom Screen |Single Screen Only|Large Screen, Small Screen|Side by Side) Awaiting description. Prominent 3DS screen [citra_swap_screen] ( Top |Bottom) Awaiting description. Right analog function [citra_analog_function] ( C-Stick and Touchscreen Pointer |Touchscreen Pointer|C-Stick) Awaiting description. Emulated pointer deadzone (%) [citra_deadzone] ( 15 |20|25|30|35|0|5|10) Awaiting description. What hardware shaders to enable [citra_hw_shaders] ( None |Partial|Full) Awaiting description. Enables accurate hardware shaders (infinity * 0 = 0), required for some games, though slow on some hardware [citra_use_accurate_mul] ( enabled |disabled) Awaiting description. Enable virtual SD card [citra_use_virtual_sd] ( enabled |disabled) Awaiting description. Savegame location [citra_use_libretro_save_path] ( LibRetro Default |Citra Default) Awaiting description. 3DS system model [citra_is_new_3ds] ( Old 3DS |New 3DS) Awaiting description. 3DS system region [citra_region_value] ( Auto |Japan|USA|Europe|Australia|China|Korea|Taiwan) Awaiting description. \"Enable GDB stub [citra_use_gdbstub] ( disabled |enabled) Awaiting description. Joypad \u00b6 User 1 input descriptors RetroPad Inputs Citra inputs B B Y Y Select Select Start Start Up Up Down Down Left Left Right Right A A X X L L R R ZL ZL ZR ZR Home Home Touch Screen Touch Touch Screen Touch X Circle Pad X Y Circle Pad Y X Right analog function Y Right analog function Mouse \u00b6 RetroMouse Inputs Citra inputs Mouse Cursor Touchscreen Pointer Mouse 1 Touch Screen Touch Pointer \u00b6 RetroPointer Inputs Citra inputs or Pointer Position Touchscreen Pointer or Pointer Pressed Touch Screen Touch Compatibility \u00b6 Citra Game Compatibility List External Links \u00b6 Official Citra Canary/Experimental Website Official Citra Canary/Experimental Github Repository Libretro Citra Canary/Experimental Core info file Libretro Citra Canary/Experimental Github Repository Report Libretro Citra Canary/Experimental Core Issues Here Nintendo - Nintendo 3DS \u00b6 Nintendo - 3DS (Citra)","title":"Nintendo - 3DS (Citra Canary/Experimental)"},{"location":"library/citra_canary/#nintendo-3ds-citra-canaryexperimental","text":"","title":"Nintendo - 3DS (Citra Canary/Experimental)"},{"location":"library/citra_canary/#background","text":"Citra is an experimental open-source Nintendo 3DS emulator/debugger written in C++. It is written with portability in mind. Citra Canary is the new performance-optimized version of Citra. The Citra Canary/Experimental core has been authored by Citra Emulation Project The Citra Canary/Experimental core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Background"},{"location":"library/citra_canary/#requirements","text":"OpenGL 3.3 or higher Warning There is currently no \u2018working\u2019 macOS version available. This is because this core requires OpenGL core 3.3 context, and RetroArch on macOS currently does not support this. We will have to add support for this to a future version of RetroArch on macOS before this core will start to work on it.","title":"Requirements"},{"location":"library/citra_canary/#extensions","text":"Content that can be loaded by the Citra Canary/Experimental core have the following file extensions: .3ds .3dsx .elf .axf .cci .cxi .app RetroArch database(s) that are associated with the Citra Canary/Experimental core: Nintendo - Nintendo 3DS","title":"Extensions"},{"location":"library/citra_canary/#features","text":"Frontend-level settings or features that the Citra Canary/Experimental core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/citra_canary/#directories","text":"The Citra Canary/Experimental core's library name is 'Citra' The Citra Canary/Experimental core saves/loads to/from these directories. Frontend's Save directory Citra System and Save files","title":"Directories"},{"location":"library/citra_canary/#geometry-and-timing","text":"The Citra Canary/Experimental core's core provided FPS is 60.0 The Citra Canary/Experimental core's core provided sample rate is 32728 Hz The Citra Canary/Experimental core's base width is (Base width) The Citra Canary/Experimental core's base height is (Base height) The Citra Canary/Experimental core's max width is (Max width) The Citra Canary/Experimental core's max height is (Max height) The Citra Canary/Experimental core's core provided aspect ratio is (Ratio)","title":"Geometry and timing"},{"location":"library/citra_canary/#core-options","text":"The Citra Canary/Experimental core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Enable CPU JIT [citra_use_cpu_jit] ( enabled |disabled) Enable Citra's 'dynarmic' dynamic recomplier. Can improve performance. Instructions that are not implemented by the recompiler fall back into the interpreter CPU core. If disabled, Citra will solely use the Interpreter CPU core. Select Renderer [citra_renderer] ( enabled |disabled) Awaiting description. Enable shader JIT [citra_use_shader_jit] ( enabled |disabled) Awaiting description. Resolution scale factor [citra_resolution_factor] ( 1x (Native) |2x|3x|4x|5x|6x|7x|8x|9x|10x) Self-explanatory. Screen layout positioning - Default Top-Bottom Screen Screen layout positioning - Single Screen Only Screen layout positioning - Large Screen, Small Screen) Screen layout positioning [citra_layout_option] ( Default Top-Bottom Screen |Single Screen Only|Large Screen, Small Screen|Side by Side) Awaiting description. Prominent 3DS screen [citra_swap_screen] ( Top |Bottom) Awaiting description. Right analog function [citra_analog_function] ( C-Stick and Touchscreen Pointer |Touchscreen Pointer|C-Stick) Awaiting description. Emulated pointer deadzone (%) [citra_deadzone] ( 15 |20|25|30|35|0|5|10) Awaiting description. What hardware shaders to enable [citra_hw_shaders] ( None |Partial|Full) Awaiting description. Enables accurate hardware shaders (infinity * 0 = 0), required for some games, though slow on some hardware [citra_use_accurate_mul] ( enabled |disabled) Awaiting description. Enable virtual SD card [citra_use_virtual_sd] ( enabled |disabled) Awaiting description. Savegame location [citra_use_libretro_save_path] ( LibRetro Default |Citra Default) Awaiting description. 3DS system model [citra_is_new_3ds] ( Old 3DS |New 3DS) Awaiting description. 3DS system region [citra_region_value] ( Auto |Japan|USA|Europe|Australia|China|Korea|Taiwan) Awaiting description. \"Enable GDB stub [citra_use_gdbstub] ( disabled |enabled) Awaiting description.","title":"Core options"},{"location":"library/citra_canary/#joypad","text":"User 1 input descriptors RetroPad Inputs Citra inputs B B Y Y Select Select Start Start Up Up Down Down Left Left Right Right A A X X L L R R ZL ZL ZR ZR Home Home Touch Screen Touch Touch Screen Touch X Circle Pad X Y Circle Pad Y X Right analog function Y Right analog function","title":"Joypad"},{"location":"library/citra_canary/#mouse","text":"RetroMouse Inputs Citra inputs Mouse Cursor Touchscreen Pointer Mouse 1 Touch Screen Touch","title":"Mouse"},{"location":"library/citra_canary/#pointer","text":"RetroPointer Inputs Citra inputs or Pointer Position Touchscreen Pointer or Pointer Pressed Touch Screen Touch","title":"Pointer"},{"location":"library/citra_canary/#compatibility","text":"Citra Game Compatibility List","title":"Compatibility"},{"location":"library/citra_canary/#external-links","text":"Official Citra Canary/Experimental Website Official Citra Canary/Experimental Github Repository Libretro Citra Canary/Experimental Core info file Libretro Citra Canary/Experimental Github Repository Report Libretro Citra Canary/Experimental Core Issues Here","title":"External Links"},{"location":"library/citra_canary/#nintendo-nintendo-3ds","text":"Nintendo - 3DS (Citra)","title":"Nintendo - Nintendo 3DS"},{"location":"library/craft/","text":"Minecraft (Craft) \u00b6 Background \u00b6 A simple Minecraft clone written in C using modern OpenGL (shaders). Features \u00b6 Simple but nice looking terrain generation using simplex noise. Biomes Water More than 20 types of blocks and more can be added easily. Supports plants (grass, flowers, trees, etc.) and transparency (glass). Simple clouds in the sky (they don't move). Day / night cycles and a textured sky dome. More sophisticated sunrise/sunset color blending Ambient occlusion for basic shading of blocks. World changes persisted in a sqlite3 database. Configurable draw distance. The draw distance has a big effect on the framerate, a draw distance of 1 or 2 can make this core playable even on very lightweight computers. Configurable field of view. Gamepad support (including analog stick support) configurable analog sensitivity and deadzones, preliminary mouse and keyboard support. Configurable resolutions, up to 4K. A \u2018Jumping Flash\u2019 mode that allows you to jump infinitely into the air all while the camera faces downwards. The Craft core has been authored by Michael Fogleman The Craft core is licensed under MIT A summary of the licenses behind RetroArch and its cores can be found here . Requirements \u00b6 OpenGL or OpenGL ES How to start the Craft core: \u00b6 To start the Craft core, go to RetroArch's main menu screen. Select 'Load Core', then 'Craft'. Now, select 'Start Core'. The content should now start running! Features \u00b6 Frontend-level settings or features that the Craft core respects. Feature Supported Restart \u2715 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The Craft core's library name is 'Craft' The Craft core saves/loads to/from these directories. Frontend's System directory File Description craft.db World data Geometry and timing \u00b6 The Craft core's core provided FPS is 60.0 The Craft core's core provided sample rate is 48000 Hz The Craft core's base width is 640 The Craft core's base height is 480 The Craft core's max width is 640 The Craft core's max height is 480 The Craft core's core provided aspect ratio is 16/9 Core options \u00b6 The Craft core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Resolution (restart) [craft_resolution] ( 640x480 |320x200|640x400|960x600|1280x800|1600x1000|1920x1200|2240x1400|2560x1600|2880x1800|3200x2000|3520x2200|3840x2400|7680x4320|15360x8640|16000x9000|320x240|320x480|360x200|360x240|360x400|360x480|400x224|480x272|512x224|512x240|512x384|512x512|640x224|640x240|640x448|720x576|800x480|800x600|960x720|1024x768|1280x720|1366x768|1600x900|1920x1080|2048x2048|4096x4096) Configure the resolution. Resolution - 320x240 Resolution - 1920x1080 Show info text [craft_show_info_text] ( disabled |enabled) Show game information in the upper left corner of Craft. Show info text - Off Show info text - On Jumping Flash mode ( Off /On): Enabling this allows you to jump infinitely into the air all while the camera faces downwards. Field of view [craft_field_of_view] ( 65 to 150 in increments of 5) Configure the field of view. Field of view - 65 Field of view - 125 Draw distance [craft_draw_distance] (1 to 32 in increments of 1. 10 is default ) Configure the draw distance. Draw distance - 10 Draw distance - 32 Inverted aim [craft_inverted_aim] ( disabled |enabled) Invert up and down crosshair aiming controls for the RetroPad and the RetroMouse. Right analog sensitivity [craft_analog_sensitivity] ( 0.0150 to 0.0500 in increments of 0.0025) Modify the RetroPad right analog stick's sensitivity. Analog deadzone size [craft_deadzone_radius] ( 0.010 to 0.200 in increments of 0.005) Modify RetroPad analog sticks' deadzone. Joypad \u00b6 RetroPad Inputs Craft Inputs Jump Destroy block Zoom out Move forwards Move backwards Move crosshair left Move crosshair right Next block Place block Move left Move right Move crosshair up Move crosshair down X Move left/right Y Move up/down X Move crosshair left/right Y Move crosshair up.down Keyboard \u00b6 RetroKeyboard Inputs Craft Inputs Keyboard Up Move forwards Keyboard Down Move backwards Keyboard Right Move crosshair left Keyboard Left Move crosshair right Keyboard Right Shift Zoom out Mouse \u00b6 RetroMouse Inputs Craft Inputs Mouse Cursor Move crosshair Mouse 1 Destroy block Mouse 2 Place block Mouse 3 Copy block Wheel Up Previous block Wheel Down Next block External Links \u00b6 Official Craft Website Official Craft Github Repository Libretro Craft Core info file Libretro Craft Github Repository Report Libretro Craft Core Issues Here","title":"Minecraft (Craft)"},{"location":"library/craft/#minecraft-craft","text":"","title":"Minecraft (Craft)"},{"location":"library/craft/#background","text":"A simple Minecraft clone written in C using modern OpenGL (shaders).","title":"Background"},{"location":"library/craft/#features","text":"Simple but nice looking terrain generation using simplex noise. Biomes Water More than 20 types of blocks and more can be added easily. Supports plants (grass, flowers, trees, etc.) and transparency (glass). Simple clouds in the sky (they don't move). Day / night cycles and a textured sky dome. More sophisticated sunrise/sunset color blending Ambient occlusion for basic shading of blocks. World changes persisted in a sqlite3 database. Configurable draw distance. The draw distance has a big effect on the framerate, a draw distance of 1 or 2 can make this core playable even on very lightweight computers. Configurable field of view. Gamepad support (including analog stick support) configurable analog sensitivity and deadzones, preliminary mouse and keyboard support. Configurable resolutions, up to 4K. A \u2018Jumping Flash\u2019 mode that allows you to jump infinitely into the air all while the camera faces downwards. The Craft core has been authored by Michael Fogleman The Craft core is licensed under MIT A summary of the licenses behind RetroArch and its cores can be found here .","title":"Features"},{"location":"library/craft/#requirements","text":"OpenGL or OpenGL ES","title":"Requirements"},{"location":"library/craft/#how-to-start-the-craft-core","text":"To start the Craft core, go to RetroArch's main menu screen. Select 'Load Core', then 'Craft'. Now, select 'Start Core'. The content should now start running!","title":"How to start the Craft core:"},{"location":"library/craft/#features_1","text":"Frontend-level settings or features that the Craft core respects. Feature Supported Restart \u2715 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/craft/#directories","text":"The Craft core's library name is 'Craft' The Craft core saves/loads to/from these directories. Frontend's System directory File Description craft.db World data","title":"Directories"},{"location":"library/craft/#geometry-and-timing","text":"The Craft core's core provided FPS is 60.0 The Craft core's core provided sample rate is 48000 Hz The Craft core's base width is 640 The Craft core's base height is 480 The Craft core's max width is 640 The Craft core's max height is 480 The Craft core's core provided aspect ratio is 16/9","title":"Geometry and timing"},{"location":"library/craft/#core-options","text":"The Craft core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Resolution (restart) [craft_resolution] ( 640x480 |320x200|640x400|960x600|1280x800|1600x1000|1920x1200|2240x1400|2560x1600|2880x1800|3200x2000|3520x2200|3840x2400|7680x4320|15360x8640|16000x9000|320x240|320x480|360x200|360x240|360x400|360x480|400x224|480x272|512x224|512x240|512x384|512x512|640x224|640x240|640x448|720x576|800x480|800x600|960x720|1024x768|1280x720|1366x768|1600x900|1920x1080|2048x2048|4096x4096) Configure the resolution. Resolution - 320x240 Resolution - 1920x1080 Show info text [craft_show_info_text] ( disabled |enabled) Show game information in the upper left corner of Craft. Show info text - Off Show info text - On Jumping Flash mode ( Off /On): Enabling this allows you to jump infinitely into the air all while the camera faces downwards. Field of view [craft_field_of_view] ( 65 to 150 in increments of 5) Configure the field of view. Field of view - 65 Field of view - 125 Draw distance [craft_draw_distance] (1 to 32 in increments of 1. 10 is default ) Configure the draw distance. Draw distance - 10 Draw distance - 32 Inverted aim [craft_inverted_aim] ( disabled |enabled) Invert up and down crosshair aiming controls for the RetroPad and the RetroMouse. Right analog sensitivity [craft_analog_sensitivity] ( 0.0150 to 0.0500 in increments of 0.0025) Modify the RetroPad right analog stick's sensitivity. Analog deadzone size [craft_deadzone_radius] ( 0.010 to 0.200 in increments of 0.005) Modify RetroPad analog sticks' deadzone.","title":"Core options"},{"location":"library/craft/#joypad","text":"RetroPad Inputs Craft Inputs Jump Destroy block Zoom out Move forwards Move backwards Move crosshair left Move crosshair right Next block Place block Move left Move right Move crosshair up Move crosshair down X Move left/right Y Move up/down X Move crosshair left/right Y Move crosshair up.down","title":"Joypad"},{"location":"library/craft/#keyboard","text":"RetroKeyboard Inputs Craft Inputs Keyboard Up Move forwards Keyboard Down Move backwards Keyboard Right Move crosshair left Keyboard Left Move crosshair right Keyboard Right Shift Zoom out","title":"Keyboard"},{"location":"library/craft/#mouse","text":"RetroMouse Inputs Craft Inputs Mouse Cursor Move crosshair Mouse 1 Destroy block Mouse 2 Place block Mouse 3 Copy block Wheel Up Previous block Wheel Down Next block","title":"Mouse"},{"location":"library/craft/#external-links","text":"Official Craft Website Official Craft Github Repository Libretro Craft Core info file Libretro Craft Github Repository Report Libretro Craft Core Issues Here","title":"External Links"},{"location":"library/crocods/","text":"Amstrad - CPC (CrocoDS) \u00b6 Background \u00b6 Based on Win-CPC. CrocoDS was originally an Amstrad CPC emulator created for the Nintendo DS and was ported to libretro some time after. Author/License \u00b6 The CrocoDS core has been authored by RedBug The CrocoDS core is licensed under MIT A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the CrocoDS core have the following file extensions: .dsk .sna . kcr Databases \u00b6 RetroArch database(s) that are associated with the CrocoDS core: Amstrad - CPC Features \u00b6 Frontend-level settings or features that the CrocoDS core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2715 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The CrocoDS core's internal core name is 'crocods' The CrocoDS core saves/loads to/from these directories. Frontend's State directory 'content-name'.state# (State) Geometry and timing \u00b6 The CrocoDS core's core provided FPS is 50 The CrocoDS core's core provided sample rate is 44100 Hz The CrocoDS core's core provided aspect ratio is 1 Core options \u00b6 The CrocoDS core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Color Monitor [crocods_greenmonitor] ( color |green) Self-explanatory. Color Monitor - color Color Monitor - green Resize [crocods_resize] ( Auto |320x200|Overscan) Self-explanatory. Resize - 320x200 Resize - Overscan Speed hack [crocods_hack] ( no |yes) Awaiting description. Controllers \u00b6 The CrocoDS core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 - 2 device types \u00b6 None - Doesn't disable input. There's no reason to switch to this. RetroPad - Joypad RetroKeyboard - Joypad - Keyboard inputs are always active. Has keymapper support. Controller tables \u00b6 Joypad \u00b6 User 1 Remap descriptors RetroPad Inputs CrocoDS core inputs JOY_FIRE2 NIL Pause SPARE Start RETURN Up JOY_UP Down JOY_DOWN Left JOY_LEFT Right JOY_RIGHT JOY_FIRE1 NIL NIL NIL User 2 Remap descriptors RetroPad Inputs CrocoDS core inputs SPARE NIL SPARE RETURN CURSOR_UP CURSOR_DOWN CURSOR_LEFT CURSOR_RIGHT SPARE NIL NIL NIL Keyboard \u00b6 RetroKeyboard Inputs CrocoDS core Inputs Keyboard Backspace DEL Keyboard Tab TAB Keyboard Return RETURN Keyboard Escape ESC Keyboard Space SPARE Keyboard Comma , COMMA Keyboard Minus - MINUS Keyboard Period . DOT Keyboard 0 0 Keyboard 1 1 Keyboard 2 2 Keyboard 3 3 Keyboard 4 4 Keyboard 5 5 Keyboard 6 6 Keyboard 7 7 Keyboard 8 8 Keyboard 9 9 Keyboard Semicolon ; COLON Keyboard Equals = HAT Keyboard Left Bracket [ AT Keyboard Right Bracket ] OPEN_SQUARE_BRACKET Keyboard a A Keyboard b B Keyboard c C Keyboard d D Keyboard e E Keyboard f F Keyboard g G Keyboard h H Keyboard i I Keyboard j J Keyboard k K Keyboard l L Keyboard m M Keyboard n N Keyboard o O Keyboard p P Keyboard q Q Keyboard r R Keyboard s S Keyboard t T Keyboard u U Keyboard v V Keyboard w W Keyboard x X Keyboard y Y Keyboard z Z Keyboard Delete JOY_LEFT Keyboard Keypad 0 F0 Keyboard Keypad 1 F1 Keyboard Keypad 2 F2 Keyboard Keypad 3 F3 Keyboard Keypad 4 F4 Keyboard Keypad 5 F5 Keyboard Keypad 6 F6 Keyboard Keypad 7 F7 Keyboard Keypad 8 F8 Keyboard Keypad 9 F9 Keyboard Keypad Period . FDOT Keyboard Keypad Enter SMALL_ENTER Keyboard Up CURSOR_UP Keyboard Down CURSOR_DOWN Keyboard Right CURSOR_RIGHT Keyboard Left CURSOR_LEFT Keyboard Insert JOY_FIRE1 Keyboard Home JOY_UP Keyboard End JOY_DOWN Keyboard Page Up JOY_FIRE2 Keyboard Page Down JOY_RIGHT Keyboard Caps Lock CAPS_LOCK Keyboard Right Shift SHIFT Keyboard Left Shift SHIFT Keyboard Right Control CONTROL Keyboard Left Control CONTROL External Links \u00b6 Official CrocoDS Github Repository Libretro CrocoDS Core info file Libretro CrocoDS Github Repository Report Libretro CrocoDS Core Issues Here See also \u00b6 Amstrad - CPC \u00b6 Amstrad - CPC (Caprice32)","title":"Amstrad - CPC (CrocoDS)"},{"location":"library/crocods/#amstrad-cpc-crocods","text":"","title":"Amstrad - CPC (CrocoDS)"},{"location":"library/crocods/#background","text":"Based on Win-CPC. CrocoDS was originally an Amstrad CPC emulator created for the Nintendo DS and was ported to libretro some time after.","title":"Background"},{"location":"library/crocods/#authorlicense","text":"The CrocoDS core has been authored by RedBug The CrocoDS core is licensed under MIT A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/crocods/#extensions","text":"Content that can be loaded by the CrocoDS core have the following file extensions: .dsk .sna . kcr","title":"Extensions"},{"location":"library/crocods/#databases","text":"RetroArch database(s) that are associated with the CrocoDS core: Amstrad - CPC","title":"Databases"},{"location":"library/crocods/#features","text":"Frontend-level settings or features that the CrocoDS core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2715 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/crocods/#directories","text":"The CrocoDS core's internal core name is 'crocods' The CrocoDS core saves/loads to/from these directories. Frontend's State directory 'content-name'.state# (State)","title":"Directories"},{"location":"library/crocods/#geometry-and-timing","text":"The CrocoDS core's core provided FPS is 50 The CrocoDS core's core provided sample rate is 44100 Hz The CrocoDS core's core provided aspect ratio is 1","title":"Geometry and timing"},{"location":"library/crocods/#core-options","text":"The CrocoDS core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Color Monitor [crocods_greenmonitor] ( color |green) Self-explanatory. Color Monitor - color Color Monitor - green Resize [crocods_resize] ( Auto |320x200|Overscan) Self-explanatory. Resize - 320x200 Resize - Overscan Speed hack [crocods_hack] ( no |yes) Awaiting description.","title":"Core options"},{"location":"library/crocods/#controllers","text":"The CrocoDS core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/crocods/#user-1-2-device-types","text":"None - Doesn't disable input. There's no reason to switch to this. RetroPad - Joypad RetroKeyboard - Joypad - Keyboard inputs are always active. Has keymapper support.","title":"User 1 - 2 device types"},{"location":"library/crocods/#controller-tables","text":"","title":"Controller tables"},{"location":"library/crocods/#joypad","text":"User 1 Remap descriptors RetroPad Inputs CrocoDS core inputs JOY_FIRE2 NIL Pause SPARE Start RETURN Up JOY_UP Down JOY_DOWN Left JOY_LEFT Right JOY_RIGHT JOY_FIRE1 NIL NIL NIL User 2 Remap descriptors RetroPad Inputs CrocoDS core inputs SPARE NIL SPARE RETURN CURSOR_UP CURSOR_DOWN CURSOR_LEFT CURSOR_RIGHT SPARE NIL NIL NIL","title":"Joypad"},{"location":"library/crocods/#keyboard","text":"RetroKeyboard Inputs CrocoDS core Inputs Keyboard Backspace DEL Keyboard Tab TAB Keyboard Return RETURN Keyboard Escape ESC Keyboard Space SPARE Keyboard Comma , COMMA Keyboard Minus - MINUS Keyboard Period . DOT Keyboard 0 0 Keyboard 1 1 Keyboard 2 2 Keyboard 3 3 Keyboard 4 4 Keyboard 5 5 Keyboard 6 6 Keyboard 7 7 Keyboard 8 8 Keyboard 9 9 Keyboard Semicolon ; COLON Keyboard Equals = HAT Keyboard Left Bracket [ AT Keyboard Right Bracket ] OPEN_SQUARE_BRACKET Keyboard a A Keyboard b B Keyboard c C Keyboard d D Keyboard e E Keyboard f F Keyboard g G Keyboard h H Keyboard i I Keyboard j J Keyboard k K Keyboard l L Keyboard m M Keyboard n N Keyboard o O Keyboard p P Keyboard q Q Keyboard r R Keyboard s S Keyboard t T Keyboard u U Keyboard v V Keyboard w W Keyboard x X Keyboard y Y Keyboard z Z Keyboard Delete JOY_LEFT Keyboard Keypad 0 F0 Keyboard Keypad 1 F1 Keyboard Keypad 2 F2 Keyboard Keypad 3 F3 Keyboard Keypad 4 F4 Keyboard Keypad 5 F5 Keyboard Keypad 6 F6 Keyboard Keypad 7 F7 Keyboard Keypad 8 F8 Keyboard Keypad 9 F9 Keyboard Keypad Period . FDOT Keyboard Keypad Enter SMALL_ENTER Keyboard Up CURSOR_UP Keyboard Down CURSOR_DOWN Keyboard Right CURSOR_RIGHT Keyboard Left CURSOR_LEFT Keyboard Insert JOY_FIRE1 Keyboard Home JOY_UP Keyboard End JOY_DOWN Keyboard Page Up JOY_FIRE2 Keyboard Page Down JOY_RIGHT Keyboard Caps Lock CAPS_LOCK Keyboard Right Shift SHIFT Keyboard Left Shift SHIFT Keyboard Right Control CONTROL Keyboard Left Control CONTROL","title":"Keyboard"},{"location":"library/crocods/#external-links","text":"Official CrocoDS Github Repository Libretro CrocoDS Core info file Libretro CrocoDS Github Repository Report Libretro CrocoDS Core Issues Here","title":"External Links"},{"location":"library/crocods/#see-also","text":"","title":"See also"},{"location":"library/crocods/#amstrad-cpc","text":"Amstrad - CPC (Caprice32)","title":"Amstrad - CPC"},{"location":"library/desmume/","text":"Nintendo - DS (DeSmuME) \u00b6 Background \u00b6 DeSmuME is a Nintendo DS emulator http://desmume.org Author/License \u00b6 The DeSmuME core has been authored by YopYop156 Zeromus The DeSmuME core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the DeSmuME core have the following file extensions: .nds .bin Databases \u00b6 RetroArch database(s) that are associated with the DeSmuME core: Nintendo - Nintendo DS Nintendo - Nintendo DS Decrypted Nintendo - Nintendo DS (Download Play) BIOS \u00b6 Required or optional firmware files go in the frontend's system directory. Warning In order for the firmware files to be loaded by the DeSmuME core, the 'Use External BIOS/Firmware (restart)' core option must be set to enabled. Filename Description md5sum firmware.bin NDS Firmware - Optional 145eaef5bd3037cbc247c213bb3da1b3 bios7.bin ARM7 BIOS - Optional df692a80a5b1bc90728bc3dfc76cd948 bios9.bin ARM9 BIOS - Optional a392174eb3e572fed6447e956bde4b25 Features \u00b6 Frontend-level settings or features that the DeSmuME core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 (Not Download Play, Link-Cable or Wi-Fi emulation) Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2714 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The DeSmuME core's library name is 'DeSmuME' The DeSmuME core saves/loads to/from these directories. Frontend's Save directory File Description *.dsv Cartridge battery save firmware.dfc Firmware settings save Frontend's State directory File Description *.state State Geometry and timing \u00b6 The DeSmuME core's core provided FPS is 60 The DeSmuME core's core provided sample rate is 44100 Hz The DeSmuME core's base width is dependent on the 'Screen layout' core option . The DeSmuME core's base height is dependent on the 'Screen layout' core option . The DeSmuME core's max width is dependent on the 'Screen layout' core option . The DeSmuME core's max height is dependent on the 'Screen layout' core option . The DeSmuME core's core provided aspect ratio is dependent on the 'Screen layout' core option . Nickname \u00b6 The Nintendo DS' system nickname can be configured via RetroArch's Username setting in the User Menu. Core options \u00b6 The DeSmuME core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Firmware Language [desmume_firmware_language] ( Auto |English|Japanese|French|German|Italian|Spanish) Choose the language of the firmware. Use External BIOS/Firmware (restart) [desmume_use_external_bios] ( disabled |enabled) When set to enabled, the DeSmuME core will use the external firmware files found in RetroArch's System Directory. Look at the BIOS section for more information. Boot Into BIOS (interpreter and external bios only) [desmume_boot_into_bios] ( disabled |enabled) For proper functionality of this core option. The 'CPU Mode' core option must be set to interpreter and the 'Use External BIOS/Firmware' core option must be set to enabled. Also, you must have external firmware files in RetroArch's System Directory. When set to enabled, the DeSmuME core will boot into the Nintendo DS firmware screen upon content load. Any settings changed in the firmware screen will be saved to firmware.dfc in RetroArch's Save directory. Load Game Into Memory (restart) [desmume_load_to_memory] ( disabled |enabled) Loads the entire game into memory before startup. Will decrease in-game loading times at the cost of increased game startup times. CPU Cores [desmume_num_cores] ( 1 |2|3|4) Configure how many CPU cores the DeSmuME core will use. Please note that, in general, DeSmuME benefits more from few fast CPUs than from many slow CPUs. For example, a dual-core 3.9GHz CPU will run DeSmuME much faster than a 12-core 1.6GHz CPU. CPU Mode [desmume_cpu_mode] ( jit |interpreter) Choose to run CPU emulation through the Interpreter engine or the JIT Dynamic Recomplier engine. Interpreter has better compatibility than JIT Dynamic Recompiler. Some games that fail when using JIT Dynamic Recompiler will work fine with Interpreter. The tradeoff here is that Interpreter has much lower performance than JIT Dynamic Recompiler. Please note that the default setting for this core option is dependent on your hardware. The JIT Dynamic Recompiler is not available on all hardware (e.g. Android devices). JIT Block Size [desmume_jit_block_size] ( 12 |13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32|33|34|35|36|37|38|39|40|41|42|43|44|45|46|47|48|49|50|51|52|53|54|55|56|57|58|59|60|61|62|63|64|65|66|67|68|69|70|71|72|73|74|75|76|77|78|79|80|81|82|83|84|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|0|1|2|3|4|5|6|7|8|9|10|11) This core option is only available when the 'CPU mode' core option to set to jit. You may need to tune the block size to prevent some games from breaking. 1 = most accurate, 100 = fastest. Enable Advanced Bus-Level Timing [desmume_advanced_timing] ( enabled |disabled) This will improve or fix some games but it is very performance demanding. Disable this if you want more speed. Frameskip [desmume_frameskip] ( 0 |1|2|3|4|5|6|7|8|9) Choose how much frames should be skipped to improve performance at the expense of visual smoothness. It is generally safe to choose 1 or 2 if you don't mind a slightly choppier game, in order to get a speedup. If screens seem stuck or screen flickering becomes unacceptable, pick a different frame skip value. Internal Resolution (restart) [desmume_internal_resolution] ( 256x192 |512x384|768x576|1024x768|1280x960|1536x1152|1792x1344|2048x1536|2304x1728|2560x1920) Configure the resolution. Requires a restart. Internal resolution - 256x192 Internal resolution - 2560x1920 OpenGL Rasterizer (restart) [desmume_opengl_mode] ( disabled |enabled) Enable OpenGL renderer. The Frontend's video driver must be set to gl. OpenGL: Color Depth (restart) [desmume_color_depth] ( 16-bit |32-bit) 32-bit allows full color support from the DS (natively 6-bit). OpenGL Rasterizer core option must be set to enabled. OpenGL: Multisampling (restart) [desmume_gfx_multisampling] ( disabled |2|4|8|16|32) Awaiting description. OpenGL: Texture Smoothing [desmume_gfx_texture_smoothing] ( disabled |enabled) Awaiting description. Soft3D: High-res Color Interpolation [desmume_gfx_highres_interpolate_color] ( disabled |enabled) Awaiting description. Soft3D: Line Hack [desmume_gfx_linehack] ( enabled |disabled) Fixes some graphical bugs involving lines, but causes some other bugs. Not many games use lines. Soft3D: Texture Hack [desmume_gfx_txthack] ( disabled |enabled) Awaiting description. Edge Marking [desmume_gfx_edgemark] ( enabled |disabled) Awaiting description. \"Texture Scaling (xBrz) [desmume_gfx_texture_scaling] ( 1 |2|4) Awaiting description. Texture Deposterization [desmume_gfx_texture_deposterize] ( disabled |enabled) Awaiting description. Screen Layout [desmume_screens_layout] ( top/bottom |bottom/top|left/right|right/left|top only|bottom only|quick switch|hybrid/top|hybrid/bottom) Self-explanatory. Screen layout - top/bottom Screen layout - bottom/top Screen layout - left/right Screen layout - right/left Screen layout - top only Screen layout - bottom only Screen layout - hybrid/top Screen Gap [desmume_screens_gap] (0 to 100 in increments of 1. 0 is default. ) Self explanatory. Screen Gap - 0 Screen Gap - 100 Hybrid Layout: Scale (restart) [desmume_hybrid_layout_scale] ( 1 |3) Self explanatory. The 'Screen layout' core option must be set to a hybrid setting for this to function properly. Hybrid layout scale - 1 Hybrid layout scale - 3 Hybrid Layout: Show Both Screens [desmume_hybrid_showboth_screens] ( enabled |disabled) Removes the small top screen when the 'Screen layout' core option is set to hybrid/top Removes the small bottom screen when the 'Screen layout' core option is set to hybrid/bottom Hybrid Layout: Cursor Always on Small Screen [desmume_hybrid_cursor_always_smallscreen] ( enabled |disabled) Self explanatory. Disablng this allows you to use the stylus on the big bottom screen when the 'Screen layout' core option is set to hybrid/bottom. Mouse/Pointer [desmume_pointer_mouse] ( enabled |disabled) Enabling this allows inputs for the stylus. Pointer Type [desmume_pointer_type] ( mouse |touch) Setting this to mouse allows you to use mouse inputs for the stylus Setting this to touch allows you to use mouse/touch inputs for the stylus (e.g. Touch controls on Android devices). Mouse Speed [desmume_mouse_speed] ( 1.0 |1.5|2.0|0.01|0.02|0.03|0.04|0.05|0.125|0.25|0.5) The Pointer type core option must be set to mouse Adjust mouse speed for the stylus. Pointer Rotation [desmume_input_rotation] ( 0 |90|180|270) Rotate pointer controls This is can be used in conjuction with RetroArch's Rotation setting. Pointer Mode for Left Analog [desmume_pointer_device_l] ( none |emulated|absolute|pressed) Awaiting description. Pointer Mode for Right Analog [desmume_pointer_device_r] ( none |emulated|absolute|pressed) Awaiting description. Emulated Pointer Deadzone Percent [desmume_pointer_device_deadzone] ( 15 |20|25|30|35|0|5|10\") Awaiting description. Emulated Pointer Acceleration Modifier Percent [desmume_pointer_device_acceleration_mod] ( 0 |1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32|33|34|35|36|37|38|39|40|41|42|43|44|45|46|47|48|49|50|51|52|53|54|55|56|57|58|59|60|61|62|63|64|65|66|67|68|69|70|71|72|73|74|75|76|77|78|79|80|81|82|83|84|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100) Awaiting description. Emulated Stylus Pressure Modifier Percent [desmume_pointer_stylus_pressure] ( 50 |51|52|53|54|55|56|57|58|59|60|61|62|63|64|65|66|67|68|69|70|71|72|73|74|75|76|77|78|79|80|81|82|83|84|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32|33|34|35|36|37|38|39|40|41|42|43|44|45|46|47|48|49) Awaiting description. Pointer Colour [desmume_pointer_colour] ( white |black|red|blue|yellow) Awaiting description. Microphone Button Noise Type [desmume_mic_mode] ( pattern |random) Configure microphone input settings. With the pattern setting, DeSmuME will use its internal noise sample for microphone input which works for many games that want you to blow on the mic. With the random setting, DeSmuME will use random whitenoise for microphone input which will work for games that require blowing but which don't work with the internal noise sample. Controllers \u00b6 The DeSmuME core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 device types \u00b6 None - Doesn't disable input. There's no reason to switch to this. RetroPad - Joypad - Stay on this. RetroPad w/Analog - Joypad - Same as RetroPad. There's no reason to switch to this. Other controllers \u00b6 Stylus - Pointer or Mouse - The DesmuME 2015 core will emulate stylus inputs using the mouse API or the pointer API depending on what the 'Pointer type' core option is set to. Device tables \u00b6 Joypad \u00b6 User 1 input descriptors RetroPad Inputs DeSmuME inputs B B Y Y Select Select Start Start Up Up Down Down Left Left Right Right A A X X L L R R Lid Close/Open Lid Close/Open Tap Stylus Tap Stylus Make Microphone Noise Toggle Microphone Quick Screen Switch Quick Screen Switch X Pointer mode l-analog X Y Pointer mode l-analog Y X Pointer mode r-analog X Y Pointer mode r-analog Y Mouse \u00b6 RetroMouse Inputs DeSmuME inputs Mouse Cursor Stylus Mouse 1 Stylus Press Pointer \u00b6 RetroPointer Inputs DeSmuME inputs or Pointer Position Stylus or Pointer Pressed Stylus Press Compatibility \u00b6 Same as upstream standalone. External Links \u00b6 Official DeSmuME Website Official DeSmuME Github Repository Libretro DeSmuME Core info file Libretro DeSmuME Github Repository Report Libretro DeSmuME Core Issues Here See also \u00b6 Nintendo - Nintendo DS + Decrypted + (Download Play) \u00b6 Nintendo - DS (DeSmuME 2015) Nintendo - DS (melonDS)","title":"Nintendo - DS (DeSmuME)"},{"location":"library/desmume/#nintendo-ds-desmume","text":"","title":"Nintendo - DS (DeSmuME)"},{"location":"library/desmume/#background","text":"DeSmuME is a Nintendo DS emulator http://desmume.org","title":"Background"},{"location":"library/desmume/#authorlicense","text":"The DeSmuME core has been authored by YopYop156 Zeromus The DeSmuME core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/desmume/#extensions","text":"Content that can be loaded by the DeSmuME core have the following file extensions: .nds .bin","title":"Extensions"},{"location":"library/desmume/#databases","text":"RetroArch database(s) that are associated with the DeSmuME core: Nintendo - Nintendo DS Nintendo - Nintendo DS Decrypted Nintendo - Nintendo DS (Download Play)","title":"Databases"},{"location":"library/desmume/#bios","text":"Required or optional firmware files go in the frontend's system directory. Warning In order for the firmware files to be loaded by the DeSmuME core, the 'Use External BIOS/Firmware (restart)' core option must be set to enabled. Filename Description md5sum firmware.bin NDS Firmware - Optional 145eaef5bd3037cbc247c213bb3da1b3 bios7.bin ARM7 BIOS - Optional df692a80a5b1bc90728bc3dfc76cd948 bios9.bin ARM9 BIOS - Optional a392174eb3e572fed6447e956bde4b25","title":"BIOS"},{"location":"library/desmume/#features","text":"Frontend-level settings or features that the DeSmuME core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 (Not Download Play, Link-Cable or Wi-Fi emulation) Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2714 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/desmume/#directories","text":"The DeSmuME core's library name is 'DeSmuME' The DeSmuME core saves/loads to/from these directories. Frontend's Save directory File Description *.dsv Cartridge battery save firmware.dfc Firmware settings save Frontend's State directory File Description *.state State","title":"Directories"},{"location":"library/desmume/#geometry-and-timing","text":"The DeSmuME core's core provided FPS is 60 The DeSmuME core's core provided sample rate is 44100 Hz The DeSmuME core's base width is dependent on the 'Screen layout' core option . The DeSmuME core's base height is dependent on the 'Screen layout' core option . The DeSmuME core's max width is dependent on the 'Screen layout' core option . The DeSmuME core's max height is dependent on the 'Screen layout' core option . The DeSmuME core's core provided aspect ratio is dependent on the 'Screen layout' core option .","title":"Geometry and timing"},{"location":"library/desmume/#nickname","text":"The Nintendo DS' system nickname can be configured via RetroArch's Username setting in the User Menu.","title":"Nickname"},{"location":"library/desmume/#core-options","text":"The DeSmuME core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Firmware Language [desmume_firmware_language] ( Auto |English|Japanese|French|German|Italian|Spanish) Choose the language of the firmware. Use External BIOS/Firmware (restart) [desmume_use_external_bios] ( disabled |enabled) When set to enabled, the DeSmuME core will use the external firmware files found in RetroArch's System Directory. Look at the BIOS section for more information. Boot Into BIOS (interpreter and external bios only) [desmume_boot_into_bios] ( disabled |enabled) For proper functionality of this core option. The 'CPU Mode' core option must be set to interpreter and the 'Use External BIOS/Firmware' core option must be set to enabled. Also, you must have external firmware files in RetroArch's System Directory. When set to enabled, the DeSmuME core will boot into the Nintendo DS firmware screen upon content load. Any settings changed in the firmware screen will be saved to firmware.dfc in RetroArch's Save directory. Load Game Into Memory (restart) [desmume_load_to_memory] ( disabled |enabled) Loads the entire game into memory before startup. Will decrease in-game loading times at the cost of increased game startup times. CPU Cores [desmume_num_cores] ( 1 |2|3|4) Configure how many CPU cores the DeSmuME core will use. Please note that, in general, DeSmuME benefits more from few fast CPUs than from many slow CPUs. For example, a dual-core 3.9GHz CPU will run DeSmuME much faster than a 12-core 1.6GHz CPU. CPU Mode [desmume_cpu_mode] ( jit |interpreter) Choose to run CPU emulation through the Interpreter engine or the JIT Dynamic Recomplier engine. Interpreter has better compatibility than JIT Dynamic Recompiler. Some games that fail when using JIT Dynamic Recompiler will work fine with Interpreter. The tradeoff here is that Interpreter has much lower performance than JIT Dynamic Recompiler. Please note that the default setting for this core option is dependent on your hardware. The JIT Dynamic Recompiler is not available on all hardware (e.g. Android devices). JIT Block Size [desmume_jit_block_size] ( 12 |13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32|33|34|35|36|37|38|39|40|41|42|43|44|45|46|47|48|49|50|51|52|53|54|55|56|57|58|59|60|61|62|63|64|65|66|67|68|69|70|71|72|73|74|75|76|77|78|79|80|81|82|83|84|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|0|1|2|3|4|5|6|7|8|9|10|11) This core option is only available when the 'CPU mode' core option to set to jit. You may need to tune the block size to prevent some games from breaking. 1 = most accurate, 100 = fastest. Enable Advanced Bus-Level Timing [desmume_advanced_timing] ( enabled |disabled) This will improve or fix some games but it is very performance demanding. Disable this if you want more speed. Frameskip [desmume_frameskip] ( 0 |1|2|3|4|5|6|7|8|9) Choose how much frames should be skipped to improve performance at the expense of visual smoothness. It is generally safe to choose 1 or 2 if you don't mind a slightly choppier game, in order to get a speedup. If screens seem stuck or screen flickering becomes unacceptable, pick a different frame skip value. Internal Resolution (restart) [desmume_internal_resolution] ( 256x192 |512x384|768x576|1024x768|1280x960|1536x1152|1792x1344|2048x1536|2304x1728|2560x1920) Configure the resolution. Requires a restart. Internal resolution - 256x192 Internal resolution - 2560x1920 OpenGL Rasterizer (restart) [desmume_opengl_mode] ( disabled |enabled) Enable OpenGL renderer. The Frontend's video driver must be set to gl. OpenGL: Color Depth (restart) [desmume_color_depth] ( 16-bit |32-bit) 32-bit allows full color support from the DS (natively 6-bit). OpenGL Rasterizer core option must be set to enabled. OpenGL: Multisampling (restart) [desmume_gfx_multisampling] ( disabled |2|4|8|16|32) Awaiting description. OpenGL: Texture Smoothing [desmume_gfx_texture_smoothing] ( disabled |enabled) Awaiting description. Soft3D: High-res Color Interpolation [desmume_gfx_highres_interpolate_color] ( disabled |enabled) Awaiting description. Soft3D: Line Hack [desmume_gfx_linehack] ( enabled |disabled) Fixes some graphical bugs involving lines, but causes some other bugs. Not many games use lines. Soft3D: Texture Hack [desmume_gfx_txthack] ( disabled |enabled) Awaiting description. Edge Marking [desmume_gfx_edgemark] ( enabled |disabled) Awaiting description. \"Texture Scaling (xBrz) [desmume_gfx_texture_scaling] ( 1 |2|4) Awaiting description. Texture Deposterization [desmume_gfx_texture_deposterize] ( disabled |enabled) Awaiting description. Screen Layout [desmume_screens_layout] ( top/bottom |bottom/top|left/right|right/left|top only|bottom only|quick switch|hybrid/top|hybrid/bottom) Self-explanatory. Screen layout - top/bottom Screen layout - bottom/top Screen layout - left/right Screen layout - right/left Screen layout - top only Screen layout - bottom only Screen layout - hybrid/top Screen Gap [desmume_screens_gap] (0 to 100 in increments of 1. 0 is default. ) Self explanatory. Screen Gap - 0 Screen Gap - 100 Hybrid Layout: Scale (restart) [desmume_hybrid_layout_scale] ( 1 |3) Self explanatory. The 'Screen layout' core option must be set to a hybrid setting for this to function properly. Hybrid layout scale - 1 Hybrid layout scale - 3 Hybrid Layout: Show Both Screens [desmume_hybrid_showboth_screens] ( enabled |disabled) Removes the small top screen when the 'Screen layout' core option is set to hybrid/top Removes the small bottom screen when the 'Screen layout' core option is set to hybrid/bottom Hybrid Layout: Cursor Always on Small Screen [desmume_hybrid_cursor_always_smallscreen] ( enabled |disabled) Self explanatory. Disablng this allows you to use the stylus on the big bottom screen when the 'Screen layout' core option is set to hybrid/bottom. Mouse/Pointer [desmume_pointer_mouse] ( enabled |disabled) Enabling this allows inputs for the stylus. Pointer Type [desmume_pointer_type] ( mouse |touch) Setting this to mouse allows you to use mouse inputs for the stylus Setting this to touch allows you to use mouse/touch inputs for the stylus (e.g. Touch controls on Android devices). Mouse Speed [desmume_mouse_speed] ( 1.0 |1.5|2.0|0.01|0.02|0.03|0.04|0.05|0.125|0.25|0.5) The Pointer type core option must be set to mouse Adjust mouse speed for the stylus. Pointer Rotation [desmume_input_rotation] ( 0 |90|180|270) Rotate pointer controls This is can be used in conjuction with RetroArch's Rotation setting. Pointer Mode for Left Analog [desmume_pointer_device_l] ( none |emulated|absolute|pressed) Awaiting description. Pointer Mode for Right Analog [desmume_pointer_device_r] ( none |emulated|absolute|pressed) Awaiting description. Emulated Pointer Deadzone Percent [desmume_pointer_device_deadzone] ( 15 |20|25|30|35|0|5|10\") Awaiting description. Emulated Pointer Acceleration Modifier Percent [desmume_pointer_device_acceleration_mod] ( 0 |1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32|33|34|35|36|37|38|39|40|41|42|43|44|45|46|47|48|49|50|51|52|53|54|55|56|57|58|59|60|61|62|63|64|65|66|67|68|69|70|71|72|73|74|75|76|77|78|79|80|81|82|83|84|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100) Awaiting description. Emulated Stylus Pressure Modifier Percent [desmume_pointer_stylus_pressure] ( 50 |51|52|53|54|55|56|57|58|59|60|61|62|63|64|65|66|67|68|69|70|71|72|73|74|75|76|77|78|79|80|81|82|83|84|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32|33|34|35|36|37|38|39|40|41|42|43|44|45|46|47|48|49) Awaiting description. Pointer Colour [desmume_pointer_colour] ( white |black|red|blue|yellow) Awaiting description. Microphone Button Noise Type [desmume_mic_mode] ( pattern |random) Configure microphone input settings. With the pattern setting, DeSmuME will use its internal noise sample for microphone input which works for many games that want you to blow on the mic. With the random setting, DeSmuME will use random whitenoise for microphone input which will work for games that require blowing but which don't work with the internal noise sample.","title":"Core options"},{"location":"library/desmume/#controllers","text":"The DeSmuME core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/desmume/#user-1-device-types","text":"None - Doesn't disable input. There's no reason to switch to this. RetroPad - Joypad - Stay on this. RetroPad w/Analog - Joypad - Same as RetroPad. There's no reason to switch to this.","title":"User 1 device types"},{"location":"library/desmume/#other-controllers","text":"Stylus - Pointer or Mouse - The DesmuME 2015 core will emulate stylus inputs using the mouse API or the pointer API depending on what the 'Pointer type' core option is set to.","title":"Other controllers"},{"location":"library/desmume/#device-tables","text":"","title":"Device tables"},{"location":"library/desmume/#joypad","text":"User 1 input descriptors RetroPad Inputs DeSmuME inputs B B Y Y Select Select Start Start Up Up Down Down Left Left Right Right A A X X L L R R Lid Close/Open Lid Close/Open Tap Stylus Tap Stylus Make Microphone Noise Toggle Microphone Quick Screen Switch Quick Screen Switch X Pointer mode l-analog X Y Pointer mode l-analog Y X Pointer mode r-analog X Y Pointer mode r-analog Y","title":"Joypad"},{"location":"library/desmume/#mouse","text":"RetroMouse Inputs DeSmuME inputs Mouse Cursor Stylus Mouse 1 Stylus Press","title":"Mouse"},{"location":"library/desmume/#pointer","text":"RetroPointer Inputs DeSmuME inputs or Pointer Position Stylus or Pointer Pressed Stylus Press","title":"Pointer"},{"location":"library/desmume/#compatibility","text":"Same as upstream standalone.","title":"Compatibility"},{"location":"library/desmume/#external-links","text":"Official DeSmuME Website Official DeSmuME Github Repository Libretro DeSmuME Core info file Libretro DeSmuME Github Repository Report Libretro DeSmuME Core Issues Here","title":"External Links"},{"location":"library/desmume/#see-also","text":"","title":"See also"},{"location":"library/desmume/#nintendo-nintendo-ds-decrypted-download-play","text":"Nintendo - DS (DeSmuME 2015) Nintendo - DS (melonDS)","title":"Nintendo - Nintendo DS + Decrypted + (Download Play)"},{"location":"library/desmume_2015/","text":"Nintendo - DS (DeSmuME 2015) \u00b6 Background \u00b6 Port of Desmume to libretro based on Desmume SVN circa 2015. Author/License \u00b6 The DeSmuME 2015 core has been authored by YopYop156 Zeromus The DeSmuME 2015 core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the DeSmuME 2015 core have the following file extensions: .nds .bin Databases \u00b6 RetroArch database(s) that are associated with the DeSmuME 2015 core: Nintendo - Nintendo DS Nintendo - Nintendo DS Decrypted Nintendo - Nintendo DS (Download Play) Features \u00b6 Frontend-level settings or features that the DeSmuME 2015 core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 (Not Download Play, Link-Cable or Wi-Fi emulation) Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The DeSmuME 2015 core's library name is 'DeSmuME 2015' The DeSmuME 2015 core saves/loads to/from these directories. Frontend's Save directory File Description *.dsv Cartridge battery save Frontend's State directory File Description *.state# State Geometry and timing \u00b6 The DeSmuME 2015 core's core provided FPS is 60 The DeSmuME 2015 core's core provided sample rate is 44100 Hz The DeSmuME 2015 core's base width is dependent on the 'Screen layout' core option . The DeSmuME 2015 core's base height is dependent on the 'Screen layout' core option . The DeSmuME 2015 core's max width is dependent on the 'Screen layout' core option . The DeSmuME 2015 core's max height is dependent on the 'Screen layout' core option . The DeSmuME 2015 core's core provided aspect ratio is dependent on the 'Screen layout' core option . Nickname \u00b6 Changing the system nickname isn't currently supported by the DeSmuME 2015 core. Core options \u00b6 The DeSmuME 2015 core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Internal resolution (restart) [desmume_internal_resolution] ( 256x192 |512x384|768x576|1024x768|1280x960|1536x1152|1792x1344|2048x1536|2304x1728|2560x1920) Self explanatory. Please note that the DeSmuME core is only software rendered. Internal resolution - 256x192 Internal resolution - 2560x1920 CPU cores [desmume_num_cores] ( 1 |2|3|4) Configure how much CPU cores the DeSmuME core will use. Please note that, in general, DeSmuME benefits more from few fast CPUs than from many slow CPUs. For example, a dual-core 3.9GHz CPU will run DeSmuME much faster than a 12-core 1.6GHz CPU. CPU mode [desmume_cpu_mode] ( jit |interpreter) Choose to run CPU emulation through the Interpreter engine or the JIT Dynamic Recomplier engine. Interpreter has better compatibility than JIT Dynamic Recompiler. Some games that fail when using JIT Dynamic Recompiler will work fine with Interpreter. The tradeoff here is that Interpreter has much lower performance than JIT Dynamic Recompiler. Please note that the default setting for this core option is dependent on your hardware. The JIT Dynamic Recompiler is not available on all hardware (e.g. Android devices). JIT block size [desmume_jit_block_size] (0 to 100 in increments of 1. 12 is default .) This core option is only available when the 'CPU mode' core option to set to jit. You may need to tune the block size to prevent some games from breaking. 1 = most accurate, 100 = fastest. Screen layout [desmume_screens_layout] ( top/bottom |bottom/top|left/right|right/left|top only|bottom only|quick switch|hybrid/top|hybrid/bottom) Self-explanatory. Screen layout - top/bottom Screen layout - bottom/top Screen layout - left/right Screen layout - right/left Screen layout - top only Screen layout - bottom only Screen layout - hybrid/top Hybrid layout scale (restart) [desmume_hybrid_layout_scale] ( 1 |3) Self explanatory. The 'Screen layout' core option must be set to a hybrid setting for this to function properly. Hybrid layout scale - 1 Hybrid layout scale - 3 Hybrid layout show both screen [desmume_hybrid_showboth_screens] ( enabled |disabled) Removes the small top screen when the 'Screen layout' core option is set to hybrid/top Removes the small bottom screen when the 'Screen layout' core option is set to hybrid/bottom Hybrid layout cursor always on small screen [desmume_hybrid_cursor_always_smallscreen] ( enabled |disabled) Self explanatory. Disablng this allows you to use the stylus on the big bottom screen when the 'Screen layout' core option is set to hybrid/bottom. Enable mouse/pointer [desmume_pointer_mouse] ( enabled |disabled) Enabling this allows inputs for the stylus. Pointer type [desmume_pointer_type] ( mouse /touch) Setting this to mouse allows you to use mouse inputs for the stylus Setting this to touch allows you to use mouse/touch inputs for the stylus (e.g. Touch controls on Android devices). Mouse Speed [desmume_mouse_speed] ( 1.0 |1.5|2.0|0.125|0.25|0.5) The Pointer type core option must be set to mouse Adjust mouse speed for the stylus. Pointer Colour [desmume_pointer_colour] ( white |black|red|blue|yellow\") Configure the color of the stylus pointer. Pointer Colour - white Pointer Colour - black Pointer Colour - red Pointer Colour - blue Pointer Colour - yellow Pointer mode l-analog [desmume_pointer_device_l] ( none |emulated|absolute|pressed) Awaiting description. Pointer mode r-analog [desmume_pointer_device_r] ( none |emulated|absolute|pressed) Awaiting description. Emulated pointer deadzone percent [desmume_pointer_device_deadzone] ( 15 |20|25|30|35|0|5|10) Awaiting description. Emulated pointer acceleration modifier percent [desmume_pointer_device_acceleration_mod] (0 to 100 in increments of 1. 0 is default .) Awaiting description. Emulated stylus pressure modifier percent [desmume_pointer_stylus_pressure] (0 to 100 in increments of 1. 50 is default .) Configure the emulated pressure on the touchscreen from a stylus pressing on it. Enable emulated stylus jitter [desmume_pointer_stylus_jitter] ( disabled |enabled) Emulate the tiny jitter from a human hand when holding a stylus; some games were accidentally dependent on this. Load Game into Memory (restart) [desmume_load_to_memory] ( disabled |enabled) Loads the entire game into memory before startup. Will decrease in-game loading times at the cost of increased game startup times. Enable Advanced Bus-Level Timing [desmume_advanced_timing] ( enabled |disabled) This will improve or fix some games but it is very performance demanding. Disable this if you want more speed. Firmware language [desmume_firmware_language] ( Auto |English|Japanese|French|German|Italian|Spanish) Choose the language of the BIOS. Frameskip [desmume_frameskip] ( 0 |1|2|3|4|5|6|7|8|9) Choose how much frames should be skipped to improve performance at the expense of visual smoothness. It is generally safe to choose 1 or 2 if you don't mind a slightly choppier game, in order to get a speedup. If screens seem stuck or screen flickering becomes unacceptable, pick a different frame skip value. Screen Gap [desmume_screens_gap] (0 to 100 in increments of 1. 0 is default. ) Self explanatory. Screen Gap - 0 Screen Gap - 100 Enable Edgemark [desmume_gfx_edgemark] ( enabled |disabled) Awaiting description. Enable Line Hack [desmume_gfx_linehack] ( enabled |disabled) Fixes some graphical bugs involving lines, but causes some other bugs. Not many games use lines. Enable TXT Hack [desmume_gfx_txthack] ( disabled |enabled) Fixes text bugs in some games (e.g. Etrian Odyssey). You may need to toggle it off & on by scene. Force Microphone Enable [desmume_mic_force_enable] ( disabled |enabled) Self-explanatory. Microphone Simulation Settings [desmume_mic_mode] ( internal |sample|random|physical) Configure microphone input settings. With the internal setting, DeSmuME will use its internal noise sample for microphone input which works for many games that want you to blow on the mic. With the sample setting, you can supply your own microphone sample for microphone input. This may not work currently in the DeSmuME core . With the random setting, DeSmuME will use random whitenoise for microphone input which will work for games that require blowing but which don't work with the internal noise sample. With the physical setting, you can use your default recording device for microphone input. This may not work currently in the DeSmuME core . Controllers \u00b6 The DeSmuME 2015 core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 device types \u00b6 None - Doesn't disable input. There's no reason to switch to this. RetroPad - Joypad - Stay on this. RetroPad w/Analog - Joypad - Same as RetroPad. There's no reason to switch to this. Other devices \u00b6 Stylus - Pointer or Mouse - The DesmuME 2015 core will emulate stylus inputs using the mouse API or the pointer API depending on what the 'Pointer type' core option is set to. Device tables \u00b6 Joypad \u00b6 User 1 input descriptors RetroPad Inputs DeSmuME 2015 inputs B B Y Y Select Select Start Start Up Up Down Down Left Left Right Right A A X X L L R R Lid Close/Open Lid Close/Open Tap Stylus Tap Stylus Toggle Microphone Toggle Microphone Quick Screen Switch Quick Screen Switch X Pointer mode l-analog X Y Pointer mode l-analog Y X Pointer mode r-analog X Y Pointer mode r-analog Y Mouse \u00b6 RetroMouse Inputs DeSmuME 2015 inputs Mouse Cursor Stylus Mouse 1 Stylus Press Pointer \u00b6 RetroPointer Inputs DeSmuME 2015 inputs or Pointer Position Stylus or Pointer Pressed Stylus Press Compatibility \u00b6 Game Issue Alice in Wonderland Needs JIT Block Size 8 or smaller to get past title screen. Golden Sun: Dark Dawn (Europe) Runs very slowly. Buggy sound. Hotel Dusk: Room 215 Graphics glitches. Unintended \"scanlines\" appear on some screens. Pok\u00e9mon HeartGold (Europe) (Rev 10) Graphics glitches . Black pixels pop-ups in the top screen. Top screen goes black. Pok\u00e9mon SoulSilver (Europe) (Rev 10) Graphics glitches. Black pixels pop-ups in the top screen. Top screen goes black. Puppy Palace (U) / My Puppy Shop (E) Crashes in menus. Rune Factory (U) Random crashes. Rune Factory 2 (U) Random crashes. Ultimate Mortal Kombat 3 Runs very slowly. Yoshi Touch & Go Runs very slowly. Yu-Gi-Oh! 5D's WORLD CHAMPIONSHIP 2010 (J) Random crashes. External Links \u00b6 Official DeSmuME Website Official DeSmuME Github Repository Libretro DeSmuME 2015 Core info file Libretro DeSmuME 2015 Github Repository Report Libretro DeSmuME 2015 Core Issues Here See also \u00b6 Nintendo - Nintendo DS (Download Play) \u00b6 Nintendo - DS (DeSmuME) Nintendo - DS (melonDS) Nintendo - Nintendo DS Decrypted \u00b6 Nintendo - DS (DeSmuME) Nintendo - DS (melonDS) Nintendo - Nintendo DS \u00b6 Nintendo - DS (DeSmuME) Nintendo - DS (melonDS)","title":"Nintendo - DS (DeSmuME 2015)"},{"location":"library/desmume_2015/#nintendo-ds-desmume-2015","text":"","title":"Nintendo - DS (DeSmuME 2015)"},{"location":"library/desmume_2015/#background","text":"Port of Desmume to libretro based on Desmume SVN circa 2015.","title":"Background"},{"location":"library/desmume_2015/#authorlicense","text":"The DeSmuME 2015 core has been authored by YopYop156 Zeromus The DeSmuME 2015 core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/desmume_2015/#extensions","text":"Content that can be loaded by the DeSmuME 2015 core have the following file extensions: .nds .bin","title":"Extensions"},{"location":"library/desmume_2015/#databases","text":"RetroArch database(s) that are associated with the DeSmuME 2015 core: Nintendo - Nintendo DS Nintendo - Nintendo DS Decrypted Nintendo - Nintendo DS (Download Play)","title":"Databases"},{"location":"library/desmume_2015/#features","text":"Frontend-level settings or features that the DeSmuME 2015 core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 (Not Download Play, Link-Cable or Wi-Fi emulation) Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/desmume_2015/#directories","text":"The DeSmuME 2015 core's library name is 'DeSmuME 2015' The DeSmuME 2015 core saves/loads to/from these directories. Frontend's Save directory File Description *.dsv Cartridge battery save Frontend's State directory File Description *.state# State","title":"Directories"},{"location":"library/desmume_2015/#geometry-and-timing","text":"The DeSmuME 2015 core's core provided FPS is 60 The DeSmuME 2015 core's core provided sample rate is 44100 Hz The DeSmuME 2015 core's base width is dependent on the 'Screen layout' core option . The DeSmuME 2015 core's base height is dependent on the 'Screen layout' core option . The DeSmuME 2015 core's max width is dependent on the 'Screen layout' core option . The DeSmuME 2015 core's max height is dependent on the 'Screen layout' core option . The DeSmuME 2015 core's core provided aspect ratio is dependent on the 'Screen layout' core option .","title":"Geometry and timing"},{"location":"library/desmume_2015/#nickname","text":"Changing the system nickname isn't currently supported by the DeSmuME 2015 core.","title":"Nickname"},{"location":"library/desmume_2015/#core-options","text":"The DeSmuME 2015 core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Internal resolution (restart) [desmume_internal_resolution] ( 256x192 |512x384|768x576|1024x768|1280x960|1536x1152|1792x1344|2048x1536|2304x1728|2560x1920) Self explanatory. Please note that the DeSmuME core is only software rendered. Internal resolution - 256x192 Internal resolution - 2560x1920 CPU cores [desmume_num_cores] ( 1 |2|3|4) Configure how much CPU cores the DeSmuME core will use. Please note that, in general, DeSmuME benefits more from few fast CPUs than from many slow CPUs. For example, a dual-core 3.9GHz CPU will run DeSmuME much faster than a 12-core 1.6GHz CPU. CPU mode [desmume_cpu_mode] ( jit |interpreter) Choose to run CPU emulation through the Interpreter engine or the JIT Dynamic Recomplier engine. Interpreter has better compatibility than JIT Dynamic Recompiler. Some games that fail when using JIT Dynamic Recompiler will work fine with Interpreter. The tradeoff here is that Interpreter has much lower performance than JIT Dynamic Recompiler. Please note that the default setting for this core option is dependent on your hardware. The JIT Dynamic Recompiler is not available on all hardware (e.g. Android devices). JIT block size [desmume_jit_block_size] (0 to 100 in increments of 1. 12 is default .) This core option is only available when the 'CPU mode' core option to set to jit. You may need to tune the block size to prevent some games from breaking. 1 = most accurate, 100 = fastest. Screen layout [desmume_screens_layout] ( top/bottom |bottom/top|left/right|right/left|top only|bottom only|quick switch|hybrid/top|hybrid/bottom) Self-explanatory. Screen layout - top/bottom Screen layout - bottom/top Screen layout - left/right Screen layout - right/left Screen layout - top only Screen layout - bottom only Screen layout - hybrid/top Hybrid layout scale (restart) [desmume_hybrid_layout_scale] ( 1 |3) Self explanatory. The 'Screen layout' core option must be set to a hybrid setting for this to function properly. Hybrid layout scale - 1 Hybrid layout scale - 3 Hybrid layout show both screen [desmume_hybrid_showboth_screens] ( enabled |disabled) Removes the small top screen when the 'Screen layout' core option is set to hybrid/top Removes the small bottom screen when the 'Screen layout' core option is set to hybrid/bottom Hybrid layout cursor always on small screen [desmume_hybrid_cursor_always_smallscreen] ( enabled |disabled) Self explanatory. Disablng this allows you to use the stylus on the big bottom screen when the 'Screen layout' core option is set to hybrid/bottom. Enable mouse/pointer [desmume_pointer_mouse] ( enabled |disabled) Enabling this allows inputs for the stylus. Pointer type [desmume_pointer_type] ( mouse /touch) Setting this to mouse allows you to use mouse inputs for the stylus Setting this to touch allows you to use mouse/touch inputs for the stylus (e.g. Touch controls on Android devices). Mouse Speed [desmume_mouse_speed] ( 1.0 |1.5|2.0|0.125|0.25|0.5) The Pointer type core option must be set to mouse Adjust mouse speed for the stylus. Pointer Colour [desmume_pointer_colour] ( white |black|red|blue|yellow\") Configure the color of the stylus pointer. Pointer Colour - white Pointer Colour - black Pointer Colour - red Pointer Colour - blue Pointer Colour - yellow Pointer mode l-analog [desmume_pointer_device_l] ( none |emulated|absolute|pressed) Awaiting description. Pointer mode r-analog [desmume_pointer_device_r] ( none |emulated|absolute|pressed) Awaiting description. Emulated pointer deadzone percent [desmume_pointer_device_deadzone] ( 15 |20|25|30|35|0|5|10) Awaiting description. Emulated pointer acceleration modifier percent [desmume_pointer_device_acceleration_mod] (0 to 100 in increments of 1. 0 is default .) Awaiting description. Emulated stylus pressure modifier percent [desmume_pointer_stylus_pressure] (0 to 100 in increments of 1. 50 is default .) Configure the emulated pressure on the touchscreen from a stylus pressing on it. Enable emulated stylus jitter [desmume_pointer_stylus_jitter] ( disabled |enabled) Emulate the tiny jitter from a human hand when holding a stylus; some games were accidentally dependent on this. Load Game into Memory (restart) [desmume_load_to_memory] ( disabled |enabled) Loads the entire game into memory before startup. Will decrease in-game loading times at the cost of increased game startup times. Enable Advanced Bus-Level Timing [desmume_advanced_timing] ( enabled |disabled) This will improve or fix some games but it is very performance demanding. Disable this if you want more speed. Firmware language [desmume_firmware_language] ( Auto |English|Japanese|French|German|Italian|Spanish) Choose the language of the BIOS. Frameskip [desmume_frameskip] ( 0 |1|2|3|4|5|6|7|8|9) Choose how much frames should be skipped to improve performance at the expense of visual smoothness. It is generally safe to choose 1 or 2 if you don't mind a slightly choppier game, in order to get a speedup. If screens seem stuck or screen flickering becomes unacceptable, pick a different frame skip value. Screen Gap [desmume_screens_gap] (0 to 100 in increments of 1. 0 is default. ) Self explanatory. Screen Gap - 0 Screen Gap - 100 Enable Edgemark [desmume_gfx_edgemark] ( enabled |disabled) Awaiting description. Enable Line Hack [desmume_gfx_linehack] ( enabled |disabled) Fixes some graphical bugs involving lines, but causes some other bugs. Not many games use lines. Enable TXT Hack [desmume_gfx_txthack] ( disabled |enabled) Fixes text bugs in some games (e.g. Etrian Odyssey). You may need to toggle it off & on by scene. Force Microphone Enable [desmume_mic_force_enable] ( disabled |enabled) Self-explanatory. Microphone Simulation Settings [desmume_mic_mode] ( internal |sample|random|physical) Configure microphone input settings. With the internal setting, DeSmuME will use its internal noise sample for microphone input which works for many games that want you to blow on the mic. With the sample setting, you can supply your own microphone sample for microphone input. This may not work currently in the DeSmuME core . With the random setting, DeSmuME will use random whitenoise for microphone input which will work for games that require blowing but which don't work with the internal noise sample. With the physical setting, you can use your default recording device for microphone input. This may not work currently in the DeSmuME core .","title":"Core options"},{"location":"library/desmume_2015/#controllers","text":"The DeSmuME 2015 core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/desmume_2015/#user-1-device-types","text":"None - Doesn't disable input. There's no reason to switch to this. RetroPad - Joypad - Stay on this. RetroPad w/Analog - Joypad - Same as RetroPad. There's no reason to switch to this.","title":"User 1 device types"},{"location":"library/desmume_2015/#other-devices","text":"Stylus - Pointer or Mouse - The DesmuME 2015 core will emulate stylus inputs using the mouse API or the pointer API depending on what the 'Pointer type' core option is set to.","title":"Other devices"},{"location":"library/desmume_2015/#device-tables","text":"","title":"Device tables"},{"location":"library/desmume_2015/#joypad","text":"User 1 input descriptors RetroPad Inputs DeSmuME 2015 inputs B B Y Y Select Select Start Start Up Up Down Down Left Left Right Right A A X X L L R R Lid Close/Open Lid Close/Open Tap Stylus Tap Stylus Toggle Microphone Toggle Microphone Quick Screen Switch Quick Screen Switch X Pointer mode l-analog X Y Pointer mode l-analog Y X Pointer mode r-analog X Y Pointer mode r-analog Y","title":"Joypad"},{"location":"library/desmume_2015/#mouse","text":"RetroMouse Inputs DeSmuME 2015 inputs Mouse Cursor Stylus Mouse 1 Stylus Press","title":"Mouse"},{"location":"library/desmume_2015/#pointer","text":"RetroPointer Inputs DeSmuME 2015 inputs or Pointer Position Stylus or Pointer Pressed Stylus Press","title":"Pointer"},{"location":"library/desmume_2015/#compatibility","text":"Game Issue Alice in Wonderland Needs JIT Block Size 8 or smaller to get past title screen. Golden Sun: Dark Dawn (Europe) Runs very slowly. Buggy sound. Hotel Dusk: Room 215 Graphics glitches. Unintended \"scanlines\" appear on some screens. Pok\u00e9mon HeartGold (Europe) (Rev 10) Graphics glitches . Black pixels pop-ups in the top screen. Top screen goes black. Pok\u00e9mon SoulSilver (Europe) (Rev 10) Graphics glitches. Black pixels pop-ups in the top screen. Top screen goes black. Puppy Palace (U) / My Puppy Shop (E) Crashes in menus. Rune Factory (U) Random crashes. Rune Factory 2 (U) Random crashes. Ultimate Mortal Kombat 3 Runs very slowly. Yoshi Touch & Go Runs very slowly. Yu-Gi-Oh! 5D's WORLD CHAMPIONSHIP 2010 (J) Random crashes.","title":"Compatibility"},{"location":"library/desmume_2015/#external-links","text":"Official DeSmuME Website Official DeSmuME Github Repository Libretro DeSmuME 2015 Core info file Libretro DeSmuME 2015 Github Repository Report Libretro DeSmuME 2015 Core Issues Here","title":"External Links"},{"location":"library/desmume_2015/#see-also","text":"","title":"See also"},{"location":"library/desmume_2015/#nintendo-nintendo-ds-download-play","text":"Nintendo - DS (DeSmuME) Nintendo - DS (melonDS)","title":"Nintendo - Nintendo DS (Download Play)"},{"location":"library/desmume_2015/#nintendo-nintendo-ds-decrypted","text":"Nintendo - DS (DeSmuME) Nintendo - DS (melonDS)","title":"Nintendo - Nintendo DS Decrypted"},{"location":"library/desmume_2015/#nintendo-nintendo-ds","text":"Nintendo - DS (DeSmuME) Nintendo - DS (melonDS)","title":"Nintendo - Nintendo DS"},{"location":"library/dinothawr/","text":"Dinothawr \u00b6 Background \u00b6 Dinothawr is a block pushing puzzle game on slippery surfaces. Our hero is a dinosaur whose friends are trapped in ice. Through puzzles it is your task to free the dinos from their ice prison. How to start the Dinothawr core: \u00b6 To start the Dinothawr core, you need to obtain Dinothawr's data files. You can do this by going to RetroArch's main menu screen and selecting 'Online Updater'. From there, select 'Content Downloader'. Select 'Dinothawr', then select 'Dinothawr.zip'. This should download and extract this file to RetroArch's Downloads directory. Go back to RetroArch's main menu screen. Select 'Load Content', then 'Downloads'. Select the 'dinothawr' directory, then select 'dinothawr.game'. If you are asked which core to select, choose 'Dinothawr'. The content should now start running! Author/License \u00b6 The Dinothawr core has been authored by Themaister (programming, music, some level design) Agnes Heyer ((art, level design, some code) The Dinothawr core is licensed under Non-commercial A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the Dinothawr core have the following file extensions: .game Databases \u00b6 RetroArch database(s) that are associated with the Dinothawr core: Dinothawr Features \u00b6 Frontend-level settings or features that the Dinothawr core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The Dinothawr core's internal core name is 'Dinothawr' The Dinothawr core saves/loads to/from these directories. Frontend's Save directory dinothawr.srm (Save data) Geometry and timing \u00b6 The Dinothawr core's core provided FPS is (FPS) The Dinothawr core's core provided sample rate is (Rate) The Dinothawr core's core provided aspect ratio is (Ratio) Customizing / Hacking \u00b6 Dinothawr is fairly hackable. dinothawr.game is the game file itself. It is a simple XML file which points to all assets used by the game. Levels are organized in chapters. Levels themselves are created using the Tiled editor. If you want to try making your own levels, make sure you use the \"plain XML\" format for .tmx files and not the default zlib base64. Dinothawr - Level Design guide (pdf) Core options \u00b6 The Dinothawr core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Timer as FPS reference [dino_timer] ( enabled |disabled) Use timer as FPS reference. Controllers \u00b6 The Dinothawr core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 device types \u00b6 None - Doesn't disable input. RetroPad - Joypad - Stay on this. RetroPad w/Analog - Joypad - There's no reason to switch to this. Controller tables \u00b6 Joypad \u00b6 User 1 Remap descriptors RetroPad Inputs Push D-Pad Up D-Pad Down D-Pad Left D-Pad Right Menu Reset External Links \u00b6 Official/Libretro Dinothawr Github Repository Report Libretro Dinothawr Core Issues Here","title":"Dinothawr"},{"location":"library/dinothawr/#dinothawr","text":"","title":"Dinothawr"},{"location":"library/dinothawr/#background","text":"Dinothawr is a block pushing puzzle game on slippery surfaces. Our hero is a dinosaur whose friends are trapped in ice. Through puzzles it is your task to free the dinos from their ice prison.","title":"Background"},{"location":"library/dinothawr/#how-to-start-the-dinothawr-core","text":"To start the Dinothawr core, you need to obtain Dinothawr's data files. You can do this by going to RetroArch's main menu screen and selecting 'Online Updater'. From there, select 'Content Downloader'. Select 'Dinothawr', then select 'Dinothawr.zip'. This should download and extract this file to RetroArch's Downloads directory. Go back to RetroArch's main menu screen. Select 'Load Content', then 'Downloads'. Select the 'dinothawr' directory, then select 'dinothawr.game'. If you are asked which core to select, choose 'Dinothawr'. The content should now start running!","title":"How to start the Dinothawr core:"},{"location":"library/dinothawr/#authorlicense","text":"The Dinothawr core has been authored by Themaister (programming, music, some level design) Agnes Heyer ((art, level design, some code) The Dinothawr core is licensed under Non-commercial A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/dinothawr/#extensions","text":"Content that can be loaded by the Dinothawr core have the following file extensions: .game","title":"Extensions"},{"location":"library/dinothawr/#databases","text":"RetroArch database(s) that are associated with the Dinothawr core: Dinothawr","title":"Databases"},{"location":"library/dinothawr/#features","text":"Frontend-level settings or features that the Dinothawr core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/dinothawr/#directories","text":"The Dinothawr core's internal core name is 'Dinothawr' The Dinothawr core saves/loads to/from these directories. Frontend's Save directory dinothawr.srm (Save data)","title":"Directories"},{"location":"library/dinothawr/#geometry-and-timing","text":"The Dinothawr core's core provided FPS is (FPS) The Dinothawr core's core provided sample rate is (Rate) The Dinothawr core's core provided aspect ratio is (Ratio)","title":"Geometry and timing"},{"location":"library/dinothawr/#customizing-hacking","text":"Dinothawr is fairly hackable. dinothawr.game is the game file itself. It is a simple XML file which points to all assets used by the game. Levels are organized in chapters. Levels themselves are created using the Tiled editor. If you want to try making your own levels, make sure you use the \"plain XML\" format for .tmx files and not the default zlib base64. Dinothawr - Level Design guide (pdf)","title":"Customizing / Hacking"},{"location":"library/dinothawr/#core-options","text":"The Dinothawr core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Timer as FPS reference [dino_timer] ( enabled |disabled) Use timer as FPS reference.","title":"Core options"},{"location":"library/dinothawr/#controllers","text":"The Dinothawr core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/dinothawr/#user-1-device-types","text":"None - Doesn't disable input. RetroPad - Joypad - Stay on this. RetroPad w/Analog - Joypad - There's no reason to switch to this.","title":"User 1 device types"},{"location":"library/dinothawr/#controller-tables","text":"","title":"Controller tables"},{"location":"library/dinothawr/#joypad","text":"User 1 Remap descriptors RetroPad Inputs Push D-Pad Up D-Pad Down D-Pad Left D-Pad Right Menu Reset","title":"Joypad"},{"location":"library/dinothawr/#external-links","text":"Official/Libretro Dinothawr Github Repository Report Libretro Dinothawr Core Issues Here","title":"External Links"},{"location":"library/dolphin/","text":"Nintendo Gamecube/Wii (Dolphin) \u00b6 Background \u00b6 A Nintendo Gamecube/Wii emulator for Android, Windows, Mac and Linux, written in C++. The Dolphin core supports OpenGL , Vulkan , and Direct3D 11 rendering. The Dolphin core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here . Requirements \u00b6 OpenGL/Open GL ES 3.0 or higher for the OpenGL renderer. Vulkan for the Vulkan renderer. Direct3D 11 for the Direct3D 11 renderer. Setup \u00b6 For running properly, the Dolphin core requires to have the Dolphin Sys folder in the proper location. After downloading the core within RetroArch, execute the following steps: Get a copy of the Dolphin Sys folder. This can be done downloading the current source code. We provide two methods: one using Git and one without. If you have Git (if not, see the next option) Just clone the most recent version of the code by running: git clone --depth=1 https://github.com/libretro/dolphin.git **If you don't have Git ** You can download a zip file of the source code with the following URL: https://github.com/libretro/dolphin/archive/master.zip You can then extract it. After getting the code, enter in the folder containing it. The Sys folder you need is located in Data/Sys . This is the folder we will need to move/copy. Find RetroArch's system folder path Unless you customized your installation, the RetroArch configuration path is the one listed in the RGUI page . If you didn't change any value, the system folder is: RETROARCH_CONFIG_DIR/system . If you changed the default directory configuration, you should check the system_directory option in the RetroArch configuration file (usually retroarch.cfg ) to see which folder is used. In the RETROARCH_SYSTEM_FOLDER , create the dolphin-emu directory and move/copy the Sys folder within it. Ultimately, the Sys folder should be placed at a location similar to: RETROARCH_SYSTEM_FOLDER/dolphin-emu/Sys There is also currently a bug with this core and the GL driver that can be worked around by going to settings > user interface > show advanced settings ON and then going to settings > core > allow cores to change the video driver OFF. The Dolphin core will now work without issues. BIOS \u00b6 TODO/FIXME Extensions \u00b6 Content that can be loaded by the Dolphin core have the following file extensions: .elf .iso .gcm .dol .tgc .wbfs .ciso .gcz .wad RetroArch database(s) that are associated with the Dolphin core: Nintendo - GameCube Nintendo - Wii Features \u00b6 Frontend-level settings or features that the Dolphin core respects. Feature Supported Restart \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2714 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2714 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The Dolphin core's library name is 'Dolphin' TODO/FIXME Geometry and timing \u00b6 The Dolphin core's core provided FPS is 60 (for NTSC) / 50 (for PAL) The Dolphin core's core provided sample rate can be either 32000 Hz or 48000 Hz depending on user configuration The Dolphin core's base width is dependent on the 'Internal Resolution' core option The Dolphin core's base height is dependent on the 'Internal Resolution' core option The Dolphin core's max width is dependent on the 'Internal Resolution' core option The Dolphin core's max height is dependent on the 'Internal Resolution' core option The Dolphin core's core provided aspect ratio is 4/3. Language \u00b6 When the 'Language' core option is set to automatic, the default PPSSPP language setting will be pulled from RetroArch's Language setting. Internal Cheats \u00b6 Disabled by default. TODO/FIXME OpenGL \u00b6 Dolphin's OpenGL renderer can be used by setting RetroArch's video driver to gl. The common option for all operating systems is OpenGL, requiring hardware that supports OpenGL/Open GL ES 3.0 or higher. It is an older, pre-Vulkan API, slower than Vulkan but with better compatibility. If you encounter problems with other APIs, try this one. Vulkan \u00b6 Dolphin's Vulkan renderer can be used by setting RetroArch's video driver to vulkan. This is the latest and fastest API currently. It is most recommended for demanding less of your CPU, thus being the fastest. D3D11 \u00b6 Dolphin's Direct3D 11 renderer can be used by setting RetroArch's video driver to d3d11. In some cases Direct3D 11 may offer better performance than OpenGL, especially on integrated Intel graphics. Core options \u00b6 The Dolphin core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. CPU Core [ppsspp_cpu_core] ( jit |IR jit|interpreter) The jit setting enables the Dynamic Recomplier (Dynarec) for CPU emulation. The Dynarec is much faster than the interpreter setting and is the default, recommended mode for supported architectures. The interpreter setting enables the Interpreter for CPU emulation. The Interpreter is a very slow type of emulation and mostly useful for debug, but should work anywhere. The IR jit setting might be worth trying against games which are broken in the other two settings. CPU Clock Rate [ppsspp_locked_cpu_speed] ( off |222MHz|266MHz|333MHz) Allows you to lock the internal CPU clock of the emulator (of the emulated CPU). Larger clocks can ensure a more stable performance in certain games that present problems even on a real PSP, but it requires more powerful hardware. Lower clocks can help weak hardware have more comfortable gameplay, limiting FPS to a lower rate. Changing this option opens the door to several bugs that may compromise some games. In case of doubt, keep this on off. Language [dolphin_language] ( english |japanese|french|spanish|german|italian|dutch|portuguese|russian|korean|chinese_traditional|chinese_simplified) Configure the Dolphin core's system language. Joypad \u00b6 RetroPad Inputs User 1 input descriptors Cross Square Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right Circle Triangle L R X Analog X Y Analog Y Compatibility \u00b6 Compatibility Pages External Links \u00b6 Official Dolphin Website Official Dolphin Github Repository Libretro Dolphin Core info file Report Libretro Dolphin Core Issues Here","title":"Nintendo - GameCube/Wii (Dolphin)"},{"location":"library/dolphin/#nintendo-gamecubewii-dolphin","text":"","title":"Nintendo Gamecube/Wii (Dolphin)"},{"location":"library/dolphin/#background","text":"A Nintendo Gamecube/Wii emulator for Android, Windows, Mac and Linux, written in C++. The Dolphin core supports OpenGL , Vulkan , and Direct3D 11 rendering. The Dolphin core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Background"},{"location":"library/dolphin/#requirements","text":"OpenGL/Open GL ES 3.0 or higher for the OpenGL renderer. Vulkan for the Vulkan renderer. Direct3D 11 for the Direct3D 11 renderer.","title":"Requirements"},{"location":"library/dolphin/#setup","text":"For running properly, the Dolphin core requires to have the Dolphin Sys folder in the proper location. After downloading the core within RetroArch, execute the following steps: Get a copy of the Dolphin Sys folder. This can be done downloading the current source code. We provide two methods: one using Git and one without. If you have Git (if not, see the next option) Just clone the most recent version of the code by running: git clone --depth=1 https://github.com/libretro/dolphin.git **If you don't have Git ** You can download a zip file of the source code with the following URL: https://github.com/libretro/dolphin/archive/master.zip You can then extract it. After getting the code, enter in the folder containing it. The Sys folder you need is located in Data/Sys . This is the folder we will need to move/copy. Find RetroArch's system folder path Unless you customized your installation, the RetroArch configuration path is the one listed in the RGUI page . If you didn't change any value, the system folder is: RETROARCH_CONFIG_DIR/system . If you changed the default directory configuration, you should check the system_directory option in the RetroArch configuration file (usually retroarch.cfg ) to see which folder is used. In the RETROARCH_SYSTEM_FOLDER , create the dolphin-emu directory and move/copy the Sys folder within it. Ultimately, the Sys folder should be placed at a location similar to: RETROARCH_SYSTEM_FOLDER/dolphin-emu/Sys There is also currently a bug with this core and the GL driver that can be worked around by going to settings > user interface > show advanced settings ON and then going to settings > core > allow cores to change the video driver OFF. The Dolphin core will now work without issues.","title":"Setup"},{"location":"library/dolphin/#bios","text":"TODO/FIXME","title":"BIOS"},{"location":"library/dolphin/#extensions","text":"Content that can be loaded by the Dolphin core have the following file extensions: .elf .iso .gcm .dol .tgc .wbfs .ciso .gcz .wad RetroArch database(s) that are associated with the Dolphin core: Nintendo - GameCube Nintendo - Wii","title":"Extensions"},{"location":"library/dolphin/#features","text":"Frontend-level settings or features that the Dolphin core respects. Feature Supported Restart \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2714 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2714 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/dolphin/#directories","text":"The Dolphin core's library name is 'Dolphin' TODO/FIXME","title":"Directories"},{"location":"library/dolphin/#geometry-and-timing","text":"The Dolphin core's core provided FPS is 60 (for NTSC) / 50 (for PAL) The Dolphin core's core provided sample rate can be either 32000 Hz or 48000 Hz depending on user configuration The Dolphin core's base width is dependent on the 'Internal Resolution' core option The Dolphin core's base height is dependent on the 'Internal Resolution' core option The Dolphin core's max width is dependent on the 'Internal Resolution' core option The Dolphin core's max height is dependent on the 'Internal Resolution' core option The Dolphin core's core provided aspect ratio is 4/3.","title":"Geometry and timing"},{"location":"library/dolphin/#language","text":"When the 'Language' core option is set to automatic, the default PPSSPP language setting will be pulled from RetroArch's Language setting.","title":"Language"},{"location":"library/dolphin/#internal-cheats","text":"Disabled by default. TODO/FIXME","title":"Internal Cheats"},{"location":"library/dolphin/#opengl","text":"Dolphin's OpenGL renderer can be used by setting RetroArch's video driver to gl. The common option for all operating systems is OpenGL, requiring hardware that supports OpenGL/Open GL ES 3.0 or higher. It is an older, pre-Vulkan API, slower than Vulkan but with better compatibility. If you encounter problems with other APIs, try this one.","title":"OpenGL"},{"location":"library/dolphin/#vulkan","text":"Dolphin's Vulkan renderer can be used by setting RetroArch's video driver to vulkan. This is the latest and fastest API currently. It is most recommended for demanding less of your CPU, thus being the fastest.","title":"Vulkan"},{"location":"library/dolphin/#d3d11","text":"Dolphin's Direct3D 11 renderer can be used by setting RetroArch's video driver to d3d11. In some cases Direct3D 11 may offer better performance than OpenGL, especially on integrated Intel graphics.","title":"D3D11"},{"location":"library/dolphin/#core-options","text":"The Dolphin core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. CPU Core [ppsspp_cpu_core] ( jit |IR jit|interpreter) The jit setting enables the Dynamic Recomplier (Dynarec) for CPU emulation. The Dynarec is much faster than the interpreter setting and is the default, recommended mode for supported architectures. The interpreter setting enables the Interpreter for CPU emulation. The Interpreter is a very slow type of emulation and mostly useful for debug, but should work anywhere. The IR jit setting might be worth trying against games which are broken in the other two settings. CPU Clock Rate [ppsspp_locked_cpu_speed] ( off |222MHz|266MHz|333MHz) Allows you to lock the internal CPU clock of the emulator (of the emulated CPU). Larger clocks can ensure a more stable performance in certain games that present problems even on a real PSP, but it requires more powerful hardware. Lower clocks can help weak hardware have more comfortable gameplay, limiting FPS to a lower rate. Changing this option opens the door to several bugs that may compromise some games. In case of doubt, keep this on off. Language [dolphin_language] ( english |japanese|french|spanish|german|italian|dutch|portuguese|russian|korean|chinese_traditional|chinese_simplified) Configure the Dolphin core's system language.","title":"Core options"},{"location":"library/dolphin/#joypad","text":"RetroPad Inputs User 1 input descriptors Cross Square Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right Circle Triangle L R X Analog X Y Analog Y","title":"Joypad"},{"location":"library/dolphin/#compatibility","text":"Compatibility Pages","title":"Compatibility"},{"location":"library/dolphin/#external-links","text":"Official Dolphin Website Official Dolphin Github Repository Libretro Dolphin Core info file Report Libretro Dolphin Core Issues Here","title":"External Links"},{"location":"library/dosbox/","text":"DOS (DOSBox) \u00b6 Background \u00b6 DOSBox is a multiplatform DOS-emulator The DOSBox core has been authored by DOSBox Team The DOSBox core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the DOSBox core have the following file extensions: .exe .com .bat .conf RetroArch database(s) that are associated with the DOSBox core: DOS Features \u00b6 Frontend-level settings or features that the DOSBox core respects. Feature Supported Restart \u2715 Screenshots \u2714 Saves - States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The DOSBox core's library name is 'DOSBox' Geometry and timing \u00b6 The DOSBox core's core provided FPS is 60.0 The DOSBox core's core provided sample rate is (Rate) The DOSBox core's base width is 320 The DOSBox core's base height is 200 The DOSBox core's max width is 1024 The DOSBox core's max height is 768 The DOSBox core's core provided aspect ratio is 4/3 Loading content \u00b6 To use you can either load an exe/com/bat file or a *.conf file. If loading exe/com/bat the system directory will be searched for a 'dosbox.conf' file to load. If one isn't available default values will be used. This mode is equivalent to running a DOSBox binary with the specified file as the command line argument. If loading a conf file DOSBox will be loaded with the options in the config file. This mode is useful if you just want to be dumped at a command prompt, but can also be used to load a game by putting commands in the autoexec section. To be useful the frontend will need to have keyboard+mouse support, and all keyboard shortcuts need to be remapped. Usage \u00b6 DOSBox can load DOS executables or custom config files. To get started you can generate a config file by creating the DOSbox folder in your libretro SYSTEM directory, and then loading any DOS application, exit back to the command interpreter and then run config -wcd, Configuration files allow you far better control than core options so far. Eventually every single useable option will be exposed but in the meantime combining both is the best alternative. If you generate a default config it will always be loaded by default, but you can override it by saving your custom settings, preferably in the game folder. You can create a config like this: [autoexec] @echo off mount d \"/storage/roms/dos/game\" d: game.exe Then you can store this config in the game folder (or any other directory) and just the config instead of the exe file. Once you change a setting using the config command or via core options, you can always update the config file by using config -wc MIDI \u00b6 To use MIDI you need MT32_CONTROL.ROM and MT32_PCM.ROM in the system directory of RetroArch.Then set: [midi] mpu401=intelligent mididevice=mt32 Core options \u00b6 The DOSBox core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Machine type [dosbox_machine_type] ( vgaonly |svga_s3|svga_et3000|svga_et4000|svga_paradise|hercules|cga|tandy|pcjr|ega) Select what machine will be emulated. Gamepad emulated mouse [dosbox_emulated_mouse] ( enable |disable) CPU cycles are divided in core options to allow fine control of the desired CPU cycles. Setting this too low may cause slow gameplay, setting this too high might cause sound crackling and bad performance. CPU cycles x 100000 [dosbox_cpu_cycles_0] ( 0 |1|2|3|4|5|6|7|8|9) CPU cycles are divided in core options to allow fine control of the desired CPU cycles. Setting this too low may cause slow gameplay, setting this too high might cause sound crackling and bad performance. PU cycles x 10000 [dosbox_cpu_cycles_1] ( 0 |1|2|3|4|5|6|7|8|9) CPU cycles are divided in core options to allow fine control of the desired CPU cycles. Setting this too low may cause slow gameplay, setting this too high might cause sound crackling and bad performance. CPU cycles x 1000 [dosbox_cpu_cycles_2] ( 1 |2|3|4|5|6|7|8|9|0) CPU cycles are divided in core options to allow fine control of the desired CPU cycles. Setting this too low may cause slow gameplay, setting this too high might cause sound crackling and bad performance. CPU cycles x 100 [dosbox_cpu_cycles_3] ( 0 |1|2|3|4|5|6|7|8|9\") CPU cycles are divided in core options to allow fine control of the desired CPU cycles. Setting this too low may cause slow gameplay, setting this too high might cause sound crackling and bad performance. User 1 - 2 device types \u00b6 The DOSBox core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): None - Input disabled. Gamepad - Joypad Joystick - Analog Keyboard - Keyboard - Keyboard inputs are always active. Has keymapper support. Joypad \u00b6 Input descriptors for Gamepad 2 Button RetroPad Inputs Button 2 Button 1 D-Pad Up D-Pad Down D-Pad Left D-Pad Right Input descriptors for Gamepad 4 Button RetroPad Inputs Button 3 Button 1 D-Pad Up D-Pad Down D-Pad Left D-Pad Right Button 4 Button 2 Input descriptors for Joystick 2 Button RetroPad Inputs Button 2 Button 1 Left Analog X X Left Analog Y Y Input descriptors for Joystick 4 Button RetroPad Inputs Button 3 Button 1 Button 4 Button 2 Left Analog X X Left Analog Y Y Right Analog X X Right Analog Y Y Input descriptors for Keyboard RetroPad Inputs Esc Enter Kbd Up Kbd Down Kbd Left Kbd Right Input descriptors for Emulated mouse RetroPad Inputs Emulated Mouse Right Click Emulated Mouse Left Click Emulated Mouse X Axis X Emulated Mouse Y Axis Y Keyboard \u00b6 RetroKeyboard Inputs Keyboard Keyboard Backspace Backspace Keyboard Tab Tab Keyboard Return Enter Keyboard Pause Pause Keyboard Escape Escape Keyboard Space Space Keyboard ' ' Keyboard , , Keyboard . . Keyboard / / Keyboard 0 0 Keyboard 1 1 Keyboard 2 2 Keyboard 3 3 Keyboard 4 4 Keyboard 5 5 Keyboard 6 6 Keyboard 7 7 Keyboard 8 8 Keyboard 9 9 Keyboard ; ; Keyboard - - Keyboard = = Keyboard [ [ Keyboard \\ \\ Keyboard ] ] Keyboard | Keyboard a a Keyboard b b Keyboard c c Keyboard d d Keyboard e e Keyboard f f Keyboard g g Keyboard h h Keyboard i i Keyboard j j Keyboard k k Keyboard l l Keyboard m m Keyboard n n Keyboard o o Keyboard p p Keyboard q q Keyboard r r Keyboard s s Keyboard t t Keyboard u u Keyboard v v Keyboard w w Keyboard x x Keyboard y y Keyboard z z Keyboard Delete Delete Keyboard Numpad 0 Numpad 0 Keyboard Numpad 1 Numpad 1 Keyboard Numpad 2 Numpad 2 Keyboard Numpad 3 Numpad 3 Keyboard Numpad 4 Numpad 4 Keyboard Numpad 5 Numpad 5 Keyboard Numpad 6 Numpad 6 Keyboard Numpad 7 Numpad 7 Keyboard Numpad 8 Numpad 8 Keyboard Numpad 9 Numpad 9 Keyboard Numpad . Numpad . Keyboard Numpad / Numpad / Keyboard Numpad * Numpad * Keyboard Numpad - Numpad - Keyboard Numpad + Numpad + Keyboard Numpad Enter Numpad Enter Keyboard Up Up Keyboard Down Down Keyboard Right Left Keyboard Left Right Keyboard Insert Insert Keyboard Home Home Keyboard End End Keyboard Page Up Page Up Keyboard Page Down Page Down Keyboard F1 F1 Keyboard F2 F2 Keyboard F3 F3 Keyboard F4 F4 Keyboard F5 F5 Keyboard F6 F6 Keyboard F7 F7 Keyboard F8 F8 Keyboard F9 F9 Keyboard F10 F10 Keyboard F11 F11 Keyboard F12 F12 Keyboard Num Lock Num Lock Keyboard Caps Lock Caps Lock Keyboard Scroll Lock Scroll Lock Keyboard Right Shift Right Shift Keyboard Left Shift Left Shift Keyboard Right Control Right Control Keyboard Left Control Left Control Keyboard Right Alt Right Alt Keyboard Left Alt Left Alt Keyboard Sys Req Print Screen External Links \u00b6 Official DOSBox Website Official/Original DOSBox SourceForge Repository Libretro DOSBox Core info file Libretro DOSBox Github Repository Report Libretro DOSBox Core Issues Here","title":"DOS (DOSBox)"},{"location":"library/dosbox/#dos-dosbox","text":"","title":"DOS (DOSBox)"},{"location":"library/dosbox/#background","text":"DOSBox is a multiplatform DOS-emulator The DOSBox core has been authored by DOSBox Team The DOSBox core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Background"},{"location":"library/dosbox/#extensions","text":"Content that can be loaded by the DOSBox core have the following file extensions: .exe .com .bat .conf RetroArch database(s) that are associated with the DOSBox core: DOS","title":"Extensions"},{"location":"library/dosbox/#features","text":"Frontend-level settings or features that the DOSBox core respects. Feature Supported Restart \u2715 Screenshots \u2714 Saves - States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/dosbox/#directories","text":"The DOSBox core's library name is 'DOSBox'","title":"Directories"},{"location":"library/dosbox/#geometry-and-timing","text":"The DOSBox core's core provided FPS is 60.0 The DOSBox core's core provided sample rate is (Rate) The DOSBox core's base width is 320 The DOSBox core's base height is 200 The DOSBox core's max width is 1024 The DOSBox core's max height is 768 The DOSBox core's core provided aspect ratio is 4/3","title":"Geometry and timing"},{"location":"library/dosbox/#loading-content","text":"To use you can either load an exe/com/bat file or a *.conf file. If loading exe/com/bat the system directory will be searched for a 'dosbox.conf' file to load. If one isn't available default values will be used. This mode is equivalent to running a DOSBox binary with the specified file as the command line argument. If loading a conf file DOSBox will be loaded with the options in the config file. This mode is useful if you just want to be dumped at a command prompt, but can also be used to load a game by putting commands in the autoexec section. To be useful the frontend will need to have keyboard+mouse support, and all keyboard shortcuts need to be remapped.","title":"Loading content"},{"location":"library/dosbox/#usage","text":"DOSBox can load DOS executables or custom config files. To get started you can generate a config file by creating the DOSbox folder in your libretro SYSTEM directory, and then loading any DOS application, exit back to the command interpreter and then run config -wcd, Configuration files allow you far better control than core options so far. Eventually every single useable option will be exposed but in the meantime combining both is the best alternative. If you generate a default config it will always be loaded by default, but you can override it by saving your custom settings, preferably in the game folder. You can create a config like this: [autoexec] @echo off mount d \"/storage/roms/dos/game\" d: game.exe Then you can store this config in the game folder (or any other directory) and just the config instead of the exe file. Once you change a setting using the config command or via core options, you can always update the config file by using config -wc","title":"Usage"},{"location":"library/dosbox/#midi","text":"To use MIDI you need MT32_CONTROL.ROM and MT32_PCM.ROM in the system directory of RetroArch.Then set: [midi] mpu401=intelligent mididevice=mt32","title":"MIDI"},{"location":"library/dosbox/#core-options","text":"The DOSBox core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Machine type [dosbox_machine_type] ( vgaonly |svga_s3|svga_et3000|svga_et4000|svga_paradise|hercules|cga|tandy|pcjr|ega) Select what machine will be emulated. Gamepad emulated mouse [dosbox_emulated_mouse] ( enable |disable) CPU cycles are divided in core options to allow fine control of the desired CPU cycles. Setting this too low may cause slow gameplay, setting this too high might cause sound crackling and bad performance. CPU cycles x 100000 [dosbox_cpu_cycles_0] ( 0 |1|2|3|4|5|6|7|8|9) CPU cycles are divided in core options to allow fine control of the desired CPU cycles. Setting this too low may cause slow gameplay, setting this too high might cause sound crackling and bad performance. PU cycles x 10000 [dosbox_cpu_cycles_1] ( 0 |1|2|3|4|5|6|7|8|9) CPU cycles are divided in core options to allow fine control of the desired CPU cycles. Setting this too low may cause slow gameplay, setting this too high might cause sound crackling and bad performance. CPU cycles x 1000 [dosbox_cpu_cycles_2] ( 1 |2|3|4|5|6|7|8|9|0) CPU cycles are divided in core options to allow fine control of the desired CPU cycles. Setting this too low may cause slow gameplay, setting this too high might cause sound crackling and bad performance. CPU cycles x 100 [dosbox_cpu_cycles_3] ( 0 |1|2|3|4|5|6|7|8|9\") CPU cycles are divided in core options to allow fine control of the desired CPU cycles. Setting this too low may cause slow gameplay, setting this too high might cause sound crackling and bad performance.","title":"Core options"},{"location":"library/dosbox/#user-1-2-device-types","text":"The DOSBox core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): None - Input disabled. Gamepad - Joypad Joystick - Analog Keyboard - Keyboard - Keyboard inputs are always active. Has keymapper support.","title":"User 1 - 2 device types"},{"location":"library/dosbox/#joypad","text":"Input descriptors for Gamepad 2 Button RetroPad Inputs Button 2 Button 1 D-Pad Up D-Pad Down D-Pad Left D-Pad Right Input descriptors for Gamepad 4 Button RetroPad Inputs Button 3 Button 1 D-Pad Up D-Pad Down D-Pad Left D-Pad Right Button 4 Button 2 Input descriptors for Joystick 2 Button RetroPad Inputs Button 2 Button 1 Left Analog X X Left Analog Y Y Input descriptors for Joystick 4 Button RetroPad Inputs Button 3 Button 1 Button 4 Button 2 Left Analog X X Left Analog Y Y Right Analog X X Right Analog Y Y Input descriptors for Keyboard RetroPad Inputs Esc Enter Kbd Up Kbd Down Kbd Left Kbd Right Input descriptors for Emulated mouse RetroPad Inputs Emulated Mouse Right Click Emulated Mouse Left Click Emulated Mouse X Axis X Emulated Mouse Y Axis Y","title":"Joypad"},{"location":"library/dosbox/#keyboard","text":"RetroKeyboard Inputs Keyboard Keyboard Backspace Backspace Keyboard Tab Tab Keyboard Return Enter Keyboard Pause Pause Keyboard Escape Escape Keyboard Space Space Keyboard ' ' Keyboard , , Keyboard . . Keyboard / / Keyboard 0 0 Keyboard 1 1 Keyboard 2 2 Keyboard 3 3 Keyboard 4 4 Keyboard 5 5 Keyboard 6 6 Keyboard 7 7 Keyboard 8 8 Keyboard 9 9 Keyboard ; ; Keyboard - - Keyboard = = Keyboard [ [ Keyboard \\ \\ Keyboard ] ] Keyboard | Keyboard a a Keyboard b b Keyboard c c Keyboard d d Keyboard e e Keyboard f f Keyboard g g Keyboard h h Keyboard i i Keyboard j j Keyboard k k Keyboard l l Keyboard m m Keyboard n n Keyboard o o Keyboard p p Keyboard q q Keyboard r r Keyboard s s Keyboard t t Keyboard u u Keyboard v v Keyboard w w Keyboard x x Keyboard y y Keyboard z z Keyboard Delete Delete Keyboard Numpad 0 Numpad 0 Keyboard Numpad 1 Numpad 1 Keyboard Numpad 2 Numpad 2 Keyboard Numpad 3 Numpad 3 Keyboard Numpad 4 Numpad 4 Keyboard Numpad 5 Numpad 5 Keyboard Numpad 6 Numpad 6 Keyboard Numpad 7 Numpad 7 Keyboard Numpad 8 Numpad 8 Keyboard Numpad 9 Numpad 9 Keyboard Numpad . Numpad . Keyboard Numpad / Numpad / Keyboard Numpad * Numpad * Keyboard Numpad - Numpad - Keyboard Numpad + Numpad + Keyboard Numpad Enter Numpad Enter Keyboard Up Up Keyboard Down Down Keyboard Right Left Keyboard Left Right Keyboard Insert Insert Keyboard Home Home Keyboard End End Keyboard Page Up Page Up Keyboard Page Down Page Down Keyboard F1 F1 Keyboard F2 F2 Keyboard F3 F3 Keyboard F4 F4 Keyboard F5 F5 Keyboard F6 F6 Keyboard F7 F7 Keyboard F8 F8 Keyboard F9 F9 Keyboard F10 F10 Keyboard F11 F11 Keyboard F12 F12 Keyboard Num Lock Num Lock Keyboard Caps Lock Caps Lock Keyboard Scroll Lock Scroll Lock Keyboard Right Shift Right Shift Keyboard Left Shift Left Shift Keyboard Right Control Right Control Keyboard Left Control Left Control Keyboard Right Alt Right Alt Keyboard Left Alt Left Alt Keyboard Sys Req Print Screen","title":"Keyboard"},{"location":"library/dosbox/#external-links","text":"Official DOSBox Website Official/Original DOSBox SourceForge Repository Libretro DOSBox Core info file Libretro DOSBox Github Repository Report Libretro DOSBox Core Issues Here","title":"External Links"},{"location":"library/dummy/","text":"Dummy core \u00b6 Background \u00b6 'Load Dummy on Core Shutdown' option in RetroArch's Core settings. Some cores might have a shutdown feature. If enabled, it will prevent the core from shutting RetroArch down. Instead, it loads a dummy core. Author/License \u00b6 The Dummy core has been authored by The RetroArch Team The Dummy core is licensed under MIT A summary of the licenses behind RetroArch and its cores can be found here . External Links \u00b6 Libretro Dummy core Github Repository","title":"Dummy Core"},{"location":"library/dummy/#dummy-core","text":"","title":"Dummy core"},{"location":"library/dummy/#background","text":"'Load Dummy on Core Shutdown' option in RetroArch's Core settings. Some cores might have a shutdown feature. If enabled, it will prevent the core from shutting RetroArch down. Instead, it loads a dummy core.","title":"Background"},{"location":"library/dummy/#authorlicense","text":"The Dummy core has been authored by The RetroArch Team The Dummy core is licensed under MIT A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/dummy/#external-links","text":"Libretro Dummy core Github Repository","title":"External Links"},{"location":"library/easyrpg/","text":"RPG Maker 2000/2003 (EasyRPG) \u00b6 Background \u00b6 EasyRPG Player is a game interpreter to play RPG Maker 2000, 2003 and EasyRPG games. It uses the LCF parser library (liblcf) to read RPG Maker game data. EasyRPG Player is part of the EasyRPG Project. More information is available at the project website: https://easyrpg.org/ Author/License \u00b6 The EasyRPG core has been authored by EasyRPG team The EasyRPG core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the EasyRPG core have the following file extensions: .ini Databases \u00b6 RetroArch database(s) that are associated with the EasyRPG core: RPG Maker Features \u00b6 Frontend-level settings or features that the EasyRPG core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2715 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The EasyRPG core's internal core name is 'EasyRPG' The EasyRPG core saves/loads to/from these directories. Loaded content's directory Save##.lsd (Save files) easyrpg_log.txt (EasyRPG log file) Geometry and timing \u00b6 The EasyRPG core's core provided FPS is (FPS) The EasyRPG core's core provided sample rate is 44100 Hz The EasyRPG core's core provided aspect ratio is (Ratio) Controllers \u00b6 The EasyRPG core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 device types \u00b6 None - Doesn't disable input. There's no reason to switch to this. RetroPad - Joypad - Stay on this. RetroPad w/Analog - Joypad - Same as RetroPad. There's no reason to switch to this. Controller tables \u00b6 Joypad \u00b6 RetroPad Inputs EasyRPG core inpits Cancel Decision Up Down Left Right Decision External Links \u00b6 Official EasyRPG Website Official EasyRPG Github Repository Libretro EasyRPG Core info file Libretro EasyRPG Github Repository Report Libretro EasyRPG Core Issues Here","title":"RPG Maker 2000/2003 (EasyRPG)"},{"location":"library/easyrpg/#rpg-maker-20002003-easyrpg","text":"","title":"RPG Maker 2000/2003 (EasyRPG)"},{"location":"library/easyrpg/#background","text":"EasyRPG Player is a game interpreter to play RPG Maker 2000, 2003 and EasyRPG games. It uses the LCF parser library (liblcf) to read RPG Maker game data. EasyRPG Player is part of the EasyRPG Project. More information is available at the project website: https://easyrpg.org/","title":"Background"},{"location":"library/easyrpg/#authorlicense","text":"The EasyRPG core has been authored by EasyRPG team The EasyRPG core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/easyrpg/#extensions","text":"Content that can be loaded by the EasyRPG core have the following file extensions: .ini","title":"Extensions"},{"location":"library/easyrpg/#databases","text":"RetroArch database(s) that are associated with the EasyRPG core: RPG Maker","title":"Databases"},{"location":"library/easyrpg/#features","text":"Frontend-level settings or features that the EasyRPG core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2715 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/easyrpg/#directories","text":"The EasyRPG core's internal core name is 'EasyRPG' The EasyRPG core saves/loads to/from these directories. Loaded content's directory Save##.lsd (Save files) easyrpg_log.txt (EasyRPG log file)","title":"Directories"},{"location":"library/easyrpg/#geometry-and-timing","text":"The EasyRPG core's core provided FPS is (FPS) The EasyRPG core's core provided sample rate is 44100 Hz The EasyRPG core's core provided aspect ratio is (Ratio)","title":"Geometry and timing"},{"location":"library/easyrpg/#controllers","text":"The EasyRPG core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/easyrpg/#user-1-device-types","text":"None - Doesn't disable input. There's no reason to switch to this. RetroPad - Joypad - Stay on this. RetroPad w/Analog - Joypad - Same as RetroPad. There's no reason to switch to this.","title":"User 1 device types"},{"location":"library/easyrpg/#controller-tables","text":"","title":"Controller tables"},{"location":"library/easyrpg/#joypad","text":"RetroPad Inputs EasyRPG core inpits Cancel Decision Up Down Left Right Decision","title":"Joypad"},{"location":"library/easyrpg/#external-links","text":"Official EasyRPG Website Official EasyRPG Github Repository Libretro EasyRPG Core info file Libretro EasyRPG Github Repository Report Libretro EasyRPG Core Issues Here","title":"External Links"},{"location":"library/eightyone/","text":"ZX81 (EightyOne) \u00b6 Contribute to this documentation \u00b6 DOCUMENTATION IS A WORK IN PROGRESS In order to propose improvements to this document, visit its corresponding source page on github . Changes are proposed using \"Pull Requests.\" There is a To-Do list for libretro/docs here You can submit suggestions or issues regarding documentation at the libretro/docs issue tracker or in our forum thread . Background \u00b6 EightyOne is a port of the EightyOne (a.k.a. THE Sinclair Emulator) to libretro. EightyOne emulates a number of ZX80, ZX81, clones, and other computers based on the same hardware: Sinclair ZX80 Sinclair ZX81 Timex TS1000 Timex TS1500 Lambda 8300 Ringo R470 MicroDigital TK85 Jupiter ACE How to install the EightyOne core: \u00b6 Start up RetroArch. Inside the main menu, go to 'Online Updater'. Just to make sure we have the latest info files, select 'Update Core Info FIles'. Wait until this is done. Then, select 'Core Updater'. Browse through the list and select 'ZX81 (EightyOne)'. After this has finished downloading, the core should now be ready for use! How to start the (Core name) core: \u00b6 Go back to RetroArch's main menu screen. Select 'Load Content'. Browse to the folder that contains the content you want to run. Select the content that you want to run. If you are asked which core to select, choose 'ZX81 (EightyOne)'. The content should now start running! Authors \u00b6 Michael D Wynne License \u00b6 A summary of the licenses behind RetroArch and its cores can be found here . The EightyOne core is licensed under GPLv3 Extensions \u00b6 Content that can be loaded by the EightyOne core have the following file extensions: .p .tzx .t81 Databases \u00b6 RetroArch database(s) that are associated with the EightyOne core: Sinclair - ZX 81 Features \u00b6 RetroArch-level settings or features that the EightyOne core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2715 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The EightyOne core's directory name is 'EightyOne' The EightyOne core saves/loads to/from these directories. RetroArch's State directory 'content-name'.state# (State) Geometry and timing \u00b6 The EightyOne core's core provided FPS is 50 The EightyOne core's core provided sample rate is 44100 Hz The EightyOne core's core provided aspect ratio is (Ratio) Auto-configuration \u00b6 Since configuring the core for each game can be a tedious task, the EightyOne core features auto-configuration. Games that support auto-configuration are listed in the src/gamedb/gamedb.json file , along with some information and the configuration required to play them. Currently, there's no way to change the auto-configuration settings short of recompiling the core after making the changes. If you feel the provided auto-configuration could be better or has bugs, please open an issue . Colorization \u00b6 Colorization works by loading a program prior to loading the game. This program will check if the Chroma 81 expansion is installed, and, if it is, configures the colors of the ZX81 characters, and then loads the original game, which runs unaware that it's playing with colors. Since the EightyOne core can't load arbitrary programs from the file system, the colorization program and the game must exist in the same file. Core options \u00b6 The EightyOne core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Tape Fast Load (Off/ On ) Instantly loads files if enabled, or disable it to see the moving horizontal lines while the game loads. 8K-16K Contents ( auto /ROM shadow/RAM/dK'tronics 4K Graphics ROM + 4K RAM) Selects the contents of memory addresses between 8192 and 16383, a shadow copy of the ROM, 8K of RAM, or dK'tronics 4K ROM plus 4K of RAM . High Resolution ( auto /none/WRX) Enables WRX high resolution. Emulate Chroma 81 ( auto /Off/On) Enable the Chroma 81 interface (colorization). Emulate Chroma 81 - auto/On Emulate Chroma 81 - Off Video Presets ( clean /tv/noisy) Change how the video is emulated (if Chroma 81 is enabled, the video is set to \"clean\" regardless of this option). Video Presets - clean Video Presets - tv Video Presets - noisy Sound emulation ( auto /none/Zon X-81) Enables sound emulation. Joypad Left mapping ( auto /default/new line/shift/space/./0/\u00bd/\u00be/\u215a/\u215e/9/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z) Maps this joypad button to a keyboard key, defaults are the cursor keys for the directional pad and '0' to all the other buttons. Joypad Right mapping ( auto /default/new line/shift/space/./0/\u00bd/\u00be/\u215a/\u215e/9/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z) Maps this joypad button to a keyboard key, defaults are the cursor keys for the directional pad and '0' to all the other buttons. Joypad Up mapping ( auto /default/new line/shift/space/./0/\u00bd/\u00be/\u215a/\u215e/9/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z) Maps this joypad button to a keyboard key, defaults are the cursor keys for the directional pad and '0' to all the other buttons. Joypad Down mapping ( auto /default/new line/shift/space/./0/\u00bd/\u00be/\u215a/\u215e/9/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z) Maps this joypad button to a keyboard key, defaults are the cursor keys for the directional pad and '0' to all the other buttons. Joypad A button mapping ( auto /default/new line/shift/space/./0/\u00bd/\u00be/\u215a/\u215e/9/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z) Maps this joypad button to a keyboard key, defaults are the cursor keys for the directional pad and '0' to all the other buttons. Joypad B button mapping ( auto /default/new line/shift/space/./0/\u00bd/\u00be/\u215a/\u215e/9/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z) Maps this joypad button to a keyboard key, defaults are the cursor keys for the directional pad and '0' to all the other buttons. Joypad X button mapping ( auto /default/new line/shift/space/./0/\u00bd/\u00be/\u215a/\u215e/9/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z) Maps this joypad button to a keyboard key, defaults are the cursor keys for the directional pad and '0' to all the other buttons. Joypad Y button mapping ( auto /default/new line/shift/space/./0/\u00bd/\u00be/\u215a/\u215e/9/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z) Maps this joypad button to a keyboard key, defaults are the cursor keys for the directional pad and '0' to all the other buttons. Joypad L button mapping ( auto /default/new line/shift/space/./0/\u00bd/\u00be/\u215a/\u215e/9/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z) Maps this joypad button to a keyboard key, defaults are the cursor keys for the directional pad and '0' to all the other buttons. Joypad R button mapping ( auto /default/new line/shift/space/./0/\u00bd/\u00be/\u215a/\u215e/9/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z) Maps this joypad button to a keyboard key, defaults are the cursor keys for the directional pad and '0' to all the other buttons. Joypad L2 button mapping ( auto /default/new line/shift/space/./0/\u00bd/\u00be/\u215a/\u215e/9/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z) Maps this joypad button to a keyboard key, defaults are the cursor keys for the directional pad and '0' to all the other buttons. Joypad R2 button mapping ( auto /default/new line/shift/space/./0/\u00bd/\u00be/\u215a/\u215e/9/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z) Maps this joypad button to a keyboard key, defaults are the cursor keys for the directional pad and '0' to all the other buttons. Transparent Keyboard Overlay (Off/ On ) If the keyboard overlay is transparent or opaque. Transparent Keyboard Overlay - On Transparent Keyboard Overlay - Off Time to Release key in ms ( 100 /300/500/1000) How many milliseconds to wait before releasing the key pressed using the keyboard overlay. Controllers \u00b6 The EightyOne core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 device types \u00b6 None - Input disabled. RetroPad - Joypad Cursor Joystick - Joypad - Switch to this for joypad inputs. User 2 device types \u00b6 None - Input disabled. RetroPad - Joypad Sinclair Keyboard - Keyboard - Switch to this for keyboard inputs. Switch the User 1 device type to none if the correct keyboard inputs aren't being read. Controller tables \u00b6 Joypad \u00b6 Attention Use the Joypad mapping core options to configure the Cursor Joystick inputs. User 1 Remap descriptors RetroPad Inputs Cursor Joystick Joypad B button mapping Joypad Y button mapping Keyboard overlay Joypad Up mapping Joypad Down mapping Joypad Left mapping Joypad Right mapping Joypad A button mapping Joypad X button mapping Joypad L button mapping Joypad R button mapping Joypad L2 button mapping Joypad R2 button mapping Keyboard \u00b6 RetroKeyboard Inputs Sinclair Keyboard Keyboard Backspace VK_BACK Keyboard Tab VK_TAB Keyboard Clear VK_CLEAR Keyboard Return VK_RETURN Keyboard Pause VK_PAUSE Keyboard Escape VK_ESCAPE Keyboard Space VK_SPACE Keyboard Comma , VK_COMMA Keyboard Delete VK_DELETE Keyboard Keypad 0 VK_NUMPAD0 Keyboard Keypad 1 VK_NUMPAD1 Keyboard Keypad 2 VK_NUMPAD2 Keyboard Keypad 3 VK_NUMPAD3 Keyboard Keypad 4 VK_NUMPAD4 Keyboard Keypad 5 VK_NUMPAD5 Keyboard Keypad 6 VK_NUMPAD6 Keyboard Keypad 7 VK_NUMPAD7 Keyboard Keypad 8 VK_NUMPAD8 Keyboard Keypad 9 VK_NUMPAD9 Keyboard Keypad Period . VK_DECIMAL Keyboard Keypad Divide / VK_DIVIDE Keyboard Keypad Multiply * VK_MULTIPLY Keyboard Keypad Minus - VK_SUBTRACT Keyboard Keypad Plus + VK_ADD Keyboard Up VK_UP Keyboard Down VK_DOWN Keyboard Right VK_RIGHT Keyboard Left VK_LEFT Keyboard Insert VK_INSERT Keyboard Home VK_HOME Keyboard End VK_END Keyboard Page Up VK_PRIOR Keyboard Page Down VK_NEXT Keyboard F1 VK_F1 Keyboard F2 VK_F2 Keyboard F3 VK_F3 Keyboard F4 VK_F4 Keyboard F5 VK_F5 Keyboard F6 VK_F6 Keyboard F7 VK_F7 Keyboard F8 VK_F8 Keyboard F9 VK_F9 Keyboard F10 VK_F10 Keyboard F11 VK_F11 Keyboard F12 VK_F12 Keyboard F13 VK_F13 Keyboard F14 VK_F14 Keyboard F15 VK_F15 Keyboard Num Lock VK_NUMLOCK Keyboard Caps Lock VK_CAPITAL Keyboard Scroll Lock VK_SCROLL Keyboard Right Shift VK_SHIFT Keyboard Left Shift VK_SHIFT Keyboard Right Control VK_CONTROL Keyboard Left Control VK_CONTROL Keyboard Right Alt VK_MENU Keyboard Left Alt VK_MENU Keyboard Print VK_SNAPSHOT External Links \u00b6 Libretro EightyOne Core info file Libretro EightyOne Github Repository Report Libretro EightyOne Core Issues Here Official EightyOne Sourceforge Repository","title":"Sinclair - ZX 81 (EightyOne)"},{"location":"library/eightyone/#zx81-eightyone","text":"","title":"ZX81 (EightyOne)"},{"location":"library/eightyone/#contribute-to-this-documentation","text":"DOCUMENTATION IS A WORK IN PROGRESS In order to propose improvements to this document, visit its corresponding source page on github . Changes are proposed using \"Pull Requests.\" There is a To-Do list for libretro/docs here You can submit suggestions or issues regarding documentation at the libretro/docs issue tracker or in our forum thread .","title":"Contribute to this documentation"},{"location":"library/eightyone/#background","text":"EightyOne is a port of the EightyOne (a.k.a. THE Sinclair Emulator) to libretro. EightyOne emulates a number of ZX80, ZX81, clones, and other computers based on the same hardware: Sinclair ZX80 Sinclair ZX81 Timex TS1000 Timex TS1500 Lambda 8300 Ringo R470 MicroDigital TK85 Jupiter ACE","title":"Background"},{"location":"library/eightyone/#how-to-install-the-eightyone-core","text":"Start up RetroArch. Inside the main menu, go to 'Online Updater'. Just to make sure we have the latest info files, select 'Update Core Info FIles'. Wait until this is done. Then, select 'Core Updater'. Browse through the list and select 'ZX81 (EightyOne)'. After this has finished downloading, the core should now be ready for use!","title":"How to install the EightyOne core:"},{"location":"library/eightyone/#how-to-start-the-core-name-core","text":"Go back to RetroArch's main menu screen. Select 'Load Content'. Browse to the folder that contains the content you want to run. Select the content that you want to run. If you are asked which core to select, choose 'ZX81 (EightyOne)'. The content should now start running!","title":"How to start the (Core name) core:"},{"location":"library/eightyone/#authors","text":"Michael D Wynne","title":"Authors"},{"location":"library/eightyone/#license","text":"A summary of the licenses behind RetroArch and its cores can be found here . The EightyOne core is licensed under GPLv3","title":"License"},{"location":"library/eightyone/#extensions","text":"Content that can be loaded by the EightyOne core have the following file extensions: .p .tzx .t81","title":"Extensions"},{"location":"library/eightyone/#databases","text":"RetroArch database(s) that are associated with the EightyOne core: Sinclair - ZX 81","title":"Databases"},{"location":"library/eightyone/#features","text":"RetroArch-level settings or features that the EightyOne core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2715 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/eightyone/#directories","text":"The EightyOne core's directory name is 'EightyOne' The EightyOne core saves/loads to/from these directories. RetroArch's State directory 'content-name'.state# (State)","title":"Directories"},{"location":"library/eightyone/#geometry-and-timing","text":"The EightyOne core's core provided FPS is 50 The EightyOne core's core provided sample rate is 44100 Hz The EightyOne core's core provided aspect ratio is (Ratio)","title":"Geometry and timing"},{"location":"library/eightyone/#auto-configuration","text":"Since configuring the core for each game can be a tedious task, the EightyOne core features auto-configuration. Games that support auto-configuration are listed in the src/gamedb/gamedb.json file , along with some information and the configuration required to play them. Currently, there's no way to change the auto-configuration settings short of recompiling the core after making the changes. If you feel the provided auto-configuration could be better or has bugs, please open an issue .","title":"Auto-configuration"},{"location":"library/eightyone/#colorization","text":"Colorization works by loading a program prior to loading the game. This program will check if the Chroma 81 expansion is installed, and, if it is, configures the colors of the ZX81 characters, and then loads the original game, which runs unaware that it's playing with colors. Since the EightyOne core can't load arbitrary programs from the file system, the colorization program and the game must exist in the same file.","title":"Colorization"},{"location":"library/eightyone/#core-options","text":"The EightyOne core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Tape Fast Load (Off/ On ) Instantly loads files if enabled, or disable it to see the moving horizontal lines while the game loads. 8K-16K Contents ( auto /ROM shadow/RAM/dK'tronics 4K Graphics ROM + 4K RAM) Selects the contents of memory addresses between 8192 and 16383, a shadow copy of the ROM, 8K of RAM, or dK'tronics 4K ROM plus 4K of RAM . High Resolution ( auto /none/WRX) Enables WRX high resolution. Emulate Chroma 81 ( auto /Off/On) Enable the Chroma 81 interface (colorization). Emulate Chroma 81 - auto/On Emulate Chroma 81 - Off Video Presets ( clean /tv/noisy) Change how the video is emulated (if Chroma 81 is enabled, the video is set to \"clean\" regardless of this option). Video Presets - clean Video Presets - tv Video Presets - noisy Sound emulation ( auto /none/Zon X-81) Enables sound emulation. Joypad Left mapping ( auto /default/new line/shift/space/./0/\u00bd/\u00be/\u215a/\u215e/9/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z) Maps this joypad button to a keyboard key, defaults are the cursor keys for the directional pad and '0' to all the other buttons. Joypad Right mapping ( auto /default/new line/shift/space/./0/\u00bd/\u00be/\u215a/\u215e/9/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z) Maps this joypad button to a keyboard key, defaults are the cursor keys for the directional pad and '0' to all the other buttons. Joypad Up mapping ( auto /default/new line/shift/space/./0/\u00bd/\u00be/\u215a/\u215e/9/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z) Maps this joypad button to a keyboard key, defaults are the cursor keys for the directional pad and '0' to all the other buttons. Joypad Down mapping ( auto /default/new line/shift/space/./0/\u00bd/\u00be/\u215a/\u215e/9/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z) Maps this joypad button to a keyboard key, defaults are the cursor keys for the directional pad and '0' to all the other buttons. Joypad A button mapping ( auto /default/new line/shift/space/./0/\u00bd/\u00be/\u215a/\u215e/9/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z) Maps this joypad button to a keyboard key, defaults are the cursor keys for the directional pad and '0' to all the other buttons. Joypad B button mapping ( auto /default/new line/shift/space/./0/\u00bd/\u00be/\u215a/\u215e/9/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z) Maps this joypad button to a keyboard key, defaults are the cursor keys for the directional pad and '0' to all the other buttons. Joypad X button mapping ( auto /default/new line/shift/space/./0/\u00bd/\u00be/\u215a/\u215e/9/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z) Maps this joypad button to a keyboard key, defaults are the cursor keys for the directional pad and '0' to all the other buttons. Joypad Y button mapping ( auto /default/new line/shift/space/./0/\u00bd/\u00be/\u215a/\u215e/9/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z) Maps this joypad button to a keyboard key, defaults are the cursor keys for the directional pad and '0' to all the other buttons. Joypad L button mapping ( auto /default/new line/shift/space/./0/\u00bd/\u00be/\u215a/\u215e/9/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z) Maps this joypad button to a keyboard key, defaults are the cursor keys for the directional pad and '0' to all the other buttons. Joypad R button mapping ( auto /default/new line/shift/space/./0/\u00bd/\u00be/\u215a/\u215e/9/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z) Maps this joypad button to a keyboard key, defaults are the cursor keys for the directional pad and '0' to all the other buttons. Joypad L2 button mapping ( auto /default/new line/shift/space/./0/\u00bd/\u00be/\u215a/\u215e/9/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z) Maps this joypad button to a keyboard key, defaults are the cursor keys for the directional pad and '0' to all the other buttons. Joypad R2 button mapping ( auto /default/new line/shift/space/./0/\u00bd/\u00be/\u215a/\u215e/9/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z) Maps this joypad button to a keyboard key, defaults are the cursor keys for the directional pad and '0' to all the other buttons. Transparent Keyboard Overlay (Off/ On ) If the keyboard overlay is transparent or opaque. Transparent Keyboard Overlay - On Transparent Keyboard Overlay - Off Time to Release key in ms ( 100 /300/500/1000) How many milliseconds to wait before releasing the key pressed using the keyboard overlay.","title":"Core options"},{"location":"library/eightyone/#controllers","text":"The EightyOne core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/eightyone/#user-1-device-types","text":"None - Input disabled. RetroPad - Joypad Cursor Joystick - Joypad - Switch to this for joypad inputs.","title":"User 1 device types"},{"location":"library/eightyone/#user-2-device-types","text":"None - Input disabled. RetroPad - Joypad Sinclair Keyboard - Keyboard - Switch to this for keyboard inputs. Switch the User 1 device type to none if the correct keyboard inputs aren't being read.","title":"User 2 device types"},{"location":"library/eightyone/#controller-tables","text":"","title":"Controller tables"},{"location":"library/eightyone/#joypad","text":"Attention Use the Joypad mapping core options to configure the Cursor Joystick inputs. User 1 Remap descriptors RetroPad Inputs Cursor Joystick Joypad B button mapping Joypad Y button mapping Keyboard overlay Joypad Up mapping Joypad Down mapping Joypad Left mapping Joypad Right mapping Joypad A button mapping Joypad X button mapping Joypad L button mapping Joypad R button mapping Joypad L2 button mapping Joypad R2 button mapping","title":"Joypad"},{"location":"library/eightyone/#keyboard","text":"RetroKeyboard Inputs Sinclair Keyboard Keyboard Backspace VK_BACK Keyboard Tab VK_TAB Keyboard Clear VK_CLEAR Keyboard Return VK_RETURN Keyboard Pause VK_PAUSE Keyboard Escape VK_ESCAPE Keyboard Space VK_SPACE Keyboard Comma , VK_COMMA Keyboard Delete VK_DELETE Keyboard Keypad 0 VK_NUMPAD0 Keyboard Keypad 1 VK_NUMPAD1 Keyboard Keypad 2 VK_NUMPAD2 Keyboard Keypad 3 VK_NUMPAD3 Keyboard Keypad 4 VK_NUMPAD4 Keyboard Keypad 5 VK_NUMPAD5 Keyboard Keypad 6 VK_NUMPAD6 Keyboard Keypad 7 VK_NUMPAD7 Keyboard Keypad 8 VK_NUMPAD8 Keyboard Keypad 9 VK_NUMPAD9 Keyboard Keypad Period . VK_DECIMAL Keyboard Keypad Divide / VK_DIVIDE Keyboard Keypad Multiply * VK_MULTIPLY Keyboard Keypad Minus - VK_SUBTRACT Keyboard Keypad Plus + VK_ADD Keyboard Up VK_UP Keyboard Down VK_DOWN Keyboard Right VK_RIGHT Keyboard Left VK_LEFT Keyboard Insert VK_INSERT Keyboard Home VK_HOME Keyboard End VK_END Keyboard Page Up VK_PRIOR Keyboard Page Down VK_NEXT Keyboard F1 VK_F1 Keyboard F2 VK_F2 Keyboard F3 VK_F3 Keyboard F4 VK_F4 Keyboard F5 VK_F5 Keyboard F6 VK_F6 Keyboard F7 VK_F7 Keyboard F8 VK_F8 Keyboard F9 VK_F9 Keyboard F10 VK_F10 Keyboard F11 VK_F11 Keyboard F12 VK_F12 Keyboard F13 VK_F13 Keyboard F14 VK_F14 Keyboard F15 VK_F15 Keyboard Num Lock VK_NUMLOCK Keyboard Caps Lock VK_CAPITAL Keyboard Scroll Lock VK_SCROLL Keyboard Right Shift VK_SHIFT Keyboard Left Shift VK_SHIFT Keyboard Right Control VK_CONTROL Keyboard Left Control VK_CONTROL Keyboard Right Alt VK_MENU Keyboard Left Alt VK_MENU Keyboard Print VK_SNAPSHOT","title":"Keyboard"},{"location":"library/eightyone/#external-links","text":"Libretro EightyOne Core info file Libretro EightyOne Github Repository Report Libretro EightyOne Core Issues Here Official EightyOne Sourceforge Repository","title":"External Links"},{"location":"library/emux_chip8/","text":"CHIP-8 (Emux) \u00b6 This core currently doesn't start so this documentation will remain incomplete until it is fixed. Contribute to this documentation \u00b6 In order to propose improvements to this document, visit it's corresponding source page on github . Changes are proposed using \"Pull Requests.\" Background \u00b6 Emux is a cross-platform emulator project with a goal of emulating multiple kinds of machines related to gaming, such as consoles or arcades. Its philosophy is very much inspired by the Linux kernel (hence the name), which brilliantly manages to support multiple machines while keeping drivers entirely platform-independent. Emux is designed in the same way, keeping a code base of CPUs and controllers separate from machines. How to get and install the Emux CHIP-8 core: \u00b6 Start up RetroArch. Inside the main menu, go to 'Online Updater'. Just to make sure we have the latest info files, select 'Update Core Info FIles'. Wait until this is done. Then, select 'Core Updater'. Browse through the list and select 'CHIP-8 (Emux)'. After this has finished downloading, the core should now be ready for use! Authors \u00b6 Sebastien Ronsse License \u00b6 A summary of the licenses behind RetroArch and its cores can be found here . GPLv2 Extensions \u00b6 Content that can be loaded by the Emux CHIP-8 core have the following file extensions: .ch8 .bin .rom Features \u00b6 Feature Supported Saves - States - Rewind - Netplay - RetroAchievements - RetroArch Cheats - Native Cheats - Controllers - Remapping - Multi-Mouse - Rumble - Sensors - Camera - Location - Subsystem - Softpatching - Saves/States \u00b6 The Emux CHIP-8 core's directory name is 'emux (chip8)' Awaiting description. Core options \u00b6 Awaiting description. Controllers \u00b6 Awaiting description. Device types \u00b6 Awaiting description. Controllers graph \u00b6 Awaiting description. External Links \u00b6 Libretro Emux CHIP-8 Core info file Libretro Emux CHIP-8 Github Repository Report Libretro Emux CHIP-8 Core Issues Here Official Emux CHIP-8 Github Repository","title":"CHIP-8 (Emux CHIP-8)"},{"location":"library/emux_chip8/#chip-8-emux","text":"This core currently doesn't start so this documentation will remain incomplete until it is fixed.","title":"CHIP-8 (Emux)"},{"location":"library/emux_chip8/#contribute-to-this-documentation","text":"In order to propose improvements to this document, visit it's corresponding source page on github . Changes are proposed using \"Pull Requests.\"","title":"Contribute to this documentation"},{"location":"library/emux_chip8/#background","text":"Emux is a cross-platform emulator project with a goal of emulating multiple kinds of machines related to gaming, such as consoles or arcades. Its philosophy is very much inspired by the Linux kernel (hence the name), which brilliantly manages to support multiple machines while keeping drivers entirely platform-independent. Emux is designed in the same way, keeping a code base of CPUs and controllers separate from machines.","title":"Background"},{"location":"library/emux_chip8/#how-to-get-and-install-the-emux-chip-8-core","text":"Start up RetroArch. Inside the main menu, go to 'Online Updater'. Just to make sure we have the latest info files, select 'Update Core Info FIles'. Wait until this is done. Then, select 'Core Updater'. Browse through the list and select 'CHIP-8 (Emux)'. After this has finished downloading, the core should now be ready for use!","title":"How to get and install the Emux CHIP-8 core:"},{"location":"library/emux_chip8/#authors","text":"Sebastien Ronsse","title":"Authors"},{"location":"library/emux_chip8/#license","text":"A summary of the licenses behind RetroArch and its cores can be found here . GPLv2","title":"License"},{"location":"library/emux_chip8/#extensions","text":"Content that can be loaded by the Emux CHIP-8 core have the following file extensions: .ch8 .bin .rom","title":"Extensions"},{"location":"library/emux_chip8/#features","text":"Feature Supported Saves - States - Rewind - Netplay - RetroAchievements - RetroArch Cheats - Native Cheats - Controllers - Remapping - Multi-Mouse - Rumble - Sensors - Camera - Location - Subsystem - Softpatching -","title":"Features"},{"location":"library/emux_chip8/#savesstates","text":"The Emux CHIP-8 core's directory name is 'emux (chip8)' Awaiting description.","title":"Saves/States"},{"location":"library/emux_chip8/#core-options","text":"Awaiting description.","title":"Core options"},{"location":"library/emux_chip8/#controllers","text":"Awaiting description.","title":"Controllers"},{"location":"library/emux_chip8/#device-types","text":"Awaiting description.","title":"Device types"},{"location":"library/emux_chip8/#controllers-graph","text":"Awaiting description.","title":"Controllers graph"},{"location":"library/emux_chip8/#external-links","text":"Libretro Emux CHIP-8 Core info file Libretro Emux CHIP-8 Github Repository Report Libretro Emux CHIP-8 Core Issues Here Official Emux CHIP-8 Github Repository","title":"External Links"},{"location":"library/emux_gb/","text":"Game Boy/Game Boy Color (Emux GB) \u00b6 Contribute to this documentation \u00b6 In order to propose improvements to this document, visit its corresponding source page on github . Changes are proposed using \"Pull Requests.\" There is a To-Do list for libretro/docs here You can submit suggestions or issues regarding documentation at the libretro/docs issue tracker or in our forum thread . Background \u00b6 Emux is a cross-platform emulator project with a goal of emulating multiple kinds of machines related to gaming, such as consoles or arcades. Its philosophy is very much inspired by the Linux kernel (hence the name), which brilliantly manages to support multiple machines while keeping drivers entirely platform-independent. Emux is designed in the same way, keeping a code base of CPUs and controllers separate from machines. Why use this core? \u00b6 Awaiting description. How to get and install the Emux GB core: \u00b6 Start up RetroArch. Inside the main menu, go to 'Online Updater'. Just to make sure we have the latest info files, select 'Update Core Info FIles'. Wait until this is done. Then, select 'Core Updater'. Browse through the list and select 'Game Boy/Game Boy Color (Emux GB)'. After this has finished downloading, the core should now be ready for use! How to start (after installation): \u00b6 Go back to RetroArch's main menu screen. Select 'Load Content'. Browse to the folder that contains the content you want to run. Select the content that you want to run. If you are asked which core to select, choose 'Game Boy/Game Boy Color (Emux GB)'. The content should now start running! Authors \u00b6 Sebastien Ronsse See also \u00b6 GB/GBC \u00b6 Game Boy / Game Boy Color (Gambatte) Game Boy / Game Boy Color (SameBoy) Game Boy / Game Boy Color (TGB Dual) Game Boy / Game Boy Color (Gearboy) Game Boy Advance (mGBA) License \u00b6 A summary of the licenses behind RetroArch and its cores can be found here . The Emux GB core is licensed under GPLv2 Extensions \u00b6 Content that can be loaded by the Emux GB core have the following file extensions: .gb .bin .rom Databases \u00b6 RetroArch database(s) that are associated with the Emux GB core: Nintendo - Game Boy Nintendo - Game Boy Color BIOS \u00b6 Required or optional firmware files go in RetroArch's system directory. Filename Description md5sum dmg_boot.bin Game Boy Boot ROM - Required 32fbbd84168d3482956eb3c5051637f5 Features \u00b6 RetroArch-level settings or features that the Emux GB core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2715 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 Directories \u00b6 The Emux GB core's directory name is 'emux (gb)' Geometry and timing \u00b6 The Emux GB core's internal FPS is (FPS) The Emux GB core's internal sample rate is (Rate) The Emux GB core's core provided aspect ratio is (Ratio) Controllers \u00b6 Device types \u00b6 The Emux GB core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 device types \u00b6 None - Doesn't disable input. RetroPad - Joypad RetroPad w/Analog - Joypad - There is no reason to switch to this. Controller tables \u00b6 Joypad and analog device type table \u00b6 User 1 Input descriptors RetroPad Inputs RetroPad B Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A Compatibility \u00b6 Awaiting description. External Links \u00b6 Libretro Emux GB Core info file Libretro Emux GB Github Repository Report Libretro Emux GB Core Issues Here Official Emux GB Github Repository See also \u00b6 Nintendo - Game Boy (+ Color) \u00b6 Nintendo - Game Boy / Color (Gambatte) Nintendo - Game Boy / Color (Gearboy) Nintendo - Game Boy / Color (SameBoy) Nintendo - Game Boy / Color (TGB Dual) Nintendo - Game Boy Advance (mGBA) Nintendo - Game Boy Advance (VBA-M) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (nSide Balanced) Nintendo - SNES / Famicom (Mesen-S)","title":"Nintendo - Game Boy / Color (Emux GB)"},{"location":"library/emux_gb/#game-boygame-boy-color-emux-gb","text":"","title":"Game Boy/Game Boy Color (Emux GB)"},{"location":"library/emux_gb/#contribute-to-this-documentation","text":"In order to propose improvements to this document, visit its corresponding source page on github . Changes are proposed using \"Pull Requests.\" There is a To-Do list for libretro/docs here You can submit suggestions or issues regarding documentation at the libretro/docs issue tracker or in our forum thread .","title":"Contribute to this documentation"},{"location":"library/emux_gb/#background","text":"Emux is a cross-platform emulator project with a goal of emulating multiple kinds of machines related to gaming, such as consoles or arcades. Its philosophy is very much inspired by the Linux kernel (hence the name), which brilliantly manages to support multiple machines while keeping drivers entirely platform-independent. Emux is designed in the same way, keeping a code base of CPUs and controllers separate from machines.","title":"Background"},{"location":"library/emux_gb/#why-use-this-core","text":"Awaiting description.","title":"Why use this core?"},{"location":"library/emux_gb/#how-to-get-and-install-the-emux-gb-core","text":"Start up RetroArch. Inside the main menu, go to 'Online Updater'. Just to make sure we have the latest info files, select 'Update Core Info FIles'. Wait until this is done. Then, select 'Core Updater'. Browse through the list and select 'Game Boy/Game Boy Color (Emux GB)'. After this has finished downloading, the core should now be ready for use!","title":"How to get and install the Emux GB core:"},{"location":"library/emux_gb/#how-to-start-after-installation","text":"Go back to RetroArch's main menu screen. Select 'Load Content'. Browse to the folder that contains the content you want to run. Select the content that you want to run. If you are asked which core to select, choose 'Game Boy/Game Boy Color (Emux GB)'. The content should now start running!","title":"How to start (after installation):"},{"location":"library/emux_gb/#authors","text":"Sebastien Ronsse","title":"Authors"},{"location":"library/emux_gb/#see-also","text":"","title":"See also"},{"location":"library/emux_gb/#gbgbc","text":"Game Boy / Game Boy Color (Gambatte) Game Boy / Game Boy Color (SameBoy) Game Boy / Game Boy Color (TGB Dual) Game Boy / Game Boy Color (Gearboy) Game Boy Advance (mGBA)","title":"GB/GBC"},{"location":"library/emux_gb/#license","text":"A summary of the licenses behind RetroArch and its cores can be found here . The Emux GB core is licensed under GPLv2","title":"License"},{"location":"library/emux_gb/#extensions","text":"Content that can be loaded by the Emux GB core have the following file extensions: .gb .bin .rom","title":"Extensions"},{"location":"library/emux_gb/#databases","text":"RetroArch database(s) that are associated with the Emux GB core: Nintendo - Game Boy Nintendo - Game Boy Color","title":"Databases"},{"location":"library/emux_gb/#bios","text":"Required or optional firmware files go in RetroArch's system directory. Filename Description md5sum dmg_boot.bin Game Boy Boot ROM - Required 32fbbd84168d3482956eb3c5051637f5","title":"BIOS"},{"location":"library/emux_gb/#features","text":"RetroArch-level settings or features that the Emux GB core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2715 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715","title":"Features"},{"location":"library/emux_gb/#directories","text":"The Emux GB core's directory name is 'emux (gb)'","title":"Directories"},{"location":"library/emux_gb/#geometry-and-timing","text":"The Emux GB core's internal FPS is (FPS) The Emux GB core's internal sample rate is (Rate) The Emux GB core's core provided aspect ratio is (Ratio)","title":"Geometry and timing"},{"location":"library/emux_gb/#controllers","text":"","title":"Controllers"},{"location":"library/emux_gb/#device-types","text":"The Emux GB core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Device types"},{"location":"library/emux_gb/#user-1-device-types","text":"None - Doesn't disable input. RetroPad - Joypad RetroPad w/Analog - Joypad - There is no reason to switch to this.","title":"User 1 device types"},{"location":"library/emux_gb/#controller-tables","text":"","title":"Controller tables"},{"location":"library/emux_gb/#joypad-and-analog-device-type-table","text":"User 1 Input descriptors RetroPad Inputs RetroPad B Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A","title":"Joypad and analog device type table"},{"location":"library/emux_gb/#compatibility","text":"Awaiting description.","title":"Compatibility"},{"location":"library/emux_gb/#external-links","text":"Libretro Emux GB Core info file Libretro Emux GB Github Repository Report Libretro Emux GB Core Issues Here Official Emux GB Github Repository","title":"External Links"},{"location":"library/emux_gb/#see-also_1","text":"","title":"See also"},{"location":"library/emux_gb/#nintendo-game-boy-color","text":"Nintendo - Game Boy / Color (Gambatte) Nintendo - Game Boy / Color (Gearboy) Nintendo - Game Boy / Color (SameBoy) Nintendo - Game Boy / Color (TGB Dual) Nintendo - Game Boy Advance (mGBA) Nintendo - Game Boy Advance (VBA-M) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (nSide Balanced) Nintendo - SNES / Famicom (Mesen-S)","title":"Nintendo - Game Boy (+ Color)"},{"location":"library/emux_nes/","text":"Nintendo - NES / Famicom (Emux NES) \u00b6 Background \u00b6 Emux is a cross-platform emulator project with a goal of emulating multiple kinds of machines related to gaming, such as consoles or arcades. Its philosophy is very much inspired by the Linux kernel (hence the name), which brilliantly manages to support multiple machines while keeping drivers entirely platform-independent. Emux is designed in the same way, keeping a code base of CPUs and controllers separate from machines. Author/License \u00b6 The Emux NES core has been authored by Sebastien Ronsse The Emux NES core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the Emux NES core have the following file extensions: .nes .bin .rom Databases \u00b6 RetroArch database(s) that are associated with the Emux NES core: Nintendo - Nintendo Entertainment System Features \u00b6 Frontend-level settings or features that the Emux NES core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2715 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The Emux NES core's internal core name is 'emux (nes)' Geometry and timing \u00b6 The Emux NES core's core provided FPS is (FPS) The Emux NES core's core provided sample rate is (Rate) The Emux NES core's core provided aspect ratio is (Ratio) Controllers \u00b6 The Emux NES core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 - 2 device types \u00b6 None - Doesn't disable input. There's no reason to switch to this. RetroPad - Joypad - Stay on this. RetroPad w/Analog - Joypad - Same as RetroPad. There's no reason to switch to this. Controller tables \u00b6 Joypad \u00b6 RetroPad Inputs Emux NES core Inputs B Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A Compatibility \u00b6 Awaiting description. External Links \u00b6 Official Emux GB Github Repository Libretro Emux GB Core info file Libretro Emux GB Github Repository Report Libretro Emux GB Core Issues Here See also \u00b6 Nintendo - Nintendo Entertainment System \u00b6 Nintendo - NES / Famicom (bnes) Nintendo - NES / Famicom (FCEUmm) Nintendo - NES / Famicom (Mesen) Nintendo - NES / Famicom (Nestopia UE) Nintendo - NES / Famicom (QuickNES)","title":"Nintendo - NES / Famicom (Emux NES)"},{"location":"library/emux_nes/#nintendo-nes-famicom-emux-nes","text":"","title":"Nintendo - NES / Famicom (Emux NES)"},{"location":"library/emux_nes/#background","text":"Emux is a cross-platform emulator project with a goal of emulating multiple kinds of machines related to gaming, such as consoles or arcades. Its philosophy is very much inspired by the Linux kernel (hence the name), which brilliantly manages to support multiple machines while keeping drivers entirely platform-independent. Emux is designed in the same way, keeping a code base of CPUs and controllers separate from machines.","title":"Background"},{"location":"library/emux_nes/#authorlicense","text":"The Emux NES core has been authored by Sebastien Ronsse The Emux NES core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/emux_nes/#extensions","text":"Content that can be loaded by the Emux NES core have the following file extensions: .nes .bin .rom","title":"Extensions"},{"location":"library/emux_nes/#databases","text":"RetroArch database(s) that are associated with the Emux NES core: Nintendo - Nintendo Entertainment System","title":"Databases"},{"location":"library/emux_nes/#features","text":"Frontend-level settings or features that the Emux NES core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2715 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/emux_nes/#directories","text":"The Emux NES core's internal core name is 'emux (nes)'","title":"Directories"},{"location":"library/emux_nes/#geometry-and-timing","text":"The Emux NES core's core provided FPS is (FPS) The Emux NES core's core provided sample rate is (Rate) The Emux NES core's core provided aspect ratio is (Ratio)","title":"Geometry and timing"},{"location":"library/emux_nes/#controllers","text":"The Emux NES core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/emux_nes/#user-1-2-device-types","text":"None - Doesn't disable input. There's no reason to switch to this. RetroPad - Joypad - Stay on this. RetroPad w/Analog - Joypad - Same as RetroPad. There's no reason to switch to this.","title":"User 1 - 2 device types"},{"location":"library/emux_nes/#controller-tables","text":"","title":"Controller tables"},{"location":"library/emux_nes/#joypad","text":"RetroPad Inputs Emux NES core Inputs B Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A","title":"Joypad"},{"location":"library/emux_nes/#compatibility","text":"Awaiting description.","title":"Compatibility"},{"location":"library/emux_nes/#external-links","text":"Official Emux GB Github Repository Libretro Emux GB Core info file Libretro Emux GB Github Repository Report Libretro Emux GB Core Issues Here","title":"External Links"},{"location":"library/emux_nes/#see-also","text":"","title":"See also"},{"location":"library/emux_nes/#nintendo-nintendo-entertainment-system","text":"Nintendo - NES / Famicom (bnes) Nintendo - NES / Famicom (FCEUmm) Nintendo - NES / Famicom (Mesen) Nintendo - NES / Famicom (Nestopia UE) Nintendo - NES / Famicom (QuickNES)","title":"Nintendo - Nintendo Entertainment System"},{"location":"library/emux_sms/","text":"Sega - Master System (Emux SMS) \u00b6 Background \u00b6 Emux is a cross-platform emulator project with a goal of emulating multiple kinds of machines related to gaming, such as consoles or arcades. Its philosophy is very much inspired by the Linux kernel (hence the name), which brilliantly manages to support multiple machines while keeping drivers entirely platform-independent. Emux is designed in the same way, keeping a code base of CPUs and controllers separate from machines. Author/License \u00b6 The Emux SMS core has been authored by Sebastien Ronsse The Emux SMS core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the Emux SMS core have the following file extensions: .sms .bin .rom Databases \u00b6 RetroArch database(s) that are associated with the Emux SMS core: Sega - Master System - Mark III BIOS \u00b6 Required or optional firmware files go in the frontend's system directory. Filename Description md5sum bios.sms Master System BIOS - Required 840481177270d5642a14ca71ee72844c Features \u00b6 Frontend-level settings or features that the Emux SMS core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2715 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The Emux SMS core's internal core name is 'emux (sms)' Geometry and timing \u00b6 The Emux SMS core's core provided FPS is (FPS) The Emux SMS core's core provided sample rate is (Rate) The Emux SMS core's core provided aspect ratio is (Ratio) Controllers \u00b6 The Emux SMS core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 device types \u00b6 None - Doesn't diable input. There's no reason to switch to this. RetroPad - Joypad - Stay on this. RetroPad w/Analog - Joypad - There's no reason to switch to this. Controller tables \u00b6 Joypad \u00b6 RetroPad Inputs Emux SMS core Inputs 1 Pause D-Pad Up D-Pad Down D-Pad Left D-Pad Right 2 External Links \u00b6 Official Emux SMS Github Repository Libretro Emux SMS Core info file Libretro Emux SMS Github Repository Report Libretro Emux SMS Core Issues Here See also \u00b6 Sega - Master System - Mark III \u00b6 Sega - MS/GG/MD/CD (Genesis Plus GX) Sega - MS/MD/CD/32X (PicoDrive)","title":"Sega - Master System (Emux SMS)"},{"location":"library/emux_sms/#sega-master-system-emux-sms","text":"","title":"Sega - Master System (Emux SMS)"},{"location":"library/emux_sms/#background","text":"Emux is a cross-platform emulator project with a goal of emulating multiple kinds of machines related to gaming, such as consoles or arcades. Its philosophy is very much inspired by the Linux kernel (hence the name), which brilliantly manages to support multiple machines while keeping drivers entirely platform-independent. Emux is designed in the same way, keeping a code base of CPUs and controllers separate from machines.","title":"Background"},{"location":"library/emux_sms/#authorlicense","text":"The Emux SMS core has been authored by Sebastien Ronsse The Emux SMS core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/emux_sms/#extensions","text":"Content that can be loaded by the Emux SMS core have the following file extensions: .sms .bin .rom","title":"Extensions"},{"location":"library/emux_sms/#databases","text":"RetroArch database(s) that are associated with the Emux SMS core: Sega - Master System - Mark III","title":"Databases"},{"location":"library/emux_sms/#bios","text":"Required or optional firmware files go in the frontend's system directory. Filename Description md5sum bios.sms Master System BIOS - Required 840481177270d5642a14ca71ee72844c","title":"BIOS"},{"location":"library/emux_sms/#features","text":"Frontend-level settings or features that the Emux SMS core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2715 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/emux_sms/#directories","text":"The Emux SMS core's internal core name is 'emux (sms)'","title":"Directories"},{"location":"library/emux_sms/#geometry-and-timing","text":"The Emux SMS core's core provided FPS is (FPS) The Emux SMS core's core provided sample rate is (Rate) The Emux SMS core's core provided aspect ratio is (Ratio)","title":"Geometry and timing"},{"location":"library/emux_sms/#controllers","text":"The Emux SMS core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/emux_sms/#user-1-device-types","text":"None - Doesn't diable input. There's no reason to switch to this. RetroPad - Joypad - Stay on this. RetroPad w/Analog - Joypad - There's no reason to switch to this.","title":"User 1 device types"},{"location":"library/emux_sms/#controller-tables","text":"","title":"Controller tables"},{"location":"library/emux_sms/#joypad","text":"RetroPad Inputs Emux SMS core Inputs 1 Pause D-Pad Up D-Pad Down D-Pad Left D-Pad Right 2","title":"Joypad"},{"location":"library/emux_sms/#external-links","text":"Official Emux SMS Github Repository Libretro Emux SMS Core info file Libretro Emux SMS Github Repository Report Libretro Emux SMS Core Issues Here","title":"External Links"},{"location":"library/emux_sms/#see-also","text":"","title":"See also"},{"location":"library/emux_sms/#sega-master-system-mark-iii","text":"Sega - MS/GG/MD/CD (Genesis Plus GX) Sega - MS/MD/CD/32X (PicoDrive)","title":"Sega - Master System - Mark III"},{"location":"library/fceumm/","text":"Nintendo - NES / Famicom (FCEUmm) \u00b6 Background \u00b6 FCEU \"mappers modified\" is an unofficial build of FCEU Ultra by CaH4e3, which supports a lot of new mappers including some obscure mappers such as one for unlicensed NES ROM's. Author/License \u00b6 The FCEUmm core has been authored by FCEU Team CaH4e3 The FCEUmm core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the FCEUmm core have the following file extensions: .fds .nes .unif .unf Databases \u00b6 RetroArch database(s) that are associated with the FCEUmm core: Nintendo - Nintendo Entertainment System Nintendo - Family Computer Disk System BIOS \u00b6 Required or optional firmware files go in the frontend's system directory. Filename Description md5sum disksys.rom Family Computer Disk System BIOS - Required for Famicom Disk System emulation ca30b50f880eb660a320674ed365ef7a Features \u00b6 Frontend-level settings or features that the FCEUmm core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2714 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The FCEUmm core's internal core name is 'FCEUmm' The FCEUmm core saves/loads to/from these directories. Frontend's Save directory File Description *.srm Cartridge battery save Frontend's State directory File Description *.state# State Frontend's System directory File Description nes.pal Custom palette (64 triplets) Geometry and timing \u00b6 The FCEUmm core's core provided FPS is NTSC 60.10, PAL/Dendy 50.0 The FCEUmm core's core provided sample rate is 48000 Hz The FCEUmm core's base width is 256 (602 when using NTSC Filters) The FCEUmm core's base height is 240 The FCEUmm core's max width is 256 (602 when using NTSC Filters) The FCEUmm core's max height is 240 The FCEUmm core's core provided aspect ratio is 4:3 DAR or 8:7 PAR Custom color palettes \u00b6 To use custom color palettes in the FCEUmm core, the 'Color Palette' core option must be set to custom and the custom color palette file you want to use must be in RetroArch's system directory. Make sure the custom palette file is named 'nes.pal' Custom color palettes for the NES can be generated with either of these tools. Bisqwit's NTSC NES palette generator Drag's NTSC NES palette generator Core options \u00b6 The FCEUmm core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Region [fceumm_region] ( Auto |NTSC|PAL|Dendy) Force core to use NTSC, PAL or Dendy system audio / video timings. Preferred aspect ratio [fceumm_aspect] ( 8:7 PAR |4:3) Choose the preferred aspect ratio. RetroArch's aspect ratio must be set to Core provided in the Video seetings. Preferred aspect ratio - 8:7 PAR Preferred aspect ratio - 4:3 Color Palette [fceumm_palette] ( default |asqrealc|nintendo-vc|rgb|yuv-v3|unsaturated-final|sony-cxa2025as-us|pal|bmf-final2|bmf-final3|smooth-fbx|composite-direct-fbx|pvm-style-d93-fbx|ntsc-hardware-fbx|nes-classic-fbx-fs|nescap|wavebeam|raw|custom) Choose which color palette is going to be used. The raw palette can used in combination with the nes-decoder shader to give colors based off on Bisqwit's NES palette generator and applies either an FCC color conversion matrix or specific Sony US matrix. Disclaimer These 'Color Palette core option screenshots have been taken with the 'Use NTSC Palette' core option set to Off. Color Palette - default Color Palette - asqrealc Color Palette - nintendo-vc Color Palette - rgb Color Palette - yuv-v3 Color Palette - unsaturated-final Color Palette - sony-cxa2025as-us Color Palette - pal Color Palette - bmf-final2 Color Palette - bmf-final3 Color Palette - smooth-fbx Color Palette - composite-direct-fbx Color Palette - pvm-style-d93-fbx Color Palette - ntsc-hardware-fbx Color Palette - nes-classic-fbx-fs Color Palette - nescap Color Palette - wavebeam Color Palette - raw Allow Opposing Directions [fceumm_up_down_allowed] ( disabled |enabled) Enabling this will allow pressing / quickly alternating / holding both left and right (or up and down in some games) directions at the same time. This may cause movement based glitches to occur in certain games. It's best to keep this core option disabled. Crop Overscan (Horizontal) [fceumm_overscan_h] ( disabled |enabled) Crop out (horizontally) the potentially random glitchy video output that would have been hidden by the bezel around the edge of a standard-definition television screen. Crop Overscan (Horiontal) - Off Crop Overscan (Horizontal) - On Crop Overscan (Vertical) [fceumm_overscan_v] ( enabled |disabled) Crop out (vertically) the potentially random glitchy video output that would have been hidden by the bezel around the edge of a standard-definition television screen. Crop Overscan (Vertical) - On Crop Overscan (Vertical) - Off No Sprite Limit [fceumm_nospritelimit] ( disabled |enabled) Removes 8-sprites-per-scanline hardware limit. Sound Volume [fceumm_sndvolume] (0|1|2|3|4|5|6| 7 |8|9|10) Self-explanatory. Sound Quality [fceumm_sndquality] ( Low |High|Very High) Enables high/higher sound quality for games using expansion audio (MMC5, VRC6, VRC7, Namco, Sunsoft). Use Low for slower devices. Swap Duty Cycles [fceumm_swapduty] ( disabled |enabled) Replicates the sound of some famiclones that have duty cycles swapped for square channels. A quick sound comparison is in Contra's sound effect when shooting with normal bullets. Turbo Enable [fceumm_turbo_enable] ( None |Player 1|Player 2|Both) Enable the use of the Turbo B and Turbo A buttons . Turbo Delay (in frames) [fceumm_turbo_delay] ( 3 |5|10|15|30|60|1|2) The number of frames between consecutive buttton presses when the Turbo B or Turbo A buttons are held down. Zapper Mode [fceumm_zapper_mode] ( lightgun |touchscreen|mouse) Pointer allows the Zapper Device Type to be used for touch-devices, but still can be used with regular mouse. Pointer and Mouse mode movement behaves differently with different input driver so user can choose which movement feels natural to them. Show Crosshair [fceumm_show_crosshair] ( enabled |disabled) Show the crosshair for the Zapper device type. Show Crosshair - On Show Crosshair - Off Overclocking [fceumm_overclocking] ( disabled |2x-Postrender|2x-VBlank) Overclocks the NES using PPU method to minimize ingame slowdowns of some games. Contra Force needs VBlank mode (stage 3 slowdowns). Choose which ever minimizes slowdowns without image distortion. RAM power up state (Restart) [fceumm_ramstate] (** FF**| FF**| 00|random) Choose RAM startup during power up. Fill the ram with either $FF, $00 or random. Some games rely on initial ram values for random generator as an example. Some unlicensed carts and rom hacks prefers $00 or else rom will not boot up or causes graphics glitches or any other problems. NTSC Filter [fceumm_ntsc_filter] ( disabled |composite|svideo|rgb|monochrome) Enable blargg NTSC filters. Disclaimer These 'NTSC Filter' core option screenshots have been taken with the 'Color Palette' core option set to smooth-fbx. NTSC Filter - Off NTSC Filter - composite (color bleeding + artifacts) NTSC Filter - svideo (color bleeding only) NTSC Filter - rgb (crisp image) NTSC Filter - monochrome (desaturated + artifacts) Show Advanced System Options [fceumm_show_adv_system_options] ( disabled |enabled) Show advanced system options and tweaks. Show Advanced Sound Options [fceumm_show_adv_sound_options] ( disabled |enabled) Show advanced sound controls and tweaks. Controllers \u00b6 The FCEUmm core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 device types \u00b6 None - Input disabled. Auto - Joypad - Based off the loaded game's crc, the core will automatically select a regular controller (NES or Famicom) for User 1. Gamepad - Joypad - Manually selects a regular controller (NES or Famicom) for User 1. Zapper - Mouse - Manually selects a Zapper light gun (NES or Famicom) for User 1. NOTE 1: Zapper connected to user 1 is only required on VS Unisystem games. You will hear a loud alarm when a game requires one and no zapped device is selected or the game's CRC fails to match existing database for autodetection. User 2 device types \u00b6 None - Input disabled. Auto - Joypad - Based off the loaded game's crc, the core will automatically select a regular controller (NES or Famicom) or a Zapper light gun (NES or Famicom) or a Arkanoid Paddle (NES only) for User 2. Gamepad - Joypad - Manually selects a regular controller (NES or Famicom) for User 2. Arkanoid - Mouse - Manually selects a Arkanoid Paddle (NES only) for User 2. Zapper - Mouse - Manually selects a Zapper light gun (NES or Famicom) for User 2. NOTE 2: Zapper connected to user 2 is required for most cases. See note 1 above. User 3 and 4 device types - used for multitap \u00b6 None - Input disabled. Auto - Joypad - Based off the loaded game's crc, the core will automatically select a regular controller (NES or Famicom) for User 3 and/or 4 in multitap games. Gamepad - Joypad - Manually selects a regular controller (NES or Famicom) for User \u00be. Other controllers (User 5 device type) \u00b6 The FCEUmm core will also auto select the following controllers for the Famicom based off the loaded game's crc. Arkanoid Paddle (Famicom) - Mouse Bandai Hyper Shot Gun (Famicom) - Mouse Oeka Kids Tablet (Famicom) - Mouse 4-Player Adaptor - force enable multitap mode Multitap support \u00b6 The FCEUmm core supports up to 4 players in multitap games for the NES and Famicom, games with multitap usage are detected by their crc. Multitap can be manually enabled if selecting 4-Player Adaptor in User 5 Device type . Controller tables \u00b6 Joypad \u00b6 Warning In order to use the Turbo A and Turbo B buttons, the 'Turbo Enable' core option must be set to On. User 1 Remap descriptors RetroPad Inputs B Turbo B Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A Turbo A (FDS) Disk Side Change (FDS) Insert/Eject Disk (VSSystem) Insert Coin User 2 - 4 Remap descriptors RetroPad Inputs B Turbo B Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A Turbo A Mouse \u00b6 RetroMouse Inputs Zapper Arkanoid Oeka Kids Tablet Bandai Hyper Shot Gun or Zapper Crosshair Arkanoid Movement Oeka Kids Tablet Cursor Bandai Hyper Shot Gun Crosshair or Zapper Trigger Arkanoid Fire Oeka Kids Tablet Touch Bandai Hyper Shot Gun Trigger When the 'Zapper Mode' core option is set to lightgun, the 'Zapper' device type can be controlled with lightgun inputs (such as Wii remote). When the 'Zapper Mode' core option is set to touchscreen, the 'Zapper' device type can be controlled with touch inputs. When the 'Zapper Mode' core option is set to mouse, the 'Zapper' device type can be controlled with mouse inputs. Compatibility \u00b6 Game Issue Skull & Crossbones Graphical glitches and screen shaking when in 2-player mode. External Links \u00b6 Official FCEUmm Website Official FCEUmm Sourceforge Repository Libretro FCEUmm Core info file Libretro FCEUmm Github Repository Report Libretro FCEUmm Core Issues Here Other Links \u00b6 NES Header Database - Verify, remove or add headers for known No-Intro roms. See also \u00b6 Nintendo - Family Computer Disk System \u00b6 Nintendo - NES / Famicom (Mesen) Nintendo - NES / Famicom (Nestopia UE) Nintendo - Nintendo Entertainment System \u00b6 Nintendo - NES / Famicom (bnes) Nintendo - NES / Famicom (Emux NES) Nintendo - NES / Famicom (Mesen) Nintendo - NES / Famicom (Nestopia UE) Nintendo - NES / Famicom (QuickNES)","title":"Nintendo - NES / Famicom (FCEUmm)"},{"location":"library/fceumm/#nintendo-nes-famicom-fceumm","text":"","title":"Nintendo - NES / Famicom (FCEUmm)"},{"location":"library/fceumm/#background","text":"FCEU \"mappers modified\" is an unofficial build of FCEU Ultra by CaH4e3, which supports a lot of new mappers including some obscure mappers such as one for unlicensed NES ROM's.","title":"Background"},{"location":"library/fceumm/#authorlicense","text":"The FCEUmm core has been authored by FCEU Team CaH4e3 The FCEUmm core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/fceumm/#extensions","text":"Content that can be loaded by the FCEUmm core have the following file extensions: .fds .nes .unif .unf","title":"Extensions"},{"location":"library/fceumm/#databases","text":"RetroArch database(s) that are associated with the FCEUmm core: Nintendo - Nintendo Entertainment System Nintendo - Family Computer Disk System","title":"Databases"},{"location":"library/fceumm/#bios","text":"Required or optional firmware files go in the frontend's system directory. Filename Description md5sum disksys.rom Family Computer Disk System BIOS - Required for Famicom Disk System emulation ca30b50f880eb660a320674ed365ef7a","title":"BIOS"},{"location":"library/fceumm/#features","text":"Frontend-level settings or features that the FCEUmm core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2714 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/fceumm/#directories","text":"The FCEUmm core's internal core name is 'FCEUmm' The FCEUmm core saves/loads to/from these directories. Frontend's Save directory File Description *.srm Cartridge battery save Frontend's State directory File Description *.state# State Frontend's System directory File Description nes.pal Custom palette (64 triplets)","title":"Directories"},{"location":"library/fceumm/#geometry-and-timing","text":"The FCEUmm core's core provided FPS is NTSC 60.10, PAL/Dendy 50.0 The FCEUmm core's core provided sample rate is 48000 Hz The FCEUmm core's base width is 256 (602 when using NTSC Filters) The FCEUmm core's base height is 240 The FCEUmm core's max width is 256 (602 when using NTSC Filters) The FCEUmm core's max height is 240 The FCEUmm core's core provided aspect ratio is 4:3 DAR or 8:7 PAR","title":"Geometry and timing"},{"location":"library/fceumm/#custom-color-palettes","text":"To use custom color palettes in the FCEUmm core, the 'Color Palette' core option must be set to custom and the custom color palette file you want to use must be in RetroArch's system directory. Make sure the custom palette file is named 'nes.pal' Custom color palettes for the NES can be generated with either of these tools. Bisqwit's NTSC NES palette generator Drag's NTSC NES palette generator","title":"Custom color palettes"},{"location":"library/fceumm/#core-options","text":"The FCEUmm core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Region [fceumm_region] ( Auto |NTSC|PAL|Dendy) Force core to use NTSC, PAL or Dendy system audio / video timings. Preferred aspect ratio [fceumm_aspect] ( 8:7 PAR |4:3) Choose the preferred aspect ratio. RetroArch's aspect ratio must be set to Core provided in the Video seetings. Preferred aspect ratio - 8:7 PAR Preferred aspect ratio - 4:3 Color Palette [fceumm_palette] ( default |asqrealc|nintendo-vc|rgb|yuv-v3|unsaturated-final|sony-cxa2025as-us|pal|bmf-final2|bmf-final3|smooth-fbx|composite-direct-fbx|pvm-style-d93-fbx|ntsc-hardware-fbx|nes-classic-fbx-fs|nescap|wavebeam|raw|custom) Choose which color palette is going to be used. The raw palette can used in combination with the nes-decoder shader to give colors based off on Bisqwit's NES palette generator and applies either an FCC color conversion matrix or specific Sony US matrix. Disclaimer These 'Color Palette core option screenshots have been taken with the 'Use NTSC Palette' core option set to Off. Color Palette - default Color Palette - asqrealc Color Palette - nintendo-vc Color Palette - rgb Color Palette - yuv-v3 Color Palette - unsaturated-final Color Palette - sony-cxa2025as-us Color Palette - pal Color Palette - bmf-final2 Color Palette - bmf-final3 Color Palette - smooth-fbx Color Palette - composite-direct-fbx Color Palette - pvm-style-d93-fbx Color Palette - ntsc-hardware-fbx Color Palette - nes-classic-fbx-fs Color Palette - nescap Color Palette - wavebeam Color Palette - raw Allow Opposing Directions [fceumm_up_down_allowed] ( disabled |enabled) Enabling this will allow pressing / quickly alternating / holding both left and right (or up and down in some games) directions at the same time. This may cause movement based glitches to occur in certain games. It's best to keep this core option disabled. Crop Overscan (Horizontal) [fceumm_overscan_h] ( disabled |enabled) Crop out (horizontally) the potentially random glitchy video output that would have been hidden by the bezel around the edge of a standard-definition television screen. Crop Overscan (Horiontal) - Off Crop Overscan (Horizontal) - On Crop Overscan (Vertical) [fceumm_overscan_v] ( enabled |disabled) Crop out (vertically) the potentially random glitchy video output that would have been hidden by the bezel around the edge of a standard-definition television screen. Crop Overscan (Vertical) - On Crop Overscan (Vertical) - Off No Sprite Limit [fceumm_nospritelimit] ( disabled |enabled) Removes 8-sprites-per-scanline hardware limit. Sound Volume [fceumm_sndvolume] (0|1|2|3|4|5|6| 7 |8|9|10) Self-explanatory. Sound Quality [fceumm_sndquality] ( Low |High|Very High) Enables high/higher sound quality for games using expansion audio (MMC5, VRC6, VRC7, Namco, Sunsoft). Use Low for slower devices. Swap Duty Cycles [fceumm_swapduty] ( disabled |enabled) Replicates the sound of some famiclones that have duty cycles swapped for square channels. A quick sound comparison is in Contra's sound effect when shooting with normal bullets. Turbo Enable [fceumm_turbo_enable] ( None |Player 1|Player 2|Both) Enable the use of the Turbo B and Turbo A buttons . Turbo Delay (in frames) [fceumm_turbo_delay] ( 3 |5|10|15|30|60|1|2) The number of frames between consecutive buttton presses when the Turbo B or Turbo A buttons are held down. Zapper Mode [fceumm_zapper_mode] ( lightgun |touchscreen|mouse) Pointer allows the Zapper Device Type to be used for touch-devices, but still can be used with regular mouse. Pointer and Mouse mode movement behaves differently with different input driver so user can choose which movement feels natural to them. Show Crosshair [fceumm_show_crosshair] ( enabled |disabled) Show the crosshair for the Zapper device type. Show Crosshair - On Show Crosshair - Off Overclocking [fceumm_overclocking] ( disabled |2x-Postrender|2x-VBlank) Overclocks the NES using PPU method to minimize ingame slowdowns of some games. Contra Force needs VBlank mode (stage 3 slowdowns). Choose which ever minimizes slowdowns without image distortion. RAM power up state (Restart) [fceumm_ramstate] (** FF**| FF**| 00|random) Choose RAM startup during power up. Fill the ram with either $FF, $00 or random. Some games rely on initial ram values for random generator as an example. Some unlicensed carts and rom hacks prefers $00 or else rom will not boot up or causes graphics glitches or any other problems. NTSC Filter [fceumm_ntsc_filter] ( disabled |composite|svideo|rgb|monochrome) Enable blargg NTSC filters. Disclaimer These 'NTSC Filter' core option screenshots have been taken with the 'Color Palette' core option set to smooth-fbx. NTSC Filter - Off NTSC Filter - composite (color bleeding + artifacts) NTSC Filter - svideo (color bleeding only) NTSC Filter - rgb (crisp image) NTSC Filter - monochrome (desaturated + artifacts) Show Advanced System Options [fceumm_show_adv_system_options] ( disabled |enabled) Show advanced system options and tweaks. Show Advanced Sound Options [fceumm_show_adv_sound_options] ( disabled |enabled) Show advanced sound controls and tweaks.","title":"Core options"},{"location":"library/fceumm/#controllers","text":"The FCEUmm core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/fceumm/#user-1-device-types","text":"None - Input disabled. Auto - Joypad - Based off the loaded game's crc, the core will automatically select a regular controller (NES or Famicom) for User 1. Gamepad - Joypad - Manually selects a regular controller (NES or Famicom) for User 1. Zapper - Mouse - Manually selects a Zapper light gun (NES or Famicom) for User 1. NOTE 1: Zapper connected to user 1 is only required on VS Unisystem games. You will hear a loud alarm when a game requires one and no zapped device is selected or the game's CRC fails to match existing database for autodetection.","title":"User 1 device types"},{"location":"library/fceumm/#user-2-device-types","text":"None - Input disabled. Auto - Joypad - Based off the loaded game's crc, the core will automatically select a regular controller (NES or Famicom) or a Zapper light gun (NES or Famicom) or a Arkanoid Paddle (NES only) for User 2. Gamepad - Joypad - Manually selects a regular controller (NES or Famicom) for User 2. Arkanoid - Mouse - Manually selects a Arkanoid Paddle (NES only) for User 2. Zapper - Mouse - Manually selects a Zapper light gun (NES or Famicom) for User 2. NOTE 2: Zapper connected to user 2 is required for most cases. See note 1 above.","title":"User 2 device types"},{"location":"library/fceumm/#user-3-and-4-device-types-used-for-multitap","text":"None - Input disabled. Auto - Joypad - Based off the loaded game's crc, the core will automatically select a regular controller (NES or Famicom) for User 3 and/or 4 in multitap games. Gamepad - Joypad - Manually selects a regular controller (NES or Famicom) for User \u00be.","title":"User 3 and 4 device types - used for multitap"},{"location":"library/fceumm/#other-controllers-user-5-device-type","text":"The FCEUmm core will also auto select the following controllers for the Famicom based off the loaded game's crc. Arkanoid Paddle (Famicom) - Mouse Bandai Hyper Shot Gun (Famicom) - Mouse Oeka Kids Tablet (Famicom) - Mouse 4-Player Adaptor - force enable multitap mode","title":"Other controllers (User 5 device type)"},{"location":"library/fceumm/#multitap-support","text":"The FCEUmm core supports up to 4 players in multitap games for the NES and Famicom, games with multitap usage are detected by their crc. Multitap can be manually enabled if selecting 4-Player Adaptor in User 5 Device type .","title":"Multitap support"},{"location":"library/fceumm/#controller-tables","text":"","title":"Controller tables"},{"location":"library/fceumm/#joypad","text":"Warning In order to use the Turbo A and Turbo B buttons, the 'Turbo Enable' core option must be set to On. User 1 Remap descriptors RetroPad Inputs B Turbo B Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A Turbo A (FDS) Disk Side Change (FDS) Insert/Eject Disk (VSSystem) Insert Coin User 2 - 4 Remap descriptors RetroPad Inputs B Turbo B Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A Turbo A","title":"Joypad"},{"location":"library/fceumm/#mouse","text":"RetroMouse Inputs Zapper Arkanoid Oeka Kids Tablet Bandai Hyper Shot Gun or Zapper Crosshair Arkanoid Movement Oeka Kids Tablet Cursor Bandai Hyper Shot Gun Crosshair or Zapper Trigger Arkanoid Fire Oeka Kids Tablet Touch Bandai Hyper Shot Gun Trigger When the 'Zapper Mode' core option is set to lightgun, the 'Zapper' device type can be controlled with lightgun inputs (such as Wii remote). When the 'Zapper Mode' core option is set to touchscreen, the 'Zapper' device type can be controlled with touch inputs. When the 'Zapper Mode' core option is set to mouse, the 'Zapper' device type can be controlled with mouse inputs.","title":"Mouse"},{"location":"library/fceumm/#compatibility","text":"Game Issue Skull & Crossbones Graphical glitches and screen shaking when in 2-player mode.","title":"Compatibility"},{"location":"library/fceumm/#external-links","text":"Official FCEUmm Website Official FCEUmm Sourceforge Repository Libretro FCEUmm Core info file Libretro FCEUmm Github Repository Report Libretro FCEUmm Core Issues Here","title":"External Links"},{"location":"library/fceumm/#other-links","text":"NES Header Database - Verify, remove or add headers for known No-Intro roms.","title":"Other Links"},{"location":"library/fceumm/#see-also","text":"","title":"See also"},{"location":"library/fceumm/#nintendo-family-computer-disk-system","text":"Nintendo - NES / Famicom (Mesen) Nintendo - NES / Famicom (Nestopia UE)","title":"Nintendo - Family Computer Disk System"},{"location":"library/fceumm/#nintendo-nintendo-entertainment-system","text":"Nintendo - NES / Famicom (bnes) Nintendo - NES / Famicom (Emux NES) Nintendo - NES / Famicom (Mesen) Nintendo - NES / Famicom (Nestopia UE) Nintendo - NES / Famicom (QuickNES)","title":"Nintendo - Nintendo Entertainment System"},{"location":"library/ffmpeg/","text":"FFmpeg \u00b6 Background \u00b6 Video/music player implemented in libretro. Author/License \u00b6 The FFmpeg core has been authored by Fabrice Bellard FFmpeg team The FFmpeg core is licensed under LGPLv2, GPLv2 A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the FFmpeg core have the following file extensions: .mkv .avi .f4v .f4f .3gp .ogm .flv .mp4 .mp3 .flac .ogg .m4a .webm .3g2 .mov .wmv .mpg .mpeg .vob .asf .divx .m2p .m2ts .ps .ts .mxf .wma .wav Features \u00b6 Frontend-level settings or features that the FFmpeg core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The FFmpeg core's directory name is 'FFmpeg' Geometry and timing \u00b6 The FFmpeg core's core provided FPS is dependant on the loaded media. The FFmpeg core's core provided sample rate is dependant on the loaded media. The FFmpeg core's core provided aspect ratio is dependant on the loaded media. Core options \u00b6 The FFmpeg core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Temporal Interpolation [ffmpeg_temporal_interp] ( Off /On) 'Fake\u2019 a higher framerate by using motion blur. FFT Resolution [ffmpeg_fft_resolution] ( 1280x720 /1920x1080/2560x1440/3840x2160/640x360/320x180) Modify the resolution of the music visualizer. FFT Resolution - 320x180 FFT Resolution - 3840x2160 FFT Multisample [ffmpeg_fft_multisample] ( 1x /2x/4x) Modify the antialiasing of the music visualizer. Colorspace [ffmpeg_color_space] ( auto /BT.70/BT.601/FCC/SMPTE240M) Choose colorspaces from different broadcast regions/standards. Controllers \u00b6 The FFmpeg core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 device types \u00b6 None - Doesn't disable input. RetroPad - Joypad RetroPad w/Analog - Joypad - There's no reason to switch to this. Other controllers \u00b6 Mouse - The FFmpeg core allows Wheel Up and Wheel Down mouse inputs for seeking. This is always active, completely separate from the device types in the Controls menu and cannot be manually selected. Controller tables \u00b6 Joypad \u00b6 User 1 Remap descriptors RetroPad Inputs Seek +60 seconds Seek -60 seconds Seek -10 seconds Seek +10 seconds Cycle Audio Track Cycle Subtitle Track Mouse \u00b6 RetroMouse Inputs FFmpeg Core Inputs Wheel Up Seek +60 seconds Wheel Down Seek -60 seconds External Links \u00b6 Official FFmpeg Website Official FFmpeg Repositories Libretro FFmpeg Core info file Internal Libretro FFmpeg Github Repository Buildbot Libretro FFmpeg Github repository Report Libretro FFmpeg Core Issues Here","title":"FFmpeg"},{"location":"library/ffmpeg/#ffmpeg","text":"","title":"FFmpeg"},{"location":"library/ffmpeg/#background","text":"Video/music player implemented in libretro.","title":"Background"},{"location":"library/ffmpeg/#authorlicense","text":"The FFmpeg core has been authored by Fabrice Bellard FFmpeg team The FFmpeg core is licensed under LGPLv2, GPLv2 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/ffmpeg/#extensions","text":"Content that can be loaded by the FFmpeg core have the following file extensions: .mkv .avi .f4v .f4f .3gp .ogm .flv .mp4 .mp3 .flac .ogg .m4a .webm .3g2 .mov .wmv .mpg .mpeg .vob .asf .divx .m2p .m2ts .ps .ts .mxf .wma .wav","title":"Extensions"},{"location":"library/ffmpeg/#features","text":"Frontend-level settings or features that the FFmpeg core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/ffmpeg/#directories","text":"The FFmpeg core's directory name is 'FFmpeg'","title":"Directories"},{"location":"library/ffmpeg/#geometry-and-timing","text":"The FFmpeg core's core provided FPS is dependant on the loaded media. The FFmpeg core's core provided sample rate is dependant on the loaded media. The FFmpeg core's core provided aspect ratio is dependant on the loaded media.","title":"Geometry and timing"},{"location":"library/ffmpeg/#core-options","text":"The FFmpeg core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Temporal Interpolation [ffmpeg_temporal_interp] ( Off /On) 'Fake\u2019 a higher framerate by using motion blur. FFT Resolution [ffmpeg_fft_resolution] ( 1280x720 /1920x1080/2560x1440/3840x2160/640x360/320x180) Modify the resolution of the music visualizer. FFT Resolution - 320x180 FFT Resolution - 3840x2160 FFT Multisample [ffmpeg_fft_multisample] ( 1x /2x/4x) Modify the antialiasing of the music visualizer. Colorspace [ffmpeg_color_space] ( auto /BT.70/BT.601/FCC/SMPTE240M) Choose colorspaces from different broadcast regions/standards.","title":"Core options"},{"location":"library/ffmpeg/#controllers","text":"The FFmpeg core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/ffmpeg/#user-1-device-types","text":"None - Doesn't disable input. RetroPad - Joypad RetroPad w/Analog - Joypad - There's no reason to switch to this.","title":"User 1 device types"},{"location":"library/ffmpeg/#other-controllers","text":"Mouse - The FFmpeg core allows Wheel Up and Wheel Down mouse inputs for seeking. This is always active, completely separate from the device types in the Controls menu and cannot be manually selected.","title":"Other controllers"},{"location":"library/ffmpeg/#controller-tables","text":"","title":"Controller tables"},{"location":"library/ffmpeg/#joypad","text":"User 1 Remap descriptors RetroPad Inputs Seek +60 seconds Seek -60 seconds Seek -10 seconds Seek +10 seconds Cycle Audio Track Cycle Subtitle Track","title":"Joypad"},{"location":"library/ffmpeg/#mouse","text":"RetroMouse Inputs FFmpeg Core Inputs Wheel Up Seek +60 seconds Wheel Down Seek -60 seconds","title":"Mouse"},{"location":"library/ffmpeg/#external-links","text":"Official FFmpeg Website Official FFmpeg Repositories Libretro FFmpeg Core info file Internal Libretro FFmpeg Github Repository Buildbot Libretro FFmpeg Github repository Report Libretro FFmpeg Core Issues Here","title":"External Links"},{"location":"library/flycast/","text":"Sega - Dreamcast/NAOMI (Flycast) \u00b6 Contribute to this documentation \u00b6 In order to propose improvements to this document, visit its corresponding source page on github . Changes are proposed using \"Pull Requests.\" Background \u00b6 Flycast is a multi-platform Sega Dreamcast, NAOMI, and Atomiswave emulator. Why use this core? \u00b6 Awaiting description. How to get and install the flycast core: \u00b6 Start up RetroArch. Inside the main menu, go to 'Online Updater'. Just to make sure we have the latest info files, select 'Update Core Info FIles'. Wait until this is done. Then, select 'Core Updater'. Browse through the list and select 'Sega Dreamcast (flycast)'. After this has finished downloading, the core should now be ready for use! How to play (after installation): \u00b6 Go back to RetroArch's main menu screen. Select 'Load Content'. Browse to the folder that contains the content you want to run. Select the content that you want to run. If you are asked which core to select, choose 'Sega Dreamcast (flycast)'. The game should now start running! How to play NAOMI Games: \u00b6 Run NAOMI games stored in MAME format zip files by following the same process as standard Dreamcast games Run NAOMI GD-ROM format games stored in MAME zip + chd format by running the zip file through RetroArch. The zip file should be stored in your roms folder with the chd file in a subdirectory of the roms folder named after the mame ID. Example (MAME ID=ikaruga) - [ROM FOLDER]/ikaruga.zip - [ROM FOLDER]/ikaruga/gdl-0010.chd Authors \u00b6 flyinghead See also \u00b6 License \u00b6 A summary of the licenses behind RetroArch and its cores can be found here . GPLv2 Extensions \u00b6 Content that can be loaded by the flycast core have the following file extensions: .cdi .gdi .chd .cue .bin .iso .elf .zip .7z .lst .dat .m3u Databases \u00b6 RetroArch database(s) that are associated with the flycast core: Sega - Dreamcast BIOS \u00b6 Required or optional firmware files go in RetroArch's system directory. Filename Description md5sum dc/dc_boot.bin Dreamcast BIOS - Requried for Dreamcast e10c53c2f8b90bab96ead2d368858623 dc/dc_flash.bin Date/Time/Language - Required for Dreamcast 0a93f7940c455905bea6e392dfde92a4 dc/naomi.zip Naomi Bios from MAME - Optional dc/hod2bios.zip Naomi The House of the Dead 2 Bios from MAME - Optional dc/f355dlx.zip Naomi Ferrari F355 Challenge deluxe Bios from MAME - Optional dc/f355bios.zip Naomi Ferrari F355 Challenge twin/deluxe Bios from MAME - Optional dc/airlbios.zip Naomi Airline Pilots deluxe Bios from MAME - Optional dc/awbios.zip Atomiswave BIOS from MAME - Optional Attention naomi.zip must include the epr-21576g.ic27 file (md5sum:3bffafac42a7767d8dcecf771f5552ba) All bios files need to be in a directory named 'dc' in RetroArch's system directory. Features \u00b6 Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2714 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2714 Username \u2715 Crop Overscan (in RetroArch's Video settings) \u2715 Directories \u00b6 The FlyCast core's directory name is 'Flycast' The FlyCast core creates these files in RetroArch's system directory. dc/vmu_save_A1.bin dc/vmu_save_B1.bin dc/vmu_save_C1.bin dc/vmu_save_D1.bin dc/data/dc_nvmem.bin dc directory () -- vmu_save_A1.bin () -- vmu_save_B1.bin () -- vmu_save_C1.bin () -- vmu_save_D1.bin () -- data directory () --- dc_nvmem.bin () Core provided aspect ratio \u00b6 FlyCast's core provided aspect ratio is 4/3. Rumble \u00b6 Rumble only works when the Joypad being used has rumble functionality and the Joypad input driver being used has rumble function implementation (e.g. Xinput ). Core options \u00b6 The FlyCast core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. CPU Mode (restart) ( dynamic_recomplier /generic_recomplier) Awaiting description. Boot to BIOS (restart) ( Off /On) Boot directly into the Dreamcast BIOS menu. Internal resolution (restart) ( 640x480 /1280x960/1920x1440/2560x1920/3200x2400/3840x2880/ 4480x3360/5120x3840/5760x4320/6400x4800/7040x5280/7680x5760/8320x6240/8960x6720/ 9600x7200/10240x7680/10880x8160/11520x8640/12160x9120/12800x9600) Self explanatory. Internal resolution - 640x480 Internal resolution - 1920x1440 Mipmapping (Off/ On ) Awaiting description. Volume modifier ( On /off) A GPU feature that is typically used by games to draw shadows of objects. You should typically leave this on - performance impact should be minimal to negligible. Widescreen hack ( Off /On) Awaiting description. Audio buffer size ( 1024 /2048) Awaiting description. Cable type ( TV (VBS/Y+S/C) /TV (RGB)/VGA (RGB)) Awaiting description. Broadcast ( 2 /\u00be/0/1) Awaiting description. Framerate ( fullspeed /normal) Awaiting description. Region ( 3 /0/\u00bd) Awaiting description. Precompile shaders ( Off /On) Awaiting description. \"Enable RTT (Render To Texture) (Off/ On ) Awaiting description. Purupuru Pack (restart) (Off/ On ) Awaiting description. Controllers \u00b6 Device types \u00b6 The Flycast core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 - 4 device types \u00b6 None - Input disabled. RetroPad - Joypad RetroPad w/Analog - Joypad - There is no reason to switch to this. Controller tables \u00b6 Joypad and analog device type table \u00b6 User 1 - 4 input descriptors RetroPad A A X X Start Start D-Pad Up D-Pad Up D-Pad Down D-Pad Down D-Pad Left D-Pad Left D-Pad Right D-Pad Right B B Y Y L (fierce) L (fierce) R (fierce) R (fierce) L (weak) L (weak) R (weak) R (weak) Analog X X Analog X Analog Y Y Analog Y Multiple-disc games \u00b6 If foo is a multiple-disc game, you should have .chd/cue/cdi/gdi files for each one, e.g. foo (Disc 1).chd , foo (Disc 2).chd , foo (Disc 3).chd . To take advantage of Flycast's Disk Control feature for disk swapping, an index file (a m3u file) should be made. Create a text file and save it as foo.m3u . Then enter your game's .chd/cue/cdi/gdi files on it. The m3u file contents should look something like this: foo.m3u foo (Disc 1).chd foo (Disc 2).chd foo (Disc 3).chd After that, you can load the foo.m3u file in RetroArch with the Flycast core. An alternative is to append discs to the current playlist via the \"Disk Image Append\" option in the Disk Control RetroArch menu. Compatibility \u00b6 General Flycast Issues \u00b6 If the date and time are not being saved properly, please ensure you have the correct dc_flash.bin and dc_bios.bin files (check the md5sum values). Also try deleting all of the dc_nvmem.bin files in the system/dc directory. Once you save to a VMU slot with any game, that VMU becomes inaccessible the next time you load the emulator. The fix for this is to enable the Core Option for \"Boot to BIOS\", exit RA, delete all of the vmu_save*.bin files, start RA/Flycast. It will boot to BIOS where you can select the VMU option, select one of the VMUs, click the \"All\" icon in upper-left, click Delete All and the VMU will be formatted/intialized. Disable the \"Boot to BIOS\" option, restart RA, and everything should be fine. Polygon sorting issues can make objects appear distorted. Use Per-Pixel Alpha sorting for accurate rendering (at the expense of performance). When using an Xbox 360 Controller, analog triggers don't work properly. Use the bumpers instead. Changing games without closing and reloading RetroArch often leads to RetroArch crashing. Game Issue Crazy Taxi (PAL) Player taxis do not emit engine sounds. Crazy Taxi (USA) Player taxis do not emit engine sounds. Jet Grind Radio (USA) Police reports during levels do not display correctly. Sonic Adventure (PAL) Must be set to use \"VGA\" output in core options, as \"TV\" mode will cause all subsequent FMV to make RetroArch become unresponsive. Unreal Tournament (USA) Set Cable Type to 'VGA (RGB)', otherwise the game will crash at start. External Links \u00b6 Libretro Flycast Core info file Libretro Flycast Github Repository Report Flycast Core Issues Here","title":"Sega - Dreamcast (flycast)"},{"location":"library/flycast/#sega-dreamcastnaomi-flycast","text":"","title":"Sega - Dreamcast/NAOMI (Flycast)"},{"location":"library/flycast/#contribute-to-this-documentation","text":"In order to propose improvements to this document, visit its corresponding source page on github . Changes are proposed using \"Pull Requests.\"","title":"Contribute to this documentation"},{"location":"library/flycast/#background","text":"Flycast is a multi-platform Sega Dreamcast, NAOMI, and Atomiswave emulator.","title":"Background"},{"location":"library/flycast/#why-use-this-core","text":"Awaiting description.","title":"Why use this core?"},{"location":"library/flycast/#how-to-get-and-install-the-flycast-core","text":"Start up RetroArch. Inside the main menu, go to 'Online Updater'. Just to make sure we have the latest info files, select 'Update Core Info FIles'. Wait until this is done. Then, select 'Core Updater'. Browse through the list and select 'Sega Dreamcast (flycast)'. After this has finished downloading, the core should now be ready for use!","title":"How to get and install the flycast core:"},{"location":"library/flycast/#how-to-play-after-installation","text":"Go back to RetroArch's main menu screen. Select 'Load Content'. Browse to the folder that contains the content you want to run. Select the content that you want to run. If you are asked which core to select, choose 'Sega Dreamcast (flycast)'. The game should now start running!","title":"How to play (after installation):"},{"location":"library/flycast/#how-to-play-naomi-games","text":"Run NAOMI games stored in MAME format zip files by following the same process as standard Dreamcast games Run NAOMI GD-ROM format games stored in MAME zip + chd format by running the zip file through RetroArch. The zip file should be stored in your roms folder with the chd file in a subdirectory of the roms folder named after the mame ID. Example (MAME ID=ikaruga) - [ROM FOLDER]/ikaruga.zip - [ROM FOLDER]/ikaruga/gdl-0010.chd","title":"How to play NAOMI Games:"},{"location":"library/flycast/#authors","text":"flyinghead","title":"Authors"},{"location":"library/flycast/#see-also","text":"","title":"See also"},{"location":"library/flycast/#license","text":"A summary of the licenses behind RetroArch and its cores can be found here . GPLv2","title":"License"},{"location":"library/flycast/#extensions","text":"Content that can be loaded by the flycast core have the following file extensions: .cdi .gdi .chd .cue .bin .iso .elf .zip .7z .lst .dat .m3u","title":"Extensions"},{"location":"library/flycast/#databases","text":"RetroArch database(s) that are associated with the flycast core: Sega - Dreamcast","title":"Databases"},{"location":"library/flycast/#bios","text":"Required or optional firmware files go in RetroArch's system directory. Filename Description md5sum dc/dc_boot.bin Dreamcast BIOS - Requried for Dreamcast e10c53c2f8b90bab96ead2d368858623 dc/dc_flash.bin Date/Time/Language - Required for Dreamcast 0a93f7940c455905bea6e392dfde92a4 dc/naomi.zip Naomi Bios from MAME - Optional dc/hod2bios.zip Naomi The House of the Dead 2 Bios from MAME - Optional dc/f355dlx.zip Naomi Ferrari F355 Challenge deluxe Bios from MAME - Optional dc/f355bios.zip Naomi Ferrari F355 Challenge twin/deluxe Bios from MAME - Optional dc/airlbios.zip Naomi Airline Pilots deluxe Bios from MAME - Optional dc/awbios.zip Atomiswave BIOS from MAME - Optional Attention naomi.zip must include the epr-21576g.ic27 file (md5sum:3bffafac42a7767d8dcecf771f5552ba) All bios files need to be in a directory named 'dc' in RetroArch's system directory.","title":"BIOS"},{"location":"library/flycast/#features","text":"Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2714 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2714 Username \u2715 Crop Overscan (in RetroArch's Video settings) \u2715","title":"Features"},{"location":"library/flycast/#directories","text":"The FlyCast core's directory name is 'Flycast' The FlyCast core creates these files in RetroArch's system directory. dc/vmu_save_A1.bin dc/vmu_save_B1.bin dc/vmu_save_C1.bin dc/vmu_save_D1.bin dc/data/dc_nvmem.bin dc directory () -- vmu_save_A1.bin () -- vmu_save_B1.bin () -- vmu_save_C1.bin () -- vmu_save_D1.bin () -- data directory () --- dc_nvmem.bin ()","title":"Directories"},{"location":"library/flycast/#core-provided-aspect-ratio","text":"FlyCast's core provided aspect ratio is 4/3.","title":"Core provided aspect ratio"},{"location":"library/flycast/#rumble","text":"Rumble only works when the Joypad being used has rumble functionality and the Joypad input driver being used has rumble function implementation (e.g. Xinput ).","title":"Rumble"},{"location":"library/flycast/#core-options","text":"The FlyCast core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. CPU Mode (restart) ( dynamic_recomplier /generic_recomplier) Awaiting description. Boot to BIOS (restart) ( Off /On) Boot directly into the Dreamcast BIOS menu. Internal resolution (restart) ( 640x480 /1280x960/1920x1440/2560x1920/3200x2400/3840x2880/ 4480x3360/5120x3840/5760x4320/6400x4800/7040x5280/7680x5760/8320x6240/8960x6720/ 9600x7200/10240x7680/10880x8160/11520x8640/12160x9120/12800x9600) Self explanatory. Internal resolution - 640x480 Internal resolution - 1920x1440 Mipmapping (Off/ On ) Awaiting description. Volume modifier ( On /off) A GPU feature that is typically used by games to draw shadows of objects. You should typically leave this on - performance impact should be minimal to negligible. Widescreen hack ( Off /On) Awaiting description. Audio buffer size ( 1024 /2048) Awaiting description. Cable type ( TV (VBS/Y+S/C) /TV (RGB)/VGA (RGB)) Awaiting description. Broadcast ( 2 /\u00be/0/1) Awaiting description. Framerate ( fullspeed /normal) Awaiting description. Region ( 3 /0/\u00bd) Awaiting description. Precompile shaders ( Off /On) Awaiting description. \"Enable RTT (Render To Texture) (Off/ On ) Awaiting description. Purupuru Pack (restart) (Off/ On ) Awaiting description.","title":"Core options"},{"location":"library/flycast/#controllers","text":"","title":"Controllers"},{"location":"library/flycast/#device-types","text":"The Flycast core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Device types"},{"location":"library/flycast/#user-1-4-device-types","text":"None - Input disabled. RetroPad - Joypad RetroPad w/Analog - Joypad - There is no reason to switch to this.","title":"User 1 - 4 device types"},{"location":"library/flycast/#controller-tables","text":"","title":"Controller tables"},{"location":"library/flycast/#joypad-and-analog-device-type-table","text":"User 1 - 4 input descriptors RetroPad A A X X Start Start D-Pad Up D-Pad Up D-Pad Down D-Pad Down D-Pad Left D-Pad Left D-Pad Right D-Pad Right B B Y Y L (fierce) L (fierce) R (fierce) R (fierce) L (weak) L (weak) R (weak) R (weak) Analog X X Analog X Analog Y Y Analog Y","title":"Joypad and analog device type table"},{"location":"library/flycast/#multiple-disc-games","text":"If foo is a multiple-disc game, you should have .chd/cue/cdi/gdi files for each one, e.g. foo (Disc 1).chd , foo (Disc 2).chd , foo (Disc 3).chd . To take advantage of Flycast's Disk Control feature for disk swapping, an index file (a m3u file) should be made. Create a text file and save it as foo.m3u . Then enter your game's .chd/cue/cdi/gdi files on it. The m3u file contents should look something like this: foo.m3u foo (Disc 1).chd foo (Disc 2).chd foo (Disc 3).chd After that, you can load the foo.m3u file in RetroArch with the Flycast core. An alternative is to append discs to the current playlist via the \"Disk Image Append\" option in the Disk Control RetroArch menu.","title":"Multiple-disc games"},{"location":"library/flycast/#compatibility","text":"","title":"Compatibility"},{"location":"library/flycast/#general-flycast-issues","text":"If the date and time are not being saved properly, please ensure you have the correct dc_flash.bin and dc_bios.bin files (check the md5sum values). Also try deleting all of the dc_nvmem.bin files in the system/dc directory. Once you save to a VMU slot with any game, that VMU becomes inaccessible the next time you load the emulator. The fix for this is to enable the Core Option for \"Boot to BIOS\", exit RA, delete all of the vmu_save*.bin files, start RA/Flycast. It will boot to BIOS where you can select the VMU option, select one of the VMUs, click the \"All\" icon in upper-left, click Delete All and the VMU will be formatted/intialized. Disable the \"Boot to BIOS\" option, restart RA, and everything should be fine. Polygon sorting issues can make objects appear distorted. Use Per-Pixel Alpha sorting for accurate rendering (at the expense of performance). When using an Xbox 360 Controller, analog triggers don't work properly. Use the bumpers instead. Changing games without closing and reloading RetroArch often leads to RetroArch crashing. Game Issue Crazy Taxi (PAL) Player taxis do not emit engine sounds. Crazy Taxi (USA) Player taxis do not emit engine sounds. Jet Grind Radio (USA) Police reports during levels do not display correctly. Sonic Adventure (PAL) Must be set to use \"VGA\" output in core options, as \"TV\" mode will cause all subsequent FMV to make RetroArch become unresponsive. Unreal Tournament (USA) Set Cable Type to 'VGA (RGB)', otherwise the game will crash at start.","title":"General Flycast Issues"},{"location":"library/flycast/#external-links","text":"Libretro Flycast Core info file Libretro Flycast Github Repository Report Flycast Core Issues Here","title":"External Links"},{"location":"library/fmsx/","text":"MSX (fMSX) \u00b6 Contribute to this documentation \u00b6 In order to propose improvements to this document, visit its corresponding source page on github . Changes are proposed using \"Pull Requests.\" There is a To-Do list for libretro/docs here You can submit suggestions or issues regarding documentation at the libretro/docs issue tracker or in our forum thread . Background \u00b6 fMSX is a program that emulates MSX, MSX2, and MSX2+ 8bit home computers. Why use this core? \u00b6 Awaiting description. How to get and install the fMSX core: \u00b6 Start up RetroArch. Inside the main menu, go to 'Online Updater'. Just to make sure we have the latest info files, select 'Update Core Info FIles'. Wait until this is done. Then, select 'Core Updater'. Browse through the list and select 'MSX (fMSX)'. After this has finished downloading, the core should now be ready for use! How to start (after installation): \u00b6 Go back to RetroArch's main menu screen. Select 'Load Content'. Browse to the folder that contains the content you want to run. Select the content that you want to run. If you are asked which core to select, choose 'MSX (fMSX)'. The content should now start running! Authors \u00b6 Marat Fayzullin See also \u00b6 MSX \u00b6 MSX/SVI/ColecoVision/SG-1000 (blueMSX) License \u00b6 A summary of the licenses behind RetroArch and its cores can be found here . The fMSX core is licensed under Non-commercial Extensions \u00b6 Content that can be loaded by the fMSX core have the following file extensions: .rom .mx1 .mx2 .dsk .cas Databases \u00b6 RetroArch database(s) that are associated with the fMSX core: Microsoft - MSX Microsoft - MSX2 BIOS \u00b6 Required or optional firmware files go in RetroArch's system directory. Filename Description md5sum MSX.ROM MSX BIOS - Required 364a1a579fe5cb8dba54519bcfcdac0d MSX2.ROM MSX2 BIOS - Required ec3a01c91f24fbddcbcab0ad301bc9ef MSX2EXT.ROM MSX2 ExtROM - Required 2183c2aff17cf4297bdb496de78c2e8a MSX2P.ROM MSX2+ BIOS - Required 847cc025ffae665487940ff2639540e5 MSX2PEXT.ROM MSX2+ ExtROM - Required 7c8243c71d8f143b2531f01afa6a05dc DISK.ROM DiskROM/BDOS (optional) 80dcd1ad1a4cf65d64b7ba10504e8190 FMPAC.ROM FMPAC BIOS (optional) 6f69cc8b5ed761b03afd78000dfb0e19 MSXDOS2.ROM MSX-DOS 2 (optional) 6418d091cd6907bbcf940324339e43bb PAINTER.ROM Yamaha Painter (optional) 403cdea1cbd2bb24fae506941f8f655e KANJI.ROM Kanji Font (optional) febe8782b466d7c3b16de6d104826b34 This list of compatible ROMS is not complete. Features \u00b6 RetroArch-level settings or features that the fMSX core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves - States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2714 Username \u2715 Language \u2715 Crop Overscan \u2715 Directories \u00b6 The fMSX core's directory name is 'fMSX' The fMSX core saves/loads to/from these directories. RetroArch's State directory 'content-name'.state# (State) Geometry and timing \u00b6 The fMSX core's internal FPS is 60 The fMSX core's internal sample rate is 48000 Hz The fMSX core's core provided aspect ratio is (Ratio) Core options \u00b6 The fMSX core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. MSX Mode ( MSX2+ /MSX1/MSX2) Select MSX model. MSX Video Mode ( NTSC /PAL) Awaiting description. MSX Mapper Type Mode ( Guess Mapper Type A /Guess Mapper Type B) Awaiting description. MSX Main Memory ( Auto /64KB/128KB/256KB/512KB) Awaiting description. MSX Video Memory ( Auto /32KB/64KB/128KB/192KB) Awaiting description. Controllers \u00b6 Device types \u00b6 The fMSX core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 device types \u00b6 None - Input disabled. Joystick - Joypad Joystick + Emulated Keyboard - Joypad Emulated Keyboard - Joypad Keyboard - Keyboard - Has Keymapper support User 2 device types \u00b6 None - Input disabled. Joystick - Joypad Controller tables \u00b6 Joypad and analog device type table \u00b6 User 1 - 2 Remap descriptors for 'Joystick device type' RetroPad Inputs Fire B Stick Up Stick Down Stick Left Stick Right Fire A User 1 Remap descriptors for 'Joystick + Emulated Keyboard' device type RetroPad Inputs Fire B Spacebar F2 F1 Stick Up Stick Down Stick Left Stick Right Fire A F3 F4 F5 Graph Ctrl Enter Escape User 1 Remap descriptors for 'Emulated Keyboard' device type RetroPad Inputs Enter M F4 F1 Arrow Up Arrow Down Arrow Left Arrow Right Space N F2 F3 Graph Ctrl F5 Escape Keyboard device type table \u00b6 RetroKeyboard Inputs Keyboard Keyboard Backspace Backspace Keyboard Tab Tab Keyboard Return Enter Keyboard Pause Stop Keyboard Escape Escape Keyboard Space Space Keyboard ! ! Keyboard \" \" Keyboard # # Keyboard $ $ Keyboard & & Keyboard ' ` Keyboard ( ( Keyboard ) ) Keyboard * # Keyboard + + Keyboard , , Keyboard . . Keyboard / / Keyboard 0 0 Keyboard 1 1 Keyboard 2 2 Keyboard 3 3 Keyboard 4 4 Keyboard 5 5 Keyboard 6 6 Keyboard 7 7 Keyboard 8 8 Keyboard 9 9 Keyboard : : Keyboard ; ; Keyboard - - Keyboard = = Keyboard < < Keyboard > > Keyboard ? ? Keyboard @ @ Keyboard [ [ Keyboard \\ \\ Keyboard ] ] Keyboard ^ ^ Keyboard _ _ Keyboard ` - Keyboard a a Keyboard b b Keyboard c c Keyboard d d Keyboard e e Keyboard f f Keyboard g g Keyboard h h Keyboard i i Keyboard j j Keyboard k k Keyboard l l Keyboard m m Keyboard n n Keyboard o o Keyboard p p Keyboard q q Keyboard r r Keyboard s s Keyboard t t Keyboard u u Keyboard v v Keyboard w w Keyboard x x Keyboard y y Keyboard z z Keyboard Delete Delete Keyboard Numpad 0 Numpad 0 Keyboard Numpad 1 Numpad 1 Keyboard Numpad 2 Numpad 2 Keyboard Numpad 3 Numpad 3 Keyboard Numpad 4 Numpad 4 Keyboard Numpad 5 Numpad 5 Keyboard Numpad 6 Numpad 6 Keyboard Numpad 7 Numpad 7 Keyboard Numpad 8 Numpad 8 Keyboard Numpad 9 Numpad 9 Keyboard Up Up Keyboard Down Down Keyboard Right Right Keyboard Left Left Keyboard Insert Insert Keyboard Home Home Keyboard End Select Keyboard Page Up Country Keyboard F1 F1 Keyboard F2 F2 Keyboard F3 F3 Keyboard F4 F4 Keyboard F5 F5 Keyboard Caps Lock Caps Lock Keyboard Scroll Lock Shift Keyboard Right Shift Shift Keyboard Right Control Control Keyboard Left Control Control Keyboard Left Alt Graph Compatibility \u00b6 Awaiting description. External Links \u00b6 Libretro fMSX Core info file Libretro fMSX Github Repository Report Libretro fMSX Core Issues Here Official fMSX Website Official fMSX Downloads","title":"Microsoft - MSX (fMSX)"},{"location":"library/fmsx/#msx-fmsx","text":"","title":"MSX (fMSX)"},{"location":"library/fmsx/#contribute-to-this-documentation","text":"In order to propose improvements to this document, visit its corresponding source page on github . Changes are proposed using \"Pull Requests.\" There is a To-Do list for libretro/docs here You can submit suggestions or issues regarding documentation at the libretro/docs issue tracker or in our forum thread .","title":"Contribute to this documentation"},{"location":"library/fmsx/#background","text":"fMSX is a program that emulates MSX, MSX2, and MSX2+ 8bit home computers.","title":"Background"},{"location":"library/fmsx/#why-use-this-core","text":"Awaiting description.","title":"Why use this core?"},{"location":"library/fmsx/#how-to-get-and-install-the-fmsx-core","text":"Start up RetroArch. Inside the main menu, go to 'Online Updater'. Just to make sure we have the latest info files, select 'Update Core Info FIles'. Wait until this is done. Then, select 'Core Updater'. Browse through the list and select 'MSX (fMSX)'. After this has finished downloading, the core should now be ready for use!","title":"How to get and install the fMSX core:"},{"location":"library/fmsx/#how-to-start-after-installation","text":"Go back to RetroArch's main menu screen. Select 'Load Content'. Browse to the folder that contains the content you want to run. Select the content that you want to run. If you are asked which core to select, choose 'MSX (fMSX)'. The content should now start running!","title":"How to start (after installation):"},{"location":"library/fmsx/#authors","text":"Marat Fayzullin","title":"Authors"},{"location":"library/fmsx/#see-also","text":"","title":"See also"},{"location":"library/fmsx/#msx","text":"MSX/SVI/ColecoVision/SG-1000 (blueMSX)","title":"MSX"},{"location":"library/fmsx/#license","text":"A summary of the licenses behind RetroArch and its cores can be found here . The fMSX core is licensed under Non-commercial","title":"License"},{"location":"library/fmsx/#extensions","text":"Content that can be loaded by the fMSX core have the following file extensions: .rom .mx1 .mx2 .dsk .cas","title":"Extensions"},{"location":"library/fmsx/#databases","text":"RetroArch database(s) that are associated with the fMSX core: Microsoft - MSX Microsoft - MSX2","title":"Databases"},{"location":"library/fmsx/#bios","text":"Required or optional firmware files go in RetroArch's system directory. Filename Description md5sum MSX.ROM MSX BIOS - Required 364a1a579fe5cb8dba54519bcfcdac0d MSX2.ROM MSX2 BIOS - Required ec3a01c91f24fbddcbcab0ad301bc9ef MSX2EXT.ROM MSX2 ExtROM - Required 2183c2aff17cf4297bdb496de78c2e8a MSX2P.ROM MSX2+ BIOS - Required 847cc025ffae665487940ff2639540e5 MSX2PEXT.ROM MSX2+ ExtROM - Required 7c8243c71d8f143b2531f01afa6a05dc DISK.ROM DiskROM/BDOS (optional) 80dcd1ad1a4cf65d64b7ba10504e8190 FMPAC.ROM FMPAC BIOS (optional) 6f69cc8b5ed761b03afd78000dfb0e19 MSXDOS2.ROM MSX-DOS 2 (optional) 6418d091cd6907bbcf940324339e43bb PAINTER.ROM Yamaha Painter (optional) 403cdea1cbd2bb24fae506941f8f655e KANJI.ROM Kanji Font (optional) febe8782b466d7c3b16de6d104826b34 This list of compatible ROMS is not complete.","title":"BIOS"},{"location":"library/fmsx/#features","text":"RetroArch-level settings or features that the fMSX core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves - States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2714 Username \u2715 Language \u2715 Crop Overscan \u2715","title":"Features"},{"location":"library/fmsx/#directories","text":"The fMSX core's directory name is 'fMSX' The fMSX core saves/loads to/from these directories. RetroArch's State directory 'content-name'.state# (State)","title":"Directories"},{"location":"library/fmsx/#geometry-and-timing","text":"The fMSX core's internal FPS is 60 The fMSX core's internal sample rate is 48000 Hz The fMSX core's core provided aspect ratio is (Ratio)","title":"Geometry and timing"},{"location":"library/fmsx/#core-options","text":"The fMSX core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. MSX Mode ( MSX2+ /MSX1/MSX2) Select MSX model. MSX Video Mode ( NTSC /PAL) Awaiting description. MSX Mapper Type Mode ( Guess Mapper Type A /Guess Mapper Type B) Awaiting description. MSX Main Memory ( Auto /64KB/128KB/256KB/512KB) Awaiting description. MSX Video Memory ( Auto /32KB/64KB/128KB/192KB) Awaiting description.","title":"Core options"},{"location":"library/fmsx/#controllers","text":"","title":"Controllers"},{"location":"library/fmsx/#device-types","text":"The fMSX core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Device types"},{"location":"library/fmsx/#user-1-device-types","text":"None - Input disabled. Joystick - Joypad Joystick + Emulated Keyboard - Joypad Emulated Keyboard - Joypad Keyboard - Keyboard - Has Keymapper support","title":"User 1 device types"},{"location":"library/fmsx/#user-2-device-types","text":"None - Input disabled. Joystick - Joypad","title":"User 2 device types"},{"location":"library/fmsx/#controller-tables","text":"","title":"Controller tables"},{"location":"library/fmsx/#joypad-and-analog-device-type-table","text":"User 1 - 2 Remap descriptors for 'Joystick device type' RetroPad Inputs Fire B Stick Up Stick Down Stick Left Stick Right Fire A User 1 Remap descriptors for 'Joystick + Emulated Keyboard' device type RetroPad Inputs Fire B Spacebar F2 F1 Stick Up Stick Down Stick Left Stick Right Fire A F3 F4 F5 Graph Ctrl Enter Escape User 1 Remap descriptors for 'Emulated Keyboard' device type RetroPad Inputs Enter M F4 F1 Arrow Up Arrow Down Arrow Left Arrow Right Space N F2 F3 Graph Ctrl F5 Escape","title":"Joypad and analog device type table"},{"location":"library/fmsx/#keyboard-device-type-table","text":"RetroKeyboard Inputs Keyboard Keyboard Backspace Backspace Keyboard Tab Tab Keyboard Return Enter Keyboard Pause Stop Keyboard Escape Escape Keyboard Space Space Keyboard ! ! Keyboard \" \" Keyboard # # Keyboard $ $ Keyboard & & Keyboard ' ` Keyboard ( ( Keyboard ) ) Keyboard * # Keyboard + + Keyboard , , Keyboard . . Keyboard / / Keyboard 0 0 Keyboard 1 1 Keyboard 2 2 Keyboard 3 3 Keyboard 4 4 Keyboard 5 5 Keyboard 6 6 Keyboard 7 7 Keyboard 8 8 Keyboard 9 9 Keyboard : : Keyboard ; ; Keyboard - - Keyboard = = Keyboard < < Keyboard > > Keyboard ? ? Keyboard @ @ Keyboard [ [ Keyboard \\ \\ Keyboard ] ] Keyboard ^ ^ Keyboard _ _ Keyboard ` - Keyboard a a Keyboard b b Keyboard c c Keyboard d d Keyboard e e Keyboard f f Keyboard g g Keyboard h h Keyboard i i Keyboard j j Keyboard k k Keyboard l l Keyboard m m Keyboard n n Keyboard o o Keyboard p p Keyboard q q Keyboard r r Keyboard s s Keyboard t t Keyboard u u Keyboard v v Keyboard w w Keyboard x x Keyboard y y Keyboard z z Keyboard Delete Delete Keyboard Numpad 0 Numpad 0 Keyboard Numpad 1 Numpad 1 Keyboard Numpad 2 Numpad 2 Keyboard Numpad 3 Numpad 3 Keyboard Numpad 4 Numpad 4 Keyboard Numpad 5 Numpad 5 Keyboard Numpad 6 Numpad 6 Keyboard Numpad 7 Numpad 7 Keyboard Numpad 8 Numpad 8 Keyboard Numpad 9 Numpad 9 Keyboard Up Up Keyboard Down Down Keyboard Right Right Keyboard Left Left Keyboard Insert Insert Keyboard Home Home Keyboard End Select Keyboard Page Up Country Keyboard F1 F1 Keyboard F2 F2 Keyboard F3 F3 Keyboard F4 F4 Keyboard F5 F5 Keyboard Caps Lock Caps Lock Keyboard Scroll Lock Shift Keyboard Right Shift Shift Keyboard Right Control Control Keyboard Left Control Control Keyboard Left Alt Graph","title":"Keyboard device type table"},{"location":"library/fmsx/#compatibility","text":"Awaiting description.","title":"Compatibility"},{"location":"library/fmsx/#external-links","text":"Libretro fMSX Core info file Libretro fMSX Github Repository Report Libretro fMSX Core Issues Here Official fMSX Website Official fMSX Downloads","title":"External Links"},{"location":"library/freeintv/","text":"Mattel - Intellivision (FreeIntv) \u00b6 Background \u00b6 FreeIntv is a libretro emulation core for the Mattel Intellivision designed to be compatible with joypads from the SNES era forward even if they originally required a number pad. Attention FreeIntv does not currently emulate Entertainment Computer System (ECS) and Intellivoice functionality. Contributions to the source are welcome! Author/License \u00b6 The FreeIntv core has been authored by David Richardson The FreeIntv core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the FreeIntv core have the following file extensions: .int .rom .bin Databases \u00b6 RetroArch database(s) that are associated with the FreeIntv core: Mattel - Intellivision BIOS \u00b6 Required or optional firmware files go in the frontend's system directory. Filename Description md5sum exec.bin Executive ROM - Required 62e761035cb657903761800f4437b8af grom.bin Graphics ROM - Required 0cd5946c6473e42e8e4c2137785e427f Features \u00b6 Frontend-level settings or features that the FreeIntv core respects. Feature Supported Restart \u2715 Screenshots \u2714 Saves \u2715 States \u2715 Rewind \u2715 Netplay (State based) \u2715 Core Options \u2715 RetroAchievements \u2715 Cheats (Cheats menu) \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The FreeIntv core's directory name is 'FreeIntv' Geometry and timing \u00b6 The FreeIntv core's core provided FPS is 60 The FreeIntv core's core provided sample rate is 44100 Hz The FreeIntv core's core provided aspect ratio is 11/7 Controller overlays \u00b6 Mattel Intellivision games were often meant to be played with game-specific cards overlaid on the numeric keypad. These overlays convey information which can be very useful in gameplay. Images of a limited selection of Intellivision titles are available at: http://www.intellivisionlives.com/bluesky/games/instructions.shtml Controls \u00b6 Definitions: Mini-Keypad - Allows the user to view and select keys from a small Intellivision pad in the lower corner of the display. Controller Swap - Some Intellivision games expect the left controller to be player one, others expect the right controller. This isn't a problem if you have two controllers (and don't mind juggling them) but users with only one controller or using a portable setup would be effectively locked out of some games. Controller Swap swaps the two controller interfaces so that the player does not have to physically swap controllers. RetroPad FreeIntv Function D-Pad 8-way movement Left Analog Stick 16-way disc A Left Action Button Y Top Action Button X Use the Last Selected Intellivision Keypad Button. In Astrosmash, for example, you can leave \"3\" selected to enable instant access to hyperspace. L/R Activate the Mini-Keypad Start Pause Game Select Controller Swap Compatibility \u00b6 Awaiting description. External Links \u00b6 Official FreeIntv Website Libretro FreeIntv Core info file Libretro FreeIntv Github Repository Intellivision RetroPie Wiki page FreeIntv RetroPie Forums Topic FreeIntv Libretro Forums Topic","title":"Mattel - Intellivision (FreeIntv)"},{"location":"library/freeintv/#mattel-intellivision-freeintv","text":"","title":"Mattel - Intellivision (FreeIntv)"},{"location":"library/freeintv/#background","text":"FreeIntv is a libretro emulation core for the Mattel Intellivision designed to be compatible with joypads from the SNES era forward even if they originally required a number pad. Attention FreeIntv does not currently emulate Entertainment Computer System (ECS) and Intellivoice functionality. Contributions to the source are welcome!","title":"Background"},{"location":"library/freeintv/#authorlicense","text":"The FreeIntv core has been authored by David Richardson The FreeIntv core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/freeintv/#extensions","text":"Content that can be loaded by the FreeIntv core have the following file extensions: .int .rom .bin","title":"Extensions"},{"location":"library/freeintv/#databases","text":"RetroArch database(s) that are associated with the FreeIntv core: Mattel - Intellivision","title":"Databases"},{"location":"library/freeintv/#bios","text":"Required or optional firmware files go in the frontend's system directory. Filename Description md5sum exec.bin Executive ROM - Required 62e761035cb657903761800f4437b8af grom.bin Graphics ROM - Required 0cd5946c6473e42e8e4c2137785e427f","title":"BIOS"},{"location":"library/freeintv/#features","text":"Frontend-level settings or features that the FreeIntv core respects. Feature Supported Restart \u2715 Screenshots \u2714 Saves \u2715 States \u2715 Rewind \u2715 Netplay (State based) \u2715 Core Options \u2715 RetroAchievements \u2715 Cheats (Cheats menu) \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/freeintv/#directories","text":"The FreeIntv core's directory name is 'FreeIntv'","title":"Directories"},{"location":"library/freeintv/#geometry-and-timing","text":"The FreeIntv core's core provided FPS is 60 The FreeIntv core's core provided sample rate is 44100 Hz The FreeIntv core's core provided aspect ratio is 11/7","title":"Geometry and timing"},{"location":"library/freeintv/#controller-overlays","text":"Mattel Intellivision games were often meant to be played with game-specific cards overlaid on the numeric keypad. These overlays convey information which can be very useful in gameplay. Images of a limited selection of Intellivision titles are available at: http://www.intellivisionlives.com/bluesky/games/instructions.shtml","title":"Controller overlays"},{"location":"library/freeintv/#controls","text":"Definitions: Mini-Keypad - Allows the user to view and select keys from a small Intellivision pad in the lower corner of the display. Controller Swap - Some Intellivision games expect the left controller to be player one, others expect the right controller. This isn't a problem if you have two controllers (and don't mind juggling them) but users with only one controller or using a portable setup would be effectively locked out of some games. Controller Swap swaps the two controller interfaces so that the player does not have to physically swap controllers. RetroPad FreeIntv Function D-Pad 8-way movement Left Analog Stick 16-way disc A Left Action Button Y Top Action Button X Use the Last Selected Intellivision Keypad Button. In Astrosmash, for example, you can leave \"3\" selected to enable instant access to hyperspace. L/R Activate the Mini-Keypad Start Pause Game Select Controller Swap","title":"Controls"},{"location":"library/freeintv/#compatibility","text":"Awaiting description.","title":"Compatibility"},{"location":"library/freeintv/#external-links","text":"Official FreeIntv Website Libretro FreeIntv Core info file Libretro FreeIntv Github Repository Intellivision RetroPie Wiki page FreeIntv RetroPie Forums Topic FreeIntv Libretro Forums Topic","title":"External Links"},{"location":"library/fuse/","text":"ZX Spectrum (Fuse) \u00b6 Background \u00b6 The Free Unix Spectrum Emulator (Fuse): an emulator of the 1980s home computer and various clones for Unix, Mac OS X and Windows. The Fuse core has been authored by Team Fuse The Fuse core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here . BIOS \u00b6 Required or optional firmware files go in the frontend's system directory. Attention The BIOS for the last four machines need to be in a directory named 'fuse' in RetroArch's System directory. Spectrum 48K Spectrum 48K (NTSC) Spectrum 128K Spectrum +2 Spectrum +2A Spectrum +3 Spectrum +3e Spectrum SE Timex TC2048 Timex TC2068 Timex TS2068 Spectrum 16K Pentagon 128K Filename Description md5sum fuse/128p-0.rom Pentagon 128K ROM - Required fuse/128p-1.rom Pentagon 128K ROM - Required fuse/trdos.rom Pentagon 128K ROM - Required Pentagon 512K Filename Description md5sum fuse/128p-0.rom Pentagon 512K ROM - Required fuse/128p-1.rom Pentagon 512K ROM - Required fuse/gluck.rom Pentagon 512K ROM - Required fuse/trdos.rom Pentagon 512K ROM - Required Pentagon 1024 Filename Description md5sum fuse/128p-0.rom Pentagon 1024 ROM - Required fuse/128p-1.rom Pentagon 1024 ROM - Required fuse/gluck.rom Pentagon 1024 ROM - Required fuse/trdos.rom Pentagon 1024 ROM - Required Scorpion 256K Filename Description md5sum fuse/256s-0.rom Scorpion 256K ROM - Required fuse/256s-1.rom Scorpion 256K ROM - Required fuse/256s-2.rom Scorpion 256K ROM - Required fuse/256s-3.rom Scorpion 256K ROM - Required Extensions \u00b6 Content that can be loaded by the Fuse core have the following file extensions: .tzx .tap .z80 .rzx .scl .trd RetroArch database(s) that are associated with the Fuse core: Sinclair - ZX Spectrum +3 Sinclair - ZX Spectrum Features \u00b6 Frontend-level settings or features that the Fuse core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2715 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The Fuse core's library name is 'fuse' The Fuse core saves/loads to/from these directories. Frontend's State directory File Description *.state# State Geometry and timing \u00b6 The Fuse core's core provided FPS is (FPS) The Fuse core's core provided sample rate is 44100 Hz The Fuse core's base width is (Base width) The Fuse core's base height is (Base height) The Fuse core's max width is (Max width) The Fuse core's max height is (Max height) The Fuse core's core provided aspect ratio is (Ratio) Games \u00b6 There are hundreds of free, legally available ZX Spectrum games at World of Spectrum . You should start at the Visitor Voted Top 100 Best Games . Core options \u00b6 The Fuse core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Model (needs content load) [fuse_machine] ( Spectrum 48K |Spectrum 48K (NTSC)|Spectrum 128K|Spectrum +2|Spectrum +2A|Spectrum +3|Spectrum +3e|Spectrum SE|Timex TC2048|Timex TC2068|Timex TS2068|Spectrum 16K|Pentagon 128K|Pentagon 512K|Pentagon 1024|Scorpion 256K) Set the machine to emulate. Note that the this setting will have effect only when a new content is loaded. Hide Video Border [fuse_hide_border] ( Off |On) Hides the video border, making the game occupy the entire screen area. Tape Fast Load [fuse_fast_load] (Off| On ) Instantly loads tape files if enabled, or disabled it to see the moving horizontal lines in the video border while the game loads. Tape Load Sound [fuse_load_sound] (Off| On ) Outputs the tape sound if fast load is disabled. Speaker Type [fuse_speaker_type] ( tv speaker |beeper|unfiltered) Applies an audio filter. AV Stereo Separation [fise_ay_stereo_separation] ( none |acb|abc) The AY sound chip stereo separation. Transparent Keyboard Overlay [fuse_key_ovrlay_transp] (Off| On ) If the keyboard overlay is transparent or opaque. Time to Release Key in ms [fuse_key_hold_time] ( 500 |1000|100|300) How much time to keep a key pressed before releasing it (used when a key is pressed using the keyboard overlay). Joy Left mapping [fuse_joypad_left] ( |0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|Enter|Caps|Symbol|Space) Map the Left joypad input to a keyboard input. Joy Right mapping [fuse_joypad_right] ( |0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|Enter|Caps|Symbol|Space) Map the Right joypad input to a keyboard input. Joy Up mapping [fuse_joypad_up] ( |0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|Enter|Caps|Symbol|Space) Map the Up joypad input to a keyboard input. Joy Down mapping [fuse_joypad_down] ( |0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|Enter|Caps|Symbol|Space) Map the Down joypad input to a keyboard input. Joy Start mapping [fuse_joypad_start] ( |0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|Enter|Caps|Symbol|Space) Map the Start joypad input to a keyboard input. Joy A mapping [fuse_joypad_a] ( |0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|Enter|Caps|Symbol|Space) Map the A joypad input to a keyboard input. Joy B mapping [fuse_joypad_b] ( |0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|Enter|Caps|Symbol|Space) Map the B joypad input to a keyboard input. Joy X mapping [fuse_joypad_x] ( |0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|Enter|Caps|Symbol|Space) Map the X joypad input to a keyboard input. Joy Y mapping [fuse_joypad_y] ( |0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|Enter|Caps|Symbol|Space) Map the Y joypad input to a keyboard input. Joy L mapping [fuse_joypad_l] ( |0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|Enter|Caps|Symbol|Space) Map the L joypad input to a keyboard input. Joy R mapping [fuse_joypad_r] ( |0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|Enter|Caps|Symbol|Space) Map the R joypad input to a keyboard input. Joy L2 mapping [fuse_joypad_l2] ( |0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|Enter|Caps|Symbol|Space) Map the L2 joypad input to a keyboard input. Joy R2 mapping [fuse_joypad_r2] ( |0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|Enter|Caps|Symbol|Space) Map the R2 joypad input to a keyboard input. Joy L3 mapping [fuse_joypad_l3] ( |0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|Enter|Caps|Symbol|Space) Map the L3 joypad input to a keyboard input. Joy R3 mapping [fuse_joypad_r3] ( |0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|Enter|Caps|Symbol|Space) Map the R3 joypad input to a keyboard input. Controllers usage \u00b6 There are seven types of joysticks emulated: Cursor Kempston Sinclair 1 Sinclair 2 Timex 1 Timex 2 Fuller Joystick Users can configure their joystick types in the input configuration on the front end. However, fuse-libretro allows for two joysticks at maximum so only users one and two can actually use theirs in the emulation. Users 1 and 2 can choose any of the joysticks as their device types, user 3 can only choose the Sinclair Keyboard. Buttons A, X and Y are mapped to the joystick's fire button, and button B is mapped to the UP directional button. Buttons L1 and R1 are mapped to RETURN and SPACE, respectively. The SELECT button brings up the embedded, on-screen keyboard which is useful if you only have controllers attached to your box. There are some conflicts in the way the input devices interact because of the use of the physical keyboard keys as joystick buttons. For a good gaming experience, set the user device types as follows: For joystick games: Set user 1 to a joystick type. Optionally, set user 2 to another joystick type (local cooperative games). Set user 3 to none. This way, you can use L1 as RETURN, R1 as SPACE, and SELECT to bring the embedded keyboard. For keyboard games: Set users 1 and 2 to none, and user 3 to Sinclair Keyboard. You won't have any joystick and the embedded keyboard won't work, but the entire physical keyboard will be available for you to type in those text adventure commands. If you set a joystick along with the keyboard, the joystick will work just fine except for the bindings to RETURN and SPACE, and the keyboard won't register the keys assigned to the Cursor joystick, or to the L1 and R1 buttons for all other joystick types. Device types \u00b6 The Fuse core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 - 2 device types \u00b6 None - Input disabled. RetroPad - Joypad Cursor Joystick - Joypad Kempston Joystick - Joypad Sinclair 1 Joystick - Joypad Sinclair 2 Joystick - Joypad Timex 1 Joystick - Joypad Timex 2 Joystick - Joypad Fuller Joystick - Joypad User 3 device types \u00b6 None - Input disabled. RetroPad - Joypad Sinclair Keyboard - Keyboard - Has keymapper support Joypad \u00b6 User 1 - 7 input descriptors RetroPad Inputs Up Fire Keyboard overlay Up Down Left Right Fire Fire Enter Space Keyboard \u00b6 RetroKeyboard Inputs Sinclair Keyboard Keyboard Backspace Backspace Keyboard Return Return Keyboard Space Space Keyboard 0 0 Keyboard 1 1 Keyboard 2 2 Keyboard 3 3 Keyboard 4 4 Keyboard 5 5 Keyboard 6 6 Keyboard 7 7 Keyboard 8 8 Keyboard 9 9 Keyboard a a Keyboard b b Keyboard c c Keyboard d d Keyboard e e Keyboard f f Keyboard g g Keyboard h h Keyboard i i Keyboard j j Keyboard k k Keyboard l l Keyboard m m Keyboard n n Keyboard o o Keyboard p p Keyboard q q Keyboard r r Keyboard s s Keyboard t t Keyboard u u Keyboard v v Keyboard w w Keyboard x x Keyboard y y Keyboard z z Keyboard Right Shift Right Shift Keyboard Left Shift Left Shift Keyboard Right Control Right Control Keyboard Left Control Left Control Keyboard Right Alt Right Alt Keyboard Left Alt Left Alt Keyboard Right Meta Right Meta Keyboard Left Meta Left Meta Keyboard Right Super Right Super Keyboard Left Super Left Super External Links \u00b6 Official Fuse Website Official Fuse SourceForge Repository Libretro Fuse Core info file Libretro Fuse Github Repository Report Libretro Fuse Core Issues Here","title":"Sinclair - ZX Spectrum (Fuse)"},{"location":"library/fuse/#zx-spectrum-fuse","text":"","title":"ZX Spectrum (Fuse)"},{"location":"library/fuse/#background","text":"The Free Unix Spectrum Emulator (Fuse): an emulator of the 1980s home computer and various clones for Unix, Mac OS X and Windows. The Fuse core has been authored by Team Fuse The Fuse core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Background"},{"location":"library/fuse/#bios","text":"Required or optional firmware files go in the frontend's system directory. Attention The BIOS for the last four machines need to be in a directory named 'fuse' in RetroArch's System directory. Spectrum 48K Spectrum 48K (NTSC) Spectrum 128K Spectrum +2 Spectrum +2A Spectrum +3 Spectrum +3e Spectrum SE Timex TC2048 Timex TC2068 Timex TS2068 Spectrum 16K Pentagon 128K Filename Description md5sum fuse/128p-0.rom Pentagon 128K ROM - Required fuse/128p-1.rom Pentagon 128K ROM - Required fuse/trdos.rom Pentagon 128K ROM - Required Pentagon 512K Filename Description md5sum fuse/128p-0.rom Pentagon 512K ROM - Required fuse/128p-1.rom Pentagon 512K ROM - Required fuse/gluck.rom Pentagon 512K ROM - Required fuse/trdos.rom Pentagon 512K ROM - Required Pentagon 1024 Filename Description md5sum fuse/128p-0.rom Pentagon 1024 ROM - Required fuse/128p-1.rom Pentagon 1024 ROM - Required fuse/gluck.rom Pentagon 1024 ROM - Required fuse/trdos.rom Pentagon 1024 ROM - Required Scorpion 256K Filename Description md5sum fuse/256s-0.rom Scorpion 256K ROM - Required fuse/256s-1.rom Scorpion 256K ROM - Required fuse/256s-2.rom Scorpion 256K ROM - Required fuse/256s-3.rom Scorpion 256K ROM - Required","title":"BIOS"},{"location":"library/fuse/#extensions","text":"Content that can be loaded by the Fuse core have the following file extensions: .tzx .tap .z80 .rzx .scl .trd RetroArch database(s) that are associated with the Fuse core: Sinclair - ZX Spectrum +3 Sinclair - ZX Spectrum","title":"Extensions"},{"location":"library/fuse/#features","text":"Frontend-level settings or features that the Fuse core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2715 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/fuse/#directories","text":"The Fuse core's library name is 'fuse' The Fuse core saves/loads to/from these directories. Frontend's State directory File Description *.state# State","title":"Directories"},{"location":"library/fuse/#geometry-and-timing","text":"The Fuse core's core provided FPS is (FPS) The Fuse core's core provided sample rate is 44100 Hz The Fuse core's base width is (Base width) The Fuse core's base height is (Base height) The Fuse core's max width is (Max width) The Fuse core's max height is (Max height) The Fuse core's core provided aspect ratio is (Ratio)","title":"Geometry and timing"},{"location":"library/fuse/#games","text":"There are hundreds of free, legally available ZX Spectrum games at World of Spectrum . You should start at the Visitor Voted Top 100 Best Games .","title":"Games"},{"location":"library/fuse/#core-options","text":"The Fuse core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Model (needs content load) [fuse_machine] ( Spectrum 48K |Spectrum 48K (NTSC)|Spectrum 128K|Spectrum +2|Spectrum +2A|Spectrum +3|Spectrum +3e|Spectrum SE|Timex TC2048|Timex TC2068|Timex TS2068|Spectrum 16K|Pentagon 128K|Pentagon 512K|Pentagon 1024|Scorpion 256K) Set the machine to emulate. Note that the this setting will have effect only when a new content is loaded. Hide Video Border [fuse_hide_border] ( Off |On) Hides the video border, making the game occupy the entire screen area. Tape Fast Load [fuse_fast_load] (Off| On ) Instantly loads tape files if enabled, or disabled it to see the moving horizontal lines in the video border while the game loads. Tape Load Sound [fuse_load_sound] (Off| On ) Outputs the tape sound if fast load is disabled. Speaker Type [fuse_speaker_type] ( tv speaker |beeper|unfiltered) Applies an audio filter. AV Stereo Separation [fise_ay_stereo_separation] ( none |acb|abc) The AY sound chip stereo separation. Transparent Keyboard Overlay [fuse_key_ovrlay_transp] (Off| On ) If the keyboard overlay is transparent or opaque. Time to Release Key in ms [fuse_key_hold_time] ( 500 |1000|100|300) How much time to keep a key pressed before releasing it (used when a key is pressed using the keyboard overlay). Joy Left mapping [fuse_joypad_left] ( |0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|Enter|Caps|Symbol|Space) Map the Left joypad input to a keyboard input. Joy Right mapping [fuse_joypad_right] ( |0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|Enter|Caps|Symbol|Space) Map the Right joypad input to a keyboard input. Joy Up mapping [fuse_joypad_up] ( |0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|Enter|Caps|Symbol|Space) Map the Up joypad input to a keyboard input. Joy Down mapping [fuse_joypad_down] ( |0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|Enter|Caps|Symbol|Space) Map the Down joypad input to a keyboard input. Joy Start mapping [fuse_joypad_start] ( |0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|Enter|Caps|Symbol|Space) Map the Start joypad input to a keyboard input. Joy A mapping [fuse_joypad_a] ( |0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|Enter|Caps|Symbol|Space) Map the A joypad input to a keyboard input. Joy B mapping [fuse_joypad_b] ( |0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|Enter|Caps|Symbol|Space) Map the B joypad input to a keyboard input. Joy X mapping [fuse_joypad_x] ( |0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|Enter|Caps|Symbol|Space) Map the X joypad input to a keyboard input. Joy Y mapping [fuse_joypad_y] ( |0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|Enter|Caps|Symbol|Space) Map the Y joypad input to a keyboard input. Joy L mapping [fuse_joypad_l] ( |0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|Enter|Caps|Symbol|Space) Map the L joypad input to a keyboard input. Joy R mapping [fuse_joypad_r] ( |0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|Enter|Caps|Symbol|Space) Map the R joypad input to a keyboard input. Joy L2 mapping [fuse_joypad_l2] ( |0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|Enter|Caps|Symbol|Space) Map the L2 joypad input to a keyboard input. Joy R2 mapping [fuse_joypad_r2] ( |0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|Enter|Caps|Symbol|Space) Map the R2 joypad input to a keyboard input. Joy L3 mapping [fuse_joypad_l3] ( |0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|Enter|Caps|Symbol|Space) Map the L3 joypad input to a keyboard input. Joy R3 mapping [fuse_joypad_r3] ( |0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|Enter|Caps|Symbol|Space) Map the R3 joypad input to a keyboard input.","title":"Core options"},{"location":"library/fuse/#controllers-usage","text":"There are seven types of joysticks emulated: Cursor Kempston Sinclair 1 Sinclair 2 Timex 1 Timex 2 Fuller Joystick Users can configure their joystick types in the input configuration on the front end. However, fuse-libretro allows for two joysticks at maximum so only users one and two can actually use theirs in the emulation. Users 1 and 2 can choose any of the joysticks as their device types, user 3 can only choose the Sinclair Keyboard. Buttons A, X and Y are mapped to the joystick's fire button, and button B is mapped to the UP directional button. Buttons L1 and R1 are mapped to RETURN and SPACE, respectively. The SELECT button brings up the embedded, on-screen keyboard which is useful if you only have controllers attached to your box. There are some conflicts in the way the input devices interact because of the use of the physical keyboard keys as joystick buttons. For a good gaming experience, set the user device types as follows: For joystick games: Set user 1 to a joystick type. Optionally, set user 2 to another joystick type (local cooperative games). Set user 3 to none. This way, you can use L1 as RETURN, R1 as SPACE, and SELECT to bring the embedded keyboard. For keyboard games: Set users 1 and 2 to none, and user 3 to Sinclair Keyboard. You won't have any joystick and the embedded keyboard won't work, but the entire physical keyboard will be available for you to type in those text adventure commands. If you set a joystick along with the keyboard, the joystick will work just fine except for the bindings to RETURN and SPACE, and the keyboard won't register the keys assigned to the Cursor joystick, or to the L1 and R1 buttons for all other joystick types.","title":"Controllers usage"},{"location":"library/fuse/#device-types","text":"The Fuse core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Device types"},{"location":"library/fuse/#user-1-2-device-types","text":"None - Input disabled. RetroPad - Joypad Cursor Joystick - Joypad Kempston Joystick - Joypad Sinclair 1 Joystick - Joypad Sinclair 2 Joystick - Joypad Timex 1 Joystick - Joypad Timex 2 Joystick - Joypad Fuller Joystick - Joypad","title":"User 1 - 2 device types"},{"location":"library/fuse/#user-3-device-types","text":"None - Input disabled. RetroPad - Joypad Sinclair Keyboard - Keyboard - Has keymapper support","title":"User 3 device types"},{"location":"library/fuse/#joypad","text":"User 1 - 7 input descriptors RetroPad Inputs Up Fire Keyboard overlay Up Down Left Right Fire Fire Enter Space","title":"Joypad"},{"location":"library/fuse/#keyboard","text":"RetroKeyboard Inputs Sinclair Keyboard Keyboard Backspace Backspace Keyboard Return Return Keyboard Space Space Keyboard 0 0 Keyboard 1 1 Keyboard 2 2 Keyboard 3 3 Keyboard 4 4 Keyboard 5 5 Keyboard 6 6 Keyboard 7 7 Keyboard 8 8 Keyboard 9 9 Keyboard a a Keyboard b b Keyboard c c Keyboard d d Keyboard e e Keyboard f f Keyboard g g Keyboard h h Keyboard i i Keyboard j j Keyboard k k Keyboard l l Keyboard m m Keyboard n n Keyboard o o Keyboard p p Keyboard q q Keyboard r r Keyboard s s Keyboard t t Keyboard u u Keyboard v v Keyboard w w Keyboard x x Keyboard y y Keyboard z z Keyboard Right Shift Right Shift Keyboard Left Shift Left Shift Keyboard Right Control Right Control Keyboard Left Control Left Control Keyboard Right Alt Right Alt Keyboard Left Alt Left Alt Keyboard Right Meta Right Meta Keyboard Left Meta Left Meta Keyboard Right Super Right Super Keyboard Left Super Left Super","title":"Keyboard"},{"location":"library/fuse/#external-links","text":"Official Fuse Website Official Fuse SourceForge Repository Libretro Fuse Core info file Libretro Fuse Github Repository Report Libretro Fuse Core Issues Here","title":"External Links"},{"location":"library/gambatte/","text":"Nintendo - Game Boy / Color (Gambatte) \u00b6 Background \u00b6 Gambatte is an accuracy-focused, open-source, cross-platform Game Boy Color emulator written in C++. It is based on hundreds of corner case hardware tests, as well as previous documentation and reverse engineering efforts. The Gambatte core has been authored by Sinamas The Gambatte core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here . BIOS \u00b6 Required or optional firmware files go in the frontend's system directory. Attention The 'Use official bootloader' core option must be set to On in order for these BIOS files to be used. Filename Description md5sum gb_bios.bin Game Boy BIOS - Optional 32fbbd84168d3482956eb3c5051637f5 gbc_bios.bin Game Boy Color BIOS - Optional dbfce9db9deaa2567f6a84fde55f9680 Extensions \u00b6 Content that can be loaded by the Gambatte core have the following file extensions: .gb .gbc .dmg RetroArch database(s) that are associated with the Gambatte core: Nintendo - Game Boy Nintendo - Game Boy Color Features \u00b6 Frontend-level settings or features that the Gambatte core respects. Feature Supported Restart \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The Gambatte core's library name is 'Gambatte' The Gambatte core saves/loads to/from these directories. Frontend's Save directory File Description *.srm Cartridge battery save Frontend's State directory File Description *.state# State ***Frontend's System directory** File Description palettes/Default.pal Global custom palette palettes/'content-name'.pal Per-game custom palette Geometry and timing \u00b6 The Gambatte core's core provided FPS is 59.7275005696 The Gambatte core's core provided sample rate is [Sample rate] The Gambatte core's base width is [Base width] The Gambatte core's base height is [Base height] The Gambatte core's max width is [Max width] The Gambatte core's max height is [Max height] The Gambatte core's core provided aspect ratio is [Aspect ratio] Custom palettes for Game Boy games \u00b6 The 'GB Colorization' core option must be set to custom. Create a folder called \"palettes\" in RetroArch's system directory. Then, you can place custom palette files (.pal) inside the \"palettes\" folder You can define different palettes for specific games by creating a .pal file in the \"palettes\" folder with 'INTERNALROMNAME.pal' or \"rom-name.pal\". If no specific palette is found for a ROM then the default palette is used. You can also define a palette to be used for all Game Boy games by creating a .pal file in the \"palettes\" folder named \"Default.pal\" Custom palettes can be created from the GUI in standalone Gambatte Core options \u00b6 The Gambatte core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Allow Opposing Directions [gambatte_up_down_allowed] ( disabled /enabled) Enabling this will allow pressing / quickly alternating / holding both left and right (or up and down in some games) directions at the same time. This may cause movement based glitches to occur in certain games. It's best to keep this core option disabled. GB Colorization [gambatte_gb_colorization] ( disabled |auto|GBC|SGB|internal|custom) Enables colorization of Game Boy games, using pre-defined or user-selected color palettes. 'auto': Selects automatically the 'best' (most colorful/appropriate) palette for each individual game, using the following order of preference: Game-specific Super Game Boy palette, if defined and more colorful than game-specific Game Boy Color palette. Game-specific Game Boy Color palette, if defined. Game-specific Super Game Boy palette, if defined. Palette specified by 'Internal Palette' core option. 'GBC': Selects game-specific Game Boy Color palette, if defined. If not, falls back to the Game Boy Color hardware default palette of 'GBC - Dark Green'. 'SGB': Selects game-specific Super Game Boy palette, if defined. If not, falls back to the Super Game Boy hardware default palette of 'SGB - 1A'. 'internal': Selects palette specified by 'Internal Palette' core option. 'custom': Loads user-created palettes from RetroArch's system directory, as described in the 'Custom palettes for Game Boy games' section. GB Colorization: Off GB Colorization: auto (in this case, a game-specific SGB palette is auto-selected) GB Colorization: GBC Internal Palette [gambatte_gb_internal_palette] ( GB - DMG |GB - Pocket|GB - Light|GBC - Blue|GBC - Brown|GBC - Dark Blue|GBC - Dark Brown|GBC - Dark Green|GBC - Grayscale|GBC - Green|GBC - Inverted|GBC - Orange|GBC - Pastel Mix|GBC - Red|GBC - Yellow|SGB - 1A|SGB - 1B|SGB - 1C|SGB - 1D|SGB - 1E|SGB - 1F|SGB - 1G|SGB - 1H|SGB - 2A|SGB - 2B|SGB - 2C|SGB - 2D|SGB - 2E|SGB - 2F|SGB - 2G|SGB - 2H|SGB - 3A|SGB - 3B|SGB - 3C|SGB - 3D|SGB - 3E|SGB - 3F|SGB - 3G|SGB - 3H|SGB - 4A|SGB - 4B|SGB - 4C|SGB - 4D|SGB - 4E|SGB - 4F|SGB - 4G|SGB - 4H|Special 1|Special 2|Special 3) Selects the internal color palette to use for colorizing Game Boy games when the 'GB Colorization' core option is set to 'internal', or when the 'GB Colorization' core option is set to 'auto' and a game has no pre-defined Super Game Boy/Game Boy Color palette. 'GB' palettes mimic the display characteristics of original Game Boy hardware. 'GBC' palettes are identical to those used by original Game Boy Color hardware when colorizing Game Boy games. 'SGB' palettes are identical to those used by original Super Game Boy hardware when colorizing Game Boy games. Internal Palette: GB - DMG Internal Palette: GB - Pocket Internal Palette: GB - Light Internal Palette: GBC - Blue Internal Palette: GBC - Brown Internal Palette: GBC - Dark Blue Internal Palette: GBC - Dark Brown Internal Palette: GBC - Dark Green Internal Palette: GBC - Grayscale Internal Palette: GBC - Green Internal Palette: GBC - Inverted Internal Palette: GBC - Orange Internal Palette: GBC - Pastel Mix Internal Palette: GBC - Red Internal Palette: GBC - Yellow Internal Palette: SGB - 1A Internal Palette: SGB - 1B Internal Palette: SGB - 1C Internal Palette: SGB - 1D Internal Palette: SGB - 1E Internal Palette: SGB - 1F Internal Palette: SGB - 1G Internal Palette: SGB - 1H Internal Palette: SGB - 2A Internal Palette: SGB - 2B Internal Palette: SGB - 2C Internal Palette: SGB - 2D Internal Palette: SGB - 2E Internal Palette: SGB - 2F Internal Palette: SGB - 2G Internal Palette: SGB - 2H Internal Palette: SGB - 3A Internal Palette: SGB - 3B Internal Palette: SGB - 3C Internal Palette: SGB - 3D Internal Palette: SGB - 3E Internal Palette: SGB - 3F Internal Palette: SGB - 3G Internal Palette: SGB - 3H Internal Palette: SGB - 4A Internal Palette: SGB - 4B Internal Palette: SGB - 4C Internal Palette: SGB - 4D Internal Palette: SGB - 4E Internal Palette: SGB - 4F Internal Palette: SGB - 4G Internal Palette: SGB - 4H Internal Palette: Special 1 Internal Palette: Special 2 Internal Palette: Special 3 Color correction [gambatte_gbc_color_correction] ( GBC only |always|disabled) Enables adjustment of output colors to match the display characteristics of the LCD panel used in original Game Boy Color hardware. 'GBC only': Color correction is only applied when playing Game Boy Color games, or when using a Game Boy Color palette to colorize a Game Boy game. 'always': Color correction is always applied, regardless of which color palette is being used. Attention Setting this option to 'always' will result in unexpected/suboptimal output when using 'GB' or 'SGB' internal color palettes, since these are intended for display on a normal TV/monitor rather than a Game Boy Color LCD panel. Color correction mode [gambatte_gbc_color_correction_mode] ( accurate |fast) Specifies the method to use when performing color correction. 'accurate': Provides a very close approximation of the image displayed on a real Game Boy Color LCD panel. 'fast': Darkens colors in a loose approximation of the image displayed on a real Game Boy Color LCD panel. Has negligible performance impact, and may be used on low-end hardware in cases where the 'accurate' method is too slow. Color correction: Off Color correction: fast Color correction: accurate Color correction - frontlight position [gambatte_gbc_frontlight_position] ( central |above screen|below screen) Simulates the physical response of the Game Boy Color LCD panel when illuminated from different angles. 'central': Standard color reproduction, corresponding to ambient light hitting the screen at 90\u00b0. 'above screen': Increases brightness (gamma), corresponding to sunlight or a ceiling light shining on the screen from above. 'below screen': Reduces brightness (gamma), corresponding to light shining on the screen from below. Attention This setting only takes effect when 'Color correction mode' is set to 'accurate'. Color correction - frontlight position: central Color correction - frontlight position: above screen Color correction - frontlight position: below screen Dark Filter Level (percent) [gambatte_dark_filter_level] ( 0 |5|10|15|20|25|30|35|40|45|50) Enables selective brightness reduction based upon pixel luminosity. May be used to reduce glare/eye strain. Of particular value when playing games with white backgrounds, which are intended for display on a non-backlit Game Boy Color LCD panel and appear uncomfortably bright when viewed on a modern backlit screen. Dark Filter Level: 0% Dark Filter Level: 30% Emulated hardware (restart) [gambatte_gb_hwmode] ( Auto |GB|GBC|GBA) Choose which hardware is emulated Game Boy, Game Boy Color, or Game Boy Advance. Use official bootloader (restart) [gambatte_gb_bootloader] ( enabled |disabled) Enables support for using official Game Boy and Game Boy Color bootloaders with startup logos. Check the BIOS section to see what files are needed. Game Boy bootloader Game Boy Color bootloader Mix frames [gambatte_mix_frames] ( disabled |accurate|fast) Enables simulation of LCD ghosting effects by blending the current and previous frames. 'accurate': Blends pixel RGB values with floating point precision. 'fast': Blends pixel RGB values using fast bit manipulation. Causes slight color darkening/shifting (due to rounding errors). May be used on low-end hardware in cases where the 'accurate' method is too slow. Attention A number of games generate transparency effects (or additional shades of color) by drawing objects on alternate frames, relying on the LCD ghosting of original hardware to 'smooth out' the result. Notable examples are Wave Race, Ballistic and Chikyuu Kaihou Gun ZAS. In order for these games to render correctly, 'Mix frames' must be set to 'accurate' or 'fast'. More importantly, the rapid flickering that is produced by these games when 'Mix frames' is disabled can lead to a form of screen burn-in on certain types of LCD panel (that of the 3DS in particular). Mix frames: Off Mix frames: accurate Mix frames: fast GameBoy Link Mode [gambatte_gb_link_mode] ( Not Connected |Network Server|Network Client) Awaiting description. Network Link Port [gambatte_gb_link_network_port] (56400 to 56420 in increments of 1. 56400 is default .) Awaiting description. Network link server address part 1 (client only) [gambatte_gb_link_network_server_ip_octet1] (0 to 255 in increments of 1. 0 is default .) Awaiting description. Network link server address part 2 (client only) [gambatte_gb_link_network_server_ip_octet2] (0 to 255 in increments of 1. 0 is default .) Awaiting description. Network link server address part 3 (client only) [gambatte_gb_link_network_server_ip_octet3] (0 to 255 in increments of 1. 0 is default .) Awaiting description. Network link server address part 4 (client only) [gambatte_gb_link_network_server_ip_octet4] (0 to 255 in increments of 1. 0 is default .) Awaiting description. Joypad \u00b6 RetroPad Inputs User 1 input descriptors B Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A Compatibility \u00b6 Game Issue Command Master Crashes on start. Unemulated MBC7 mapper. Game Boy Camera Crashes on start. Unemulated Pocket Camera mapper. Game de Hakken!! Tamagotchi - Osutchi to Mesutchi Crashes on start. Unemulated TAMA5 mapper. Kirby Tilt 'n' Tumble Crashes on start. Unemulated MBC7 mapper. Net de Get: Mini-Game @ 100 Crashes on start. Unemulated MBC6 mapper. External Links \u00b6 Official Gambatte Github Repository Old Standalone Gambatte builds Libretro Gambatte Core info file Libretro Gambatte Github Repository Report Libretro Gambatte Core Issues Here Nintendo - Game Boy (+ Color) \u00b6 Nintendo - Game Boy / Color (Emux GB) Nintendo - Game Boy / Color (Gearboy) Nintendo - Game Boy / Color (SameBoy) Nintendo - Game Boy / Color (TGB Dual) Nintendo - Game Boy Advance (mGBA) Nintendo - Game Boy Advance (VBA-M) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (nSide Balanced) Nintendo - SNES / Famicom (Mesen-S)","title":"Nintendo - Game Boy / Color (Gambatte)"},{"location":"library/gambatte/#nintendo-game-boy-color-gambatte","text":"","title":"Nintendo - Game Boy / Color (Gambatte)"},{"location":"library/gambatte/#background","text":"Gambatte is an accuracy-focused, open-source, cross-platform Game Boy Color emulator written in C++. It is based on hundreds of corner case hardware tests, as well as previous documentation and reverse engineering efforts. The Gambatte core has been authored by Sinamas The Gambatte core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Background"},{"location":"library/gambatte/#bios","text":"Required or optional firmware files go in the frontend's system directory. Attention The 'Use official bootloader' core option must be set to On in order for these BIOS files to be used. Filename Description md5sum gb_bios.bin Game Boy BIOS - Optional 32fbbd84168d3482956eb3c5051637f5 gbc_bios.bin Game Boy Color BIOS - Optional dbfce9db9deaa2567f6a84fde55f9680","title":"BIOS"},{"location":"library/gambatte/#extensions","text":"Content that can be loaded by the Gambatte core have the following file extensions: .gb .gbc .dmg RetroArch database(s) that are associated with the Gambatte core: Nintendo - Game Boy Nintendo - Game Boy Color","title":"Extensions"},{"location":"library/gambatte/#features","text":"Frontend-level settings or features that the Gambatte core respects. Feature Supported Restart \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/gambatte/#directories","text":"The Gambatte core's library name is 'Gambatte' The Gambatte core saves/loads to/from these directories. Frontend's Save directory File Description *.srm Cartridge battery save Frontend's State directory File Description *.state# State ***Frontend's System directory** File Description palettes/Default.pal Global custom palette palettes/'content-name'.pal Per-game custom palette","title":"Directories"},{"location":"library/gambatte/#geometry-and-timing","text":"The Gambatte core's core provided FPS is 59.7275005696 The Gambatte core's core provided sample rate is [Sample rate] The Gambatte core's base width is [Base width] The Gambatte core's base height is [Base height] The Gambatte core's max width is [Max width] The Gambatte core's max height is [Max height] The Gambatte core's core provided aspect ratio is [Aspect ratio]","title":"Geometry and timing"},{"location":"library/gambatte/#custom-palettes-for-game-boy-games","text":"The 'GB Colorization' core option must be set to custom. Create a folder called \"palettes\" in RetroArch's system directory. Then, you can place custom palette files (.pal) inside the \"palettes\" folder You can define different palettes for specific games by creating a .pal file in the \"palettes\" folder with 'INTERNALROMNAME.pal' or \"rom-name.pal\". If no specific palette is found for a ROM then the default palette is used. You can also define a palette to be used for all Game Boy games by creating a .pal file in the \"palettes\" folder named \"Default.pal\" Custom palettes can be created from the GUI in standalone Gambatte","title":"Custom palettes for Game Boy games"},{"location":"library/gambatte/#core-options","text":"The Gambatte core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Allow Opposing Directions [gambatte_up_down_allowed] ( disabled /enabled) Enabling this will allow pressing / quickly alternating / holding both left and right (or up and down in some games) directions at the same time. This may cause movement based glitches to occur in certain games. It's best to keep this core option disabled. GB Colorization [gambatte_gb_colorization] ( disabled |auto|GBC|SGB|internal|custom) Enables colorization of Game Boy games, using pre-defined or user-selected color palettes. 'auto': Selects automatically the 'best' (most colorful/appropriate) palette for each individual game, using the following order of preference: Game-specific Super Game Boy palette, if defined and more colorful than game-specific Game Boy Color palette. Game-specific Game Boy Color palette, if defined. Game-specific Super Game Boy palette, if defined. Palette specified by 'Internal Palette' core option. 'GBC': Selects game-specific Game Boy Color palette, if defined. If not, falls back to the Game Boy Color hardware default palette of 'GBC - Dark Green'. 'SGB': Selects game-specific Super Game Boy palette, if defined. If not, falls back to the Super Game Boy hardware default palette of 'SGB - 1A'. 'internal': Selects palette specified by 'Internal Palette' core option. 'custom': Loads user-created palettes from RetroArch's system directory, as described in the 'Custom palettes for Game Boy games' section. GB Colorization: Off GB Colorization: auto (in this case, a game-specific SGB palette is auto-selected) GB Colorization: GBC Internal Palette [gambatte_gb_internal_palette] ( GB - DMG |GB - Pocket|GB - Light|GBC - Blue|GBC - Brown|GBC - Dark Blue|GBC - Dark Brown|GBC - Dark Green|GBC - Grayscale|GBC - Green|GBC - Inverted|GBC - Orange|GBC - Pastel Mix|GBC - Red|GBC - Yellow|SGB - 1A|SGB - 1B|SGB - 1C|SGB - 1D|SGB - 1E|SGB - 1F|SGB - 1G|SGB - 1H|SGB - 2A|SGB - 2B|SGB - 2C|SGB - 2D|SGB - 2E|SGB - 2F|SGB - 2G|SGB - 2H|SGB - 3A|SGB - 3B|SGB - 3C|SGB - 3D|SGB - 3E|SGB - 3F|SGB - 3G|SGB - 3H|SGB - 4A|SGB - 4B|SGB - 4C|SGB - 4D|SGB - 4E|SGB - 4F|SGB - 4G|SGB - 4H|Special 1|Special 2|Special 3) Selects the internal color palette to use for colorizing Game Boy games when the 'GB Colorization' core option is set to 'internal', or when the 'GB Colorization' core option is set to 'auto' and a game has no pre-defined Super Game Boy/Game Boy Color palette. 'GB' palettes mimic the display characteristics of original Game Boy hardware. 'GBC' palettes are identical to those used by original Game Boy Color hardware when colorizing Game Boy games. 'SGB' palettes are identical to those used by original Super Game Boy hardware when colorizing Game Boy games. Internal Palette: GB - DMG Internal Palette: GB - Pocket Internal Palette: GB - Light Internal Palette: GBC - Blue Internal Palette: GBC - Brown Internal Palette: GBC - Dark Blue Internal Palette: GBC - Dark Brown Internal Palette: GBC - Dark Green Internal Palette: GBC - Grayscale Internal Palette: GBC - Green Internal Palette: GBC - Inverted Internal Palette: GBC - Orange Internal Palette: GBC - Pastel Mix Internal Palette: GBC - Red Internal Palette: GBC - Yellow Internal Palette: SGB - 1A Internal Palette: SGB - 1B Internal Palette: SGB - 1C Internal Palette: SGB - 1D Internal Palette: SGB - 1E Internal Palette: SGB - 1F Internal Palette: SGB - 1G Internal Palette: SGB - 1H Internal Palette: SGB - 2A Internal Palette: SGB - 2B Internal Palette: SGB - 2C Internal Palette: SGB - 2D Internal Palette: SGB - 2E Internal Palette: SGB - 2F Internal Palette: SGB - 2G Internal Palette: SGB - 2H Internal Palette: SGB - 3A Internal Palette: SGB - 3B Internal Palette: SGB - 3C Internal Palette: SGB - 3D Internal Palette: SGB - 3E Internal Palette: SGB - 3F Internal Palette: SGB - 3G Internal Palette: SGB - 3H Internal Palette: SGB - 4A Internal Palette: SGB - 4B Internal Palette: SGB - 4C Internal Palette: SGB - 4D Internal Palette: SGB - 4E Internal Palette: SGB - 4F Internal Palette: SGB - 4G Internal Palette: SGB - 4H Internal Palette: Special 1 Internal Palette: Special 2 Internal Palette: Special 3 Color correction [gambatte_gbc_color_correction] ( GBC only |always|disabled) Enables adjustment of output colors to match the display characteristics of the LCD panel used in original Game Boy Color hardware. 'GBC only': Color correction is only applied when playing Game Boy Color games, or when using a Game Boy Color palette to colorize a Game Boy game. 'always': Color correction is always applied, regardless of which color palette is being used. Attention Setting this option to 'always' will result in unexpected/suboptimal output when using 'GB' or 'SGB' internal color palettes, since these are intended for display on a normal TV/monitor rather than a Game Boy Color LCD panel. Color correction mode [gambatte_gbc_color_correction_mode] ( accurate |fast) Specifies the method to use when performing color correction. 'accurate': Provides a very close approximation of the image displayed on a real Game Boy Color LCD panel. 'fast': Darkens colors in a loose approximation of the image displayed on a real Game Boy Color LCD panel. Has negligible performance impact, and may be used on low-end hardware in cases where the 'accurate' method is too slow. Color correction: Off Color correction: fast Color correction: accurate Color correction - frontlight position [gambatte_gbc_frontlight_position] ( central |above screen|below screen) Simulates the physical response of the Game Boy Color LCD panel when illuminated from different angles. 'central': Standard color reproduction, corresponding to ambient light hitting the screen at 90\u00b0. 'above screen': Increases brightness (gamma), corresponding to sunlight or a ceiling light shining on the screen from above. 'below screen': Reduces brightness (gamma), corresponding to light shining on the screen from below. Attention This setting only takes effect when 'Color correction mode' is set to 'accurate'. Color correction - frontlight position: central Color correction - frontlight position: above screen Color correction - frontlight position: below screen Dark Filter Level (percent) [gambatte_dark_filter_level] ( 0 |5|10|15|20|25|30|35|40|45|50) Enables selective brightness reduction based upon pixel luminosity. May be used to reduce glare/eye strain. Of particular value when playing games with white backgrounds, which are intended for display on a non-backlit Game Boy Color LCD panel and appear uncomfortably bright when viewed on a modern backlit screen. Dark Filter Level: 0% Dark Filter Level: 30% Emulated hardware (restart) [gambatte_gb_hwmode] ( Auto |GB|GBC|GBA) Choose which hardware is emulated Game Boy, Game Boy Color, or Game Boy Advance. Use official bootloader (restart) [gambatte_gb_bootloader] ( enabled |disabled) Enables support for using official Game Boy and Game Boy Color bootloaders with startup logos. Check the BIOS section to see what files are needed. Game Boy bootloader Game Boy Color bootloader Mix frames [gambatte_mix_frames] ( disabled |accurate|fast) Enables simulation of LCD ghosting effects by blending the current and previous frames. 'accurate': Blends pixel RGB values with floating point precision. 'fast': Blends pixel RGB values using fast bit manipulation. Causes slight color darkening/shifting (due to rounding errors). May be used on low-end hardware in cases where the 'accurate' method is too slow. Attention A number of games generate transparency effects (or additional shades of color) by drawing objects on alternate frames, relying on the LCD ghosting of original hardware to 'smooth out' the result. Notable examples are Wave Race, Ballistic and Chikyuu Kaihou Gun ZAS. In order for these games to render correctly, 'Mix frames' must be set to 'accurate' or 'fast'. More importantly, the rapid flickering that is produced by these games when 'Mix frames' is disabled can lead to a form of screen burn-in on certain types of LCD panel (that of the 3DS in particular). Mix frames: Off Mix frames: accurate Mix frames: fast GameBoy Link Mode [gambatte_gb_link_mode] ( Not Connected |Network Server|Network Client) Awaiting description. Network Link Port [gambatte_gb_link_network_port] (56400 to 56420 in increments of 1. 56400 is default .) Awaiting description. Network link server address part 1 (client only) [gambatte_gb_link_network_server_ip_octet1] (0 to 255 in increments of 1. 0 is default .) Awaiting description. Network link server address part 2 (client only) [gambatte_gb_link_network_server_ip_octet2] (0 to 255 in increments of 1. 0 is default .) Awaiting description. Network link server address part 3 (client only) [gambatte_gb_link_network_server_ip_octet3] (0 to 255 in increments of 1. 0 is default .) Awaiting description. Network link server address part 4 (client only) [gambatte_gb_link_network_server_ip_octet4] (0 to 255 in increments of 1. 0 is default .) Awaiting description.","title":"Core options"},{"location":"library/gambatte/#joypad","text":"RetroPad Inputs User 1 input descriptors B Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A","title":"Joypad"},{"location":"library/gambatte/#compatibility","text":"Game Issue Command Master Crashes on start. Unemulated MBC7 mapper. Game Boy Camera Crashes on start. Unemulated Pocket Camera mapper. Game de Hakken!! Tamagotchi - Osutchi to Mesutchi Crashes on start. Unemulated TAMA5 mapper. Kirby Tilt 'n' Tumble Crashes on start. Unemulated MBC7 mapper. Net de Get: Mini-Game @ 100 Crashes on start. Unemulated MBC6 mapper.","title":"Compatibility"},{"location":"library/gambatte/#external-links","text":"Official Gambatte Github Repository Old Standalone Gambatte builds Libretro Gambatte Core info file Libretro Gambatte Github Repository Report Libretro Gambatte Core Issues Here","title":"External Links"},{"location":"library/gambatte/#nintendo-game-boy-color","text":"Nintendo - Game Boy / Color (Emux GB) Nintendo - Game Boy / Color (Gearboy) Nintendo - Game Boy / Color (SameBoy) Nintendo - Game Boy / Color (TGB Dual) Nintendo - Game Boy Advance (mGBA) Nintendo - Game Boy Advance (VBA-M) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (nSide Balanced) Nintendo - SNES / Famicom (Mesen-S)","title":"Nintendo - Game Boy (+ Color)"},{"location":"library/game_music_emu/","text":"Game Music Emu \u00b6 Background \u00b6 Multi-purpose video game console music player. Author/License \u00b6 The Game Music Emu core has been authored by Blargg The Game Music Emu core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the Game Music Emu core have the following file extensions: .ay .gbs .gym .hes .kss .nsf .nsfe .sap .spc .vgm .vgz Features \u00b6 Frontend-level settings or features that the Game Music Emu core respects. Feature Supported Restart \u2715 Screenshots \u2714 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2715 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The Game Music Emu core's internal core name is 'Game Music Emulator' Geometry and timing \u00b6 The Game Music Emu core's core provided FPS is 60 The Game Music Emu core's core provided sample rate is 44100 Hz The Game Music Emu core's core provided aspect ratio is 4/3 Controllers \u00b6 The Game Music Emu core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 device types \u00b6 None - Doesn't disable input. RetroPad - Joypad - Stay on this. RetroPad w/Analog - Joypad - There's no reason to switch to this. Controller tables \u00b6 Joypad \u00b6 RetroPad Inputs Game Music Emu core inputs Pause Previous Track Next Track Video Tutorial \u00b6 External Links \u00b6 Official Game Music Emu Website Official Game Music Emu Github Repository Libretro Game Music Emu Core info file Libretro Game Music Emu Github Repository Report Libretro Game Music Emu Core Issues Here","title":"Game Music Emu"},{"location":"library/game_music_emu/#game-music-emu","text":"","title":"Game Music Emu"},{"location":"library/game_music_emu/#background","text":"Multi-purpose video game console music player.","title":"Background"},{"location":"library/game_music_emu/#authorlicense","text":"The Game Music Emu core has been authored by Blargg The Game Music Emu core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/game_music_emu/#extensions","text":"Content that can be loaded by the Game Music Emu core have the following file extensions: .ay .gbs .gym .hes .kss .nsf .nsfe .sap .spc .vgm .vgz","title":"Extensions"},{"location":"library/game_music_emu/#features","text":"Frontend-level settings or features that the Game Music Emu core respects. Feature Supported Restart \u2715 Screenshots \u2714 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2715 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/game_music_emu/#directories","text":"The Game Music Emu core's internal core name is 'Game Music Emulator'","title":"Directories"},{"location":"library/game_music_emu/#geometry-and-timing","text":"The Game Music Emu core's core provided FPS is 60 The Game Music Emu core's core provided sample rate is 44100 Hz The Game Music Emu core's core provided aspect ratio is 4/3","title":"Geometry and timing"},{"location":"library/game_music_emu/#controllers","text":"The Game Music Emu core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/game_music_emu/#user-1-device-types","text":"None - Doesn't disable input. RetroPad - Joypad - Stay on this. RetroPad w/Analog - Joypad - There's no reason to switch to this.","title":"User 1 device types"},{"location":"library/game_music_emu/#controller-tables","text":"","title":"Controller tables"},{"location":"library/game_music_emu/#joypad","text":"RetroPad Inputs Game Music Emu core inputs Pause Previous Track Next Track","title":"Joypad"},{"location":"library/game_music_emu/#video-tutorial","text":"","title":"Video Tutorial"},{"location":"library/game_music_emu/#external-links","text":"Official Game Music Emu Website Official Game Music Emu Github Repository Libretro Game Music Emu Core info file Libretro Game Music Emu Github Repository Report Libretro Game Music Emu Core Issues Here","title":"External Links"},{"location":"library/gearboy/","text":"Nintendo - Game Boy / Color (Gearboy) \u00b6 Background \u00b6 Gearboy is an open source, multi-platform, Nintendo Game Boy (DMG) / Game Boy Color (CGB) emulator written in C++. Highly accurate CPU emulation, passes cpu_instrs.gb from blargg's tests. Accurate instruction and memory timing, passes instr_timing.gb and mem_timing.gb from blargg's tests. Memory Bank Controllers (MBC1, MBC2, MBC3 with RTC, MBC5), ROM + RAM and multicart cartridges. Accurate LCD controller emulation. Background, window and sprites, with correct timings and priorities including mid-scanline timing. Mix frames: Mimics the LCD ghosting effect seen in the original Game Boy. Sound emulation using SDL Audio and Gb_Snd_Emu library . Battery powered RAM save support. Save states. Game Genie and GameShark cheat support. Runs on Windows, Linux, Mac OS X, Raspberry Pi, iOS and as a libretro core (RetroArch). The Gearboy core has been authored by Ignacio Sanchez The Gearboy core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here . BIOS \u00b6 Not required. Extensions \u00b6 Content that can be loaded by the Gearboy core have the following file extensions: .gb .dmg .gbc .cgb .sgb RetroArch database(s) that are associated with the Gearboy core: Nintendo - Game Boy Nintendo - Game Boy Color Features \u00b6 Frontend-level settings or features that the Gearboy core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats - Game Genie \u2714 RetroArch Cheats - GameShark \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The Gearboy core's library name is 'Gearboy' The Gearboy core saves/loads to/from these directories. Frontend's Save directory File Description *.srm Cartridge battery save *.rtc Real time clock save Frontend's State directory File Description *.state# State Geometry and timing \u00b6 The Gearboy core's core provided FPS is 59.7275005696 The Gearboy core's core provided sample rate is 44100 Hz The Gearboy core's base width is 160 The Gearboy core's base height is 144 The Gearboy core's max width is 160 The Gearboy core's max height is 144 The Gearboy core's core provided aspect ratio is 10/9 Core options \u00b6 The Gearboy core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Emulated Model (restart) [gearboy_model] ( Auto |Game Boy DMG) Select which hardware/model is emulated. Auto selects the best hardware based in the rom. Game Boy DMG forces original Game Boy hardware. Palette [gearboy_palette] ( Original |Sharp|B/W|Autumn|Soft|Slime) Select a color palette for Game Boy DMG games. Allow Up+Down / Left+Right [gearboy_up_down_allowed] ( Disabled |Enabled) Enabling this will allow pressing / quickly alternating / holding both left and right (or up and down in some games) directions at the same time. This may cause movement based glitches to occur in certain games. It's best to keep this core option disabled. Joypad \u00b6 User 1 input descriptors RetroPad Inputs B Select Start Up Down Left Right A Compatibility \u00b6 Gearboy Accuracy Tests External Links \u00b6 Official Gearboy Github Repository Libretro Gearboy Core info file Libretro Gearboy Github Repository Report Libretro Gearboy Core Issues Here See also \u00b6 Nintendo - Game Boy (+ Color) \u00b6 Nintendo - Game Boy / Color (Emux GB) Nintendo - Game Boy / Color (Gambatte) Nintendo - Game Boy / Color (SameBoy) Nintendo - Game Boy / Color (TGB Dual) Nintendo - Game Boy Advance (mGBA) Nintendo - Game Boy Advance (VBA-M) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (nSide Balanced) Nintendo - SNES / Famicom (Mesen-S)","title":"Nintendo - Game Boy / Color (Gearboy)"},{"location":"library/gearboy/#nintendo-game-boy-color-gearboy","text":"","title":"Nintendo - Game Boy / Color (Gearboy)"},{"location":"library/gearboy/#background","text":"Gearboy is an open source, multi-platform, Nintendo Game Boy (DMG) / Game Boy Color (CGB) emulator written in C++. Highly accurate CPU emulation, passes cpu_instrs.gb from blargg's tests. Accurate instruction and memory timing, passes instr_timing.gb and mem_timing.gb from blargg's tests. Memory Bank Controllers (MBC1, MBC2, MBC3 with RTC, MBC5), ROM + RAM and multicart cartridges. Accurate LCD controller emulation. Background, window and sprites, with correct timings and priorities including mid-scanline timing. Mix frames: Mimics the LCD ghosting effect seen in the original Game Boy. Sound emulation using SDL Audio and Gb_Snd_Emu library . Battery powered RAM save support. Save states. Game Genie and GameShark cheat support. Runs on Windows, Linux, Mac OS X, Raspberry Pi, iOS and as a libretro core (RetroArch). The Gearboy core has been authored by Ignacio Sanchez The Gearboy core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Background"},{"location":"library/gearboy/#bios","text":"Not required.","title":"BIOS"},{"location":"library/gearboy/#extensions","text":"Content that can be loaded by the Gearboy core have the following file extensions: .gb .dmg .gbc .cgb .sgb RetroArch database(s) that are associated with the Gearboy core: Nintendo - Game Boy Nintendo - Game Boy Color","title":"Extensions"},{"location":"library/gearboy/#features","text":"Frontend-level settings or features that the Gearboy core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats - Game Genie \u2714 RetroArch Cheats - GameShark \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/gearboy/#directories","text":"The Gearboy core's library name is 'Gearboy' The Gearboy core saves/loads to/from these directories. Frontend's Save directory File Description *.srm Cartridge battery save *.rtc Real time clock save Frontend's State directory File Description *.state# State","title":"Directories"},{"location":"library/gearboy/#geometry-and-timing","text":"The Gearboy core's core provided FPS is 59.7275005696 The Gearboy core's core provided sample rate is 44100 Hz The Gearboy core's base width is 160 The Gearboy core's base height is 144 The Gearboy core's max width is 160 The Gearboy core's max height is 144 The Gearboy core's core provided aspect ratio is 10/9","title":"Geometry and timing"},{"location":"library/gearboy/#core-options","text":"The Gearboy core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Emulated Model (restart) [gearboy_model] ( Auto |Game Boy DMG) Select which hardware/model is emulated. Auto selects the best hardware based in the rom. Game Boy DMG forces original Game Boy hardware. Palette [gearboy_palette] ( Original |Sharp|B/W|Autumn|Soft|Slime) Select a color palette for Game Boy DMG games. Allow Up+Down / Left+Right [gearboy_up_down_allowed] ( Disabled |Enabled) Enabling this will allow pressing / quickly alternating / holding both left and right (or up and down in some games) directions at the same time. This may cause movement based glitches to occur in certain games. It's best to keep this core option disabled.","title":"Core options"},{"location":"library/gearboy/#joypad","text":"User 1 input descriptors RetroPad Inputs B Select Start Up Down Left Right A","title":"Joypad"},{"location":"library/gearboy/#compatibility","text":"Gearboy Accuracy Tests","title":"Compatibility"},{"location":"library/gearboy/#external-links","text":"Official Gearboy Github Repository Libretro Gearboy Core info file Libretro Gearboy Github Repository Report Libretro Gearboy Core Issues Here","title":"External Links"},{"location":"library/gearboy/#see-also","text":"","title":"See also"},{"location":"library/gearboy/#nintendo-game-boy-color","text":"Nintendo - Game Boy / Color (Emux GB) Nintendo - Game Boy / Color (Gambatte) Nintendo - Game Boy / Color (SameBoy) Nintendo - Game Boy / Color (TGB Dual) Nintendo - Game Boy Advance (mGBA) Nintendo - Game Boy Advance (VBA-M) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (nSide Balanced) Nintendo - SNES / Famicom (Mesen-S)","title":"Nintendo - Game Boy (+ Color)"},{"location":"library/gearsystem/","text":"Sega - MS/GG (Gearsystem) \u00b6 Background \u00b6 Gearsystem is an open source, multi-platform, Sega Master System / Game Gear / SG-1000 emulator written in C++. Highly accurate Z80 core, including undocumented opcodes and behaviour like R and MEMPTR registers. Multi-Mapper support: SEGA, Codemasters, SG-1000 and ROM only cartridges. Automatic region detection: NTSC-JAP, NTSC-USA, PAL-EUR. Internal database for rom detection Highly accurate VDP emulation including timing and SMS2 only 224 mode support. Audio emulation using SDL Audio and Sms_Snd_Emu library. Battery powered RAM save support. Save states. Game Genie and Pro Action Replay cheat support. Runs on Windows, Linux, Mac OS X, Raspberry Pi, iOS and as a libretro core (RetroArch). The Gearsystem core has been authored by Ignacio Sanchez The Gearsystem core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here . BIOS \u00b6 Not required. Extensions \u00b6 Content that can be loaded by the Gearsystem core have the following file extensions: .sms .gg .sg .bin .rom RetroArch database(s) that are associated with the Gearsystem core: Sega - Game Gear Sega - Master System - Mark III Sega - SG-1000 Features \u00b6 Frontend-level settings or features that the Gearsystem core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats - Game Genie \u2714 RetroArch Cheats - Pro Acion Replay \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The Gearsystem core's library name is 'Gearsystem' The Gearsystem core saves/loads to/from these directories. Frontend's Save directory File Description *.srm Cartridge battery save Frontend's State directory File Description *.state# State Geometry and timing \u00b6 The Gearsystem core's core provided FPS is 60 for NTSC games and 50 for PAL games The Gearsystem core's core provided sample rate is 44100 Hz The Gearsystem core's base width is 256 for Master System / SG-1000 games and 160 for Game Gear games The Gearsystem core's base height is 192 for Master System / SG-1000 games and 144 for Game Gear games The Gearsystem core's max width is 256 for Master System games and 160 for Game Gear games The Gearsystem core's max height is 224 for Master System games and 144 for Game Gear games The Gearsystem core's core provided aspect ratio is 4:3 for Master System / SG-1000 games and 10:9 for Game Gear games Joypad \u00b6 User 1 input descriptors RetroPad Inputs 1 Start Up Down Left Right 2 Compatibility \u00b6 Gearsystem Accuracy Tests External Links \u00b6 Official Gearsystem Repository Libretro Gearsystem Core info file Report Libretro Gearsystem Core Issues Here See also \u00b6 Sega - Game Gear \u00b6 Sega - MS/GG/MD/CD (Genesis Plus GX) Sega - Master System - Mark III \u00b6 Sega - Master System (Emux SMS) Sega - MS/GG/MD/CD (Genesis Plus GX) Sega - MS/MD/CD/32X (PicoDrive) Sega - SG-1000 \u00b6 MSX/SVI/ColecoVision/SG-1000 (blueMSX) Sega - MS/GG/MD/CD (Genesis Plus GX)","title":"Sega - MS/GG/SG-1000 (Gearsystem)"},{"location":"library/gearsystem/#sega-msgg-gearsystem","text":"","title":"Sega - MS/GG (Gearsystem)"},{"location":"library/gearsystem/#background","text":"Gearsystem is an open source, multi-platform, Sega Master System / Game Gear / SG-1000 emulator written in C++. Highly accurate Z80 core, including undocumented opcodes and behaviour like R and MEMPTR registers. Multi-Mapper support: SEGA, Codemasters, SG-1000 and ROM only cartridges. Automatic region detection: NTSC-JAP, NTSC-USA, PAL-EUR. Internal database for rom detection Highly accurate VDP emulation including timing and SMS2 only 224 mode support. Audio emulation using SDL Audio and Sms_Snd_Emu library. Battery powered RAM save support. Save states. Game Genie and Pro Action Replay cheat support. Runs on Windows, Linux, Mac OS X, Raspberry Pi, iOS and as a libretro core (RetroArch). The Gearsystem core has been authored by Ignacio Sanchez The Gearsystem core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Background"},{"location":"library/gearsystem/#bios","text":"Not required.","title":"BIOS"},{"location":"library/gearsystem/#extensions","text":"Content that can be loaded by the Gearsystem core have the following file extensions: .sms .gg .sg .bin .rom RetroArch database(s) that are associated with the Gearsystem core: Sega - Game Gear Sega - Master System - Mark III Sega - SG-1000","title":"Extensions"},{"location":"library/gearsystem/#features","text":"Frontend-level settings or features that the Gearsystem core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats - Game Genie \u2714 RetroArch Cheats - Pro Acion Replay \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/gearsystem/#directories","text":"The Gearsystem core's library name is 'Gearsystem' The Gearsystem core saves/loads to/from these directories. Frontend's Save directory File Description *.srm Cartridge battery save Frontend's State directory File Description *.state# State","title":"Directories"},{"location":"library/gearsystem/#geometry-and-timing","text":"The Gearsystem core's core provided FPS is 60 for NTSC games and 50 for PAL games The Gearsystem core's core provided sample rate is 44100 Hz The Gearsystem core's base width is 256 for Master System / SG-1000 games and 160 for Game Gear games The Gearsystem core's base height is 192 for Master System / SG-1000 games and 144 for Game Gear games The Gearsystem core's max width is 256 for Master System games and 160 for Game Gear games The Gearsystem core's max height is 224 for Master System games and 144 for Game Gear games The Gearsystem core's core provided aspect ratio is 4:3 for Master System / SG-1000 games and 10:9 for Game Gear games","title":"Geometry and timing"},{"location":"library/gearsystem/#joypad","text":"User 1 input descriptors RetroPad Inputs 1 Start Up Down Left Right 2","title":"Joypad"},{"location":"library/gearsystem/#compatibility","text":"Gearsystem Accuracy Tests","title":"Compatibility"},{"location":"library/gearsystem/#external-links","text":"Official Gearsystem Repository Libretro Gearsystem Core info file Report Libretro Gearsystem Core Issues Here","title":"External Links"},{"location":"library/gearsystem/#see-also","text":"","title":"See also"},{"location":"library/gearsystem/#sega-game-gear","text":"Sega - MS/GG/MD/CD (Genesis Plus GX)","title":"Sega - Game Gear"},{"location":"library/gearsystem/#sega-master-system-mark-iii","text":"Sega - Master System (Emux SMS) Sega - MS/GG/MD/CD (Genesis Plus GX) Sega - MS/MD/CD/32X (PicoDrive)","title":"Sega - Master System - Mark III"},{"location":"library/gearsystem/#sega-sg-1000","text":"MSX/SVI/ColecoVision/SG-1000 (blueMSX) Sega - MS/GG/MD/CD (Genesis Plus GX)","title":"Sega - SG-1000"},{"location":"library/genesis_plus_gx/","text":"Sega - MS/GG/MD/CD (Genesis Plus GX) \u00b6 Background \u00b6 Genesis Plus GX is an open-source Sega 8/16 bit emulator focused on accuracy and portability. The source code, originally based on Genesis Plus 1.3 by Charles MacDonald, has been heavily modified & enhanced, with respect to initial goals and design, in order to improve the accuracy of emulation, implementing new features and adding support for extra peripherals, cartridge & systems hardware. Genesis Plus GX has 100% compatibility with Genesis / Mega Drive, Sega/Mega CD, Master System, Game Gear, SG-1000 & Pico released software (including all unlicensed or pirate known dumps), also emulating backwards compatibility modes when available. The Genesis Plus GX core has been authored by Charles McDonald Eke-Eke The Genesis Plus GX core is licensed under Non-commercial A summary of the licenses behind RetroArch and its cores can be found here . BIOS \u00b6 Required or optional firmware files go in the frontend's system directory. Please note that BIOS choice isn't locked to any specific revisions. BIOS files that are labelled (bootrom) and (lock-on) must have their corresponding core option ('System bootrom' core option or 'Cartridge lock-on' core option) configured correctly in order for them to be loaded. Filename Description md5sum bios_MD.bin MegaDrive TMSS startup ROM (bootrom) - Optional 45e298905a08f9cfb38fd504cd6dbc84 bios_CD_E.bin MegaCD EU BIOS - Required for MegaCD EU games e66fa1dc5820d254611fdcdba0662372 bios_CD_U.bin SegaCD US BIOS - Required for SegaCD US games 854b9150240a198070150e4566ae1290 bios_CD_J.bin MegaCD JP BIOS - Required for MegaCD JP games 278a9397d192149e84e820ac621a8edd bios_E.sms MasterSystem EU BIOS (bootrom) - Optional 840481177270d5642a14ca71ee72844c bios_U.sms MasterSystem US BIOS (bootrom) - Optional 840481177270d5642a14ca71ee72844c bios_J.sms MasterSystem JP BIOS (bootrom) - Optional 24a519c53f67b00640d0048ef7089105 bios.gg GameGear BIOS (bootrom) - Optional 672e104c3be3a238301aceffc3b23fd6 sk.bin Sonic & Knuckles ROM (lock-on) - Optional 4ea493ea4e9f6c9ebfccbdb15110367e sk2chip.bin Sonic & Knuckles UPMEM ROM (lock-on) - Optional b4e76e416b887f4e7413ba76fa735f16 areplay.bin Action Replay ROM (lock-on) - Optional a0028b3043f9d59ceeb03da5b073b30d ggenie.bin Game Genie ROM (lock-on) - Optional e8af7fe115a75c849f6aab3701e7799b Extensions \u00b6 Content that can be loaded by the Genesis Plus GX core have the following file extensions: .mdx .md .smd .gen .bin .cue .iso .sms .gg .sg .68k .chd RetroArch database(s) that are associated with the Genesis Plus GX core: Sega - Game Gear Sega - Master System - Mark III Sega - Mega-CD - Sega CD Sega - Mega Drive - Genesis Sega - PICO Sega - SG-1000 Features \u00b6 Frontend-level settings or features that the Genesis Plus GX core respects. Feature Supported Restart \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2714 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The Genesis Plus GX core's library name is 'Genesis Plus GX' The Genesis Plus GX core saves/loads to/from these directories. Frontend's Save directory File Description *.srm MS/GG/MD/Pico/SG-1000 Cartridge backup save cart.brm Sega/Mega CD RAM Cart scd_U.brm Sega CD US Backup RAM - When the 'CD System BRAM' core option is set to per bios scd_E.brm Mega CD EU Backup RAM - When the 'CD System BRAM' core option is set to per bios scd_J.brm Mega CD JP Backup RAM - When the 'CD System BRAM' core option is set to per bios *.brm Sega CD/MegaCD Backup RAM - When the 'CD System BRAM' core option is set to per game Frontend's State directory File Description *.state# State Geometry and timing \u00b6 The Genesis Plus GX core's core provided FPS is dependent on the loaded content. The Genesis Plus GX core's core provided sample rate is 44100 Hz The Genesis Plus GX core's base width is dependent on the loaded content. The Genesis Plus GX core's base height is dependent on the loaded content. The Genesis Plus GX core's max width is 720 The Genesis Plus GX core's max height is 576 The Genesis Plus GX core's core provided aspect ratio is dependent on the 'Core-provided aspect ratio' core option . Loading Sega CD games \u00b6 When loading Sega CD games, Genesis Plus GX needs a cue-sheet that points to an image file. A cue sheet, or cue file, is a metadata file which describes how the tracks of a CD or DVD are laid out. If you have e.g. foo.bin , you should create a text file and save it as foo.cue . If the Sega CD game is single-track, the cue file contents should look like this: FILE \"foo.bin\" BINARY TRACK 01 MODE1/2352 INDEX 01 00:00:00 After that, you can load the foo.cue file in RetroArch with the Genesis Plus GX core. Certain Sega CD games are multi-track, so their .cue files might be more complicated. Here's a cue file example done with Lunar - Eternal Blue (USA) For Sega-CD games, ISO + WAV, BIN + CUE and ISO + OGG formats are supported; ISO + MP3 is not supported. Core options \u00b6 The Genesis Plus GX core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. System hardware [genesis_plus_gx_system_hw] ( auto /sg-1000/sg-1000 II/mark-III/master system/master system II/game gear/mega drive / genesis) Choose which system is going to be emulated. System region [genesis_plus_gx_region_detect] ( auto /ntsc-u/pal/ntsc-j) Choose which region the system is from. System lockups [genesis_plus_gx_force_dtack] ( enabled /disabled) Emulate system lockups that occur on real hardware. System bootrom [genesis_plus_gx_bios] ( disabled /enabled) Runs bootrom if available and then starts loaded content after the boot sequence. Look above at the BIOS section for more information. CD System BRAM [genesis_plus_gx_bram] ( per bios /per game) The Sega CD's internal memory cannot hold a lot of saves. Setting this core option to per game allows each game to have its own one brm file, thus negating any lack of available space issues. CD System BRAM diagram 68k address error [genesis_plus_gx_addr_error] ( enabled /disabled) Emulate the 68k address error that occurs on real hardware. Set this to disabled when playing rom hacks since most emulators used to develop rom hacks don't emulate the error. Cartridge lock-on [genesis_plus_gx_lock_on] ( disabled /game genie/action replay (pro)/sonic & knuckles) Select a lock-on cartridge. Look above at the BIOS section for more information. Master System FM (YM2413) [genesis_plus_gx_ym2413] ( auto /disabled/enabled) Enable the Master System FM chip. (Enhanced sound output support for SMS compatible games ) Mega Drive / Genesis FM [genesis_plus_gx_ym2612] ( mame (ym2612) /mame (asic ym3438)/mame (enhanced ym3438)/nuked (ym2612)/nuked (asic ym3438)/nuked (discrete ym3438)) Awaiting description. Sound output [genesis_plus_gx_sound_output] ( stereo /mono) Self-explanatory. Audio filter [genesis_plus_gx_audio_filter] ( disabled /low-pass) Awaiting description. Low-pass filter % [genesis_plus_gx_lowpass_range] (5 to 95 in increments of 5. 60 is default ) Awaiting description. Blargg NTSC filter [genesis_plus_gx_blargg_ntsc_filter] ( Off /monochrome/composite/svidio/rgb) Self-explanatory. Blargg NTSC filter - Off Blargg NTSC filter - monochrome Blargg NTSC filter - composite Blargg NTSC filter - svideo Blargg NTSC filter - rgb LCD Ghosting filter [genesis_plus_gx_lcd_filter] ( disabled /enabled) LCD Ghosting filter - On Borders [genesis_plus_gx_overscan] ( disabled /top/bottom/left/right/full) Self-explanatory. Game Gear extended screen [genesis_plus_gx_gg_extra] ( disabled /enabled) Self-explanatory. Game Gear extended screen - Off Game Gear extended screen - On Core-provided aspect ratio [genesis_plus_gx_aspect_ratio] ( auto /NTSC PAR/PAL PAR) Choose the Core-provided aspect ratio. RetroArch's aspect ratio must be set to Core provided in the Video settings for this to function properly. Interlaced mode 2 output [genesis_plus_gx_render] ( single field /double field) Change how interlaced mode 2 output is handled. Games like Sonic 2's multiplayer mode uses Interlaced Mode 2. Interlaced mode 2 output - single field Interlaced mode 2 output - double field Show Lightgun crosshair [genesis_plus_gx_gun_cursor] ( disabled /enabled) Shows lightgun crosshairs for the 'MD Menacer', 'MD Justifiers', and 'MS Light Phaser' Device Types. Lightgun crosshair Invert Mouse Y-axis [genesis_plus_gx_invert_mouse] ( disabled /enabled) Inverts the Mouse Y-axis for the 'MD Mouse' Device Type. CPU speed [genesis_plus_gx_overclock] ( 100% /125%/150%/175%/200%) Overclock the emulated CPU. Remove per-line sprite limit [genesis_plus_gx_no_sprite_limit] ( disabled /enabled) Reduce sprite flickering when enabled. User 1 device types \u00b6 The Genesis Plus GX core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): Joypad Port Empty - None - No device is connected; input is disabled. Joypad Auto - Joypad - Depending on the loaded content, the core will automatically emulate a MD Joypad 3 Button controller, or a MD Joypad 6 Button controller or a MS Joypad 2 Button controller. MD Joypad 3 Button - Joypad MD Joypad 6 Button - Joypad MS Joypad 2 Button - Joypad - Also used for Game Gear. MD Joypad 3 Button + 4-WayPlay - Joypad - Enables multitap for 4-WayPlay games. MD Joypad 6 Button + 4-WayPlay - Joypad - Enables multitap for 4-WayPlay games. MD Joypad 3 Button + Teamplayer - Joypad - Enables multitap for Teamplayer games. MD Joypad 6 Button + Teamplayer - Joypad - Enables multitap for Teamplayer games. MS Joypad 2 Button + Master Tap - Joypad - Enables Furrtek's Master Tap (unofficial mulitap device). MS Light Phaser - Lightgun MS Paddle Control - Analog MS Sports Pad - Analog MS Graphic Board - Pointer MD XE-1AP - Analog MD Mouse - Mouse User 2 device types \u00b6 Joypad Port Empty - None - No device is connected; input is disabled. Joypad Auto - Joypad - Depending on the loaded content, the core will automatically emulate a MD Joypad 3 Button controller, or a MD Joypad 6 Button controller or a MS Joypad 2 Button controller. MD Joypad 3 Button - Joypad MD Joypad 6 Button - Joypad MS Joypad 2 Button - Joypad - Also used for Game Gear. MD Joypad 3 Button + 4-WayPlay - Joypad - Enables multitap for 4-WayPlay games. MD Joypad 6 Button + 4-WayPlay - Joypad - Enables multitap for 4-WayPlay games. MD Joypad 3 Button + Teamplayer - Joypad - Enables multitap for Teamplayer games. MD Joypad 6 Button + Teamplayer - Joypad - Enables multitap for Teamplayer games. MS Joypad 2 Button + Master Tap - Joypad - Enables Furrtek's Master Tap (unofficial mulitap device). MD Menancer - Lightgun MD Justifiers - Lightgun MS Light Phaser - Lightgun MS Paddle Control - Analog MS Sports Pad - Analog MS Graphic Board - Pointer MD XE-1AP - Analog MD Mouse - Mouse Other devices \u00b6 PICO tablet - The Genesis Plus GX core can emulate PICO tablet inputs but this is done automatically, based off the game's crc, and cannot be manually selected as a device type. Terebi Oekaki tablet - The Genesis Plus GX core can emulate Terebi Oekaki table inputs but this is done automatically, based off the game's crc, and cannot be manually selected a device type. Multitap \u00b6 Activating multitap support in compatible games can be configured by the 4-WayPlay, Teamplayer, Master Tap device types for the corresponding users. Joypad \u00b6 RetroPad Inputs User 1 - 8 input descriptors MD Joypad 3 Button MD Joypad 6 Button MS Joypad 2 Button MS Paddle Control MS Sports Pad MD XE-1AP B B B 1 1 1 E2 A A A E1 Mode Mode Select Start Start Start Start Start Start Start D-Pad Up D-Pad Up D-Pad Up D-Pad Up D-Pad Down D-Pad Down D-Pad Down D-Pad Down D-Pad Left D-Pad Left D-Pad Left D-Pad Left D-Pad Right D-Pad Right D-Pad Right D-Pad Right C C C 2 2 Y Y X X C Z Z A D B X Paddle Trackball X Thumb-stick X Y Trackball Y Thumb-stick Y X Slider Y Y Slider X Mouse \u00b6 RetroMouse Inputs MD Mouse Mouse Cursor MD Mouse Cursor Mouse 1 MD Mouse Left Mouse 2 MD Mouse Right Mouse 3 MD Mouse Start Wheel Down MD Mouse Center Pointer \u00b6 RetroPointer Inputs MS Graphic Board or Pointer Position MS Graphic Board Stylus Mouse 1 MS Graphic Board Pen Mouse 2 MS Graphic Board Menu Mouse 3 MS Graphic Do Lightgun \u00b6 RetroLightgun Inputs MD Menacer MD Justifier MS Light Phaser Gun Crosshair MD Menacer Crosshair MD Justifier Crosshair MS Light Phaser Crosshair Gun Trigger MD Menacer A MD Justifier A MS Light Phaser A Gun Aux A MD Menacer B MD Justifer B MS Light Phaser B Gun Aux B MD Menacer C MD Justifer C MS Light Phaser C Gun Start MD Menacer Start MD Justifer Start MS Light Phaser Start Other \u00b6 Inputs PICO tablet Terebi Oekaki tablet or Pointer Position PICO tablet Stylus Terebi Oeka tablet Stylus Mouse 1 PICO tablet Pen Terebi Oeka tablet Pen Mouse 2 PICO tablet Red Mouse 3 Terebo Peka tablet Start Wheel Up PICO tablet Previous page Wheel Down PICO tablet Next page PICO tablet Up (White) PICO tablet Down (Orange) PICO tablet Left (Purple) PICO tablet Right (Green) External Links \u00b6 Official Genesis Plus GX Github Repository Official Genesis Plus GX Bitbucket Repository Libretro Genesis Plus GX Core info file Libretro Genesis Plus GX Github Repository Report Libretro Genesis Plus GX Core Issues Here Sega 16-bit \u00b6 Sega - Master System (Emux SMS) Sega - MS/MD/CD/32X (PicoDrive) Sega - MS/GG/SG-1000 (Gearsystem) MSX/SVI/ColecoVision/SG-1000 (blueMSX)","title":"Sega - MS/GG/MD/CD (Genesis Plus GX)"},{"location":"library/genesis_plus_gx/#sega-msggmdcd-genesis-plus-gx","text":"","title":"Sega - MS/GG/MD/CD (Genesis Plus GX)"},{"location":"library/genesis_plus_gx/#background","text":"Genesis Plus GX is an open-source Sega 8/16 bit emulator focused on accuracy and portability. The source code, originally based on Genesis Plus 1.3 by Charles MacDonald, has been heavily modified & enhanced, with respect to initial goals and design, in order to improve the accuracy of emulation, implementing new features and adding support for extra peripherals, cartridge & systems hardware. Genesis Plus GX has 100% compatibility with Genesis / Mega Drive, Sega/Mega CD, Master System, Game Gear, SG-1000 & Pico released software (including all unlicensed or pirate known dumps), also emulating backwards compatibility modes when available. The Genesis Plus GX core has been authored by Charles McDonald Eke-Eke The Genesis Plus GX core is licensed under Non-commercial A summary of the licenses behind RetroArch and its cores can be found here .","title":"Background"},{"location":"library/genesis_plus_gx/#bios","text":"Required or optional firmware files go in the frontend's system directory. Please note that BIOS choice isn't locked to any specific revisions. BIOS files that are labelled (bootrom) and (lock-on) must have their corresponding core option ('System bootrom' core option or 'Cartridge lock-on' core option) configured correctly in order for them to be loaded. Filename Description md5sum bios_MD.bin MegaDrive TMSS startup ROM (bootrom) - Optional 45e298905a08f9cfb38fd504cd6dbc84 bios_CD_E.bin MegaCD EU BIOS - Required for MegaCD EU games e66fa1dc5820d254611fdcdba0662372 bios_CD_U.bin SegaCD US BIOS - Required for SegaCD US games 854b9150240a198070150e4566ae1290 bios_CD_J.bin MegaCD JP BIOS - Required for MegaCD JP games 278a9397d192149e84e820ac621a8edd bios_E.sms MasterSystem EU BIOS (bootrom) - Optional 840481177270d5642a14ca71ee72844c bios_U.sms MasterSystem US BIOS (bootrom) - Optional 840481177270d5642a14ca71ee72844c bios_J.sms MasterSystem JP BIOS (bootrom) - Optional 24a519c53f67b00640d0048ef7089105 bios.gg GameGear BIOS (bootrom) - Optional 672e104c3be3a238301aceffc3b23fd6 sk.bin Sonic & Knuckles ROM (lock-on) - Optional 4ea493ea4e9f6c9ebfccbdb15110367e sk2chip.bin Sonic & Knuckles UPMEM ROM (lock-on) - Optional b4e76e416b887f4e7413ba76fa735f16 areplay.bin Action Replay ROM (lock-on) - Optional a0028b3043f9d59ceeb03da5b073b30d ggenie.bin Game Genie ROM (lock-on) - Optional e8af7fe115a75c849f6aab3701e7799b","title":"BIOS"},{"location":"library/genesis_plus_gx/#extensions","text":"Content that can be loaded by the Genesis Plus GX core have the following file extensions: .mdx .md .smd .gen .bin .cue .iso .sms .gg .sg .68k .chd RetroArch database(s) that are associated with the Genesis Plus GX core: Sega - Game Gear Sega - Master System - Mark III Sega - Mega-CD - Sega CD Sega - Mega Drive - Genesis Sega - PICO Sega - SG-1000","title":"Extensions"},{"location":"library/genesis_plus_gx/#features","text":"Frontend-level settings or features that the Genesis Plus GX core respects. Feature Supported Restart \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2714 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/genesis_plus_gx/#directories","text":"The Genesis Plus GX core's library name is 'Genesis Plus GX' The Genesis Plus GX core saves/loads to/from these directories. Frontend's Save directory File Description *.srm MS/GG/MD/Pico/SG-1000 Cartridge backup save cart.brm Sega/Mega CD RAM Cart scd_U.brm Sega CD US Backup RAM - When the 'CD System BRAM' core option is set to per bios scd_E.brm Mega CD EU Backup RAM - When the 'CD System BRAM' core option is set to per bios scd_J.brm Mega CD JP Backup RAM - When the 'CD System BRAM' core option is set to per bios *.brm Sega CD/MegaCD Backup RAM - When the 'CD System BRAM' core option is set to per game Frontend's State directory File Description *.state# State","title":"Directories"},{"location":"library/genesis_plus_gx/#geometry-and-timing","text":"The Genesis Plus GX core's core provided FPS is dependent on the loaded content. The Genesis Plus GX core's core provided sample rate is 44100 Hz The Genesis Plus GX core's base width is dependent on the loaded content. The Genesis Plus GX core's base height is dependent on the loaded content. The Genesis Plus GX core's max width is 720 The Genesis Plus GX core's max height is 576 The Genesis Plus GX core's core provided aspect ratio is dependent on the 'Core-provided aspect ratio' core option .","title":"Geometry and timing"},{"location":"library/genesis_plus_gx/#loading-sega-cd-games","text":"When loading Sega CD games, Genesis Plus GX needs a cue-sheet that points to an image file. A cue sheet, or cue file, is a metadata file which describes how the tracks of a CD or DVD are laid out. If you have e.g. foo.bin , you should create a text file and save it as foo.cue . If the Sega CD game is single-track, the cue file contents should look like this: FILE \"foo.bin\" BINARY TRACK 01 MODE1/2352 INDEX 01 00:00:00 After that, you can load the foo.cue file in RetroArch with the Genesis Plus GX core. Certain Sega CD games are multi-track, so their .cue files might be more complicated. Here's a cue file example done with Lunar - Eternal Blue (USA) For Sega-CD games, ISO + WAV, BIN + CUE and ISO + OGG formats are supported; ISO + MP3 is not supported.","title":"Loading Sega CD games"},{"location":"library/genesis_plus_gx/#core-options","text":"The Genesis Plus GX core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. System hardware [genesis_plus_gx_system_hw] ( auto /sg-1000/sg-1000 II/mark-III/master system/master system II/game gear/mega drive / genesis) Choose which system is going to be emulated. System region [genesis_plus_gx_region_detect] ( auto /ntsc-u/pal/ntsc-j) Choose which region the system is from. System lockups [genesis_plus_gx_force_dtack] ( enabled /disabled) Emulate system lockups that occur on real hardware. System bootrom [genesis_plus_gx_bios] ( disabled /enabled) Runs bootrom if available and then starts loaded content after the boot sequence. Look above at the BIOS section for more information. CD System BRAM [genesis_plus_gx_bram] ( per bios /per game) The Sega CD's internal memory cannot hold a lot of saves. Setting this core option to per game allows each game to have its own one brm file, thus negating any lack of available space issues. CD System BRAM diagram 68k address error [genesis_plus_gx_addr_error] ( enabled /disabled) Emulate the 68k address error that occurs on real hardware. Set this to disabled when playing rom hacks since most emulators used to develop rom hacks don't emulate the error. Cartridge lock-on [genesis_plus_gx_lock_on] ( disabled /game genie/action replay (pro)/sonic & knuckles) Select a lock-on cartridge. Look above at the BIOS section for more information. Master System FM (YM2413) [genesis_plus_gx_ym2413] ( auto /disabled/enabled) Enable the Master System FM chip. (Enhanced sound output support for SMS compatible games ) Mega Drive / Genesis FM [genesis_plus_gx_ym2612] ( mame (ym2612) /mame (asic ym3438)/mame (enhanced ym3438)/nuked (ym2612)/nuked (asic ym3438)/nuked (discrete ym3438)) Awaiting description. Sound output [genesis_plus_gx_sound_output] ( stereo /mono) Self-explanatory. Audio filter [genesis_plus_gx_audio_filter] ( disabled /low-pass) Awaiting description. Low-pass filter % [genesis_plus_gx_lowpass_range] (5 to 95 in increments of 5. 60 is default ) Awaiting description. Blargg NTSC filter [genesis_plus_gx_blargg_ntsc_filter] ( Off /monochrome/composite/svidio/rgb) Self-explanatory. Blargg NTSC filter - Off Blargg NTSC filter - monochrome Blargg NTSC filter - composite Blargg NTSC filter - svideo Blargg NTSC filter - rgb LCD Ghosting filter [genesis_plus_gx_lcd_filter] ( disabled /enabled) LCD Ghosting filter - On Borders [genesis_plus_gx_overscan] ( disabled /top/bottom/left/right/full) Self-explanatory. Game Gear extended screen [genesis_plus_gx_gg_extra] ( disabled /enabled) Self-explanatory. Game Gear extended screen - Off Game Gear extended screen - On Core-provided aspect ratio [genesis_plus_gx_aspect_ratio] ( auto /NTSC PAR/PAL PAR) Choose the Core-provided aspect ratio. RetroArch's aspect ratio must be set to Core provided in the Video settings for this to function properly. Interlaced mode 2 output [genesis_plus_gx_render] ( single field /double field) Change how interlaced mode 2 output is handled. Games like Sonic 2's multiplayer mode uses Interlaced Mode 2. Interlaced mode 2 output - single field Interlaced mode 2 output - double field Show Lightgun crosshair [genesis_plus_gx_gun_cursor] ( disabled /enabled) Shows lightgun crosshairs for the 'MD Menacer', 'MD Justifiers', and 'MS Light Phaser' Device Types. Lightgun crosshair Invert Mouse Y-axis [genesis_plus_gx_invert_mouse] ( disabled /enabled) Inverts the Mouse Y-axis for the 'MD Mouse' Device Type. CPU speed [genesis_plus_gx_overclock] ( 100% /125%/150%/175%/200%) Overclock the emulated CPU. Remove per-line sprite limit [genesis_plus_gx_no_sprite_limit] ( disabled /enabled) Reduce sprite flickering when enabled.","title":"Core options"},{"location":"library/genesis_plus_gx/#user-1-device-types","text":"The Genesis Plus GX core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): Joypad Port Empty - None - No device is connected; input is disabled. Joypad Auto - Joypad - Depending on the loaded content, the core will automatically emulate a MD Joypad 3 Button controller, or a MD Joypad 6 Button controller or a MS Joypad 2 Button controller. MD Joypad 3 Button - Joypad MD Joypad 6 Button - Joypad MS Joypad 2 Button - Joypad - Also used for Game Gear. MD Joypad 3 Button + 4-WayPlay - Joypad - Enables multitap for 4-WayPlay games. MD Joypad 6 Button + 4-WayPlay - Joypad - Enables multitap for 4-WayPlay games. MD Joypad 3 Button + Teamplayer - Joypad - Enables multitap for Teamplayer games. MD Joypad 6 Button + Teamplayer - Joypad - Enables multitap for Teamplayer games. MS Joypad 2 Button + Master Tap - Joypad - Enables Furrtek's Master Tap (unofficial mulitap device). MS Light Phaser - Lightgun MS Paddle Control - Analog MS Sports Pad - Analog MS Graphic Board - Pointer MD XE-1AP - Analog MD Mouse - Mouse","title":"User 1 device types"},{"location":"library/genesis_plus_gx/#user-2-device-types","text":"Joypad Port Empty - None - No device is connected; input is disabled. Joypad Auto - Joypad - Depending on the loaded content, the core will automatically emulate a MD Joypad 3 Button controller, or a MD Joypad 6 Button controller or a MS Joypad 2 Button controller. MD Joypad 3 Button - Joypad MD Joypad 6 Button - Joypad MS Joypad 2 Button - Joypad - Also used for Game Gear. MD Joypad 3 Button + 4-WayPlay - Joypad - Enables multitap for 4-WayPlay games. MD Joypad 6 Button + 4-WayPlay - Joypad - Enables multitap for 4-WayPlay games. MD Joypad 3 Button + Teamplayer - Joypad - Enables multitap for Teamplayer games. MD Joypad 6 Button + Teamplayer - Joypad - Enables multitap for Teamplayer games. MS Joypad 2 Button + Master Tap - Joypad - Enables Furrtek's Master Tap (unofficial mulitap device). MD Menancer - Lightgun MD Justifiers - Lightgun MS Light Phaser - Lightgun MS Paddle Control - Analog MS Sports Pad - Analog MS Graphic Board - Pointer MD XE-1AP - Analog MD Mouse - Mouse","title":"User 2 device types"},{"location":"library/genesis_plus_gx/#other-devices","text":"PICO tablet - The Genesis Plus GX core can emulate PICO tablet inputs but this is done automatically, based off the game's crc, and cannot be manually selected as a device type. Terebi Oekaki tablet - The Genesis Plus GX core can emulate Terebi Oekaki table inputs but this is done automatically, based off the game's crc, and cannot be manually selected a device type.","title":"Other devices"},{"location":"library/genesis_plus_gx/#multitap","text":"Activating multitap support in compatible games can be configured by the 4-WayPlay, Teamplayer, Master Tap device types for the corresponding users.","title":"Multitap"},{"location":"library/genesis_plus_gx/#joypad","text":"RetroPad Inputs User 1 - 8 input descriptors MD Joypad 3 Button MD Joypad 6 Button MS Joypad 2 Button MS Paddle Control MS Sports Pad MD XE-1AP B B B 1 1 1 E2 A A A E1 Mode Mode Select Start Start Start Start Start Start Start D-Pad Up D-Pad Up D-Pad Up D-Pad Up D-Pad Down D-Pad Down D-Pad Down D-Pad Down D-Pad Left D-Pad Left D-Pad Left D-Pad Left D-Pad Right D-Pad Right D-Pad Right D-Pad Right C C C 2 2 Y Y X X C Z Z A D B X Paddle Trackball X Thumb-stick X Y Trackball Y Thumb-stick Y X Slider Y Y Slider X","title":"Joypad"},{"location":"library/genesis_plus_gx/#mouse","text":"RetroMouse Inputs MD Mouse Mouse Cursor MD Mouse Cursor Mouse 1 MD Mouse Left Mouse 2 MD Mouse Right Mouse 3 MD Mouse Start Wheel Down MD Mouse Center","title":"Mouse"},{"location":"library/genesis_plus_gx/#pointer","text":"RetroPointer Inputs MS Graphic Board or Pointer Position MS Graphic Board Stylus Mouse 1 MS Graphic Board Pen Mouse 2 MS Graphic Board Menu Mouse 3 MS Graphic Do","title":"Pointer"},{"location":"library/genesis_plus_gx/#lightgun","text":"RetroLightgun Inputs MD Menacer MD Justifier MS Light Phaser Gun Crosshair MD Menacer Crosshair MD Justifier Crosshair MS Light Phaser Crosshair Gun Trigger MD Menacer A MD Justifier A MS Light Phaser A Gun Aux A MD Menacer B MD Justifer B MS Light Phaser B Gun Aux B MD Menacer C MD Justifer C MS Light Phaser C Gun Start MD Menacer Start MD Justifer Start MS Light Phaser Start","title":"Lightgun"},{"location":"library/genesis_plus_gx/#other","text":"Inputs PICO tablet Terebi Oekaki tablet or Pointer Position PICO tablet Stylus Terebi Oeka tablet Stylus Mouse 1 PICO tablet Pen Terebi Oeka tablet Pen Mouse 2 PICO tablet Red Mouse 3 Terebo Peka tablet Start Wheel Up PICO tablet Previous page Wheel Down PICO tablet Next page PICO tablet Up (White) PICO tablet Down (Orange) PICO tablet Left (Purple) PICO tablet Right (Green)","title":"Other"},{"location":"library/genesis_plus_gx/#external-links","text":"Official Genesis Plus GX Github Repository Official Genesis Plus GX Bitbucket Repository Libretro Genesis Plus GX Core info file Libretro Genesis Plus GX Github Repository Report Libretro Genesis Plus GX Core Issues Here","title":"External Links"},{"location":"library/genesis_plus_gx/#sega-16-bit","text":"Sega - Master System (Emux SMS) Sega - MS/MD/CD/32X (PicoDrive) Sega - MS/GG/SG-1000 (Gearsystem) MSX/SVI/ColecoVision/SG-1000 (blueMSX)","title":"Sega 16-bit"},{"location":"library/gpsp/","text":"Nintendo - Game Boy Advance (gpSP) \u00b6 Background \u00b6 gpSP is a Game Boy Advance emulator based on notaz' fork of gpSP with additional codebase improvements. Author/License \u00b6 The gpSP core has been authored by Exophase The gpSP core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the gpSP core have the following file extensions: .gba .bin Databases \u00b6 RetroArch database(s) that are associated with the gpSP core: Nintendo - Game Boy Advance BIOS \u00b6 Required or optional firmware files go in the frontend's system directory. Filename Description md5sum gba_bios.bin Game Boy Advance Image - Required a860e8c0b6d573d191e4ec7db1b1e4f6 Features \u00b6 Frontend-level settings or features that the gpSP core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2715 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The gpSP core's directory name is 'gpSP' The gpSP core saves/loads to/from these directories. Frontend's Save directory 'content-name'.sav (Cartridge backup save) Frontend's State directory 'content-name'.state# (State) Geometry and timing \u00b6 The gpSP core's core provided FPS is 59.72750057 The gpSP core's core provided sample rate is 65536 Hz The gpSP core's core provided aspect ratio is 3/2 Controllers \u00b6 The gpSP core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 device types \u00b6 None - Doesn't disable input. RetroPad - Joypad RetroPad w/Analog - Joypad - There's no reason to switch to this. Controller tables \u00b6 Joypad \u00b6 User 1 Remap descriptors RetroPad Inputs B Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A Compatibility \u00b6 Game Issue Activision Anthology Freezes when entering a game. Banjo-Kazooie - Grunty's Revenge Black screen during developer logo. Resets when Banjo leaves his house. Boktai Trilogy The solar sensor is not emulated. DemiKids - Light/Dark Version Crashes when entering a battle. Digimon Racing (Europe) Freezes during the intro. Dragon Ball Z - The Legacy of Goku Graphics glitches. Final Fantasy VI Background/tiling order issues. Game Boy Advance Video - Dragon Ball GT - Volume 1 White screen. Grand Theft Auto Advance Crashes after first dialog. Harry Potter - Quidditch World Cup Crashes when going ingame. Koro Koro Puzzle Happy Panechu! The tilt sensor is not emulated. Mario & Luigi - Superstar Saga Crashes when entering a battle. Phantasy Star Collection Phantasy Star 1 flickers. R-Type III - The Third Lightning Softlocks at Irem startup screen. Rock 'n Roll Racing Corrupted graphics, not playable. Rockman & Forte Doesn't continue after GBA BIOS screen. Sims 2, The - Pets Graphics glitches. Heavy flickering, black objects. Street Racing Syndicate Freezes at startup screen, doesn't continue. Super Monkey Ball Jr. Softlocks at startup screen. Super Street Fighter II Turbo/X Revival Small graphics glitch. Selecting speed 'Turbo 1' and beyond on the character select screen makes the game speed window not fully visible. Tales of Phantasia (USA version) Softlocks during the introduction sequence (just before the small guy hits the tall guy in the right). WarioWare: Twisted! The tilt sensor is not emulated. Wolfenstein 3D Softlocks at id Software startup screen. Yoshi\u2019s Universal Gravitation The tilt sensor is not emulated. (1) (2) (3) External Links \u00b6 Official gpSP Website Official gpSP Github Repository Libretro gpSP Core info file Libretro gpSP Github Repository Report Libretro gpSP Core Issues Here See also \u00b6 Nintendo - Game Boy Advance \u00b6 Nintendo - Game Boy Advance (Beetle GBA) Nintendo - Game Boy Advance (Meteor) Nintendo - Game Boy Advance (mGBA) Nintendo - Game Boy Advance (TempGBA) Nintendo - Game Boy Advance (VBA-M) Nintendo - Game Boy Advance (VBA Next)","title":"Nintendo - Game Boy Advance (gpSP)"},{"location":"library/gpsp/#nintendo-game-boy-advance-gpsp","text":"","title":"Nintendo - Game Boy Advance (gpSP)"},{"location":"library/gpsp/#background","text":"gpSP is a Game Boy Advance emulator based on notaz' fork of gpSP with additional codebase improvements.","title":"Background"},{"location":"library/gpsp/#authorlicense","text":"The gpSP core has been authored by Exophase The gpSP core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/gpsp/#extensions","text":"Content that can be loaded by the gpSP core have the following file extensions: .gba .bin","title":"Extensions"},{"location":"library/gpsp/#databases","text":"RetroArch database(s) that are associated with the gpSP core: Nintendo - Game Boy Advance","title":"Databases"},{"location":"library/gpsp/#bios","text":"Required or optional firmware files go in the frontend's system directory. Filename Description md5sum gba_bios.bin Game Boy Advance Image - Required a860e8c0b6d573d191e4ec7db1b1e4f6","title":"BIOS"},{"location":"library/gpsp/#features","text":"Frontend-level settings or features that the gpSP core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2715 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/gpsp/#directories","text":"The gpSP core's directory name is 'gpSP' The gpSP core saves/loads to/from these directories. Frontend's Save directory 'content-name'.sav (Cartridge backup save) Frontend's State directory 'content-name'.state# (State)","title":"Directories"},{"location":"library/gpsp/#geometry-and-timing","text":"The gpSP core's core provided FPS is 59.72750057 The gpSP core's core provided sample rate is 65536 Hz The gpSP core's core provided aspect ratio is 3/2","title":"Geometry and timing"},{"location":"library/gpsp/#controllers","text":"The gpSP core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/gpsp/#user-1-device-types","text":"None - Doesn't disable input. RetroPad - Joypad RetroPad w/Analog - Joypad - There's no reason to switch to this.","title":"User 1 device types"},{"location":"library/gpsp/#controller-tables","text":"","title":"Controller tables"},{"location":"library/gpsp/#joypad","text":"User 1 Remap descriptors RetroPad Inputs B Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A","title":"Joypad"},{"location":"library/gpsp/#compatibility","text":"Game Issue Activision Anthology Freezes when entering a game. Banjo-Kazooie - Grunty's Revenge Black screen during developer logo. Resets when Banjo leaves his house. Boktai Trilogy The solar sensor is not emulated. DemiKids - Light/Dark Version Crashes when entering a battle. Digimon Racing (Europe) Freezes during the intro. Dragon Ball Z - The Legacy of Goku Graphics glitches. Final Fantasy VI Background/tiling order issues. Game Boy Advance Video - Dragon Ball GT - Volume 1 White screen. Grand Theft Auto Advance Crashes after first dialog. Harry Potter - Quidditch World Cup Crashes when going ingame. Koro Koro Puzzle Happy Panechu! The tilt sensor is not emulated. Mario & Luigi - Superstar Saga Crashes when entering a battle. Phantasy Star Collection Phantasy Star 1 flickers. R-Type III - The Third Lightning Softlocks at Irem startup screen. Rock 'n Roll Racing Corrupted graphics, not playable. Rockman & Forte Doesn't continue after GBA BIOS screen. Sims 2, The - Pets Graphics glitches. Heavy flickering, black objects. Street Racing Syndicate Freezes at startup screen, doesn't continue. Super Monkey Ball Jr. Softlocks at startup screen. Super Street Fighter II Turbo/X Revival Small graphics glitch. Selecting speed 'Turbo 1' and beyond on the character select screen makes the game speed window not fully visible. Tales of Phantasia (USA version) Softlocks during the introduction sequence (just before the small guy hits the tall guy in the right). WarioWare: Twisted! The tilt sensor is not emulated. Wolfenstein 3D Softlocks at id Software startup screen. Yoshi\u2019s Universal Gravitation The tilt sensor is not emulated. (1) (2) (3)","title":"Compatibility"},{"location":"library/gpsp/#external-links","text":"Official gpSP Website Official gpSP Github Repository Libretro gpSP Core info file Libretro gpSP Github Repository Report Libretro gpSP Core Issues Here","title":"External Links"},{"location":"library/gpsp/#see-also","text":"","title":"See also"},{"location":"library/gpsp/#nintendo-game-boy-advance","text":"Nintendo - Game Boy Advance (Beetle GBA) Nintendo - Game Boy Advance (Meteor) Nintendo - Game Boy Advance (mGBA) Nintendo - Game Boy Advance (TempGBA) Nintendo - Game Boy Advance (VBA-M) Nintendo - Game Boy Advance (VBA Next)","title":"Nintendo - Game Boy Advance"},{"location":"library/gw/","text":"Handheld Electronic (GW) \u00b6 Background \u00b6 A libretro core for Game & Watch simulators. It runs simulators converted from source code for the games available at MADrigal . How to start the GW core: \u00b6 As an example showcasing loading content with GW core, we will load the Donkey Kong (Coleco) game hosted on RetroArch's Content Downloader. You can do this by going to RetroArch's main menu screen and selecting 'Online Updater'. From there, select 'Content Downloader'. Select 'Handheld Electronic Game', then select 'Donkey Kong (Coleco)'. This should download and extract this file to RetroArch's Downloads directory. Go back to RetroArch's main menu screen. Select 'Load Content', then 'Downloads'. Select 'Donkey Kong (Coleco).mgw'. If you are asked which core to select, choose 'Handheld Electronic (GW)'. The content should now start running! Author/License \u00b6 The GW core has been authored by Andre Leiradella The GW core is licensed under zlib A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the GW core have the following file extensions: .mgw Databases \u00b6 RetroArch database(s) that are associated with the GW core: Handheld Electronic Game Features \u00b6 Frontend-level settings or features that the GW core respects. Feature Supported Restart \u2715 Screenshots \u2714 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2715 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The GW core's internal core name is 'Game & Watch' Geometry and timing \u00b6 The GW core's core provided FPS is 60 The GW core's core provided sample rate is 44100 Hz The GW core's core provided aspect ratio is dependent on the loaded content. Controllers \u00b6 The GW core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 - 2 device types \u00b6 None - Doesn't diable input. Controller - Joypad - Stay on this. Controller tables \u00b6 Joypad \u00b6 Attention What the inputs do are game specific. Without having anything selected, you can use the Start input to see a Controller overlay to see what the game specific inputs are. User 1 Remap descriptors RetroPad Inputs B Y Select Start Up Down Left Right A X L1 R1 L2 R2 L3 R3 External Links \u00b6 MADrigal Website Libretro GW Core info file Libretro GW Github Repository Report Libretro GW Core Issues Here","title":"Handheld Electronic (GW)"},{"location":"library/gw/#handheld-electronic-gw","text":"","title":"Handheld Electronic (GW)"},{"location":"library/gw/#background","text":"A libretro core for Game & Watch simulators. It runs simulators converted from source code for the games available at MADrigal .","title":"Background"},{"location":"library/gw/#how-to-start-the-gw-core","text":"As an example showcasing loading content with GW core, we will load the Donkey Kong (Coleco) game hosted on RetroArch's Content Downloader. You can do this by going to RetroArch's main menu screen and selecting 'Online Updater'. From there, select 'Content Downloader'. Select 'Handheld Electronic Game', then select 'Donkey Kong (Coleco)'. This should download and extract this file to RetroArch's Downloads directory. Go back to RetroArch's main menu screen. Select 'Load Content', then 'Downloads'. Select 'Donkey Kong (Coleco).mgw'. If you are asked which core to select, choose 'Handheld Electronic (GW)'. The content should now start running!","title":"How to start the GW core:"},{"location":"library/gw/#authorlicense","text":"The GW core has been authored by Andre Leiradella The GW core is licensed under zlib A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/gw/#extensions","text":"Content that can be loaded by the GW core have the following file extensions: .mgw","title":"Extensions"},{"location":"library/gw/#databases","text":"RetroArch database(s) that are associated with the GW core: Handheld Electronic Game","title":"Databases"},{"location":"library/gw/#features","text":"Frontend-level settings or features that the GW core respects. Feature Supported Restart \u2715 Screenshots \u2714 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2715 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/gw/#directories","text":"The GW core's internal core name is 'Game & Watch'","title":"Directories"},{"location":"library/gw/#geometry-and-timing","text":"The GW core's core provided FPS is 60 The GW core's core provided sample rate is 44100 Hz The GW core's core provided aspect ratio is dependent on the loaded content.","title":"Geometry and timing"},{"location":"library/gw/#controllers","text":"The GW core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/gw/#user-1-2-device-types","text":"None - Doesn't diable input. Controller - Joypad - Stay on this.","title":"User 1 - 2 device types"},{"location":"library/gw/#controller-tables","text":"","title":"Controller tables"},{"location":"library/gw/#joypad","text":"Attention What the inputs do are game specific. Without having anything selected, you can use the Start input to see a Controller overlay to see what the game specific inputs are. User 1 Remap descriptors RetroPad Inputs B Y Select Start Up Down Left Right A X L1 R1 L2 R2 L3 R3","title":"Joypad"},{"location":"library/gw/#external-links","text":"MADrigal Website Libretro GW Core info file Libretro GW Github Repository Report Libretro GW Core Issues Here","title":"External Links"},{"location":"library/handy/","text":"Atari - Lynx (Handy) \u00b6 Background \u00b6 Handy is an Atari Lynx video game system emulator that can be used as a libretro core. Handy was the original name of the Lynx project that was started at Epyx and then finished by Atari. Author/License \u00b6 The Handy core has been authored by K. Wilkins The Handy core is licensed under zlib A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the Handy core have the following file extensions: .lnx Databases \u00b6 RetroArch database(s) that are associated with the Handy core: Atari - Lynx BIOS \u00b6 Required or optional firmware files go in the frontend's system directory. Filename Description md5sum lynxboot.img Lynx Boot Image - Optional fcd403db69f54290b51035d82f835e7b Features \u00b6 Frontend-level settings or features that the Handy core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2715 States \u2714 Rewind \u2714 Netplay (State based) \u2714 (not link-cable emulation) Core Options \u2714 RetroAchievements \u2714 Cheats (Cheats menu) \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The Handy core's directory name is 'Handy' The Handy core saves/loads to/from these directories. Frontend's State directory 'content-name'.state# (State) Geometry and timing \u00b6 The Handy core's core provided FPS is 75 The Handy core's core provided sample rate is 22050 Hz The Handy core's core provided aspect ratio is dependent on the 'Display rotation' core option . When set to None, the aspect ratio will be 80/51. When set to 90 or 240, the aspect ratio will be 51/80. Core options \u00b6 The Handy core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Display rotation [handy_rot] ( None /90/240) Self-explanatory. Need to restart content. Controllers \u00b6 The Handy core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 device types \u00b6 None - Doesn't disable input. RetroPad - Joypad RetroPad w/Analog - Joypad - There's no reason to switch to this. Controller tables \u00b6 Joypad \u00b6 User 1 Remap descriptors RetroPad Inputs B Pause D-Pad Up D-Pad Down D-Pad Left D-Pad Right A Option 1 Option 2 Supported combinations Option 1 + Pause = Restarts game Option 2 + Pause = Flips Screen Compatibility \u00b6 Game Issue RoadBlasters Graphics glitches. Minor flickering and glitches after starting a race. External Links \u00b6 Official Handy Website Official Handy Downloads Libretro Handy Core info file Libretro Handy Github Repository Report Libretro Handy Core Issues Here See also \u00b6 Atari - Lynx \u00b6 Atari - Lynx (Beetle Lynx)","title":"Atari - Lynx (Handy)"},{"location":"library/handy/#atari-lynx-handy","text":"","title":"Atari - Lynx (Handy)"},{"location":"library/handy/#background","text":"Handy is an Atari Lynx video game system emulator that can be used as a libretro core. Handy was the original name of the Lynx project that was started at Epyx and then finished by Atari.","title":"Background"},{"location":"library/handy/#authorlicense","text":"The Handy core has been authored by K. Wilkins The Handy core is licensed under zlib A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/handy/#extensions","text":"Content that can be loaded by the Handy core have the following file extensions: .lnx","title":"Extensions"},{"location":"library/handy/#databases","text":"RetroArch database(s) that are associated with the Handy core: Atari - Lynx","title":"Databases"},{"location":"library/handy/#bios","text":"Required or optional firmware files go in the frontend's system directory. Filename Description md5sum lynxboot.img Lynx Boot Image - Optional fcd403db69f54290b51035d82f835e7b","title":"BIOS"},{"location":"library/handy/#features","text":"Frontend-level settings or features that the Handy core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2715 States \u2714 Rewind \u2714 Netplay (State based) \u2714 (not link-cable emulation) Core Options \u2714 RetroAchievements \u2714 Cheats (Cheats menu) \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/handy/#directories","text":"The Handy core's directory name is 'Handy' The Handy core saves/loads to/from these directories. Frontend's State directory 'content-name'.state# (State)","title":"Directories"},{"location":"library/handy/#geometry-and-timing","text":"The Handy core's core provided FPS is 75 The Handy core's core provided sample rate is 22050 Hz The Handy core's core provided aspect ratio is dependent on the 'Display rotation' core option . When set to None, the aspect ratio will be 80/51. When set to 90 or 240, the aspect ratio will be 51/80.","title":"Geometry and timing"},{"location":"library/handy/#core-options","text":"The Handy core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Display rotation [handy_rot] ( None /90/240) Self-explanatory. Need to restart content.","title":"Core options"},{"location":"library/handy/#controllers","text":"The Handy core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/handy/#user-1-device-types","text":"None - Doesn't disable input. RetroPad - Joypad RetroPad w/Analog - Joypad - There's no reason to switch to this.","title":"User 1 device types"},{"location":"library/handy/#controller-tables","text":"","title":"Controller tables"},{"location":"library/handy/#joypad","text":"User 1 Remap descriptors RetroPad Inputs B Pause D-Pad Up D-Pad Down D-Pad Left D-Pad Right A Option 1 Option 2 Supported combinations Option 1 + Pause = Restarts game Option 2 + Pause = Flips Screen","title":"Joypad"},{"location":"library/handy/#compatibility","text":"Game Issue RoadBlasters Graphics glitches. Minor flickering and glitches after starting a race.","title":"Compatibility"},{"location":"library/handy/#external-links","text":"Official Handy Website Official Handy Downloads Libretro Handy Core info file Libretro Handy Github Repository Report Libretro Handy Core Issues Here","title":"External Links"},{"location":"library/handy/#see-also","text":"","title":"See also"},{"location":"library/handy/#atari-lynx","text":"Atari - Lynx (Beetle Lynx)","title":"Atari - Lynx"},{"location":"library/hatari/","text":"Atari - ST/STE/TT/Falcon (Hatari) \u00b6 Background \u00b6 Hatari is an Atari ST/STE/TT/Falcon system emulator that can be used as a libretro core. Hatari tries to emulate the hardware as close as possible so that it is able to run most of the old Atari games and demos. Author/License \u00b6 The Hatari core has been authored by Nicolas Pomar\u00e8de The Hatari core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the Hatari core have the following file extensions: .st .msa .zip .stx .dim .ipf BIOS \u00b6 Required or optional firmware files go in the frontend's system directory. Attention The plain ST mode only works with TOS 1.00, 1.02, 1.04, or 2.06. STE mode requires any of the TOS versions 1.xx or 2.xx. TOS 3.0x is for TT, and TOS 4.0x is for Falcon. Filename Description md5sum tos.img TOS Boot Image - Required Features \u00b6 Frontend-level settings or features that the Hatari core respects. Feature Supported Restart \u2715 Screenshots \u2715 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The Hatari core's internal core name is 'Hatari' The Hatari core saves/loads to/from these directories. Frontend's System directory hatari.cfg (Hatari Config file) User directory .hatari/ (Unused directory) Geometry and timing \u00b6 The Hatari core's core provided FPS is (FPS) The Hatari core's core provided sample rate is (Rate) The Hatari core's core provided aspect ratio is (Ratio) Getting Started With Hatari \u00b6 Attention This guide was written by AnicetusCer on the LibRetro Forums . This was written using Lakka 2.1 rc6 x86_64 I was excited to find out Lakka has an Atari ST core, but then disappointed that it chucked out some errors when I tried to \u201cjust load an .st image\u201d. There really was not much of a guide out there, even to get started, So I picked apart a handful of posts and docs and wrote my own mini guide below. Quick Start \u00b6 Get a copy of US TOS 1.02 , name and put it here; \u201c/storage/system/tos.img\u201d Create a folder for your Atari ST games \u201c/storage/roms/Atari - ST\u201d Create a hatari.cfg file in \u201c/storage/system/hatari.cfg\u201d with the following lines [Floppy] bAutoInsertDiskB = TRUE FastFloppy = TRUE nWriteProtection = 0 szDiskAFileName = /storage/roms/Atari\\ -\\ ST//game.st szDiskBFileName = szDiskImageDirectory = /storage/roms/Atari\\ -\\ ST/ szDiskAZipPath = szDiskBZipPath = [ROM] szCartridgeImageFileName = szTosImageFileName = /storage/system/tos.img Changing Floppy disks can be achieved by accessing the Hatari menu and selecting the \u201cFloppy\u201d menu (see long winded explanation below) So far I have found non of my own .st files get scanned into a playlist so I\u2019ll have to build my own, but in the mean time to load a disk, in the Lakka menu go to \u201cLoad Content\u201d > select you first game disk > then select to run it with the Hatari Core, it will now try to load the game without complaining it has no TOS. (ST games can have varying Hardware requirements, see \u201cLong Winded Start\u201d on how to change settings, but you should be able to play a lot of games with just the defaults. Note on controllers, A controller can be used as both a mouse and joystick, see \u201cLong Winded Start\u201d for more info. Long Winded Start \u00b6 The TOS image (TOS stands for THE Operating System, cool huh) Consider TOS like a bios image used for other consoles, it needs adding to the the \u201c/storage/system\u201d directory. The one the retroarch Hatari documents mention is the US TOS version 1.02 this was an Atari ST OS and is probably the most compatible version for playing games, if you want to learn more about the different TOS versions and which hardware systems they correspond to (ST, STE, TT & FALCON) here is a good link; http://www.atarimania.com/atari-st-tt-falcon.html9 . I found Hatari would kick out this error when loading a game without the config set up \u201cCan not load TOS file J\u2019/usr/bin/TOS\u201d This is because it was looking for the tos.img in the /usr/bin directory of Lakka, this is a read only location so we can not just drop the TOS image there, this is what the config file is needed for. This section tells Hatari to look for TOS in the location specified. [ROM] szCartridgeImageFileName = szTosImageFileName = /storage/system/tos.img Hatari does not seem to have a default hatari.cfg in place when first loaded (Hence the error above), It expects it to be read from two places by default, /storage/.hatari/hatari.cfg and /storage/system/hatari.cfg, I prefer the latter as it is more visible, once you load your first game you can then access the Hatari menu and save over your first base config in either location with whatever settings you change. Controller and Hatari Menu (And Changing Floppy Disk) \u00b6 The Hatari menu can be accessed using the default controller button \u201cY\u201d when the core is loaded (IE during a game\" (i was using a PlayStation 4 controller and it was the square button for me) Once in the menu I found a real mouse is not usable, however you can press \u201cselect\u201d on your controller to switch to mouse mode (there is also another button to display the mouse speed \u201cms\u201d and another to change it), now you can navigate the menu. The menu can be used to change your system settings, here you can; Point to new TOS images Change the CPU & the amount of memory (needed sometimes to get some games working, dropping to 512k can help with some earlier games) Change floppy disks, \u201cYOU WILL DO THIS A LOT WITH SOME GAMES\u201d When the first game disk is loaded you can then access the Hatari menu, go to the \u201cFloppy\u201d Menu and then browse to a new disk to put into a drive (A or B). It is important that you choose not to reset the system when exiting the Hatari menu if still in a game (this is not selected by default , so you will be fine). Add a HDD not really needed (for die hard Atari fans). Change Keyboard and Joystick settings. Change the screen size (Warning Hatari is strict when it comes to aspect ratios it will always want to use the available resolutions of 1990s Monitors, with a little tweaking you can get it to fill most of your modern screen) Change the sound chip settings (don\u2019t touch unless you know what you\u2019re doing) There is also a save state option in the memory menu (Save state is not available directly from Lakka for Hatari, but it is inside the emulator ) Once you have finished setting up your settings you can now save them using the save config button , rather than use the default location of /storage/.hatari/hatari.cfg I would navigate back to your initial basic config file /storage/hatari.cfg as it is more accessible and visible, Note if you like, you can have as many config files as you want, as long as you remember where you put them , \"The Immortal (one of the hardest games ever made), for instance, needs its memory setting back to 512k with a 68000 cpu in st mode 1.02 TOS, so why not create an \u201cimmortal.cfg\u201d with the right system settings and floppy already in the drive, then you can load it and it is all just done. Core options \u00b6 The Hatari core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Internal resolution [Hatari_resolution] ( 640x480 |832x576|832x588|800x600|960x720|1024x768|1024x1024) Set the internal resolution. Controllers \u00b6 The Hatari core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 device types \u00b6 None - Doesn't disable input. There's no reason to switch to this. RetroPad - Joypad - Stay on this. RetroPad w/Analog - Joypad - Same as RetroPad. There's no reason to switch to this. Other controllers \u00b6 Mouse - The Hatari core can emulate mouse inputs but this is done automatically and cannot be manually selected as a device type. Controller tables \u00b6 Joypad \u00b6 User 1 Remap descriptors RetroPad Inputs Enter GUI Mouse mode toggle Keyboard overlay Up Down Left Right Fire Joystick number Mouse speed Toggle m/k status Keyboard \u00b6 RetroKeyboard Inputs Hatari core Inputs Keyboard Backspace - Keyboard Tab - Keyboard Clear - Keyboard Return - Keyboard Pause - Keyboard Escape - Keyboard Space - Keyboard Exclaim ! - Keyboard Double Quote \" - Keyboard Hash # - Keyboard Dollar $ - Keyboard Ampersand & - Keyboard Quote ' - Keyboard Left Parenthesis ( - Keyboard Right Parenthesis ) - Keyboard Asterisk * - Keyboard Plus + - Keyboard Comma , - Keyboard Minus - - Keyboard Period . - Keyboard Slash / - Keyboard 0 - Keyboard 1 - Keyboard 2 - Keyboard 3 - Keyboard 4 - Keyboard 5 - Keyboard 6 - Keyboard 7 - Keyboard 8 - Keyboard 9 - Keyboard Colon : - Keyboard Semicolon ; - Keyboard Less than < - Keyboard Equals = - Keyboard Greater than > - Keyboard Question ? - Keyboard At @ - Keyboard Left Bracket [ - Keyboard Backslash \\ - Keyboard Right Bracket ] - Keyboard Caret ^ - Keyboard Underscore _ - Keyboard Backquote ` - Keyboard a - Keyboard b - Keyboard c - Keyboard d - Keyboard e - Keyboard f - Keyboard g - Keyboard h - Keyboard i - Keyboard j - Keyboard k - Keyboard l - Keyboard m - Keyboard n - Keyboard o - Keyboard p - Keyboard q - Keyboard r - Keyboard s - Keyboard t - Keyboard u - Keyboard v - Keyboard w - Keyboard x - Keyboard y - Keyboard z - Keyboard Delete - Keyboard Keypad 0 - Keyboard Keypad 1 - Keyboard Keypad 2 - Keyboard Keypad 3 - Keyboard Keypad 4 - Keyboard Keypad 5 - Keyboard Keypad 6 - Keyboard Keypad 7 - Keyboard Keypad 8 - Keyboard Keypad 9 - Keyboard Keypad Period . - Keyboard Keypad Divide / - Keyboard Keypad Multiply * - Keyboard Keypad Minus - - Keyboard Keypad Plus + - Keyboard Keypad Enter - Keyboard Keypad Equals = - Keyboard Up - Keyboard Down - Keyboard Right - Keyboard Left - Keyboard Insert - Keyboard Home - Keyboard End - Keyboard Page Up - Keyboard Page Down - Keyboard F1 - Keyboard F2 - Keyboard F3 - Keyboard F4 - Keyboard F5 - Keyboard F6 - Keyboard F7 - Keyboard F8 - Keyboard F9 - Keyboard F10 - Keyboard F11 - Keyboard F12 - Keyboard F13 - Keyboard F14 - Keyboard F15 - Keyboard Num Lock - Keyboard Caps Lock - Keyboard Scroll Lock - Keyboard Right Shift - Keyboard Left Shift - Keyboard Right Control - Keyboard Left Control - Keyboard Right Alt - Keyboard Left Alt - Keyboard Right Meta - Keyboard Left Meta - Keyboard Right Super - Keyboard Left Super - Keyboard Mode - Keyboard Compose - Keyboard Help - Keyboard Print - Keyboard Sys Req - Keyboard Break - Keyboard Menu - Keyboard Power - Keyboard \u20ac - Keyboard Undo - Keyboard Unmapped - Keyboard Unknown - Mouse \u00b6 RetroMouse Inputs Hatari core inputs Mouse Cursor Mouse Cursor Mouse 1 Mouse Left Button Mouse 2 Mouse Right Button Compatibility \u00b6 Hatari compatibility can be found here External Links \u00b6 Official Hatari Website Official Hatari Downloads Libretro Hatari Core info file Libretro Hatari Github Repository Report Libretro Hatari Core Issues Here","title":"Atari - ST/STE/TT/Falcon (Hatari)"},{"location":"library/hatari/#atari-ststettfalcon-hatari","text":"","title":"Atari - ST/STE/TT/Falcon (Hatari)"},{"location":"library/hatari/#background","text":"Hatari is an Atari ST/STE/TT/Falcon system emulator that can be used as a libretro core. Hatari tries to emulate the hardware as close as possible so that it is able to run most of the old Atari games and demos.","title":"Background"},{"location":"library/hatari/#authorlicense","text":"The Hatari core has been authored by Nicolas Pomar\u00e8de The Hatari core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/hatari/#extensions","text":"Content that can be loaded by the Hatari core have the following file extensions: .st .msa .zip .stx .dim .ipf","title":"Extensions"},{"location":"library/hatari/#bios","text":"Required or optional firmware files go in the frontend's system directory. Attention The plain ST mode only works with TOS 1.00, 1.02, 1.04, or 2.06. STE mode requires any of the TOS versions 1.xx or 2.xx. TOS 3.0x is for TT, and TOS 4.0x is for Falcon. Filename Description md5sum tos.img TOS Boot Image - Required","title":"BIOS"},{"location":"library/hatari/#features","text":"Frontend-level settings or features that the Hatari core respects. Feature Supported Restart \u2715 Screenshots \u2715 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/hatari/#directories","text":"The Hatari core's internal core name is 'Hatari' The Hatari core saves/loads to/from these directories. Frontend's System directory hatari.cfg (Hatari Config file) User directory .hatari/ (Unused directory)","title":"Directories"},{"location":"library/hatari/#geometry-and-timing","text":"The Hatari core's core provided FPS is (FPS) The Hatari core's core provided sample rate is (Rate) The Hatari core's core provided aspect ratio is (Ratio)","title":"Geometry and timing"},{"location":"library/hatari/#getting-started-with-hatari","text":"Attention This guide was written by AnicetusCer on the LibRetro Forums . This was written using Lakka 2.1 rc6 x86_64 I was excited to find out Lakka has an Atari ST core, but then disappointed that it chucked out some errors when I tried to \u201cjust load an .st image\u201d. There really was not much of a guide out there, even to get started, So I picked apart a handful of posts and docs and wrote my own mini guide below.","title":"Getting Started With Hatari"},{"location":"library/hatari/#quick-start","text":"Get a copy of US TOS 1.02 , name and put it here; \u201c/storage/system/tos.img\u201d Create a folder for your Atari ST games \u201c/storage/roms/Atari - ST\u201d Create a hatari.cfg file in \u201c/storage/system/hatari.cfg\u201d with the following lines [Floppy] bAutoInsertDiskB = TRUE FastFloppy = TRUE nWriteProtection = 0 szDiskAFileName = /storage/roms/Atari\\ -\\ ST//game.st szDiskBFileName = szDiskImageDirectory = /storage/roms/Atari\\ -\\ ST/ szDiskAZipPath = szDiskBZipPath = [ROM] szCartridgeImageFileName = szTosImageFileName = /storage/system/tos.img Changing Floppy disks can be achieved by accessing the Hatari menu and selecting the \u201cFloppy\u201d menu (see long winded explanation below) So far I have found non of my own .st files get scanned into a playlist so I\u2019ll have to build my own, but in the mean time to load a disk, in the Lakka menu go to \u201cLoad Content\u201d > select you first game disk > then select to run it with the Hatari Core, it will now try to load the game without complaining it has no TOS. (ST games can have varying Hardware requirements, see \u201cLong Winded Start\u201d on how to change settings, but you should be able to play a lot of games with just the defaults. Note on controllers, A controller can be used as both a mouse and joystick, see \u201cLong Winded Start\u201d for more info.","title":"Quick Start"},{"location":"library/hatari/#long-winded-start","text":"The TOS image (TOS stands for THE Operating System, cool huh) Consider TOS like a bios image used for other consoles, it needs adding to the the \u201c/storage/system\u201d directory. The one the retroarch Hatari documents mention is the US TOS version 1.02 this was an Atari ST OS and is probably the most compatible version for playing games, if you want to learn more about the different TOS versions and which hardware systems they correspond to (ST, STE, TT & FALCON) here is a good link; http://www.atarimania.com/atari-st-tt-falcon.html9 . I found Hatari would kick out this error when loading a game without the config set up \u201cCan not load TOS file J\u2019/usr/bin/TOS\u201d This is because it was looking for the tos.img in the /usr/bin directory of Lakka, this is a read only location so we can not just drop the TOS image there, this is what the config file is needed for. This section tells Hatari to look for TOS in the location specified. [ROM] szCartridgeImageFileName = szTosImageFileName = /storage/system/tos.img Hatari does not seem to have a default hatari.cfg in place when first loaded (Hence the error above), It expects it to be read from two places by default, /storage/.hatari/hatari.cfg and /storage/system/hatari.cfg, I prefer the latter as it is more visible, once you load your first game you can then access the Hatari menu and save over your first base config in either location with whatever settings you change.","title":"Long Winded Start"},{"location":"library/hatari/#controller-and-hatari-menu-and-changing-floppy-disk","text":"The Hatari menu can be accessed using the default controller button \u201cY\u201d when the core is loaded (IE during a game\" (i was using a PlayStation 4 controller and it was the square button for me) Once in the menu I found a real mouse is not usable, however you can press \u201cselect\u201d on your controller to switch to mouse mode (there is also another button to display the mouse speed \u201cms\u201d and another to change it), now you can navigate the menu. The menu can be used to change your system settings, here you can; Point to new TOS images Change the CPU & the amount of memory (needed sometimes to get some games working, dropping to 512k can help with some earlier games) Change floppy disks, \u201cYOU WILL DO THIS A LOT WITH SOME GAMES\u201d When the first game disk is loaded you can then access the Hatari menu, go to the \u201cFloppy\u201d Menu and then browse to a new disk to put into a drive (A or B). It is important that you choose not to reset the system when exiting the Hatari menu if still in a game (this is not selected by default , so you will be fine). Add a HDD not really needed (for die hard Atari fans). Change Keyboard and Joystick settings. Change the screen size (Warning Hatari is strict when it comes to aspect ratios it will always want to use the available resolutions of 1990s Monitors, with a little tweaking you can get it to fill most of your modern screen) Change the sound chip settings (don\u2019t touch unless you know what you\u2019re doing) There is also a save state option in the memory menu (Save state is not available directly from Lakka for Hatari, but it is inside the emulator ) Once you have finished setting up your settings you can now save them using the save config button , rather than use the default location of /storage/.hatari/hatari.cfg I would navigate back to your initial basic config file /storage/hatari.cfg as it is more accessible and visible, Note if you like, you can have as many config files as you want, as long as you remember where you put them , \"The Immortal (one of the hardest games ever made), for instance, needs its memory setting back to 512k with a 68000 cpu in st mode 1.02 TOS, so why not create an \u201cimmortal.cfg\u201d with the right system settings and floppy already in the drive, then you can load it and it is all just done.","title":"Controller and Hatari Menu (And Changing Floppy Disk)"},{"location":"library/hatari/#core-options","text":"The Hatari core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Internal resolution [Hatari_resolution] ( 640x480 |832x576|832x588|800x600|960x720|1024x768|1024x1024) Set the internal resolution.","title":"Core options"},{"location":"library/hatari/#controllers","text":"The Hatari core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/hatari/#user-1-device-types","text":"None - Doesn't disable input. There's no reason to switch to this. RetroPad - Joypad - Stay on this. RetroPad w/Analog - Joypad - Same as RetroPad. There's no reason to switch to this.","title":"User 1 device types"},{"location":"library/hatari/#other-controllers","text":"Mouse - The Hatari core can emulate mouse inputs but this is done automatically and cannot be manually selected as a device type.","title":"Other controllers"},{"location":"library/hatari/#controller-tables","text":"","title":"Controller tables"},{"location":"library/hatari/#joypad","text":"User 1 Remap descriptors RetroPad Inputs Enter GUI Mouse mode toggle Keyboard overlay Up Down Left Right Fire Joystick number Mouse speed Toggle m/k status","title":"Joypad"},{"location":"library/hatari/#keyboard","text":"RetroKeyboard Inputs Hatari core Inputs Keyboard Backspace - Keyboard Tab - Keyboard Clear - Keyboard Return - Keyboard Pause - Keyboard Escape - Keyboard Space - Keyboard Exclaim ! - Keyboard Double Quote \" - Keyboard Hash # - Keyboard Dollar $ - Keyboard Ampersand & - Keyboard Quote ' - Keyboard Left Parenthesis ( - Keyboard Right Parenthesis ) - Keyboard Asterisk * - Keyboard Plus + - Keyboard Comma , - Keyboard Minus - - Keyboard Period . - Keyboard Slash / - Keyboard 0 - Keyboard 1 - Keyboard 2 - Keyboard 3 - Keyboard 4 - Keyboard 5 - Keyboard 6 - Keyboard 7 - Keyboard 8 - Keyboard 9 - Keyboard Colon : - Keyboard Semicolon ; - Keyboard Less than < - Keyboard Equals = - Keyboard Greater than > - Keyboard Question ? - Keyboard At @ - Keyboard Left Bracket [ - Keyboard Backslash \\ - Keyboard Right Bracket ] - Keyboard Caret ^ - Keyboard Underscore _ - Keyboard Backquote ` - Keyboard a - Keyboard b - Keyboard c - Keyboard d - Keyboard e - Keyboard f - Keyboard g - Keyboard h - Keyboard i - Keyboard j - Keyboard k - Keyboard l - Keyboard m - Keyboard n - Keyboard o - Keyboard p - Keyboard q - Keyboard r - Keyboard s - Keyboard t - Keyboard u - Keyboard v - Keyboard w - Keyboard x - Keyboard y - Keyboard z - Keyboard Delete - Keyboard Keypad 0 - Keyboard Keypad 1 - Keyboard Keypad 2 - Keyboard Keypad 3 - Keyboard Keypad 4 - Keyboard Keypad 5 - Keyboard Keypad 6 - Keyboard Keypad 7 - Keyboard Keypad 8 - Keyboard Keypad 9 - Keyboard Keypad Period . - Keyboard Keypad Divide / - Keyboard Keypad Multiply * - Keyboard Keypad Minus - - Keyboard Keypad Plus + - Keyboard Keypad Enter - Keyboard Keypad Equals = - Keyboard Up - Keyboard Down - Keyboard Right - Keyboard Left - Keyboard Insert - Keyboard Home - Keyboard End - Keyboard Page Up - Keyboard Page Down - Keyboard F1 - Keyboard F2 - Keyboard F3 - Keyboard F4 - Keyboard F5 - Keyboard F6 - Keyboard F7 - Keyboard F8 - Keyboard F9 - Keyboard F10 - Keyboard F11 - Keyboard F12 - Keyboard F13 - Keyboard F14 - Keyboard F15 - Keyboard Num Lock - Keyboard Caps Lock - Keyboard Scroll Lock - Keyboard Right Shift - Keyboard Left Shift - Keyboard Right Control - Keyboard Left Control - Keyboard Right Alt - Keyboard Left Alt - Keyboard Right Meta - Keyboard Left Meta - Keyboard Right Super - Keyboard Left Super - Keyboard Mode - Keyboard Compose - Keyboard Help - Keyboard Print - Keyboard Sys Req - Keyboard Break - Keyboard Menu - Keyboard Power - Keyboard \u20ac - Keyboard Undo - Keyboard Unmapped - Keyboard Unknown -","title":"Keyboard"},{"location":"library/hatari/#mouse","text":"RetroMouse Inputs Hatari core inputs Mouse Cursor Mouse Cursor Mouse 1 Mouse Left Button Mouse 2 Mouse Right Button","title":"Mouse"},{"location":"library/hatari/#compatibility","text":"Hatari compatibility can be found here","title":"Compatibility"},{"location":"library/hatari/#external-links","text":"Official Hatari Website Official Hatari Downloads Libretro Hatari Core info file Libretro Hatari Github Repository Report Libretro Hatari Core Issues Here","title":"External Links"},{"location":"library/higan_accuracy/","text":"Nintendo - SNES / Famicom (higan Accuracy) \u00b6 Background \u00b6 A port of higan v106's Super Famicom emulation core to libretro. This core is the most in sync with upstream higan. Most accurate SNES emulation available. Simplified and easily accessible Super Game Boy functionality compared to the other bsnes cores. Author/License \u00b6 The higan Accuracy core has been authored by byuu The higan Accuracy core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the higan Accuracy core have the following file extensions: .sfc .smc .gb .gbc .bml .rom Databases \u00b6 RetroArch database(s) that are associated with the higan Accuracy core: Nintendo - Super Nintendo Entertainment System Nintendo - Super Nintendo Entertainment System Hacks Nintendo - Game Boy Nintendo - Game Boy Color BIOS \u00b6 Required or optional firmware files go in the frontend's system directory. Attention higan Accuracy uses split ROMS for special chip games. Attention Firmware files for SGB emulation need to be in directories called SGB1.sfc and SGB2.sfc in RetroArch's system directory. Look at the Super GameBoy support section for more information. Notable DSP1.mdDSP1B Games: Super Mario Kart Pilotwings Notable DSP2 Games: Dungeon Master Notable DSP3 Games: SD Gundam GX Notable DSP4 Games: Top Gear 3000 Notable Cx4 Games: Mega Man X2 Mega Man X3 Filename Description md5sum dsp1.data.rom DSP1 co-processor firmware - Optional 3d81b45fa0c2aa8b852dfb1ece7c0971 dsp1.program.rom DSP1 co-processor firmware - Optional ae209fbe789fbf11a48aea5ab1197321 dsp1b.data.rom DSP1B co-processor firmware - Optional 1e3f568634a7d8284020dddc0ae905bc dsp1b.program.rom DSP1B co-processor firmware - Optional d10f446888e097cbf500f3f663cf4f6d dsp2.data.rom DSP2 co-processor firmware - Optional e9417e29223b139c3c4b635a2a3b8744 dsp2.program.rom DSP2 co-processor firmware - Optional aa6e5922a3ed5ded54f24247c11143c5 dsp3.data.rom DSP3 co-processor firmware - Optional 0a81210c0a940b997dd9843281008ee6 dsp3.program.rom DSP3 co-processor firmware - Optional d99ca4562818d49cee1f242705bba6f8 dsp4.data.rom DSP4 co-processor firmware - Optional ee4990879eb68e3cbca239c5bc20303d dsp4.program.rom DSP4 co-processor firmware - Optional a151023b948b90ffc23a5b594bb6fef2 cx4.data.rom CX4 co-processor firmware - Optional 037ac4296b6b6a5c47c440188d3c72e3 st010.data.rom ST010 co-processor firmware - Optional 254d70762b6f59f99c27c395aba7d07d st010.program.rom ST010 co-processor firmware - Optional 1d70019179a59a566a0bb5d3f2845544 st011.data.rom ST011 co-processor firmware - Optional 10bd3f4aa949737ab9836512c35bcc29 st011.program.rom ST011 co-processor firmware - Optional 95222ebf1c0c2990bcf25db43743f032 st018.data.rom ST018 co-processor firmware - Optional 49c898b60d0f15e90d0ba780dd12f366 st018.program.rom ST018 co-processor firmware - Optional dda40ccd57390c96e49d30a041f9a9e7 SGB1.sfc/sgb1.boot.rom Super Game Boy BIOS - Optional SGB1.sfc/program.rom Super Game Boy ROM - Optional SGB2.sfc/sgb2.boot.rom Super Game Boy 2 BIOS - Optional SGB2.sfc/program.rom Super Game Boy 2 ROM - Optional Features \u00b6 Frontend-level settings or features that the higan Accuracy core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse - Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan - LEDs \u2715 Directories \u00b6 The higan Accuracy core's internal core name is 'higan (Super Famicom Accuracy)' The higan Accuracy core saves/loads to/from these directories. Frontend's Save directory 'content-name'.srm (Cartridge battery save) Frontend's State directory 'content-name'.state# (State) Geometry and timing \u00b6 The higan Accuracy core's core provided FPS is (FPS) The higan Accuracy core's core provided sample rate is (Rate) The higan Accuracy core's core provided aspect ratio is (Ratio) Super Gameboy Support \u00b6 The higan Accuracy core uses a simplified Super Game Boy routine that makes it much easier to access this feature than with the old v094-based cores. Instead of using the complex, CLI-based 'subsystem' launch commands, it looks for the necessary files in the system/BIOS directory whenever you feed the core a *.gb/c file. To get it working, you'll need one or more Super Game Boy ROMs and the sgb.boot.rom BIOS. Step 1 Make 2 subdirectories in RetroArch's system directory, one named SGB1.sfc and the other named SGB2.sfc. Step 2 Copy your original Super Game Boy ROM into the SGB1.sfc directory and then rename it to program.rom. Copy your Super Game Boy 2 ROM into the SGB2.sfc directory and then rename it program.rom, as well. Step 3 Copy your sgb.boot.rom BIOS into each of your SGB1.sfc and SGB2.sfc directories, and rename them to sgb1.boot.rom and sgb2.boot.rom, respectively. The 'Preferred Super GameBoy BIOS' core option lets you choose which of the two SGB BIOSes to use. Step 4 Load a SGB-supported GB.mdGBC rom. Done Warning There may be graphical glitches when Rewind is set to On in RetroArch's settings. MSU-1 \u00b6 Attention MSU-1 support in this core is complex. Use the Snes9x core for simplified and easily accessible MSU-1 support. MSU-1 support can be used by loading a correct .bml file. There's documentation for loading MSU-1 games in standalone higan here . Core options \u00b6 The higan Accuracy core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Internal resolution [higan_sfc_internal_resolution] ( 512x480 |512x448|512x240|512x224|256x240|256x224) Self-explanatory. 512x480 512x448 512x240 512x224 256x240 256x224 Color emulation [higan_sfc_color_emulation] ( OFF |ON) Simulates the way a console\u2019s display device differs from modern computer monitor\u2019s colour reproduction. In particular, it simulates the slightly-different gamma correction used by the Super Famicom. Color emulation - Disabled Color emulation - Enabled Blur emulation [higan_sfc_blur_emulation] ( OFF |ON) Simulates the limited horizontal resolution of standard-definition TVs by blurring together horizontally-adjacent pixels. Games like Jurassic Park for the Super Famicom depend on this to emulate a transparency effect. Blur emulation - Disabled Blur emulation - Enabled Scanline emulation [higan_sfc_scanline_emulation] ( OFF |ON) Currently does not function properly. Preferred Super GameBoy BIOS (restart) [higan_sfc_sgb_bios] ( SGB1.sfc/ |SGB2.sfc/) Choose what Super GameBoy BIOS you want to use. Look at the Super GameBoy Support section for more information. Controllers \u00b6 The higan Accuracy core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 device types \u00b6 None - Input disabled. SNES Joypad - Joypad SNES Mouse - Mouse User 2 device types \u00b6 None - Input disabled. SNES Joypad - Joypad SNES Mouse - Mouse Multitap - Joypad - Allows for up to five players to play together in multitap games. SuperScope - Lightgun - Inputs are not hooked up in this core. Justifier - Lightgun - Inputs are not hooked up in this core. Justifiers - Lightgun - Two Justifiers are plugged in, for two-player Justifier games. Inputs are not hooked up in this core. Multitap support \u00b6 Activating multitap support in compatible games can be configured by switching to the Multitap device type for User 2. Controller tables \u00b6 Joypad \u00b6 User 1 - 5 Remap descriptors RetroPad Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R Mouse \u00b6 RetroMouse Inputs SNES Mouse Mouse Cursor SNES Mouse Cursor Mouse 1 SNES Mouse Left Button Mouse 2 SNES Mouse Right Button Compatibility \u00b6 The higan Accuracy core fully emulates all SNES games that have ever been officially released. Incompatible with ROM hacks made to take advantage of emulator quirks, much like real hardware. External Links \u00b6 Official higan Website Official higan Upstream Downloads Libretro higan Accuracy Core info file Libretro higan Accuracy Gitlab Repository Report Libretro higan Accuracy Core Issues Here See also \u00b6 Nintendo - Game Boy (+ Color) \u00b6 Nintendo - Game Boy / Color (Emux GB) Nintendo - Game Boy / Color (Gambatte) Nintendo - Game Boy / Color (Gearboy) Nintendo - Game Boy / Color (SameBoy) Nintendo - Game Boy / Color (TGB Dual) Nintendo - Game Boy Advance (mGBA) Nintendo - Game Boy Advance (VBA-M) Nintendo - SNES / Famicom (nSide Balanced) Nintendo - SNES / Famicom (Mesen-S) Nintendo - Super Nintendo Entertainment System (+ Hacks) \u00b6 Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (nSide Balanced) Nintendo - SNES / Famicom (Mesen-S) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2005) Nintendo - SNES / Famicom (Snes9x 2010)","title":"Nintendo - SNES / Famicom (higan Accuracy)"},{"location":"library/higan_accuracy/#nintendo-snes-famicom-higan-accuracy","text":"","title":"Nintendo - SNES / Famicom (higan Accuracy)"},{"location":"library/higan_accuracy/#background","text":"A port of higan v106's Super Famicom emulation core to libretro. This core is the most in sync with upstream higan. Most accurate SNES emulation available. Simplified and easily accessible Super Game Boy functionality compared to the other bsnes cores.","title":"Background"},{"location":"library/higan_accuracy/#authorlicense","text":"The higan Accuracy core has been authored by byuu The higan Accuracy core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/higan_accuracy/#extensions","text":"Content that can be loaded by the higan Accuracy core have the following file extensions: .sfc .smc .gb .gbc .bml .rom","title":"Extensions"},{"location":"library/higan_accuracy/#databases","text":"RetroArch database(s) that are associated with the higan Accuracy core: Nintendo - Super Nintendo Entertainment System Nintendo - Super Nintendo Entertainment System Hacks Nintendo - Game Boy Nintendo - Game Boy Color","title":"Databases"},{"location":"library/higan_accuracy/#bios","text":"Required or optional firmware files go in the frontend's system directory. Attention higan Accuracy uses split ROMS for special chip games. Attention Firmware files for SGB emulation need to be in directories called SGB1.sfc and SGB2.sfc in RetroArch's system directory. Look at the Super GameBoy support section for more information. Notable DSP1.mdDSP1B Games: Super Mario Kart Pilotwings Notable DSP2 Games: Dungeon Master Notable DSP3 Games: SD Gundam GX Notable DSP4 Games: Top Gear 3000 Notable Cx4 Games: Mega Man X2 Mega Man X3 Filename Description md5sum dsp1.data.rom DSP1 co-processor firmware - Optional 3d81b45fa0c2aa8b852dfb1ece7c0971 dsp1.program.rom DSP1 co-processor firmware - Optional ae209fbe789fbf11a48aea5ab1197321 dsp1b.data.rom DSP1B co-processor firmware - Optional 1e3f568634a7d8284020dddc0ae905bc dsp1b.program.rom DSP1B co-processor firmware - Optional d10f446888e097cbf500f3f663cf4f6d dsp2.data.rom DSP2 co-processor firmware - Optional e9417e29223b139c3c4b635a2a3b8744 dsp2.program.rom DSP2 co-processor firmware - Optional aa6e5922a3ed5ded54f24247c11143c5 dsp3.data.rom DSP3 co-processor firmware - Optional 0a81210c0a940b997dd9843281008ee6 dsp3.program.rom DSP3 co-processor firmware - Optional d99ca4562818d49cee1f242705bba6f8 dsp4.data.rom DSP4 co-processor firmware - Optional ee4990879eb68e3cbca239c5bc20303d dsp4.program.rom DSP4 co-processor firmware - Optional a151023b948b90ffc23a5b594bb6fef2 cx4.data.rom CX4 co-processor firmware - Optional 037ac4296b6b6a5c47c440188d3c72e3 st010.data.rom ST010 co-processor firmware - Optional 254d70762b6f59f99c27c395aba7d07d st010.program.rom ST010 co-processor firmware - Optional 1d70019179a59a566a0bb5d3f2845544 st011.data.rom ST011 co-processor firmware - Optional 10bd3f4aa949737ab9836512c35bcc29 st011.program.rom ST011 co-processor firmware - Optional 95222ebf1c0c2990bcf25db43743f032 st018.data.rom ST018 co-processor firmware - Optional 49c898b60d0f15e90d0ba780dd12f366 st018.program.rom ST018 co-processor firmware - Optional dda40ccd57390c96e49d30a041f9a9e7 SGB1.sfc/sgb1.boot.rom Super Game Boy BIOS - Optional SGB1.sfc/program.rom Super Game Boy ROM - Optional SGB2.sfc/sgb2.boot.rom Super Game Boy 2 BIOS - Optional SGB2.sfc/program.rom Super Game Boy 2 ROM - Optional","title":"BIOS"},{"location":"library/higan_accuracy/#features","text":"Frontend-level settings or features that the higan Accuracy core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse - Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan - LEDs \u2715","title":"Features"},{"location":"library/higan_accuracy/#directories","text":"The higan Accuracy core's internal core name is 'higan (Super Famicom Accuracy)' The higan Accuracy core saves/loads to/from these directories. Frontend's Save directory 'content-name'.srm (Cartridge battery save) Frontend's State directory 'content-name'.state# (State)","title":"Directories"},{"location":"library/higan_accuracy/#geometry-and-timing","text":"The higan Accuracy core's core provided FPS is (FPS) The higan Accuracy core's core provided sample rate is (Rate) The higan Accuracy core's core provided aspect ratio is (Ratio)","title":"Geometry and timing"},{"location":"library/higan_accuracy/#super-gameboy-support","text":"The higan Accuracy core uses a simplified Super Game Boy routine that makes it much easier to access this feature than with the old v094-based cores. Instead of using the complex, CLI-based 'subsystem' launch commands, it looks for the necessary files in the system/BIOS directory whenever you feed the core a *.gb/c file. To get it working, you'll need one or more Super Game Boy ROMs and the sgb.boot.rom BIOS. Step 1 Make 2 subdirectories in RetroArch's system directory, one named SGB1.sfc and the other named SGB2.sfc. Step 2 Copy your original Super Game Boy ROM into the SGB1.sfc directory and then rename it to program.rom. Copy your Super Game Boy 2 ROM into the SGB2.sfc directory and then rename it program.rom, as well. Step 3 Copy your sgb.boot.rom BIOS into each of your SGB1.sfc and SGB2.sfc directories, and rename them to sgb1.boot.rom and sgb2.boot.rom, respectively. The 'Preferred Super GameBoy BIOS' core option lets you choose which of the two SGB BIOSes to use. Step 4 Load a SGB-supported GB.mdGBC rom. Done Warning There may be graphical glitches when Rewind is set to On in RetroArch's settings.","title":"Super Gameboy Support"},{"location":"library/higan_accuracy/#msu-1","text":"Attention MSU-1 support in this core is complex. Use the Snes9x core for simplified and easily accessible MSU-1 support. MSU-1 support can be used by loading a correct .bml file. There's documentation for loading MSU-1 games in standalone higan here .","title":"MSU-1"},{"location":"library/higan_accuracy/#core-options","text":"The higan Accuracy core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Internal resolution [higan_sfc_internal_resolution] ( 512x480 |512x448|512x240|512x224|256x240|256x224) Self-explanatory. 512x480 512x448 512x240 512x224 256x240 256x224 Color emulation [higan_sfc_color_emulation] ( OFF |ON) Simulates the way a console\u2019s display device differs from modern computer monitor\u2019s colour reproduction. In particular, it simulates the slightly-different gamma correction used by the Super Famicom. Color emulation - Disabled Color emulation - Enabled Blur emulation [higan_sfc_blur_emulation] ( OFF |ON) Simulates the limited horizontal resolution of standard-definition TVs by blurring together horizontally-adjacent pixels. Games like Jurassic Park for the Super Famicom depend on this to emulate a transparency effect. Blur emulation - Disabled Blur emulation - Enabled Scanline emulation [higan_sfc_scanline_emulation] ( OFF |ON) Currently does not function properly. Preferred Super GameBoy BIOS (restart) [higan_sfc_sgb_bios] ( SGB1.sfc/ |SGB2.sfc/) Choose what Super GameBoy BIOS you want to use. Look at the Super GameBoy Support section for more information.","title":"Core options"},{"location":"library/higan_accuracy/#controllers","text":"The higan Accuracy core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/higan_accuracy/#user-1-device-types","text":"None - Input disabled. SNES Joypad - Joypad SNES Mouse - Mouse","title":"User 1 device types"},{"location":"library/higan_accuracy/#user-2-device-types","text":"None - Input disabled. SNES Joypad - Joypad SNES Mouse - Mouse Multitap - Joypad - Allows for up to five players to play together in multitap games. SuperScope - Lightgun - Inputs are not hooked up in this core. Justifier - Lightgun - Inputs are not hooked up in this core. Justifiers - Lightgun - Two Justifiers are plugged in, for two-player Justifier games. Inputs are not hooked up in this core.","title":"User 2 device types"},{"location":"library/higan_accuracy/#multitap-support","text":"Activating multitap support in compatible games can be configured by switching to the Multitap device type for User 2.","title":"Multitap support"},{"location":"library/higan_accuracy/#controller-tables","text":"","title":"Controller tables"},{"location":"library/higan_accuracy/#joypad","text":"User 1 - 5 Remap descriptors RetroPad Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R","title":"Joypad"},{"location":"library/higan_accuracy/#mouse","text":"RetroMouse Inputs SNES Mouse Mouse Cursor SNES Mouse Cursor Mouse 1 SNES Mouse Left Button Mouse 2 SNES Mouse Right Button","title":"Mouse"},{"location":"library/higan_accuracy/#compatibility","text":"The higan Accuracy core fully emulates all SNES games that have ever been officially released. Incompatible with ROM hacks made to take advantage of emulator quirks, much like real hardware.","title":"Compatibility"},{"location":"library/higan_accuracy/#external-links","text":"Official higan Website Official higan Upstream Downloads Libretro higan Accuracy Core info file Libretro higan Accuracy Gitlab Repository Report Libretro higan Accuracy Core Issues Here","title":"External Links"},{"location":"library/higan_accuracy/#see-also","text":"","title":"See also"},{"location":"library/higan_accuracy/#nintendo-game-boy-color","text":"Nintendo - Game Boy / Color (Emux GB) Nintendo - Game Boy / Color (Gambatte) Nintendo - Game Boy / Color (Gearboy) Nintendo - Game Boy / Color (SameBoy) Nintendo - Game Boy / Color (TGB Dual) Nintendo - Game Boy Advance (mGBA) Nintendo - Game Boy Advance (VBA-M) Nintendo - SNES / Famicom (nSide Balanced) Nintendo - SNES / Famicom (Mesen-S)","title":"Nintendo - Game Boy (+ Color)"},{"location":"library/higan_accuracy/#nintendo-super-nintendo-entertainment-system-hacks","text":"Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (nSide Balanced) Nintendo - SNES / Famicom (Mesen-S) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2005) Nintendo - SNES / Famicom (Snes9x 2010)","title":"Nintendo - Super Nintendo Entertainment System (+ Hacks)"},{"location":"library/imageviewer/","text":"Imageviewer \u00b6 Background \u00b6 View images Author/License \u00b6 The Imageviewer core has been authored by The RetroArch Team The Imageviewer core is licensed under MIT A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the Imageviewer core have the following file extensions: .jpg .jpeg .png .bmp .psd .tga .gif .hdr .pic .ppm .pgm Features \u00b6 Frontend-level settings or features that the Imageviewer core respects. Feature Supported Restart \u2715 Screenshots \u2714 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2715 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The Imageviewer core's internal core name is 'image display' Geometry and timing \u00b6 The Imageviewer core's core provided FPS is 60 The Imageviewer core's core provided sample rate is 44100 Hz The Imageviewer core's core provided aspect ratio is dependent on the loaded content. Controllers \u00b6 The Imageviewer core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 device types \u00b6 None - Doesn't disable input. There's no reason to switch to this. RetroPad - Joypad - Stay on this. RetroPad w/Analog - Joypad - There's no reason to switch to this. Controller tables \u00b6 Joypad \u00b6 RetroPad Inputs Imageviewer core inputs Automatic slideshow - Go to the next image every 2 seconds Go forward 5 images Go backward 5 images Go backward 1 image Go forward 1 image External Links \u00b6 Libretro Imageviewer Core info file Libretro Imageviewer Github Repository Report Libretro Imageviewer Core Issues Here See also \u00b6 Media \u00b6 FFmpeg Game Music Emu mpv PocketCDG","title":"Imageviewer"},{"location":"library/imageviewer/#imageviewer","text":"","title":"Imageviewer"},{"location":"library/imageviewer/#background","text":"View images","title":"Background"},{"location":"library/imageviewer/#authorlicense","text":"The Imageviewer core has been authored by The RetroArch Team The Imageviewer core is licensed under MIT A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/imageviewer/#extensions","text":"Content that can be loaded by the Imageviewer core have the following file extensions: .jpg .jpeg .png .bmp .psd .tga .gif .hdr .pic .ppm .pgm","title":"Extensions"},{"location":"library/imageviewer/#features","text":"Frontend-level settings or features that the Imageviewer core respects. Feature Supported Restart \u2715 Screenshots \u2714 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2715 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/imageviewer/#directories","text":"The Imageviewer core's internal core name is 'image display'","title":"Directories"},{"location":"library/imageviewer/#geometry-and-timing","text":"The Imageviewer core's core provided FPS is 60 The Imageviewer core's core provided sample rate is 44100 Hz The Imageviewer core's core provided aspect ratio is dependent on the loaded content.","title":"Geometry and timing"},{"location":"library/imageviewer/#controllers","text":"The Imageviewer core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/imageviewer/#user-1-device-types","text":"None - Doesn't disable input. There's no reason to switch to this. RetroPad - Joypad - Stay on this. RetroPad w/Analog - Joypad - There's no reason to switch to this.","title":"User 1 device types"},{"location":"library/imageviewer/#controller-tables","text":"","title":"Controller tables"},{"location":"library/imageviewer/#joypad","text":"RetroPad Inputs Imageviewer core inputs Automatic slideshow - Go to the next image every 2 seconds Go forward 5 images Go backward 5 images Go backward 1 image Go forward 1 image","title":"Joypad"},{"location":"library/imageviewer/#external-links","text":"Libretro Imageviewer Core info file Libretro Imageviewer Github Repository Report Libretro Imageviewer Core Issues Here","title":"External Links"},{"location":"library/imageviewer/#see-also","text":"","title":"See also"},{"location":"library/imageviewer/#media","text":"FFmpeg Game Music Emu mpv PocketCDG","title":"Media"},{"location":"library/lutro/","text":"Lua Engine (Lutro) \u00b6 Background \u00b6 Lutro is an experimental lua game framework that follows the L\u00d6VE API . Lutro games can be played with LibRetro/RetroArch through the Lutro core. How to start the Lutro core: \u00b6 As an example showcasing loading content with the Lutro core, we will load the Pong game hosted on RetroArch's Content Downloader. You can do this by going to RetroArch's main menu screen and selecting 'Online Updater'. From there, select 'Content Downloader'. Select 'Lutro', then select 'Pong.lutro'. This should download and extract this file to RetroArch's Downloads directory. Go back to RetroArch's main menu screen. Select 'Load Content', then 'Downloads'. Select 'Pong.lutro'. If you are asked which core to select, choose 'Lua Engine (Lutro)'. The content should now start running! Author/License \u00b6 The Lutro core has been authored by Higor Euripedes Jean-Andre Santoni The Lutro core is licensed under MIT A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the Lutro core have the following file extensions: .lutro .lua Databases \u00b6 RetroArch database(s) that are associated with the Lutro core: Lutro Features \u00b6 Frontend-level settings or features that the Lutro core respects. Feature Supported Restart \u2715 Screenshots \u2715 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2715 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The Lutro core's internal core name is 'lutro' Geometry and timing \u00b6 The Lutro core's core provided FPS is 60 The Lutro core's core provided sample rate is 44100 Hz The LUtro core's core provided aspect ratio is (Ratio) Controllers \u00b6 The Lutro core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 device types \u00b6 None - Doesn't disable input. There's no reason to switch to this. RetroPad - Joypad - Stay on this. RetroPad w/Analog - Joypad - Same as RetroPad. There's no reason to switch to this. Controller tables \u00b6 Joypad \u00b6 Attention What the inputs do are game specific. User 1 Remap descriptors RetroPad Inputs Lutro core inputs B Y Select Start Up Up Down Down Left Left Right Right A X L1 R1 L2 R2 L3 R3 External Links \u00b6 Lua Website L\u00d6VE API Website Libretro Lutro Core info file Libretro Lutro Github Repository LUTRO L\u00d6VE API Comparison Lutro Github Wiki Report Libretro Lutro Core Issues Here See also \u00b6 Custom Engine \u00b6 ChaiLove","title":"Lua Engine (Lutro)"},{"location":"library/lutro/#lua-engine-lutro","text":"","title":"Lua Engine (Lutro)"},{"location":"library/lutro/#background","text":"Lutro is an experimental lua game framework that follows the L\u00d6VE API . Lutro games can be played with LibRetro/RetroArch through the Lutro core.","title":"Background"},{"location":"library/lutro/#how-to-start-the-lutro-core","text":"As an example showcasing loading content with the Lutro core, we will load the Pong game hosted on RetroArch's Content Downloader. You can do this by going to RetroArch's main menu screen and selecting 'Online Updater'. From there, select 'Content Downloader'. Select 'Lutro', then select 'Pong.lutro'. This should download and extract this file to RetroArch's Downloads directory. Go back to RetroArch's main menu screen. Select 'Load Content', then 'Downloads'. Select 'Pong.lutro'. If you are asked which core to select, choose 'Lua Engine (Lutro)'. The content should now start running!","title":"How to start the Lutro core:"},{"location":"library/lutro/#authorlicense","text":"The Lutro core has been authored by Higor Euripedes Jean-Andre Santoni The Lutro core is licensed under MIT A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/lutro/#extensions","text":"Content that can be loaded by the Lutro core have the following file extensions: .lutro .lua","title":"Extensions"},{"location":"library/lutro/#databases","text":"RetroArch database(s) that are associated with the Lutro core: Lutro","title":"Databases"},{"location":"library/lutro/#features","text":"Frontend-level settings or features that the Lutro core respects. Feature Supported Restart \u2715 Screenshots \u2715 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2715 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/lutro/#directories","text":"The Lutro core's internal core name is 'lutro'","title":"Directories"},{"location":"library/lutro/#geometry-and-timing","text":"The Lutro core's core provided FPS is 60 The Lutro core's core provided sample rate is 44100 Hz The LUtro core's core provided aspect ratio is (Ratio)","title":"Geometry and timing"},{"location":"library/lutro/#controllers","text":"The Lutro core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/lutro/#user-1-device-types","text":"None - Doesn't disable input. There's no reason to switch to this. RetroPad - Joypad - Stay on this. RetroPad w/Analog - Joypad - Same as RetroPad. There's no reason to switch to this.","title":"User 1 device types"},{"location":"library/lutro/#controller-tables","text":"","title":"Controller tables"},{"location":"library/lutro/#joypad","text":"Attention What the inputs do are game specific. User 1 Remap descriptors RetroPad Inputs Lutro core inputs B Y Select Start Up Up Down Down Left Left Right Right A X L1 R1 L2 R2 L3 R3","title":"Joypad"},{"location":"library/lutro/#external-links","text":"Lua Website L\u00d6VE API Website Libretro Lutro Core info file Libretro Lutro Github Repository LUTRO L\u00d6VE API Comparison Lutro Github Wiki Report Libretro Lutro Core Issues Here","title":"External Links"},{"location":"library/lutro/#see-also","text":"","title":"See also"},{"location":"library/lutro/#custom-engine","text":"ChaiLove","title":"Custom Engine"},{"location":"library/mame2003_plus/","text":"MAME 2003-Plus \u00b6 Background \u00b6 MAME 2003-Plus (also referred to as MAME 2003+ and mame2003-plus) is a libretro multi-arcade system emulator core which prioritizes 1) usability and frontend integration, 2) performance, and 3) compatibility across the range of libretro-supported platforms including mobile devices, single board computers, and consoles. MAME 2003-Plus is part of a long tradition in arcade emulation of producing platform-specific and performance-optimized MAME builds. Why is it called Plus ? Unlike the other 'historic' libretro MAME cores which remain fixed at one MAME version, MAME 2003-Plus is actively maintained and has to date added support for hundreds of new games along with dozens of new features. MAME 2003-Plus is part of a lineage of codebase forks and ports: this core was forked from MAME 2003, which is itself derived from Xmame 0.78, the X11/Unix port of MAME 0.78. Authors : MAMEdev, MAME 2003-Plus team, et al (see LICENSE.md and CHANGELOG.md ) Contribute to this documentation \u00b6 In order to propose improvements to this document, visit it's corresponding source page on github . Changes are proposed using \"Pull Requests.\" See also \u00b6 MAME 2003 License \u00b6 MAME Non-Commercial Extensions \u00b6 zip, chd CHD paths Some games require data from an internal hard drive, CD-ROM, laserdisk, or other media in order to be emulated -- those forms of media are packaged as CHD files. CHD files should be copied to subfolders within the folder where the romset zips have been installed: /libretro content dir/blitz/blitz.chd Building romsets for MAME 2003-Plus \u00b6 MAME 2003-Plus began with the game drivers from MAME 0.78, meaning that 95% or more of MAME 0.78 romsets will work as-is in MAME 2003-Plus, where they immediately benefit from its bugfixes and other improvements. In order to play the new games and games which received ROM updates in MAME 2003-Plus, you will need to find or build MAME 2003-Plus romsets. What is a romset? Arcade games are packaged as zip files, most of which are composed of more than one individual 'ROM' files. That is why some resources inaccurately refer to an individual arcade game as a ROM (like people use to describe a zipped game cartridge ROM) while other resources refer to an individual game as a ROM set , ROMset , or romset . MAME 2003-Plus has the ability to generate an XML \"DAT\" file directly from the MAME menu . Step 1: Obtaining an XML DAT \u00b6 DAT files describe the exact ROM contents that the emulator needs including filenames, file sizes, and checksums to verify contents are not incorrect or corrupt. mame2003-plus has the ability to generate an XML \"DAT\" file from the MAME Menu. You can also access the MAME menu by turning it on as a core option, selecting Generate XML DAT and then disabing the menu as a core option. Step 2: Finding a source for ROMs \u00b6 In order to build a complete MAME 2003-Plus collection, the ingredients are: A complete MAME 0.193 or later romset collection A complete MAME 0.193 or later \"rollback\" romset collection MAME 0.78 CHD collection The NeoGeo UniBIOS 3.3, freely available at http://unibios.free.fr/ Step 3: Building MAME 2003-Plus romsets \u00b6 Refer to Validating, Rebuilding, and Filtering ROM Collections for details on how to configure ClrMamePro to use your sources as \"rebuild\" folders. We recommend the Full Non-Merged format, where each romset zip files includes all the files needed to run each game, including any ROMs from 'parent' ROM sets and BIOS sets. To configure ClrMamePro to validate or rebuild a Full Non-Merged collection, use \"Non-Merged\" mode and disable \"Separate BIOS Sets\" from the \"Advanced\" menu in both ClrMamePro's Rebuild and Scanner menus. Tip A complete Full Non-Merged romset collection with CHDs and Samples only requires approximately 6% more storage space than the Split format romsets that are also sometimes used to structure arcade romsets. MAME 2003-Plus can read Split, TorrentZipped romsets, but the RetroArch playlist scanner only supports Full Non-Merged, TorrentZipped romsets for MAME 2003-Plus. Recommended ClrMamePro settings \u00b6 ClrMamePro remains the most popular tool for rebuilding MAME romsets, at least for now. That said, ClrMamePro is focused on supporting more recent MAME versions so there are at least two things to know if you are using ClrMamePro to generate a MAME 2003-Plus set: If you are scanning CHDs, go to Settings -> Compressor -> CHDMan tab and change Req. CHD Version to 3 . If you are using the suggested setting of Disable Separate BIOS Sets then ClrMamePro will report the BIOS romset files as missing even though you told the program you don't want them. mame2003-plus incorporates 15 different kinds of BIOS romsets, so it is normal to see a ClrMamePro message like this after a clean and complete scan: You are missing 15 of 4831 known mame2003-plus.xml sets (+ BIOS sets) Sourcing CHDs \u00b6 MAME 2003-Plus uses exactly the same MAME 0.78 CHDs (CHD v3) as MAME 2003. BIOS \u00b6 BIOS romsets are not needed when using \"Full Non-Merged\" arcade romsets. For \"Split\" and \"Non-Merged\" romsets, place the BIOS in the same directory as the game romset. Features \u00b6 Feature Supported Saves \u2714 States game-dependent Rewind \u2714 Netplay \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2714 Controllers \u2714 Multi-Mouse \u2714 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Input system, controls, and options \u00b6 mame2003-plus emulates thousands of games, many of which have unique control layouts. These games are emulated on more than a thousand variations of arcade hardware. The purpose of the input system is to communicate input from the user's physical controls through the libretro frontend, the mame2003-plus emulator core, and into the emulated game itself. No system of default input mappings can address the full range of emulated games and supported controls. Some degree of per-game customization should ways be expected. However, to the extent possible it is also within the purpose of the MAME 2003-Plus input system to attempt to provide predictable and meaningful defaults for input across this wide range. Default RetroPad Layouts \u00b6 Classic Gamepad The Classic Gamepad is based on mainline MAME's default Xbox 360 controller layout and is also likely to suit DualShock or SNES-style gamepads. The corresponding option in configuration file is input_libretro_device_pX = \"1\" (where X is the player number, input_libretro_device_p1 = \"1\" for player 1, etc.). Modern Fightstick The Modern Fightstick layout is the fight stick and pad layout popularized by Street Fighter IV and assumes an 8+ button controller. The corresponding option in configuration file is input_libretro_device_pX = \"257\" (where X is the player number, input_libretro_device_p1 = \"257\" for player 1, etc.). Gamepad can also serve as an alternative Xbox/PSX-style layout for Street Fighter 2. For arcade control panels, Modern Fightstick can be mapped in this way: 6-Button 6-button is a layout intended for SNES-type RetroPad controls as well as 6-button arcade panels arcade panels. The corresponding option in configuration file is input_libretro_device_pX = \"769\" (where X is the player number, input_libretro_device_p1 = \"769\" for player 1, etc.). 6-button can be mapped in this way: 8-Button 8-button is a layout intended for an arcade panel. The corresponding option in configuration file is input_libretro_device_pX = \"513\" (where X is the player number, input_libretro_device_p1 = \"513\" for player 1, etc.). 8-button is configured like this Keyboard Input \u00b6 mame_keyboard sets the core to process keyboard input directly through the legacy \"MAME\" keyboard interface. Use this input mode only if your input device is seen as a keyboard, including some arcade control panel hardware. Mouse and trackball support \u00b6 MAME 2003-Plus has support for multiple mice or touch devices in games that support trackballs, etc. MAME 2003-Plus also supports one or two spinners/dials via the \"Share 2 player dial controls across one X/Y device\" core option. By default, mice/trackballs and analog sticks (the left one, for controllers with 2) are supported in games that would have them, or equivalents. For example, Centipede supports the mouse/trackball, and Afterburner supports the stick. Pointer, trackpad, touchscreen support \u00b6 Absolute pointer devices are supported, but need to be turned on via the corresponding core option. Lightgun support \u00b6 Because MAME 2003-Plus does not yet implement the libretro lightgun API, the core currently supports lightguns only if they are configured to emulate a mouse. 2-player dial and spinner devices \u00b6 2-player spinner and dial devices can be represented as 1 device with 2 axes. MAME 2003-Plus can be configured to share this device across both players: Player 1 = X axis, Player 2 = Y axis. This can be enabled via a setting in the retroarch-core-options.cfg file: mame2003-plus-dialsharexy = \"enabled\" Warning Enabling this option will disable standard mouse support. Analog and digital controller support \u00b6 MAME 2003-Plus supports analog and digital controls, it comes with analog by default and you can switch to digital thanks to the Retroarch following setting Quick menu -> Options -> Control mapping -> digital . 4-way joystick simulation \u00b6 4-way joysticks are an essential aspect of the gameplay for many iconic arcade titles including games like Donkey Kong, Pac-Man, and Q-Bert. Because modern joysticks generally use 8-way designs, it is usually impossible to play these games well without special hardware. MAME 2003-Plus includes a core option to simulate 4-way joysticks. When enabled, this logic analyzes input from 8-way digital joysticks in order to render its position as if the joystick had a 4-way design. This simulation is not the same as using a real 4-way joystick, but it can make a significant improvement to playability. Content-aware control names \u00b6 In the same way that content-aware core options only appear when they are relevant to the current game, MAME 2003-Plus has added support for content-aware control names. In other words, when remapping Street Fighter 2 controls, the libretro frontend can display the control names that were printed on the real arcade control panel like Jump , Strong Punch and Forward Kick instead of a generic labels like Up , Button 1 , Button 2 , etc. Because support for control names is relatively new and is derived from the third-party controls.dat project, control names need to be verified by a human being before they are activated. As of end end of 2018, dozens of games have these active control names, but hundreds more need to be double-checked before being enabled. Coders, and users who are willing to learn basic github commands, are invited to join in this effort . Other key features \u00b6 Audio samples \u00b6 Some games require an additional zip file with recorded sounds or music in order for audio to work correctly. Audio 'sample' files should be placed in a samples subdirectory within /libretro system dir/mame2003-plus/ . Alternate CD soundtrack support MAME 2003-Plus also supports alternate soundtracks for several popular arcade titles that were also released in other formats with high quality audio soundtracks. Alternate soundtracks are supported for Double Dragon , Final Fight , Mortal Kombat , Michael Jackson\u2019s Moonwalker , NBA Jam , and Out Run . Backdrop artwork \u00b6 Some games require backdrop artwork files in order to be fully emulated. Because RetroArch, the reference libretro frontend, does not yet incorporate support for so-called \"backdrop\" artwork, the MAME 2003-Plus github repository includes a folder of high-resolution backdrop artwork that is compatible with the core's built-in artwork display system. These artwork zip files should be placed within /libretro system dir/mame2003-plus/artwork . \"Armor Attack\" backdrop artwork pack prepared by UDB23 Run Ahead input lag reduction \u00b6 This core supports the RetroArch \"Run Ahead\" input latency reduction feature when Run Ahead is set to Second Instance , but as of the end of 2018 there are known issues preventing Run Ahead from functioning properly and a bounty fundraiser to fix them . MAME Menu \u00b6 The simplest way to access the \"MAME menu\" is by enabling it in the core options. If your input mode is set to allow input to the mame_keyboard interface, you can also enter the menu by pressing the Tab key. Dip-switches \u00b6 Many arcade games have hardware switches for arcade owners to modify certain parameters which can be adjusted by accessing the MAME menu and selecting the ' Dip Switches ' option. Dip switches often controlled features like free play (no coins needed), difficulty level, and cocktail table cabinet rotation mode. Service menu \u00b6 For games where dip switches are not available directly within the MAME menu, MAME 2003-Plus the core can often access a game's internal servic menus to set options by pressing F2 with a keyboard while mame_keyboard or simultaneous input mode is enabled. High scores \u00b6 The hiscore.dat is compiled into MAME 2003-Plus and then spawned into /libretro system dir/mame2003-plus/ the first time the core is run. Users do not need to install the hiscore.dat themselves. From then on, users can modify or replace this file with their own custom DAT if they choose. When high scores are saved, they are either stored as NVRAM data in libretro system dir/mame2003-plus/nvram/ or as hiscore data in: libretro system dir/mame2003-plus/hi/ Cheats \u00b6 MAME 2003-Plus supports the MAME cheat engine, allowing you to use the MAME menu to enable various in-game cheats. To activate these, there is a necessary supplementary file called cheat.dat . This file can be downloaded from the MAME 2003-Plus 'metadata' repository . Place cheat.dat in: libretro system dir/mame2003-plus/ . History DAT \u00b6 MAME 2003-Plus supports the use of the history.dat file, which displays background information about many games from within the MAME Menu . This file can be downloaded from the MAME 2003-Plus 'metadata' repository . Place history.dat in: libretro system dir/mame2003-plus/ . LED output system \u00b6 As of late 2018, MAME 2003-Plus incorporates preliminary support for the libretro LED lighting output system. Documentation is yet to be written on this topic. Core-generated content \u00b6 Core-generated content is placed in sub-directories within /libretro savefile dir/mame2003-plus/ : /libretro savefile dir/mame2003-plus/diff/ /libretro savefile dir/mame2003-plus/nvram/ /libretro savefile dir/mame2003-plus/hi/ /libretro savefile dir/mame2003-plus/cfg/ /libretro savefile dir/mame2003-plus/memcard/ Core options \u00b6 Tip Restart core indicates that the core must be restarted in order for changes to that option to take effect. Content-aware core options Because MAME 2003-Plus supports more than 4,000 games, there are a number of core options which only apply to a subset of its library. For example, there are several options to configure vector displays which have no effect for games with any other kind of display. MAME 2003-Plus only presents core options to the frontend that are relevant to the game that is currently loaded In other words, the vector options only appear when a vector game is currently loaded. Core option Description 4-way joystick emulation on 8-way joysticks See 4-way joystick simulation section of this doc. mame2003-plus_four_way_emulation = \"enabled|disabled\" Mouse Device Set mouse device input to be read either from a mouse, a pointer (pointer, trackpad, touchscreen), or to be disabled. mame2003-plus_mouse_device = \"mouse|pointer|disabled\" Show Lightgun crosshair Toggle crosshair visibilty for lightgun games. mame2003-plus_crosshair_enabled = \"enabled|disabled\" Skip Disclaimer Skip the copyright disclaimer message. mame2003-plus_skip_disclaimer = \"disabled|enabled\" Skip Warnings Advanced feature: changing from the default is not recommended in most cases. Skip any driver warnings about emulation quality. mame2003-plus_skip_warnings = \"disabled|enabled\" Display MAME menu Enable this core option to display the core's MAME Menu and then disable it when you have finished using the MAME Menu . mame2003-plus_display_setup = \"disabled|enabled\" Specify Neo Geo BIOS (Restart core) Manually specify your choice of Neo Geo BIOS from among those supported. mame2003-plus_neogeo_bios = \"default|euro|euro-s1|us|us-e|asia|japan|japan-s2|unibios33|unibios20|unibios13|unibios11|unibios10|debug|asia-aes\" Specify Sega ST-V BIOS (Restart core) Manually specify your choice of ST-V BIOS from among those supported. mame2003-plus_stv_bios = \"default|japan|japana|us|japan_b|taiwan|europe\" Use CD soundtrack (Restart core) See Alternate CD soundtrack support in the Audio samples section of this doc. mame2003-plus_use_alt_sound = \"enabled|disabled\" Share 2 player dial controls across one X/Y device See the 2-player dial and spinner devices section of this doc. mame2003-plus_dialsharexy = \"disabled|enabled\" Control Mapping See the Analog and digital controller support section of this doc. mame2003-plus_analog = \"analog|digital\" Dual joystick mode Note: This option may affect stateless netplay between two users with the option set differently. Reassigns the Player 2 joystick as a second joystick for Player 1. This is intended for emulating cabints with Dual Joystick designs. Map right analog stick as but tons Provides an alternative mapping for users with unused right analog sticks. Vector resolution multiplier (Restart core) Attempts to create a higher quality emulation of vector display hardware by upscaling the emulated display to a higher resolution. mame2003-plus_vector_resolution = \"1024x768|640x480|1280x960|1440x1080|1600x1200|original\" Vector antialiasing Enables or disables the anti-aliasing for vector games. mame2003-plus_vector_antialias = \"enabled|disabled\" Vector beam width Sets the emulated width of the vector beam in pixels. This setting is only effective when anti-aliasing is enabled. mame2003-plus_vector_beam_width = \"2|1|1.2|1.4|1.6|1.8|2.5|3|4|5|6|7|8|9|10|11|12\" Vector translucency Emulates the partial transparency of vector display hardware. Vector flicker Emulates the flicker of vector display hardware. mame2003-plus_vector_flicker = \"20|0|10|30|40|50|60|70|80|90|1001.5|0.5|1|2|2.5|3\" Vector intensity Emulates the variable intensity of vector display hardware. mame2003-plus_vector_intensity = \"1.5|0.5|1|2|2.5|3\" DCS Speedhack Advanced feature: changing from the default is not recommended in most cases. Use so-called \"speed hacks\" to improve the performance of DCS sound hardware. mame2003-plus_dcs_speedhack = \"enabled|disabled\" Locate system files within a subfolder For historical reasons, MAME 2003-Plus reads system files within a subfolder named mame2003-plus even though this is not part of the libretro API. mame2003-plus_core_sys_subfolder = \"enabled|disabled\" Locate save files within a subfolder For historical reasons, MAME 2003-Plus saves files within a subfolder named mame2003-plus even though this is not part of the libretro API. mame2003-plus_core_save_subfolder = \"enabled|disabled\" TATE Mode From the Japanese \u7e26 (ta-te) meaning \"vertical\", TATE Mode renders vertical games lengthwise along the display. This mode is intended for use with rotating monitors and portable devices that can make the full use of their viewable area for games which used vertical monitors. mame2003-plus_tate_mode = \"disabled|enabled\" Brightness Simple brightness adjustment. mame2003-plus_brightness = \"1.0|0.2|0.3|0.4|0.5|0.6|0.7|0.8|0.9|1.1|1.2|1.3|1.4|1.5|1.6|1.7|1.8|1.9|2.0\" Gamma correction Simple gamma adjustment. mame2003-plus_gamma = \"1.0|0.5|0.6|0.7|0.8|0.9|1.1|1.2|1.3|1.4|1.5|1.6|1.7|1.8|1.9|2.0\" Frameskip Advanced feature: changing from the default is not recommended in most cases. mame2003-plus_frameskip = \"0|1|2|3|4|5\" Sample Rate (KHz) Advanced feature: changing from the default is not recommended in most cases. mame2003-plus_sample_rate = \"48000|8000|11025|22050|30000|44100\" Input interface Advanced feature: changing from the default is not recommended in most cases. retropad , the default option, processes input via the libretro retropad abstraction, including from any keyboard which are bound to the retropad. The keyboard setting only sends keyboard input directly to the core, ignoring the retropad. The simultaneous setting sends inputs both ways at the same time and is not recommended. This setting exists for historical reasons. mame2003-plus_input_interface = \"retropad|keyboard|simultaneous\" Legacy Remapping Note: Using the legacy MAME control remapper may affect stateless netplay between two users with their MAME remappings set differently. mame2003-plus_mame_remapping = \"enabled|disabled\" Display artwork (Restart core) Display artwork packs from within the core, particularly \"backdrop\" artwork. mame2003-plus_display_artwork = \"enabled|disabled\" Artwork resolution multiplier (Restart core) Upscales games with artwork backs so that the artwork can be displayed at a higher resolution. mame2003-plus_art_resolution = \"1|2\" NVRAM Bootstraps Advanced feature: changing from the default is not recommended in most cases. mame2003-plus_nvram_bootstraps = \"enabled|disabled\" Dip switch/Cheat input ports Advanced feature: changing from the default is not recommended in most cases. Activates a few specific cheats that manipulate the dipswitch input system. mame2003-plus_cheat_input_ports = \"disabled|enabled\" Bypass audio skew (Restart core) Advanced feature: changing from the default is not recommended in most cases. Bypass the frontend's \"audio skew\" feature which attempts to adjust the audio for games which displayed at framerates not native to modern displays. mame2003-plus_machine_timing = \"enabled|disabled\" External Links \u00b6 MAME 2003-Plus Github Repository","title":"Arcade (MAME 2003-Plus)"},{"location":"library/mame2003_plus/#mame-2003-plus","text":"","title":"MAME 2003-Plus"},{"location":"library/mame2003_plus/#background","text":"MAME 2003-Plus (also referred to as MAME 2003+ and mame2003-plus) is a libretro multi-arcade system emulator core which prioritizes 1) usability and frontend integration, 2) performance, and 3) compatibility across the range of libretro-supported platforms including mobile devices, single board computers, and consoles. MAME 2003-Plus is part of a long tradition in arcade emulation of producing platform-specific and performance-optimized MAME builds. Why is it called Plus ? Unlike the other 'historic' libretro MAME cores which remain fixed at one MAME version, MAME 2003-Plus is actively maintained and has to date added support for hundreds of new games along with dozens of new features. MAME 2003-Plus is part of a lineage of codebase forks and ports: this core was forked from MAME 2003, which is itself derived from Xmame 0.78, the X11/Unix port of MAME 0.78. Authors : MAMEdev, MAME 2003-Plus team, et al (see LICENSE.md and CHANGELOG.md )","title":"Background"},{"location":"library/mame2003_plus/#contribute-to-this-documentation","text":"In order to propose improvements to this document, visit it's corresponding source page on github . Changes are proposed using \"Pull Requests.\"","title":"Contribute to this documentation"},{"location":"library/mame2003_plus/#see-also","text":"MAME 2003","title":"See also"},{"location":"library/mame2003_plus/#license","text":"MAME Non-Commercial","title":"License"},{"location":"library/mame2003_plus/#extensions","text":"zip, chd CHD paths Some games require data from an internal hard drive, CD-ROM, laserdisk, or other media in order to be emulated -- those forms of media are packaged as CHD files. CHD files should be copied to subfolders within the folder where the romset zips have been installed: /libretro content dir/blitz/blitz.chd","title":"Extensions"},{"location":"library/mame2003_plus/#building-romsets-for-mame-2003-plus","text":"MAME 2003-Plus began with the game drivers from MAME 0.78, meaning that 95% or more of MAME 0.78 romsets will work as-is in MAME 2003-Plus, where they immediately benefit from its bugfixes and other improvements. In order to play the new games and games which received ROM updates in MAME 2003-Plus, you will need to find or build MAME 2003-Plus romsets. What is a romset? Arcade games are packaged as zip files, most of which are composed of more than one individual 'ROM' files. That is why some resources inaccurately refer to an individual arcade game as a ROM (like people use to describe a zipped game cartridge ROM) while other resources refer to an individual game as a ROM set , ROMset , or romset . MAME 2003-Plus has the ability to generate an XML \"DAT\" file directly from the MAME menu .","title":"Building romsets for MAME 2003-Plus"},{"location":"library/mame2003_plus/#step-1-obtaining-an-xml-dat","text":"DAT files describe the exact ROM contents that the emulator needs including filenames, file sizes, and checksums to verify contents are not incorrect or corrupt. mame2003-plus has the ability to generate an XML \"DAT\" file from the MAME Menu. You can also access the MAME menu by turning it on as a core option, selecting Generate XML DAT and then disabing the menu as a core option.","title":"Step 1: Obtaining an XML DAT"},{"location":"library/mame2003_plus/#step-2-finding-a-source-for-roms","text":"In order to build a complete MAME 2003-Plus collection, the ingredients are: A complete MAME 0.193 or later romset collection A complete MAME 0.193 or later \"rollback\" romset collection MAME 0.78 CHD collection The NeoGeo UniBIOS 3.3, freely available at http://unibios.free.fr/","title":"Step 2: Finding a source for ROMs"},{"location":"library/mame2003_plus/#step-3-building-mame-2003-plus-romsets","text":"Refer to Validating, Rebuilding, and Filtering ROM Collections for details on how to configure ClrMamePro to use your sources as \"rebuild\" folders. We recommend the Full Non-Merged format, where each romset zip files includes all the files needed to run each game, including any ROMs from 'parent' ROM sets and BIOS sets. To configure ClrMamePro to validate or rebuild a Full Non-Merged collection, use \"Non-Merged\" mode and disable \"Separate BIOS Sets\" from the \"Advanced\" menu in both ClrMamePro's Rebuild and Scanner menus. Tip A complete Full Non-Merged romset collection with CHDs and Samples only requires approximately 6% more storage space than the Split format romsets that are also sometimes used to structure arcade romsets. MAME 2003-Plus can read Split, TorrentZipped romsets, but the RetroArch playlist scanner only supports Full Non-Merged, TorrentZipped romsets for MAME 2003-Plus.","title":"Step 3: Building MAME 2003-Plus romsets"},{"location":"library/mame2003_plus/#recommended-clrmamepro-settings","text":"ClrMamePro remains the most popular tool for rebuilding MAME romsets, at least for now. That said, ClrMamePro is focused on supporting more recent MAME versions so there are at least two things to know if you are using ClrMamePro to generate a MAME 2003-Plus set: If you are scanning CHDs, go to Settings -> Compressor -> CHDMan tab and change Req. CHD Version to 3 . If you are using the suggested setting of Disable Separate BIOS Sets then ClrMamePro will report the BIOS romset files as missing even though you told the program you don't want them. mame2003-plus incorporates 15 different kinds of BIOS romsets, so it is normal to see a ClrMamePro message like this after a clean and complete scan: You are missing 15 of 4831 known mame2003-plus.xml sets (+ BIOS sets)","title":"Recommended ClrMamePro settings"},{"location":"library/mame2003_plus/#sourcing-chds","text":"MAME 2003-Plus uses exactly the same MAME 0.78 CHDs (CHD v3) as MAME 2003.","title":"Sourcing CHDs"},{"location":"library/mame2003_plus/#bios","text":"BIOS romsets are not needed when using \"Full Non-Merged\" arcade romsets. For \"Split\" and \"Non-Merged\" romsets, place the BIOS in the same directory as the game romset.","title":"BIOS"},{"location":"library/mame2003_plus/#features","text":"Feature Supported Saves \u2714 States game-dependent Rewind \u2714 Netplay \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2714 Controllers \u2714 Multi-Mouse \u2714 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715","title":"Features"},{"location":"library/mame2003_plus/#input-system-controls-and-options","text":"mame2003-plus emulates thousands of games, many of which have unique control layouts. These games are emulated on more than a thousand variations of arcade hardware. The purpose of the input system is to communicate input from the user's physical controls through the libretro frontend, the mame2003-plus emulator core, and into the emulated game itself. No system of default input mappings can address the full range of emulated games and supported controls. Some degree of per-game customization should ways be expected. However, to the extent possible it is also within the purpose of the MAME 2003-Plus input system to attempt to provide predictable and meaningful defaults for input across this wide range.","title":"Input system, controls, and options"},{"location":"library/mame2003_plus/#default-retropad-layouts","text":"Classic Gamepad The Classic Gamepad is based on mainline MAME's default Xbox 360 controller layout and is also likely to suit DualShock or SNES-style gamepads. The corresponding option in configuration file is input_libretro_device_pX = \"1\" (where X is the player number, input_libretro_device_p1 = \"1\" for player 1, etc.). Modern Fightstick The Modern Fightstick layout is the fight stick and pad layout popularized by Street Fighter IV and assumes an 8+ button controller. The corresponding option in configuration file is input_libretro_device_pX = \"257\" (where X is the player number, input_libretro_device_p1 = \"257\" for player 1, etc.). Gamepad can also serve as an alternative Xbox/PSX-style layout for Street Fighter 2. For arcade control panels, Modern Fightstick can be mapped in this way: 6-Button 6-button is a layout intended for SNES-type RetroPad controls as well as 6-button arcade panels arcade panels. The corresponding option in configuration file is input_libretro_device_pX = \"769\" (where X is the player number, input_libretro_device_p1 = \"769\" for player 1, etc.). 6-button can be mapped in this way: 8-Button 8-button is a layout intended for an arcade panel. The corresponding option in configuration file is input_libretro_device_pX = \"513\" (where X is the player number, input_libretro_device_p1 = \"513\" for player 1, etc.). 8-button is configured like this","title":"Default RetroPad Layouts"},{"location":"library/mame2003_plus/#keyboard-input","text":"mame_keyboard sets the core to process keyboard input directly through the legacy \"MAME\" keyboard interface. Use this input mode only if your input device is seen as a keyboard, including some arcade control panel hardware.","title":"Keyboard Input"},{"location":"library/mame2003_plus/#mouse-and-trackball-support","text":"MAME 2003-Plus has support for multiple mice or touch devices in games that support trackballs, etc. MAME 2003-Plus also supports one or two spinners/dials via the \"Share 2 player dial controls across one X/Y device\" core option. By default, mice/trackballs and analog sticks (the left one, for controllers with 2) are supported in games that would have them, or equivalents. For example, Centipede supports the mouse/trackball, and Afterburner supports the stick.","title":"Mouse and trackball support"},{"location":"library/mame2003_plus/#pointer-trackpad-touchscreen-support","text":"Absolute pointer devices are supported, but need to be turned on via the corresponding core option.","title":"Pointer, trackpad, touchscreen support"},{"location":"library/mame2003_plus/#lightgun-support","text":"Because MAME 2003-Plus does not yet implement the libretro lightgun API, the core currently supports lightguns only if they are configured to emulate a mouse.","title":"Lightgun support"},{"location":"library/mame2003_plus/#2-player-dial-and-spinner-devices","text":"2-player spinner and dial devices can be represented as 1 device with 2 axes. MAME 2003-Plus can be configured to share this device across both players: Player 1 = X axis, Player 2 = Y axis. This can be enabled via a setting in the retroarch-core-options.cfg file: mame2003-plus-dialsharexy = \"enabled\" Warning Enabling this option will disable standard mouse support.","title":"2-player dial and spinner devices"},{"location":"library/mame2003_plus/#analog-and-digital-controller-support","text":"MAME 2003-Plus supports analog and digital controls, it comes with analog by default and you can switch to digital thanks to the Retroarch following setting Quick menu -> Options -> Control mapping -> digital .","title":"Analog and digital controller support"},{"location":"library/mame2003_plus/#4-way-joystick-simulation","text":"4-way joysticks are an essential aspect of the gameplay for many iconic arcade titles including games like Donkey Kong, Pac-Man, and Q-Bert. Because modern joysticks generally use 8-way designs, it is usually impossible to play these games well without special hardware. MAME 2003-Plus includes a core option to simulate 4-way joysticks. When enabled, this logic analyzes input from 8-way digital joysticks in order to render its position as if the joystick had a 4-way design. This simulation is not the same as using a real 4-way joystick, but it can make a significant improvement to playability.","title":"4-way joystick simulation"},{"location":"library/mame2003_plus/#content-aware-control-names","text":"In the same way that content-aware core options only appear when they are relevant to the current game, MAME 2003-Plus has added support for content-aware control names. In other words, when remapping Street Fighter 2 controls, the libretro frontend can display the control names that were printed on the real arcade control panel like Jump , Strong Punch and Forward Kick instead of a generic labels like Up , Button 1 , Button 2 , etc. Because support for control names is relatively new and is derived from the third-party controls.dat project, control names need to be verified by a human being before they are activated. As of end end of 2018, dozens of games have these active control names, but hundreds more need to be double-checked before being enabled. Coders, and users who are willing to learn basic github commands, are invited to join in this effort .","title":"Content-aware control names"},{"location":"library/mame2003_plus/#other-key-features","text":"","title":"Other key features"},{"location":"library/mame2003_plus/#audio-samples","text":"Some games require an additional zip file with recorded sounds or music in order for audio to work correctly. Audio 'sample' files should be placed in a samples subdirectory within /libretro system dir/mame2003-plus/ . Alternate CD soundtrack support MAME 2003-Plus also supports alternate soundtracks for several popular arcade titles that were also released in other formats with high quality audio soundtracks. Alternate soundtracks are supported for Double Dragon , Final Fight , Mortal Kombat , Michael Jackson\u2019s Moonwalker , NBA Jam , and Out Run .","title":"Audio samples"},{"location":"library/mame2003_plus/#backdrop-artwork","text":"Some games require backdrop artwork files in order to be fully emulated. Because RetroArch, the reference libretro frontend, does not yet incorporate support for so-called \"backdrop\" artwork, the MAME 2003-Plus github repository includes a folder of high-resolution backdrop artwork that is compatible with the core's built-in artwork display system. These artwork zip files should be placed within /libretro system dir/mame2003-plus/artwork . \"Armor Attack\" backdrop artwork pack prepared by UDB23","title":"Backdrop artwork"},{"location":"library/mame2003_plus/#run-ahead-input-lag-reduction","text":"This core supports the RetroArch \"Run Ahead\" input latency reduction feature when Run Ahead is set to Second Instance , but as of the end of 2018 there are known issues preventing Run Ahead from functioning properly and a bounty fundraiser to fix them .","title":"Run Ahead input lag reduction"},{"location":"library/mame2003_plus/#mame-menu","text":"The simplest way to access the \"MAME menu\" is by enabling it in the core options. If your input mode is set to allow input to the mame_keyboard interface, you can also enter the menu by pressing the Tab key.","title":"MAME Menu"},{"location":"library/mame2003_plus/#dip-switches","text":"Many arcade games have hardware switches for arcade owners to modify certain parameters which can be adjusted by accessing the MAME menu and selecting the ' Dip Switches ' option. Dip switches often controlled features like free play (no coins needed), difficulty level, and cocktail table cabinet rotation mode.","title":"Dip-switches"},{"location":"library/mame2003_plus/#service-menu","text":"For games where dip switches are not available directly within the MAME menu, MAME 2003-Plus the core can often access a game's internal servic menus to set options by pressing F2 with a keyboard while mame_keyboard or simultaneous input mode is enabled.","title":"Service menu"},{"location":"library/mame2003_plus/#high-scores","text":"The hiscore.dat is compiled into MAME 2003-Plus and then spawned into /libretro system dir/mame2003-plus/ the first time the core is run. Users do not need to install the hiscore.dat themselves. From then on, users can modify or replace this file with their own custom DAT if they choose. When high scores are saved, they are either stored as NVRAM data in libretro system dir/mame2003-plus/nvram/ or as hiscore data in: libretro system dir/mame2003-plus/hi/","title":"High scores"},{"location":"library/mame2003_plus/#cheats","text":"MAME 2003-Plus supports the MAME cheat engine, allowing you to use the MAME menu to enable various in-game cheats. To activate these, there is a necessary supplementary file called cheat.dat . This file can be downloaded from the MAME 2003-Plus 'metadata' repository . Place cheat.dat in: libretro system dir/mame2003-plus/ .","title":"Cheats"},{"location":"library/mame2003_plus/#history-dat","text":"MAME 2003-Plus supports the use of the history.dat file, which displays background information about many games from within the MAME Menu . This file can be downloaded from the MAME 2003-Plus 'metadata' repository . Place history.dat in: libretro system dir/mame2003-plus/ .","title":"History DAT"},{"location":"library/mame2003_plus/#led-output-system","text":"As of late 2018, MAME 2003-Plus incorporates preliminary support for the libretro LED lighting output system. Documentation is yet to be written on this topic.","title":"LED output system"},{"location":"library/mame2003_plus/#core-generated-content","text":"Core-generated content is placed in sub-directories within /libretro savefile dir/mame2003-plus/ : /libretro savefile dir/mame2003-plus/diff/ /libretro savefile dir/mame2003-plus/nvram/ /libretro savefile dir/mame2003-plus/hi/ /libretro savefile dir/mame2003-plus/cfg/ /libretro savefile dir/mame2003-plus/memcard/","title":"Core-generated content"},{"location":"library/mame2003_plus/#core-options","text":"Tip Restart core indicates that the core must be restarted in order for changes to that option to take effect. Content-aware core options Because MAME 2003-Plus supports more than 4,000 games, there are a number of core options which only apply to a subset of its library. For example, there are several options to configure vector displays which have no effect for games with any other kind of display. MAME 2003-Plus only presents core options to the frontend that are relevant to the game that is currently loaded In other words, the vector options only appear when a vector game is currently loaded. Core option Description 4-way joystick emulation on 8-way joysticks See 4-way joystick simulation section of this doc. mame2003-plus_four_way_emulation = \"enabled|disabled\" Mouse Device Set mouse device input to be read either from a mouse, a pointer (pointer, trackpad, touchscreen), or to be disabled. mame2003-plus_mouse_device = \"mouse|pointer|disabled\" Show Lightgun crosshair Toggle crosshair visibilty for lightgun games. mame2003-plus_crosshair_enabled = \"enabled|disabled\" Skip Disclaimer Skip the copyright disclaimer message. mame2003-plus_skip_disclaimer = \"disabled|enabled\" Skip Warnings Advanced feature: changing from the default is not recommended in most cases. Skip any driver warnings about emulation quality. mame2003-plus_skip_warnings = \"disabled|enabled\" Display MAME menu Enable this core option to display the core's MAME Menu and then disable it when you have finished using the MAME Menu . mame2003-plus_display_setup = \"disabled|enabled\" Specify Neo Geo BIOS (Restart core) Manually specify your choice of Neo Geo BIOS from among those supported. mame2003-plus_neogeo_bios = \"default|euro|euro-s1|us|us-e|asia|japan|japan-s2|unibios33|unibios20|unibios13|unibios11|unibios10|debug|asia-aes\" Specify Sega ST-V BIOS (Restart core) Manually specify your choice of ST-V BIOS from among those supported. mame2003-plus_stv_bios = \"default|japan|japana|us|japan_b|taiwan|europe\" Use CD soundtrack (Restart core) See Alternate CD soundtrack support in the Audio samples section of this doc. mame2003-plus_use_alt_sound = \"enabled|disabled\" Share 2 player dial controls across one X/Y device See the 2-player dial and spinner devices section of this doc. mame2003-plus_dialsharexy = \"disabled|enabled\" Control Mapping See the Analog and digital controller support section of this doc. mame2003-plus_analog = \"analog|digital\" Dual joystick mode Note: This option may affect stateless netplay between two users with the option set differently. Reassigns the Player 2 joystick as a second joystick for Player 1. This is intended for emulating cabints with Dual Joystick designs. Map right analog stick as but tons Provides an alternative mapping for users with unused right analog sticks. Vector resolution multiplier (Restart core) Attempts to create a higher quality emulation of vector display hardware by upscaling the emulated display to a higher resolution. mame2003-plus_vector_resolution = \"1024x768|640x480|1280x960|1440x1080|1600x1200|original\" Vector antialiasing Enables or disables the anti-aliasing for vector games. mame2003-plus_vector_antialias = \"enabled|disabled\" Vector beam width Sets the emulated width of the vector beam in pixels. This setting is only effective when anti-aliasing is enabled. mame2003-plus_vector_beam_width = \"2|1|1.2|1.4|1.6|1.8|2.5|3|4|5|6|7|8|9|10|11|12\" Vector translucency Emulates the partial transparency of vector display hardware. Vector flicker Emulates the flicker of vector display hardware. mame2003-plus_vector_flicker = \"20|0|10|30|40|50|60|70|80|90|1001.5|0.5|1|2|2.5|3\" Vector intensity Emulates the variable intensity of vector display hardware. mame2003-plus_vector_intensity = \"1.5|0.5|1|2|2.5|3\" DCS Speedhack Advanced feature: changing from the default is not recommended in most cases. Use so-called \"speed hacks\" to improve the performance of DCS sound hardware. mame2003-plus_dcs_speedhack = \"enabled|disabled\" Locate system files within a subfolder For historical reasons, MAME 2003-Plus reads system files within a subfolder named mame2003-plus even though this is not part of the libretro API. mame2003-plus_core_sys_subfolder = \"enabled|disabled\" Locate save files within a subfolder For historical reasons, MAME 2003-Plus saves files within a subfolder named mame2003-plus even though this is not part of the libretro API. mame2003-plus_core_save_subfolder = \"enabled|disabled\" TATE Mode From the Japanese \u7e26 (ta-te) meaning \"vertical\", TATE Mode renders vertical games lengthwise along the display. This mode is intended for use with rotating monitors and portable devices that can make the full use of their viewable area for games which used vertical monitors. mame2003-plus_tate_mode = \"disabled|enabled\" Brightness Simple brightness adjustment. mame2003-plus_brightness = \"1.0|0.2|0.3|0.4|0.5|0.6|0.7|0.8|0.9|1.1|1.2|1.3|1.4|1.5|1.6|1.7|1.8|1.9|2.0\" Gamma correction Simple gamma adjustment. mame2003-plus_gamma = \"1.0|0.5|0.6|0.7|0.8|0.9|1.1|1.2|1.3|1.4|1.5|1.6|1.7|1.8|1.9|2.0\" Frameskip Advanced feature: changing from the default is not recommended in most cases. mame2003-plus_frameskip = \"0|1|2|3|4|5\" Sample Rate (KHz) Advanced feature: changing from the default is not recommended in most cases. mame2003-plus_sample_rate = \"48000|8000|11025|22050|30000|44100\" Input interface Advanced feature: changing from the default is not recommended in most cases. retropad , the default option, processes input via the libretro retropad abstraction, including from any keyboard which are bound to the retropad. The keyboard setting only sends keyboard input directly to the core, ignoring the retropad. The simultaneous setting sends inputs both ways at the same time and is not recommended. This setting exists for historical reasons. mame2003-plus_input_interface = \"retropad|keyboard|simultaneous\" Legacy Remapping Note: Using the legacy MAME control remapper may affect stateless netplay between two users with their MAME remappings set differently. mame2003-plus_mame_remapping = \"enabled|disabled\" Display artwork (Restart core) Display artwork packs from within the core, particularly \"backdrop\" artwork. mame2003-plus_display_artwork = \"enabled|disabled\" Artwork resolution multiplier (Restart core) Upscales games with artwork backs so that the artwork can be displayed at a higher resolution. mame2003-plus_art_resolution = \"1|2\" NVRAM Bootstraps Advanced feature: changing from the default is not recommended in most cases. mame2003-plus_nvram_bootstraps = \"enabled|disabled\" Dip switch/Cheat input ports Advanced feature: changing from the default is not recommended in most cases. Activates a few specific cheats that manipulate the dipswitch input system. mame2003-plus_cheat_input_ports = \"disabled|enabled\" Bypass audio skew (Restart core) Advanced feature: changing from the default is not recommended in most cases. Bypass the frontend's \"audio skew\" feature which attempts to adjust the audio for games which displayed at framerates not native to modern displays. mame2003-plus_machine_timing = \"enabled|disabled\"","title":"Core options"},{"location":"library/mame2003_plus/#external-links","text":"MAME 2003-Plus Github Repository","title":"External Links"},{"location":"library/mame_2003/","text":"MAME 2003 \u00b6 Background \u00b6 MAME 2003 is a libretro arcade system emulator core originally derived from xmame 0.78. This core is a popular choice for the Raspberry Pi family and other low-powered hardware because it supports most 2D-era arcade games and a broad set of features without requiring as much processor and memory resources as later MAME cores. Author(s): MAMEdev Contribute to this documentation \u00b6 In order to propose improvements to this document, visit it's corresponding source page on github . Changes are proposed using \"Pull Requests.\" See also \u00b6 MAME 2000, MAME 2003-Plus , MAME 2010, MAME 2014, MAME 2016, and MAME. License \u00b6 MAME Non-Commercial Extensions \u00b6 zip BIOS \u00b6 BIOS romsets are not needed when using \"Full Non-Merged\" arcade romsets. For \"Split\" and \"Non-Merged\" romsets, place the BIOS in the same directory as the game romset. Features \u00b6 Feature Supported Saves \u2714 States game-dependent Rewind \u2714 Netplay \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2714 Controllers \u2714 Multi-Mouse \u2714 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Core options \u00b6 Frameskip ( 0 -5): Skips frame to make slow emulation look faster than it is while compromising playability. (Not advised) DCS Speedhack ( On /Off): Speedhack for the Midway sound hardware used in Mortal Kombat 2, 3 and others. Improves performance in these games. Skip Disclaimer ( On /Off): Skips the 'nag-screen'. Skip Warnings (On/ Off ): Skips the warning screen shown before games with incomplete emulation. Samples ( On /Off): Requires valid sample zip files. | - | Sample Rate (11025- 48000 ): Lowering may improve performance on weaker devices. Cheats (On/ Off ): Requires a valid cheat.dat file. Share 2 player dial controls across one X/Y device (On/ Off ): Some dial/spinner hardware are actually one device with one axis for each player. This supports that setup, by breaking down the normal mouse x/y into two seperate inputs. Mouse Device ( mouse /pointer/disabled): Switch between mouse (e.g. hardware mouse, trackball, etc), pointer (touchpad, touchscreen, lightgun, etc), or disabled. TATE Mode (On/ Off ): Enable if rotating display for vertically oriented games (Pac-Man, Galaga, etc). Requires video_allow_rotate = \"false\" setting in RetroArch.cfg or core override file. Directories \u00b6 Some MAME games require data from an internal hard drive, CD-ROM, laserdisk, or other media in order to be emulated -- those forms of media are packaged as CHD files. CHD files should be copied to subfolders within the folder where the MAME ROM zips have been installed. e.g.: /libretro content dir/blitz/blitz.chd Some games require an additional zip file with recorded sounds or music in order for audio to work correctly. Audio 'sample' files should be placed in subdirectories within /libretro system dir/mame2003/ e.g.: /libretro system dir/mame2003/samples/ Cheat and history metadata files should be moved from github's /libretro/mame2003-libretro/tree/master/metadata and placed within /libretro system dir/mame2003/ e.g.: /libretro system dir/mame2003/cheat.dat /libretro system dir/mame2003/history.dat User-generated content is placed in sub-directories within /libretro savefile dir/mame2003/ e.g.: /libretro savefile dir/mame2003/diff/ /libretro savefile dir/mame2003/nvram/ /libretro savefile dir/mame2003/hi/ /libretro savefile dir/mame2003/cfg/ /libretro savefile dir/mame2003/memcard/ MAME menu \u00b6 To access the MAME internal menu, press the 'TAB' key or RetroPad R2. If you rebind MAME global inputs ('Input (general)'), it will update a file in /libretro savefile dir/mame2003/cfg/ default.cfg . Note: If you rebind MAME global inputs ('Input (general)'), it will update a file in /libretro savefile dir/mame2003/cfg/ default.cfg . Controllers \u00b6 The core supports one controller setting(s): RetroPad MAME 2003 RetroPad Button 1/Right Stick Down/UI Cancel Button 2/Right Stick Left Coin in Start Left Joystick Button 4/Right Stick Right/UI Select Button 3/Right Stick Up Button 5 Button 6 Button 7 Button 8/TAB Menu Button 9 Button 10 Left Joystick MAME 2003 Features \u00b6 Service menu \u00b6 MAME 2003 can ability to access games' internal service menus to set permanent game options. This allows you to, for example, configure a game to be 'free play' (no need to insert coins). To access the MAME service, press the 'F2' key. After changing options in the service mode, the game's internal memory will be stored to an .nv file in: /libretro savefile dir/mame2003/nvram/ Dip-switches \u00b6 Similarly to the Service menu , many arcade games had hardware switches for arcade owners to modify certain parameters. These can be adjust by pressing the 'TAB' key to access the MAME menu, and select the ' Dip Switches ' option. Here you can turn them on/off. High scores \u00b6 When high scores are saved, they are either stored as NVRAM data in libretro system dir/mame2003/nvram/ or as hiscore data in: libretro system dir/mame2003/hi/ Save states \u00b6 MAME 2003-Plus supports save states for many, but not all games. Cheats \u00b6 MAME 2003-Plus supports the MAME cheat engine, allowing you to use the MAME menu to enable various in-game cheats. To active these, there is a necessary supplementary file called cheat.dat . This file can be downloaded from the MAME 2003 'metadata' repository . Place cheat.dat in: libretro system dir/mame2003-plus/ Additionally, the 'enabled cheats' core option needs to be turned on. This option is is called: mame2003-cheats = \"enabled\" Mouse/Trackball/Analog Controller support \u00b6 MAME 2003 has support for multiple mice or touch devices in games that support trackballs, etc. MAME 2003 also supports one or two spinners/dials via the \"Share 2 player dial controls across one X/Y device\" core option. By default, mice/trackballs and analog sticks (the left one, for controllers with 2) are supported in games that would have them, or equivalents. For example, Centipede supports the mouse/trackball, and Afterburner supports the stick. Lightgun games are supported by either. The left and right mouse buttons can be bound to fire/etc using the MAME menu. Pointer/Trackpad/Touchscreen support \u00b6 Absolute pointer devices are supported, but need to be turned on via a setting in the retroarch-core-options.cfg file. mame2003-mouse_device = \"pointer\" 2 player dial/spinner devices \u00b6 2 player spinner/dial devices can be represented as 1 device with 2 axes. mame2003 can be configured to share this device across both players: Player 1 = X axis, Player 2 = Y axis. This can be enabled via a setting in the retroarch-core-options.cfg file, found in: mame2003-dialsharexy = \"enabled\" NOTE: This will disable Mouse support. Dual stick games \u00b6 The right analog stick can now be used a second joystick. This is enabled by default, via a setting in the retroarch-core-options.cfg file, found in: mame2003-rstick_to_btns = \"enabled\" Compatibility \u00b6 The MAME 2003 core accepts MAME 0.78 ROMsets. Each version of an arcade emulator must be used with ROMs that have the same exact version number. For example, MAME 0.37b5 ROMsets are required by the MAME 2000 emulator, but MAME 0.37b5 sets will not work correctly with the MAME 2003 or MAME 2010 emulator cores. Those cores require MAME 0.78 and MAME 0.139 ROM sets, respectively. File-not-found errors are the result of a ROMset that is wrong or incomplete, including if you're trying to run a \"Split\" clone .zip without the parent .zip present. Non-Merged MAME0.78 ROMsets do not require parent .zips to be present. External Links \u00b6 MAME 2003 Github Repository RetroPie MAME 2003 documentation","title":"Arcade (MAME 2003)"},{"location":"library/mame_2003/#mame-2003","text":"","title":"MAME 2003"},{"location":"library/mame_2003/#background","text":"MAME 2003 is a libretro arcade system emulator core originally derived from xmame 0.78. This core is a popular choice for the Raspberry Pi family and other low-powered hardware because it supports most 2D-era arcade games and a broad set of features without requiring as much processor and memory resources as later MAME cores. Author(s): MAMEdev","title":"Background"},{"location":"library/mame_2003/#contribute-to-this-documentation","text":"In order to propose improvements to this document, visit it's corresponding source page on github . Changes are proposed using \"Pull Requests.\"","title":"Contribute to this documentation"},{"location":"library/mame_2003/#see-also","text":"MAME 2000, MAME 2003-Plus , MAME 2010, MAME 2014, MAME 2016, and MAME.","title":"See also"},{"location":"library/mame_2003/#license","text":"MAME Non-Commercial","title":"License"},{"location":"library/mame_2003/#extensions","text":"zip","title":"Extensions"},{"location":"library/mame_2003/#bios","text":"BIOS romsets are not needed when using \"Full Non-Merged\" arcade romsets. For \"Split\" and \"Non-Merged\" romsets, place the BIOS in the same directory as the game romset.","title":"BIOS"},{"location":"library/mame_2003/#features","text":"Feature Supported Saves \u2714 States game-dependent Rewind \u2714 Netplay \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2714 Controllers \u2714 Multi-Mouse \u2714 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715","title":"Features"},{"location":"library/mame_2003/#core-options","text":"Frameskip ( 0 -5): Skips frame to make slow emulation look faster than it is while compromising playability. (Not advised) DCS Speedhack ( On /Off): Speedhack for the Midway sound hardware used in Mortal Kombat 2, 3 and others. Improves performance in these games. Skip Disclaimer ( On /Off): Skips the 'nag-screen'. Skip Warnings (On/ Off ): Skips the warning screen shown before games with incomplete emulation. Samples ( On /Off): Requires valid sample zip files. | - | Sample Rate (11025- 48000 ): Lowering may improve performance on weaker devices. Cheats (On/ Off ): Requires a valid cheat.dat file. Share 2 player dial controls across one X/Y device (On/ Off ): Some dial/spinner hardware are actually one device with one axis for each player. This supports that setup, by breaking down the normal mouse x/y into two seperate inputs. Mouse Device ( mouse /pointer/disabled): Switch between mouse (e.g. hardware mouse, trackball, etc), pointer (touchpad, touchscreen, lightgun, etc), or disabled. TATE Mode (On/ Off ): Enable if rotating display for vertically oriented games (Pac-Man, Galaga, etc). Requires video_allow_rotate = \"false\" setting in RetroArch.cfg or core override file.","title":"Core options"},{"location":"library/mame_2003/#directories","text":"Some MAME games require data from an internal hard drive, CD-ROM, laserdisk, or other media in order to be emulated -- those forms of media are packaged as CHD files. CHD files should be copied to subfolders within the folder where the MAME ROM zips have been installed. e.g.: /libretro content dir/blitz/blitz.chd Some games require an additional zip file with recorded sounds or music in order for audio to work correctly. Audio 'sample' files should be placed in subdirectories within /libretro system dir/mame2003/ e.g.: /libretro system dir/mame2003/samples/ Cheat and history metadata files should be moved from github's /libretro/mame2003-libretro/tree/master/metadata and placed within /libretro system dir/mame2003/ e.g.: /libretro system dir/mame2003/cheat.dat /libretro system dir/mame2003/history.dat User-generated content is placed in sub-directories within /libretro savefile dir/mame2003/ e.g.: /libretro savefile dir/mame2003/diff/ /libretro savefile dir/mame2003/nvram/ /libretro savefile dir/mame2003/hi/ /libretro savefile dir/mame2003/cfg/ /libretro savefile dir/mame2003/memcard/","title":"Directories"},{"location":"library/mame_2003/#mame-menu","text":"To access the MAME internal menu, press the 'TAB' key or RetroPad R2. If you rebind MAME global inputs ('Input (general)'), it will update a file in /libretro savefile dir/mame2003/cfg/ default.cfg . Note: If you rebind MAME global inputs ('Input (general)'), it will update a file in /libretro savefile dir/mame2003/cfg/ default.cfg .","title":"MAME menu"},{"location":"library/mame_2003/#controllers","text":"The core supports one controller setting(s): RetroPad MAME 2003 RetroPad Button 1/Right Stick Down/UI Cancel Button 2/Right Stick Left Coin in Start Left Joystick Button 4/Right Stick Right/UI Select Button 3/Right Stick Up Button 5 Button 6 Button 7 Button 8/TAB Menu Button 9 Button 10 Left Joystick","title":"Controllers"},{"location":"library/mame_2003/#mame-2003-features","text":"","title":"MAME 2003 Features"},{"location":"library/mame_2003/#service-menu","text":"MAME 2003 can ability to access games' internal service menus to set permanent game options. This allows you to, for example, configure a game to be 'free play' (no need to insert coins). To access the MAME service, press the 'F2' key. After changing options in the service mode, the game's internal memory will be stored to an .nv file in: /libretro savefile dir/mame2003/nvram/","title":"Service menu"},{"location":"library/mame_2003/#dip-switches","text":"Similarly to the Service menu , many arcade games had hardware switches for arcade owners to modify certain parameters. These can be adjust by pressing the 'TAB' key to access the MAME menu, and select the ' Dip Switches ' option. Here you can turn them on/off.","title":"Dip-switches"},{"location":"library/mame_2003/#high-scores","text":"When high scores are saved, they are either stored as NVRAM data in libretro system dir/mame2003/nvram/ or as hiscore data in: libretro system dir/mame2003/hi/","title":"High scores"},{"location":"library/mame_2003/#save-states","text":"MAME 2003-Plus supports save states for many, but not all games.","title":"Save states"},{"location":"library/mame_2003/#cheats","text":"MAME 2003-Plus supports the MAME cheat engine, allowing you to use the MAME menu to enable various in-game cheats. To active these, there is a necessary supplementary file called cheat.dat . This file can be downloaded from the MAME 2003 'metadata' repository . Place cheat.dat in: libretro system dir/mame2003-plus/ Additionally, the 'enabled cheats' core option needs to be turned on. This option is is called: mame2003-cheats = \"enabled\"","title":"Cheats"},{"location":"library/mame_2003/#mousetrackballanalog-controller-support","text":"MAME 2003 has support for multiple mice or touch devices in games that support trackballs, etc. MAME 2003 also supports one or two spinners/dials via the \"Share 2 player dial controls across one X/Y device\" core option. By default, mice/trackballs and analog sticks (the left one, for controllers with 2) are supported in games that would have them, or equivalents. For example, Centipede supports the mouse/trackball, and Afterburner supports the stick. Lightgun games are supported by either. The left and right mouse buttons can be bound to fire/etc using the MAME menu.","title":"Mouse/Trackball/Analog Controller support"},{"location":"library/mame_2003/#pointertrackpadtouchscreen-support","text":"Absolute pointer devices are supported, but need to be turned on via a setting in the retroarch-core-options.cfg file. mame2003-mouse_device = \"pointer\"","title":"Pointer/Trackpad/Touchscreen support"},{"location":"library/mame_2003/#2-player-dialspinner-devices","text":"2 player spinner/dial devices can be represented as 1 device with 2 axes. mame2003 can be configured to share this device across both players: Player 1 = X axis, Player 2 = Y axis. This can be enabled via a setting in the retroarch-core-options.cfg file, found in: mame2003-dialsharexy = \"enabled\" NOTE: This will disable Mouse support.","title":"2 player dial/spinner devices"},{"location":"library/mame_2003/#dual-stick-games","text":"The right analog stick can now be used a second joystick. This is enabled by default, via a setting in the retroarch-core-options.cfg file, found in: mame2003-rstick_to_btns = \"enabled\"","title":"Dual stick games"},{"location":"library/mame_2003/#compatibility","text":"The MAME 2003 core accepts MAME 0.78 ROMsets. Each version of an arcade emulator must be used with ROMs that have the same exact version number. For example, MAME 0.37b5 ROMsets are required by the MAME 2000 emulator, but MAME 0.37b5 sets will not work correctly with the MAME 2003 or MAME 2010 emulator cores. Those cores require MAME 0.78 and MAME 0.139 ROM sets, respectively. File-not-found errors are the result of a ROMset that is wrong or incomplete, including if you're trying to run a \"Split\" clone .zip without the parent .zip present. Non-Merged MAME0.78 ROMsets do not require parent .zips to be present.","title":"Compatibility"},{"location":"library/mame_2003/#external-links","text":"MAME 2003 Github Repository RetroPie MAME 2003 documentation","title":"External Links"},{"location":"library/mame_2010/","text":"Arcade (MAME 2010) \u00b6 Background \u00b6 MAME 2010 is a port of MAME 0.139 for libretro, originally sourced from https://github.com/mamedev/mame/releases/download/mame0139/mame0139s.zip The OSD code is inspired by other MAME ports : mame2003: https://github.com/libretro/mame2003-libretro ps3 mame0.125: http://www.volny.cz/molej/ps3/mame_ps3.htm mame4droid: http://code.google.com/p/imame4all/source/browse/ Author/License \u00b6 MAME 2010 code is copyright Nicola Salmoria and the MAME team and distributed under a Non-Commercial MAME license . A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by MAME 2010 have the following file extensions: .zip .7z .chd Databases \u00b6 RetroArch database(s) that are associated with the MAME 2010 core: MAME 2010 BIOS \u00b6 BIOS files should either be placed in the same folder as the Arcade romset ZIP file, or should be incorporated into the Arcade romset ZIP file itself in a \"Full Non-Merged\" romset format. Features \u00b6 Frontend-level settings or features that the (Core name) core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves - States - Rewind - Netplay - Core Options \u2714 RetroAchievements - RetroArch Cheats - Native Cheats - Controls - Remapping - Multi-Mouse - Rumble - Sensors - Camera - Location - Subsystem - Softpatching - Disk Control - Username - Language - Crop Overscan - LEDs - Directories \u00b6 MAME 2010 requires the folllowing directories exist, and will create them if they are missing: libretro system folder/mame2010/: location for cheat.zip cheats file libretro system folder/mame2010/artwork: MAME bezels and overlay files libretro system folder/mame2010/crosshairs: custom crosshair images libretro system folder/mame2010/fonts: custom fonts libretro system folder/mame2010/samples: audio sample zip files needed by some games libretro saves folder/mame2010/cfg: automatically-generated MAME configuration files libretro saves folder/mame2010/comment: MAME debugger comment files libretro saves folder/mame2010/ctrlr: MAME controller customization files libretro saves folder/mame2010/image: game image content libretro saves folder/mame2010/ini: MAME.ini files libretro saves folder/mame2010/input: Recorded input files libretro saves folder/mame2010/memcard: Save folder for emulated memcard device memory libretro saves folder/mame2010/nvram: Save folder for emulated nvram device memory Core options \u00b6 The MAME 2010 core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Mouse supported (disabled|enabled) Video approach 1 Enabled (disabled|enabled) Hide game info screen (disabled|enabled) Hide warning screen (disabled|enabled) Core provided aspect ratio (DAR|PAR) Enable autofire (disabled|button 1|button 2|R2 to button 1 mapping|R2 to button 2 mapping) Set autofire pulse speed (medium|slow|fast) Set frameskip (0|1|2|3|4|automatic) Set sample rate (Restart)** (48000Hz|44100Hz|32000Hz|22050Hz) Set brightness (default|+1%|+2%|+3%|+4%|+5%|+6%|+7%|+8%|+9%|+10%|+11%|+12%|+13%|+14%|+15%|+16%|+17%|+18%|+19%|+20%|-20%|-19%|-18%|-17%|-16%|-15%|-14%|-13%|-12%|-11%|-10%|-9%|-8%|-7%|-6%|-5%|-4%|-3%|-2%|-1%) Set contrast (default|+1%|+2%|+3%|+4%|+5%|+6%|+7%|+8%|+9%|+10%|+11%|+12%|+13%|+14%|+15%|+16%|+17%|+18%|+19%|+20%|-20%|-19%|-18%|-17%|-16%|-15%|-14%|-13%|-12%|-11%|-10%|-9%|-8%|-7%|-6%|-5%|-4%|-3%|-2%|-1%) Set gamma (default|+1%|+2%|+3%|+4%|+5%|+6%|+7%|+8%|+9%|+10%|+11%|+12%|+13%|+14%|+15%|+16%|+17%|+18%|+19%|+20%|-20%|-19%|-18%|-17%|-16%|-15%|-14%|-13%|-12%|-11%|-10%|-9%|-8%|-7%|-6%|-5%|-4%|-3%|-2%|-1%) Use external hiscore.dat (disabled|enabled) Controllers \u00b6 MAME 2010 supports keyboard use and up to four joypads. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 RetroPad MAME Equivalent RETRO_DEVICE_ID_JOYPAD_START [KEY_START] RETRO_DEVICE_ID_JOYPAD_SELECT [KEY_COIN] RETRO_DEVICE_ID_JOYPAD_A [KEY_BUTTON_1] RETRO_DEVICE_ID_JOYPAD_B [KEY_BUTTON_2] RETRO_DEVICE_ID_JOYPAD_X [KEY_BUTTON_3] RETRO_DEVICE_ID_JOYPAD_Y [KEY_BUTTON_4] RETRO_DEVICE_ID_JOYPAD_L [KEY_BUTTON_5] RETRO_DEVICE_ID_JOYPAD_R [KEY_BUTTON_6] RETRO_DEVICE_ID_JOYPAD_L2 [KEY_TAB] RETRO_DEVICE_ID_JOYPAD_R3 [KEY_F3] RETRO_DEVICE_ID_JOYPAD_L3 [KEY_F2] RETRO_DEVICE_ID_JOYPAD_UP [KEY_JOYSTICK_U] RETRO_DEVICE_ID_JOYPAD_DOWN [KEY_JOYSTICK_D] RETRO_DEVICE_ID_JOYPAD_LEFT [KEY_JOYSTICK_L] RETRO_DEVICE_ID_JOYPAD_RIGHT [KEY_JOYSTICK_R] Lightgun \u00b6 To be written for MAME 2010 RetroLightgun Inputs (Device name) Inputs Gun Crosshair - Gun Trigger - Gun Reload - Gun Aux A - Gun Aux B - Gun Aux C - Gun Start - Gun Select - Gun D-pad Up - Gun D-pad Down - Gun D-pad Left - Gun D-pad Right - External Links \u00b6 MAME 2010 Github Repository MAMEdev MAME 2010 Core info file MAME 2010 README Report MAME 2010 Issues Here See also \u00b6 MAME 2000 MAME 2003 MAME 2014 MAME 2016 MAME","title":"Arcade (MAME 2010)"},{"location":"library/mame_2010/#arcade-mame-2010","text":"","title":"Arcade (MAME 2010)"},{"location":"library/mame_2010/#background","text":"MAME 2010 is a port of MAME 0.139 for libretro, originally sourced from https://github.com/mamedev/mame/releases/download/mame0139/mame0139s.zip The OSD code is inspired by other MAME ports : mame2003: https://github.com/libretro/mame2003-libretro ps3 mame0.125: http://www.volny.cz/molej/ps3/mame_ps3.htm mame4droid: http://code.google.com/p/imame4all/source/browse/","title":"Background"},{"location":"library/mame_2010/#authorlicense","text":"MAME 2010 code is copyright Nicola Salmoria and the MAME team and distributed under a Non-Commercial MAME license . A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/mame_2010/#extensions","text":"Content that can be loaded by MAME 2010 have the following file extensions: .zip .7z .chd","title":"Extensions"},{"location":"library/mame_2010/#databases","text":"RetroArch database(s) that are associated with the MAME 2010 core: MAME 2010","title":"Databases"},{"location":"library/mame_2010/#bios","text":"BIOS files should either be placed in the same folder as the Arcade romset ZIP file, or should be incorporated into the Arcade romset ZIP file itself in a \"Full Non-Merged\" romset format.","title":"BIOS"},{"location":"library/mame_2010/#features","text":"Frontend-level settings or features that the (Core name) core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves - States - Rewind - Netplay - Core Options \u2714 RetroAchievements - RetroArch Cheats - Native Cheats - Controls - Remapping - Multi-Mouse - Rumble - Sensors - Camera - Location - Subsystem - Softpatching - Disk Control - Username - Language - Crop Overscan - LEDs -","title":"Features"},{"location":"library/mame_2010/#directories","text":"MAME 2010 requires the folllowing directories exist, and will create them if they are missing: libretro system folder/mame2010/: location for cheat.zip cheats file libretro system folder/mame2010/artwork: MAME bezels and overlay files libretro system folder/mame2010/crosshairs: custom crosshair images libretro system folder/mame2010/fonts: custom fonts libretro system folder/mame2010/samples: audio sample zip files needed by some games libretro saves folder/mame2010/cfg: automatically-generated MAME configuration files libretro saves folder/mame2010/comment: MAME debugger comment files libretro saves folder/mame2010/ctrlr: MAME controller customization files libretro saves folder/mame2010/image: game image content libretro saves folder/mame2010/ini: MAME.ini files libretro saves folder/mame2010/input: Recorded input files libretro saves folder/mame2010/memcard: Save folder for emulated memcard device memory libretro saves folder/mame2010/nvram: Save folder for emulated nvram device memory","title":"Directories"},{"location":"library/mame_2010/#core-options","text":"The MAME 2010 core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Mouse supported (disabled|enabled) Video approach 1 Enabled (disabled|enabled) Hide game info screen (disabled|enabled) Hide warning screen (disabled|enabled) Core provided aspect ratio (DAR|PAR) Enable autofire (disabled|button 1|button 2|R2 to button 1 mapping|R2 to button 2 mapping) Set autofire pulse speed (medium|slow|fast) Set frameskip (0|1|2|3|4|automatic) Set sample rate (Restart)** (48000Hz|44100Hz|32000Hz|22050Hz) Set brightness (default|+1%|+2%|+3%|+4%|+5%|+6%|+7%|+8%|+9%|+10%|+11%|+12%|+13%|+14%|+15%|+16%|+17%|+18%|+19%|+20%|-20%|-19%|-18%|-17%|-16%|-15%|-14%|-13%|-12%|-11%|-10%|-9%|-8%|-7%|-6%|-5%|-4%|-3%|-2%|-1%) Set contrast (default|+1%|+2%|+3%|+4%|+5%|+6%|+7%|+8%|+9%|+10%|+11%|+12%|+13%|+14%|+15%|+16%|+17%|+18%|+19%|+20%|-20%|-19%|-18%|-17%|-16%|-15%|-14%|-13%|-12%|-11%|-10%|-9%|-8%|-7%|-6%|-5%|-4%|-3%|-2%|-1%) Set gamma (default|+1%|+2%|+3%|+4%|+5%|+6%|+7%|+8%|+9%|+10%|+11%|+12%|+13%|+14%|+15%|+16%|+17%|+18%|+19%|+20%|-20%|-19%|-18%|-17%|-16%|-15%|-14%|-13%|-12%|-11%|-10%|-9%|-8%|-7%|-6%|-5%|-4%|-3%|-2%|-1%) Use external hiscore.dat (disabled|enabled)","title":"Core options"},{"location":"library/mame_2010/#controllers","text":"MAME 2010 supports keyboard use and up to four joypads. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 RetroPad MAME Equivalent RETRO_DEVICE_ID_JOYPAD_START [KEY_START] RETRO_DEVICE_ID_JOYPAD_SELECT [KEY_COIN] RETRO_DEVICE_ID_JOYPAD_A [KEY_BUTTON_1] RETRO_DEVICE_ID_JOYPAD_B [KEY_BUTTON_2] RETRO_DEVICE_ID_JOYPAD_X [KEY_BUTTON_3] RETRO_DEVICE_ID_JOYPAD_Y [KEY_BUTTON_4] RETRO_DEVICE_ID_JOYPAD_L [KEY_BUTTON_5] RETRO_DEVICE_ID_JOYPAD_R [KEY_BUTTON_6] RETRO_DEVICE_ID_JOYPAD_L2 [KEY_TAB] RETRO_DEVICE_ID_JOYPAD_R3 [KEY_F3] RETRO_DEVICE_ID_JOYPAD_L3 [KEY_F2] RETRO_DEVICE_ID_JOYPAD_UP [KEY_JOYSTICK_U] RETRO_DEVICE_ID_JOYPAD_DOWN [KEY_JOYSTICK_D] RETRO_DEVICE_ID_JOYPAD_LEFT [KEY_JOYSTICK_L] RETRO_DEVICE_ID_JOYPAD_RIGHT [KEY_JOYSTICK_R]","title":"Controllers"},{"location":"library/mame_2010/#lightgun","text":"To be written for MAME 2010 RetroLightgun Inputs (Device name) Inputs Gun Crosshair - Gun Trigger - Gun Reload - Gun Aux A - Gun Aux B - Gun Aux C - Gun Start - Gun Select - Gun D-pad Up - Gun D-pad Down - Gun D-pad Left - Gun D-pad Right -","title":"Lightgun"},{"location":"library/mame_2010/#external-links","text":"MAME 2010 Github Repository MAMEdev MAME 2010 Core info file MAME 2010 README Report MAME 2010 Issues Here","title":"External Links"},{"location":"library/mame_2010/#see-also","text":"MAME 2000 MAME 2003 MAME 2014 MAME 2016 MAME","title":"See also"},{"location":"library/melonds/","text":"Nintendo - DS (melonDS) \u00b6 Background \u00b6 An up-and-coming Nintendo DS emulator by StapleButter, ported to libretro. Author/License \u00b6 The melonDS core has been authored by StapleButter The melonDS core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the melonDS core have the following file extensions: .nds Databases \u00b6 RetroArch database(s) that are associated with the melonDS core: Nintendo - Nintendo DS Nintendo - Nintendo DS Decrypted Nintendo - Nintendo DS (Download Play) BIOS \u00b6 Required or optional firmware files go in the frontend's system directory. Filename Description md5sum firmware.bin NDS Firmware - Required 145eaef5bd3037cbc247c213bb3da1b3 bios7.bin ARM7 BIOS - Required df692a80a5b1bc90728bc3dfc76cd948 bios9.bin ARM9 BIOS - Required a392174eb3e572fed6447e956bde4b25 Features \u00b6 Frontend-level settings or features that the melonDS core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2715 RetroAchievements \u2715 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The melonDS core's library name is 'melonDS' The melonDS core saves/loads to/from these directories. Frontend's Cache directory File Description *.sav Cartridge battery save Geometry and timing \u00b6 The melonDS core's core provided FPS is 59.8983059319 The melonDS core's core provided sample rate is 32768 Hz The melonDS core's base width is 256 The melonDS core's base height is 384 The melonDS core's max width is 256 The melonDS core's max height is 384 The melonDS core's core provided aspect ratio is \u2154 Controllers \u00b6 The melonDS core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 device types \u00b6 None - Doesn't disable input. There's no reason to switch to this. Nintendo DS - Joypad - Stay on this. Device tables \u00b6 Joypad \u00b6 User 1 input descriptors RetroPad Inputs B Y Select Start Up Down Left Right A X L R Compatibility \u00b6 Upstream melonDS Forums Compatibility section External Links \u00b6 Official melonDS Website Official melonDS Github Repository Libretro melonDS Core info file Libretro melonDS Github Repository Report Libretro melonDS Core Issues Here See also \u00b6 Nintendo - Nintendo DS + Decrypted + (Download Play) \u00b6 Nintendo - DS (DeSmuME 2015) Nintendo - DS (DeSmuME)","title":"Nintendo - DS (melonDS)"},{"location":"library/melonds/#nintendo-ds-melonds","text":"","title":"Nintendo - DS (melonDS)"},{"location":"library/melonds/#background","text":"An up-and-coming Nintendo DS emulator by StapleButter, ported to libretro.","title":"Background"},{"location":"library/melonds/#authorlicense","text":"The melonDS core has been authored by StapleButter The melonDS core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/melonds/#extensions","text":"Content that can be loaded by the melonDS core have the following file extensions: .nds","title":"Extensions"},{"location":"library/melonds/#databases","text":"RetroArch database(s) that are associated with the melonDS core: Nintendo - Nintendo DS Nintendo - Nintendo DS Decrypted Nintendo - Nintendo DS (Download Play)","title":"Databases"},{"location":"library/melonds/#bios","text":"Required or optional firmware files go in the frontend's system directory. Filename Description md5sum firmware.bin NDS Firmware - Required 145eaef5bd3037cbc247c213bb3da1b3 bios7.bin ARM7 BIOS - Required df692a80a5b1bc90728bc3dfc76cd948 bios9.bin ARM9 BIOS - Required a392174eb3e572fed6447e956bde4b25","title":"BIOS"},{"location":"library/melonds/#features","text":"Frontend-level settings or features that the melonDS core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2715 RetroAchievements \u2715 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/melonds/#directories","text":"The melonDS core's library name is 'melonDS' The melonDS core saves/loads to/from these directories. Frontend's Cache directory File Description *.sav Cartridge battery save","title":"Directories"},{"location":"library/melonds/#geometry-and-timing","text":"The melonDS core's core provided FPS is 59.8983059319 The melonDS core's core provided sample rate is 32768 Hz The melonDS core's base width is 256 The melonDS core's base height is 384 The melonDS core's max width is 256 The melonDS core's max height is 384 The melonDS core's core provided aspect ratio is \u2154","title":"Geometry and timing"},{"location":"library/melonds/#controllers","text":"The melonDS core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/melonds/#user-1-device-types","text":"None - Doesn't disable input. There's no reason to switch to this. Nintendo DS - Joypad - Stay on this.","title":"User 1 device types"},{"location":"library/melonds/#device-tables","text":"","title":"Device tables"},{"location":"library/melonds/#joypad","text":"User 1 input descriptors RetroPad Inputs B Y Select Start Up Down Left Right A X L R","title":"Joypad"},{"location":"library/melonds/#compatibility","text":"Upstream melonDS Forums Compatibility section","title":"Compatibility"},{"location":"library/melonds/#external-links","text":"Official melonDS Website Official melonDS Github Repository Libretro melonDS Core info file Libretro melonDS Github Repository Report Libretro melonDS Core Issues Here","title":"External Links"},{"location":"library/melonds/#see-also","text":"","title":"See also"},{"location":"library/melonds/#nintendo-nintendo-ds-decrypted-download-play","text":"Nintendo - DS (DeSmuME 2015) Nintendo - DS (DeSmuME)","title":"Nintendo - Nintendo DS + Decrypted + (Download Play)"},{"location":"library/mesen-s/","text":"Nintendo - SNES / SFC / Game Boy / Color (Mesen-S) \u00b6 Background \u00b6 Mesen-S is a cross-platform SNES emulator for Windows & Linux built in C++ and C#. Features High Accuracy: A lot of effort has gone into making Mesen-S as accurate as possible. High Compatibility SNES, Super Famicom, Game Boy, and Game Boy Color emulation is supported. Super Game Boy has complete support. Author/License \u00b6 The Mesen-S core has been authored by M. Bibaud (aka Sour) The Mesen-S core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here . BIOS \u00b6 Required or optional firmware files go in the frontend's system directory. Filename Description md5sum dsp1.data.rom DSP1 co-processor firmware - Optional 3d81b45fa0c2aa8b852dfb1ece7c0971 dsp1.program.rom DSP1 co-processor firmware - Optional ae209fbe789fbf11a48aea5ab1197321 dsp1b.data.rom DSP1B co-processor firmware - Optional 1e3f568634a7d8284020dddc0ae905bc dsp1b.program.rom DSP1B co-processor firmware - Optional d10f446888e097cbf500f3f663cf4f6d dsp2.data.rom DSP2 co-processor firmware - Optional e9417e29223b139c3c4b635a2a3b8744 dsp2.program.rom DSP2 co-processor firmware - Optional aa6e5922a3ed5ded54f24247c11143c5 dsp3.data.rom DSP3 co-processor firmware - Optional 0a81210c0a940b997dd9843281008ee6 dsp3.program.rom DSP3 co-processor firmware - Optional d99ca4562818d49cee1f242705bba6f8 dsp4.data.rom DSP4 co-processor firmware - Optional ee4990879eb68e3cbca239c5bc20303d dsp4.program.rom DSP4 co-processor firmware - Optional a151023b948b90ffc23a5b594bb6fef2 st010.data.rom ST010 co-processor firmware - Optional 254d70762b6f59f99c27c395aba7d07d st010.program.rom ST010 co-processor firmware - Optional 1d70019179a59a566a0bb5d3f2845544 st011.data.rom ST011 co-processor firmware - Optional 10bd3f4aa949737ab9836512c35bcc29 st011.program.rom ST011 co-processor firmware - Optional 95222ebf1c0c2990bcf25db43743f032 dmg_boot.bin GB Boot Image - Optional 32fbbd84168d3482956eb3c5051637f5 cgb_boot.bin GBC Boot Image - Optional dbfce9db9deaa2567f6a84fde55f9680 sgb_boot.bin SGB Boot Image - Optional d574d4f9c12f305074798f54c091a8b4 sgb2_boot.bin SGB2 Boot Image - Optional e0430bca9925fb9882148fd2dc2418c1 SGB1.sfc SGB ROM - Optional b15ddb15721c657d82c5bab6db982ee9 SGB2.sfc SGB2 ROM - Optional 8ecd73eb4edf7ed7e81aef1be80031d5 BS-X.bin Satellaview Boot ROM - Optional fed4d8242cfbed61343d53d48432aced Extensions \u00b6 Content that can be loaded by the Mesen-S core have the following file extensions: .sfc .smc .fig .swc .bs .gb .gbc Databases \u00b6 RetroArch database(s) that are associated with the Mesen-S core: Nintendo - Game Boy Nintendo - Game Boy Color Nintendo - Super Nintendo Entertainment System Nintendo - Satellaview Features \u00b6 Frontend-level settings or features that the Mesen-S core respects. Feature Supported Restart \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2714 Controls \u2714 Remapping \u2714 Multi-Mouse \u2714 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2714 LEDs \u2715 Directories \u00b6 The Mesen-S core's library name is 'Mesen-S' The Mesen-S core saves/loads to/from these directories. Frontend's Save directory File Description *.srm Cartridge battery save Frontend's State directory File Description *.state# State Geometry and timing \u00b6 The Mesen-S core's core provided FPS is 60 for NTSC games and 50 for PAL games. The Mesen-S core's core provided sample rate is 32040 Hz The Mesen-S core's base width is 256 The Mesen-S core's base height is 239 The Mesen-S core's max width is 512 The Mesen-S core's max height is 478 The Mesen-S core's core provided aspect ratio is dependent on the 'Aspect Ratio' core option Core options \u00b6 The Mesen-S core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Attention These core option descriptions have been sourced from the official Mesen-S documentation . Please go there for more information. NTSC filter [mesen-s_ntsc_filter] ( Disabled /Composite (Blargg)/S-Video (Blargg)/RGB (Blargg)/Monochrome (Blargg)) Selects a filter to apply to the picture. The NTSC filter available in Mesen-S is blargg\u2019s NTSC filter - this filter is very fast, and available in various other emulators. Region [mesen-s_region] ( Auto /NTSC/PAL) When set to Auto, the emulator will try to detect the game\u2019s region (NTSC or PAL) - however, this is not always possible. When there is nothing to suggest a game is for the PAL region (Australia & Europe), the NTSC region (North America & Japan) will be used by default. Game Boy Model [mesen-s_gbmodel] ( Auto /Game Boy/Game Boy Color/Super Game Boy) Determines which Game Boy model to emulate when loading a Game Boy or Game Boy Color game. When Auto is selected, Super Game Boy emulation is used for Game Boy games, and Game Boy Color emulation is used for Game Boy Color games. Use SGB2 [mesen-s_sgb2] (Off/ On ) When enabled, Super Game Boy 2 is used when emulating the SGB. Super Game Boy 2 has corrected CPU timing and some slight differences in behavior. Vertical Overscan [mesen-s_overscan_vertical] ( None /8px/16px) This overscan setting allow you to cut out pixels vertically on the edge of the screen. On a CRT TV, a few pixels on each side of the screen are usually hidden. Most SNES games output 224 scanlines, while others use the SNES\u2019 239 scanlines mode. To avoid the window or picture size changing when the game changes between either mode, Mesen-S always outputs 239 scanlines. In the vast majority of games, this results in 7 blank lines on the top and 8 on the bottom. To hide these blank scanlines, set the overscan value to 8. Horizontal Overscan [mesen-s_overscan_horizontal] ( None /8px/16px) This overscan setting allow you to cut out pixels horizontally on the edge of the screen. Aspect Ratio [mesen-s_aspect_ratio] ( Auto /No Stretching/NTSC/PAL/4:3/16:9) The SNES\u2019 resolution in most games is 256x224, but it used to be displayed on CRT TVs that had a rectangular picture. To simulate a CRT TV, you can use the Auto option - it will switch between NTSC and PAL aspect ratios depending on the game you are playing. Using anything other than the Default (No Stretching) option may cause pixels to have irregular sizes. You can reduce this effect by using video filters. Blend Hi-Res Modes [mesen-s_blend_high_res] ( Off /On) Some games use the SNES\u2019 \u201chigh resolution\u201d mode which produces a 512x224 picture. However, this mode causes horizontal blending, which is sometimes used for pseudo-transparency effects. Enabling this option will allow these pseudo-transparency effects to look as they were intended (but causes the entire picture to look softer/blurrier). Cubic Interpolation (Audio) [mesen-s_cubic_interpolation] ( Off /On) This option replaces the SNES\u2019 default gaussian interpolation filter with a cubic interpolation filter which can produce better audio. Overclock [mesen-s_overclock] ( None /Low/Medium/High/Very High) Use this to overclock the CPU. Warning Overclocking can cause issues in some games. Overclock Type [mesen-s_overclock_type] ( Before NMI /After NMI) Before NMI: Increases the number of scanlines in the PPU, before the NMI signal is triggered at the end of the visible frame. This effectively gives more time for games to perform calculations, which can reduce slowdowns in games. This is the preferred option for overclocking. After NMI: Increases the number of scanlines in the PPU, after the NMI signal is triggered at the end of the visible frame. This effectively gives more time for games to perform calculations, which can reduce slowdowns in games. This option is less compatible and should only be used if the Before NMI variation does not work as expected. Super FX Clock Speed [mesen-s_superfx_overclock] ( 100% /200%/300%/400%/500%/1000%) Increases the clock speed used for the Super FX chip, which can reduce lag in Super FX games. This method of overclocking is more efficient for Super FX titles. Default power-on state for RAM [mesen-s_ramstate] ( Random Values (Default) /All 0s/All 1s) On a console, the RAM\u2019s state at power on is undetermined and relatively random. This option lets you select Mesen-S\u2019 behavior when initializing RAM - set all bits to 0, set all bits to 1, or randomize the value of each bit. Controllers \u00b6 The Mesen-S core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 device types \u00b6 None - Input disabled. RetroPad - Joypad SNES Controller - Joypad SNES Mouse - Mouse User 2 device types \u00b6 None - Input disabled. RetroPad - Joypad - SNES Controller SNES Controller - Joypad SNES Mouse - Mouse Super Scope - Lightgun Multitap - Joypad - Allows for up to five players to play together in mulitap games. User 3 - 5 device types \u00b6 None - Input disabled. RetroPad - Joypad SNES Controller - Joypad Multitap \u00b6 Multitap support can be activated in the Mesen-S core by switching User 2's device type to Multitap. Controller tables \u00b6 Joypad \u00b6 User Remap descriptors for 'SNES Controller' device type RetroPad Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R Mouse \u00b6 RetroMouse Inputs SNES Mouse Mouse Cursor SNES Mouse Cursor Mouse 1 SNES Mouse Left Button Mouse 2 SNES Mouse Right Button Pointer \u00b6 RetroPointer Inputs Super Scope or Pointer Position Crosshair Mouse 1 Fire Mouse 2 Cursor Button Mouse 3 Turbo Toggle Attention Currently there is no crosshair. Pressing the mouse grab binding twice in RetroArch (default F11) should make your system cursor visible. Compatibility \u00b6 The Mesen-S core fully emulates all SNES, GB, and GBC games that have ever been officially released. External Links \u00b6 Official Mesen-S Website Official Mesen-S Documentation Libretro Mesen-S Core info file Official Mesen-S Github Repository Report Libretro Mesen-S Core Issues Here See also \u00b6 Nintendo - Game Boy (+ Color) \u00b6 Nintendo - Game Boy / Color (Emux GB) Nintendo - Game Boy / Color (Gambatte) Nintendo - Game Boy / Color (Gearboy) Nintendo - Game Boy / Color (SameBoy) Nintendo - Game Boy / Color (TGB Dual) Nintendo - Game Boy Advance (mGBA) Nintendo - Game Boy Advance (VBA-M) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (nSide Balanced) SNES \u00b6 Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (nSide Balanced) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2005) Nintendo - SNES / Famicom (Snes9x 2010)","title":"Nintendo - SNES / SFC / Game Boy / Color (Mesen-S)"},{"location":"library/mesen-s/#nintendo-snes-sfc-game-boy-color-mesen-s","text":"","title":"Nintendo - SNES / SFC / Game Boy / Color (Mesen-S)"},{"location":"library/mesen-s/#background","text":"Mesen-S is a cross-platform SNES emulator for Windows & Linux built in C++ and C#. Features High Accuracy: A lot of effort has gone into making Mesen-S as accurate as possible. High Compatibility SNES, Super Famicom, Game Boy, and Game Boy Color emulation is supported. Super Game Boy has complete support.","title":"Background"},{"location":"library/mesen-s/#authorlicense","text":"The Mesen-S core has been authored by M. Bibaud (aka Sour) The Mesen-S core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/mesen-s/#bios","text":"Required or optional firmware files go in the frontend's system directory. Filename Description md5sum dsp1.data.rom DSP1 co-processor firmware - Optional 3d81b45fa0c2aa8b852dfb1ece7c0971 dsp1.program.rom DSP1 co-processor firmware - Optional ae209fbe789fbf11a48aea5ab1197321 dsp1b.data.rom DSP1B co-processor firmware - Optional 1e3f568634a7d8284020dddc0ae905bc dsp1b.program.rom DSP1B co-processor firmware - Optional d10f446888e097cbf500f3f663cf4f6d dsp2.data.rom DSP2 co-processor firmware - Optional e9417e29223b139c3c4b635a2a3b8744 dsp2.program.rom DSP2 co-processor firmware - Optional aa6e5922a3ed5ded54f24247c11143c5 dsp3.data.rom DSP3 co-processor firmware - Optional 0a81210c0a940b997dd9843281008ee6 dsp3.program.rom DSP3 co-processor firmware - Optional d99ca4562818d49cee1f242705bba6f8 dsp4.data.rom DSP4 co-processor firmware - Optional ee4990879eb68e3cbca239c5bc20303d dsp4.program.rom DSP4 co-processor firmware - Optional a151023b948b90ffc23a5b594bb6fef2 st010.data.rom ST010 co-processor firmware - Optional 254d70762b6f59f99c27c395aba7d07d st010.program.rom ST010 co-processor firmware - Optional 1d70019179a59a566a0bb5d3f2845544 st011.data.rom ST011 co-processor firmware - Optional 10bd3f4aa949737ab9836512c35bcc29 st011.program.rom ST011 co-processor firmware - Optional 95222ebf1c0c2990bcf25db43743f032 dmg_boot.bin GB Boot Image - Optional 32fbbd84168d3482956eb3c5051637f5 cgb_boot.bin GBC Boot Image - Optional dbfce9db9deaa2567f6a84fde55f9680 sgb_boot.bin SGB Boot Image - Optional d574d4f9c12f305074798f54c091a8b4 sgb2_boot.bin SGB2 Boot Image - Optional e0430bca9925fb9882148fd2dc2418c1 SGB1.sfc SGB ROM - Optional b15ddb15721c657d82c5bab6db982ee9 SGB2.sfc SGB2 ROM - Optional 8ecd73eb4edf7ed7e81aef1be80031d5 BS-X.bin Satellaview Boot ROM - Optional fed4d8242cfbed61343d53d48432aced","title":"BIOS"},{"location":"library/mesen-s/#extensions","text":"Content that can be loaded by the Mesen-S core have the following file extensions: .sfc .smc .fig .swc .bs .gb .gbc","title":"Extensions"},{"location":"library/mesen-s/#databases","text":"RetroArch database(s) that are associated with the Mesen-S core: Nintendo - Game Boy Nintendo - Game Boy Color Nintendo - Super Nintendo Entertainment System Nintendo - Satellaview","title":"Databases"},{"location":"library/mesen-s/#features","text":"Frontend-level settings or features that the Mesen-S core respects. Feature Supported Restart \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2714 Controls \u2714 Remapping \u2714 Multi-Mouse \u2714 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2714 LEDs \u2715","title":"Features"},{"location":"library/mesen-s/#directories","text":"The Mesen-S core's library name is 'Mesen-S' The Mesen-S core saves/loads to/from these directories. Frontend's Save directory File Description *.srm Cartridge battery save Frontend's State directory File Description *.state# State","title":"Directories"},{"location":"library/mesen-s/#geometry-and-timing","text":"The Mesen-S core's core provided FPS is 60 for NTSC games and 50 for PAL games. The Mesen-S core's core provided sample rate is 32040 Hz The Mesen-S core's base width is 256 The Mesen-S core's base height is 239 The Mesen-S core's max width is 512 The Mesen-S core's max height is 478 The Mesen-S core's core provided aspect ratio is dependent on the 'Aspect Ratio' core option","title":"Geometry and timing"},{"location":"library/mesen-s/#core-options","text":"The Mesen-S core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Attention These core option descriptions have been sourced from the official Mesen-S documentation . Please go there for more information. NTSC filter [mesen-s_ntsc_filter] ( Disabled /Composite (Blargg)/S-Video (Blargg)/RGB (Blargg)/Monochrome (Blargg)) Selects a filter to apply to the picture. The NTSC filter available in Mesen-S is blargg\u2019s NTSC filter - this filter is very fast, and available in various other emulators. Region [mesen-s_region] ( Auto /NTSC/PAL) When set to Auto, the emulator will try to detect the game\u2019s region (NTSC or PAL) - however, this is not always possible. When there is nothing to suggest a game is for the PAL region (Australia & Europe), the NTSC region (North America & Japan) will be used by default. Game Boy Model [mesen-s_gbmodel] ( Auto /Game Boy/Game Boy Color/Super Game Boy) Determines which Game Boy model to emulate when loading a Game Boy or Game Boy Color game. When Auto is selected, Super Game Boy emulation is used for Game Boy games, and Game Boy Color emulation is used for Game Boy Color games. Use SGB2 [mesen-s_sgb2] (Off/ On ) When enabled, Super Game Boy 2 is used when emulating the SGB. Super Game Boy 2 has corrected CPU timing and some slight differences in behavior. Vertical Overscan [mesen-s_overscan_vertical] ( None /8px/16px) This overscan setting allow you to cut out pixels vertically on the edge of the screen. On a CRT TV, a few pixels on each side of the screen are usually hidden. Most SNES games output 224 scanlines, while others use the SNES\u2019 239 scanlines mode. To avoid the window or picture size changing when the game changes between either mode, Mesen-S always outputs 239 scanlines. In the vast majority of games, this results in 7 blank lines on the top and 8 on the bottom. To hide these blank scanlines, set the overscan value to 8. Horizontal Overscan [mesen-s_overscan_horizontal] ( None /8px/16px) This overscan setting allow you to cut out pixels horizontally on the edge of the screen. Aspect Ratio [mesen-s_aspect_ratio] ( Auto /No Stretching/NTSC/PAL/4:3/16:9) The SNES\u2019 resolution in most games is 256x224, but it used to be displayed on CRT TVs that had a rectangular picture. To simulate a CRT TV, you can use the Auto option - it will switch between NTSC and PAL aspect ratios depending on the game you are playing. Using anything other than the Default (No Stretching) option may cause pixels to have irregular sizes. You can reduce this effect by using video filters. Blend Hi-Res Modes [mesen-s_blend_high_res] ( Off /On) Some games use the SNES\u2019 \u201chigh resolution\u201d mode which produces a 512x224 picture. However, this mode causes horizontal blending, which is sometimes used for pseudo-transparency effects. Enabling this option will allow these pseudo-transparency effects to look as they were intended (but causes the entire picture to look softer/blurrier). Cubic Interpolation (Audio) [mesen-s_cubic_interpolation] ( Off /On) This option replaces the SNES\u2019 default gaussian interpolation filter with a cubic interpolation filter which can produce better audio. Overclock [mesen-s_overclock] ( None /Low/Medium/High/Very High) Use this to overclock the CPU. Warning Overclocking can cause issues in some games. Overclock Type [mesen-s_overclock_type] ( Before NMI /After NMI) Before NMI: Increases the number of scanlines in the PPU, before the NMI signal is triggered at the end of the visible frame. This effectively gives more time for games to perform calculations, which can reduce slowdowns in games. This is the preferred option for overclocking. After NMI: Increases the number of scanlines in the PPU, after the NMI signal is triggered at the end of the visible frame. This effectively gives more time for games to perform calculations, which can reduce slowdowns in games. This option is less compatible and should only be used if the Before NMI variation does not work as expected. Super FX Clock Speed [mesen-s_superfx_overclock] ( 100% /200%/300%/400%/500%/1000%) Increases the clock speed used for the Super FX chip, which can reduce lag in Super FX games. This method of overclocking is more efficient for Super FX titles. Default power-on state for RAM [mesen-s_ramstate] ( Random Values (Default) /All 0s/All 1s) On a console, the RAM\u2019s state at power on is undetermined and relatively random. This option lets you select Mesen-S\u2019 behavior when initializing RAM - set all bits to 0, set all bits to 1, or randomize the value of each bit.","title":"Core options"},{"location":"library/mesen-s/#controllers","text":"The Mesen-S core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/mesen-s/#user-1-device-types","text":"None - Input disabled. RetroPad - Joypad SNES Controller - Joypad SNES Mouse - Mouse","title":"User 1 device types"},{"location":"library/mesen-s/#user-2-device-types","text":"None - Input disabled. RetroPad - Joypad - SNES Controller SNES Controller - Joypad SNES Mouse - Mouse Super Scope - Lightgun Multitap - Joypad - Allows for up to five players to play together in mulitap games.","title":"User 2 device types"},{"location":"library/mesen-s/#user-3-5-device-types","text":"None - Input disabled. RetroPad - Joypad SNES Controller - Joypad","title":"User 3 - 5 device types"},{"location":"library/mesen-s/#multitap","text":"Multitap support can be activated in the Mesen-S core by switching User 2's device type to Multitap.","title":"Multitap"},{"location":"library/mesen-s/#controller-tables","text":"","title":"Controller tables"},{"location":"library/mesen-s/#joypad","text":"User Remap descriptors for 'SNES Controller' device type RetroPad Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R","title":"Joypad"},{"location":"library/mesen-s/#mouse","text":"RetroMouse Inputs SNES Mouse Mouse Cursor SNES Mouse Cursor Mouse 1 SNES Mouse Left Button Mouse 2 SNES Mouse Right Button","title":"Mouse"},{"location":"library/mesen-s/#pointer","text":"RetroPointer Inputs Super Scope or Pointer Position Crosshair Mouse 1 Fire Mouse 2 Cursor Button Mouse 3 Turbo Toggle Attention Currently there is no crosshair. Pressing the mouse grab binding twice in RetroArch (default F11) should make your system cursor visible.","title":"Pointer"},{"location":"library/mesen-s/#compatibility","text":"The Mesen-S core fully emulates all SNES, GB, and GBC games that have ever been officially released.","title":"Compatibility"},{"location":"library/mesen-s/#external-links","text":"Official Mesen-S Website Official Mesen-S Documentation Libretro Mesen-S Core info file Official Mesen-S Github Repository Report Libretro Mesen-S Core Issues Here","title":"External Links"},{"location":"library/mesen-s/#see-also","text":"","title":"See also"},{"location":"library/mesen-s/#nintendo-game-boy-color","text":"Nintendo - Game Boy / Color (Emux GB) Nintendo - Game Boy / Color (Gambatte) Nintendo - Game Boy / Color (Gearboy) Nintendo - Game Boy / Color (SameBoy) Nintendo - Game Boy / Color (TGB Dual) Nintendo - Game Boy Advance (mGBA) Nintendo - Game Boy Advance (VBA-M) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (nSide Balanced)","title":"Nintendo - Game Boy (+ Color)"},{"location":"library/mesen-s/#snes","text":"Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (nSide Balanced) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2005) Nintendo - SNES / Famicom (Snes9x 2010)","title":"SNES"},{"location":"library/mesen/","text":"Nintendo - NES / Famicom (Mesen) \u00b6 Background \u00b6 Mesen is a high-accuracy NES and Famicom emulator and NSF player for Windows and Linux. Features High Accuracy: A lot of effort has gone into making Mesen as accurate as possible. High Compatibility: Over 220 mappers supported (all licensed games supported) NES, Famicom, Famicom Disk System, Dendy, VS System, NSF and NSFe emulation is supported. General: Save States, Rewinding, Movie/Audio Recording, Overclocking, Cheat Codes. Video: Numerous video filters, customizable palettes/overscan, support for HDNes' HD packs. Audio: Stereo effects, per-channel volume and panning, equalizer, etc. Misc: Netplay, 7z/zip support, IPS/BPS patch support, automatic updates, and more! Author/License \u00b6 The Mesen core has been authored by M. Bibaud (aka Sour) The Mesen core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the Mesen core have the following file extensions: .nes .fds .unf .unif Databases \u00b6 RetroArch database(s) that are associated with the Mesen core: Nintendo - Nintendo Entertainment System Nintendo - Family Computer Disk System BIOS \u00b6 Required or optional firmware files go in the frontend's system directory. Filename Description md5sum disksys.rom Family Computer Disk System BIOS - Required for Family Computer Disk System emulation ca30b50f880eb660a320674ed365ef7a Features \u00b6 Frontend-level settings or features that the Mesen core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The Mesen core's library name is 'Mesen' The Mesen core saves/loads to/from these directories. Frontend's Save directory File Description *.srm Cartridge battery save Frontend's State directory File Description *.state# State Frontend's System directory File Description MesenPalette.pal Custom palette HdPacks/* HD Pack directory Geometry and timing \u00b6 The Mesen core's core provided FPS is NTSC 60, PAL/Dendy 50 The Mesen core's core provided sample rate is 48000 Hz The Mesen core's base width is 256 The Mesen core's base height is 240 The Mesen core's max width is 256 (higher when using HD Packs) The Mesen core's max height is 240 (higher when using HD Packs) The Mesen core's core provided aspect ratio is dependent on the 'Aspect Ratio' core option . Custom Palettes \u00b6 To use custom color palettes in the Mesen core, the 'Palette' core option must be set to Custom and the custom color palette file you want to use must be in RetroArch's system directory. Make sure the custom palette file is named 'MesenPalette.pal' Custom color palettes for the NES can be generated with either of these tools. Bisqwit's NTSC NES palette generator Drag's NTSC NES palette generator HD packs \u00b6 Attention There is more HD pack documentation at the official Mesen documentation . To use HD packs, first make sure to turn on the Enable HD Packs core option First, create a folder named 'HdPacks' in RetroArch's System directory. Next, create a folder inside the HdPacks directory that has the same name as the content you're going to load. So, if the content you're loading is Mega Man (USA).nes, the folder should be named 'Mega Man (USA)'. Finally, extract the HD pack content files to the Mega Man (USA) folder. Here's an example of a working HD pack setup done with Mega Man 1 (NES) - 30 th Anniversary 16-bit Graphic Pack . Pay attention to the file path. Core options \u00b6 The Mesen core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Attention These core option descriptions have been sourced from the official Mesen documentation . Please go there for more information. NTSC filter [mesen_ntsc_filter] ( Disabled /Composite (Blargg)/S-Video (Blargg)/RGB (Blargg)/Monochrome (Blargg)/Bisqwit 2x/Bisqwit 4x/Bisqwit 8x) Selects a filter to apply to the picture. Blargg filters are fast. Bisqwit filters are slower. Palette [mesen_palette] ( Default /Composite Direct (by FirebrandX)/Nes Classic/Nestopia (RGB)/Original Hardware (by FirebrandX)/PVM Style (by FirebrandX)/Sony CXA2025AS/Unsaturated v6 (by FirebrandX)/YUV v3 (by FirebrandX)/Custom) Mesen comes with a number of built-in palette options - you can select them from here. Overclock [mesen_overclock] ( None /Low/Medium/High/Very High) Use this to overclock or underclock the CPU. Warning Overclocking can cause issues in some games. Overclock Type [mesen_overclock_type] ( Before NMI (Recommended) /After NMI) Before NMI: Increases the number of scanlines in the PPU, before the NMI signal is triggered at the end of the visible frame. This effectively gives more time for games to perform calculations, which can reduce slowdowns in games. This is the preferred option for overclocking. After NMI: Increases the number of scanlines in the PPU, after the NMI signal is triggered at the end of the visible frame. This effectively gives more time for games to perform calculations, which can reduce slowdowns in games. This option is less compatible and should only be used if the before NMI variation does not work as expected. Region [mesen_region] ( Auto /NTSC/PAL/Dendy) When set to Auto, the emulator will try to detect the game\u2019s region (NTSC or PAL) - however, this is not always possible. When there is nothing to suggest a game is for the PAL region (Australia & Europe), the NTSC region (North America & Japan) will be used by default. Dendy is used to mimic a number of different NES clones, in particular, the Dendy, which was a popular clone in Russia. Vertical Overscan [mesen_overscan_vertical] ( None /8px/16px) This overscan setting allow you to cut out pixels vertically on any edge of the screen. On a CRT TV, a few pixels on each side of the screen was usually invisible to the player. Because of this, games often have glitches or incorrect palette colors on the edges of the screen \u2013 this is normal and caused by the game itself. Setting a value of 8 or so on each side of the overscan configuration will usually hide most glitches. Horizontal Overscan [mesen_overscan_horizontal] ( None /8px/16px) This overscan setting allow you to cut out pixels horizontally on any edge of the screen. On a CRT TV, a few pixels on each side of the screen was usually invisible to the player. Because of this, games often have glitches or incorrect palette colors on the edges of the screen \u2013 this is normal and caused by the game itself. Setting a value of 8 or so on each side of the overscan configuration will usually hide most glitches. Aspect Ratio [mesen_aspect_ratio] ( Auto /No Stretching/NTSC/PAL/4:3/16:9) The NES\u2019 internal aspect ratio is almost square (Default (No Stretching)), but it used to be displayed on CRT TVs that had a rectangular picture. To simulate a CRT TV, you can use the Auto option - it will switch between NTSC and PAL aspect ratios depending on the game you are playing. Using anything other than the Default (No Stretching) option may cause pixels to have irregular sizes. You can reduce this effect by using a combination of video filters and the bilinear filtering option. Controller Turbo Speed [mesen_controllerturbospeed] ( Fast /Very Fast/Disabled/Slow/Normal) Configure the controller's turbo buttons' speed. Enable HD Packs [mesen_hdpacks] (Off/ On ) Enables the use of HD packs . Look at the HD packs section for more information . Remove sprite limit [mesen_nospritelimit] (Off/ On ) The NES can normally only draw up to 8 sprites per line \u2013 this limitation is indirectly responsible for some of the flickering seen in games at times. When this option is enabled, the limit is disabled, allowing up to 64 sprites to be drawn on the same line. Enable fake stereo effect [mesen_fake_stereo] ( Off /On) Self-explanatory. Reduce popping on Triangle channel [mesen_mute_triangle_ultrasonic] (Off/ On ) This option mutes the triangle channel under certain conditions, which prevents it from causing popping sounds. Reduce popping on DMC channel [mesen_reduce_dmc_popping] (Off/ On ) Similar to the previous option, but for the DMC channel \u2013 this option prevents games from changing the output of the DMC channel too abruptly, which often causes popping sounds. Swap Square channel duty cycles [mesen_swap_duty_cycle] ( Off /On) This option is to mimic some older NES clones that had incorrect sound output for both of the square channels. It greatly alters the sound in some games, and shouldn\u2019t be enabled unless you want this behavior. Disable Noise channel mode flag [mesen_disable_noise_mode_flag] ( Off /On) Very early Famicom models did not implement this feature, so this option is available to mimic early Famicom consoles. It changes the sound output of the noise channel in some games, and shouldn\u2019t be enabled unless you want this behavior. Screen Rotation [mesen_screenrotation] ( None /90 degrees/180 degrees/270 degrees) Rotates the display by the specified angle. This is useful to play games (generally homebrew games) designed for a vertical display. Default power-on state for RAM [mesen_ramstate] ( All 0s (Default) /All 1s/Random Values) On a console, the RAM\u2019s state at power on is undetermined and relatively random. This option lets you select Mesen\u2019s behavior when initializing RAM - set all bits to 0, set all bits to 1, or randomize the value of each bit. FDS: Automatically insert disks [mesen_fdsautoinsertdisk] ( Off /On) By default, the FDS boots with no disk inserted in the drive. This option makes it so the player does not need to manually insert disk 1, side A manually. FDS: Fast forward while loading [mesen_fdsfastforwardload] ( Off /On) FDS games contain a large number of load screens due to their data being stored on floppy drives. Mesen needs to emulate this floppy drive\u2019s speed to ensure accurate emulation. This option makes it so Mesen runs the emulation as fast as it can when a game is loading data from the disk, which greatly reduces the time spent on loading screens. Controllers \u00b6 The Mesen core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 - 2 device types \u00b6 None - Input disabled. Auto - Joypad - Automatically selects an input device according to the data in the game database. Standard Controller - Joypad - Manually selects a standard game controller. Zapper - Pointer - Manually selects a Zapper light gun. Power Pad - Joypad - Manually selects a Power Pad peripheral. Arkanoid - Mouse - Manually selects an Arkanoid controller. SNES Controller - Joypad - Manually selects a SNES Controller. SNES Mouse - Mouse - Manually selects a SNES Mouse. User 3 device types \u00b6 None - Input disabled. Auto - Joypad - Automatically selects an input device according to the data in the game database. Standard Controller - Joypad - Manually selects a standard game controller. User 4 device types \u00b6 None - Input disabled. Auto - Joypad - Automatically selects an input device according to the data in the game database. Standard Controller - Joypad - Manually selects a standard game controller. User 5 device types \u00b6 None - Input disabled. Auto - Joypad - Automatically selects an input device according to the data in the game database. Arkanoid - Mouse - Manually selects an Arkanoid controller. Ascii Turbo Fire - None - Manually selects an Ascii Turbo Fire device. Bandai Hypershot - Pointer - Manually selects a Bandai Hypershot light gun. Battle Box - None - Manually selects a Battle Box device. Exciting Boxing - Joypad - Manually selects an Exciting Boxing punching bag. Family Trainer - Joypad - Manually selects a Family Trainer peripheral. Four Player Adapter - None - Manually selects a Four Player Adapter device. Hori Track - Mouse - Manually selects a Hori Track trackball. Konami Hypershot - Joypad - Manually selects a Konami Hypershot controller. Pachinko - Joypad - Manually selects a Pachinko controller. Partytap - Joypad - Manually selects Partytap controllers. Other controllers \u00b6 Oeka Kids Tablet - Pointer - The Mesen core will automatically select the Oeka Kids Tablet input device according to the data in the game database. It cannot be manually selected as a device type in RetroArch's controls menu. Multitap support \u00b6 Multitap support can be activated in the Mesen core by switching User 5's device type to Four Player Adapter. Controller tables \u00b6 Joypad \u00b6 Attention The (FDS) Insert Next Disk and (FDS) Switch Disk Side inputs will NOT do anything while the 'FDS: Automatically insert disks' core option is enabled. User Remap descriptors for 'Standard Controller' device type RetroPad Inputs A B Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right Turbo A Turbo B (FDS) Insert Next Disk (FDS) Switch Disk Side (VS) Insert Coin 1 (VS) Insert Coin 2 (Famicom) Microphone User Remap descriptors for 'SNES Controller' device type RetroPad Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R User Remap descriptors for 'Power Pad' and 'Family Trainer' device types RetroPad Inputs Powerpad B1 Powerpad B3 Powerpad B11 Powerpad B12 Powerpad B9 Powerpad B10 Powerpad B7 Powerpad B8 Powerpad B2 Powerpad B4 Powerpad B5 Powerpad B6 User Remap descriptors for 'Exciting Boxing' device type RetroPad Inputs Left Hook Left Jab Move Left Move Right Right Hook Right Jab Body Straight User Remap descriptors for 'Pachinko' device type RetroPad Inputs Release Trigger Press Trigger User Remap descriptors for 'Partytap' device type RetroPad Inputs Partytap P1 Partytap P3 Partytap P2 Partytap P4 Partytap P5 Partytap P6 RetroPad Inputs Konami Hypershot Jump Run Turbo Jump Turbo Run Mouse \u00b6 RetroMouse Inputs Arkanoid SNES Mouse Hori Track Mouse Cursor Arkanoid Movement SNES Mouse Cursor Hori Track Cursor Mouse 1 Arkanoid Fire SNES Mouse Left Button Hori Track Left Button Mouse 2 SNES Mouse Right Button Hori Track Right Button Pointer \u00b6 RetroPointer Inputs Zapper Bandai Hypershot Oeka Kids Tablet or Pointer Position Zapper Crosshair Bandai Hypershot Crosshair Oeka Kids Tablet Stylus Mouse 1 Zapper Fire Bandai Hypershot Fire Oeka Kids Tablet Click/Touch Mouse 2 Zapper Offscreen Bandai Hypershot Offscreen Compatibility \u00b6 Mesen Mapper Support List External Links \u00b6 Official Mesen Website Official Mesen Documentation Official Mesen Downloads Official Mesen Changelog Libretro Mesen Core info file Official Mesen Github Repository Report Libretro Mesen Core Issues Here See also \u00b6 Nintendo - Family Computer Disk System \u00b6 Nintendo - NES / Famicom (FCEUmm) Nintendo - NES / Famicom (Nestopia UE) Nintendo - Nintendo Entertainment System \u00b6 Nintendo - NES / Famicom (bnes) Nintendo - NES / Famicom (Emux NES) Nintendo - NES / Famicom (FCEUmm) Nintendo - NES / Famicom (Nestopia UE) Nintendo - NES / Famicom (QuickNES)","title":"Nintendo - NES / Famicom (Mesen)"},{"location":"library/mesen/#nintendo-nes-famicom-mesen","text":"","title":"Nintendo - NES / Famicom (Mesen)"},{"location":"library/mesen/#background","text":"Mesen is a high-accuracy NES and Famicom emulator and NSF player for Windows and Linux. Features High Accuracy: A lot of effort has gone into making Mesen as accurate as possible. High Compatibility: Over 220 mappers supported (all licensed games supported) NES, Famicom, Famicom Disk System, Dendy, VS System, NSF and NSFe emulation is supported. General: Save States, Rewinding, Movie/Audio Recording, Overclocking, Cheat Codes. Video: Numerous video filters, customizable palettes/overscan, support for HDNes' HD packs. Audio: Stereo effects, per-channel volume and panning, equalizer, etc. Misc: Netplay, 7z/zip support, IPS/BPS patch support, automatic updates, and more!","title":"Background"},{"location":"library/mesen/#authorlicense","text":"The Mesen core has been authored by M. Bibaud (aka Sour) The Mesen core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/mesen/#extensions","text":"Content that can be loaded by the Mesen core have the following file extensions: .nes .fds .unf .unif","title":"Extensions"},{"location":"library/mesen/#databases","text":"RetroArch database(s) that are associated with the Mesen core: Nintendo - Nintendo Entertainment System Nintendo - Family Computer Disk System","title":"Databases"},{"location":"library/mesen/#bios","text":"Required or optional firmware files go in the frontend's system directory. Filename Description md5sum disksys.rom Family Computer Disk System BIOS - Required for Family Computer Disk System emulation ca30b50f880eb660a320674ed365ef7a","title":"BIOS"},{"location":"library/mesen/#features","text":"Frontend-level settings or features that the Mesen core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/mesen/#directories","text":"The Mesen core's library name is 'Mesen' The Mesen core saves/loads to/from these directories. Frontend's Save directory File Description *.srm Cartridge battery save Frontend's State directory File Description *.state# State Frontend's System directory File Description MesenPalette.pal Custom palette HdPacks/* HD Pack directory","title":"Directories"},{"location":"library/mesen/#geometry-and-timing","text":"The Mesen core's core provided FPS is NTSC 60, PAL/Dendy 50 The Mesen core's core provided sample rate is 48000 Hz The Mesen core's base width is 256 The Mesen core's base height is 240 The Mesen core's max width is 256 (higher when using HD Packs) The Mesen core's max height is 240 (higher when using HD Packs) The Mesen core's core provided aspect ratio is dependent on the 'Aspect Ratio' core option .","title":"Geometry and timing"},{"location":"library/mesen/#custom-palettes","text":"To use custom color palettes in the Mesen core, the 'Palette' core option must be set to Custom and the custom color palette file you want to use must be in RetroArch's system directory. Make sure the custom palette file is named 'MesenPalette.pal' Custom color palettes for the NES can be generated with either of these tools. Bisqwit's NTSC NES palette generator Drag's NTSC NES palette generator","title":"Custom Palettes"},{"location":"library/mesen/#hd-packs","text":"Attention There is more HD pack documentation at the official Mesen documentation . To use HD packs, first make sure to turn on the Enable HD Packs core option First, create a folder named 'HdPacks' in RetroArch's System directory. Next, create a folder inside the HdPacks directory that has the same name as the content you're going to load. So, if the content you're loading is Mega Man (USA).nes, the folder should be named 'Mega Man (USA)'. Finally, extract the HD pack content files to the Mega Man (USA) folder. Here's an example of a working HD pack setup done with Mega Man 1 (NES) - 30 th Anniversary 16-bit Graphic Pack . Pay attention to the file path.","title":"HD packs"},{"location":"library/mesen/#core-options","text":"The Mesen core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Attention These core option descriptions have been sourced from the official Mesen documentation . Please go there for more information. NTSC filter [mesen_ntsc_filter] ( Disabled /Composite (Blargg)/S-Video (Blargg)/RGB (Blargg)/Monochrome (Blargg)/Bisqwit 2x/Bisqwit 4x/Bisqwit 8x) Selects a filter to apply to the picture. Blargg filters are fast. Bisqwit filters are slower. Palette [mesen_palette] ( Default /Composite Direct (by FirebrandX)/Nes Classic/Nestopia (RGB)/Original Hardware (by FirebrandX)/PVM Style (by FirebrandX)/Sony CXA2025AS/Unsaturated v6 (by FirebrandX)/YUV v3 (by FirebrandX)/Custom) Mesen comes with a number of built-in palette options - you can select them from here. Overclock [mesen_overclock] ( None /Low/Medium/High/Very High) Use this to overclock or underclock the CPU. Warning Overclocking can cause issues in some games. Overclock Type [mesen_overclock_type] ( Before NMI (Recommended) /After NMI) Before NMI: Increases the number of scanlines in the PPU, before the NMI signal is triggered at the end of the visible frame. This effectively gives more time for games to perform calculations, which can reduce slowdowns in games. This is the preferred option for overclocking. After NMI: Increases the number of scanlines in the PPU, after the NMI signal is triggered at the end of the visible frame. This effectively gives more time for games to perform calculations, which can reduce slowdowns in games. This option is less compatible and should only be used if the before NMI variation does not work as expected. Region [mesen_region] ( Auto /NTSC/PAL/Dendy) When set to Auto, the emulator will try to detect the game\u2019s region (NTSC or PAL) - however, this is not always possible. When there is nothing to suggest a game is for the PAL region (Australia & Europe), the NTSC region (North America & Japan) will be used by default. Dendy is used to mimic a number of different NES clones, in particular, the Dendy, which was a popular clone in Russia. Vertical Overscan [mesen_overscan_vertical] ( None /8px/16px) This overscan setting allow you to cut out pixels vertically on any edge of the screen. On a CRT TV, a few pixels on each side of the screen was usually invisible to the player. Because of this, games often have glitches or incorrect palette colors on the edges of the screen \u2013 this is normal and caused by the game itself. Setting a value of 8 or so on each side of the overscan configuration will usually hide most glitches. Horizontal Overscan [mesen_overscan_horizontal] ( None /8px/16px) This overscan setting allow you to cut out pixels horizontally on any edge of the screen. On a CRT TV, a few pixels on each side of the screen was usually invisible to the player. Because of this, games often have glitches or incorrect palette colors on the edges of the screen \u2013 this is normal and caused by the game itself. Setting a value of 8 or so on each side of the overscan configuration will usually hide most glitches. Aspect Ratio [mesen_aspect_ratio] ( Auto /No Stretching/NTSC/PAL/4:3/16:9) The NES\u2019 internal aspect ratio is almost square (Default (No Stretching)), but it used to be displayed on CRT TVs that had a rectangular picture. To simulate a CRT TV, you can use the Auto option - it will switch between NTSC and PAL aspect ratios depending on the game you are playing. Using anything other than the Default (No Stretching) option may cause pixels to have irregular sizes. You can reduce this effect by using a combination of video filters and the bilinear filtering option. Controller Turbo Speed [mesen_controllerturbospeed] ( Fast /Very Fast/Disabled/Slow/Normal) Configure the controller's turbo buttons' speed. Enable HD Packs [mesen_hdpacks] (Off/ On ) Enables the use of HD packs . Look at the HD packs section for more information . Remove sprite limit [mesen_nospritelimit] (Off/ On ) The NES can normally only draw up to 8 sprites per line \u2013 this limitation is indirectly responsible for some of the flickering seen in games at times. When this option is enabled, the limit is disabled, allowing up to 64 sprites to be drawn on the same line. Enable fake stereo effect [mesen_fake_stereo] ( Off /On) Self-explanatory. Reduce popping on Triangle channel [mesen_mute_triangle_ultrasonic] (Off/ On ) This option mutes the triangle channel under certain conditions, which prevents it from causing popping sounds. Reduce popping on DMC channel [mesen_reduce_dmc_popping] (Off/ On ) Similar to the previous option, but for the DMC channel \u2013 this option prevents games from changing the output of the DMC channel too abruptly, which often causes popping sounds. Swap Square channel duty cycles [mesen_swap_duty_cycle] ( Off /On) This option is to mimic some older NES clones that had incorrect sound output for both of the square channels. It greatly alters the sound in some games, and shouldn\u2019t be enabled unless you want this behavior. Disable Noise channel mode flag [mesen_disable_noise_mode_flag] ( Off /On) Very early Famicom models did not implement this feature, so this option is available to mimic early Famicom consoles. It changes the sound output of the noise channel in some games, and shouldn\u2019t be enabled unless you want this behavior. Screen Rotation [mesen_screenrotation] ( None /90 degrees/180 degrees/270 degrees) Rotates the display by the specified angle. This is useful to play games (generally homebrew games) designed for a vertical display. Default power-on state for RAM [mesen_ramstate] ( All 0s (Default) /All 1s/Random Values) On a console, the RAM\u2019s state at power on is undetermined and relatively random. This option lets you select Mesen\u2019s behavior when initializing RAM - set all bits to 0, set all bits to 1, or randomize the value of each bit. FDS: Automatically insert disks [mesen_fdsautoinsertdisk] ( Off /On) By default, the FDS boots with no disk inserted in the drive. This option makes it so the player does not need to manually insert disk 1, side A manually. FDS: Fast forward while loading [mesen_fdsfastforwardload] ( Off /On) FDS games contain a large number of load screens due to their data being stored on floppy drives. Mesen needs to emulate this floppy drive\u2019s speed to ensure accurate emulation. This option makes it so Mesen runs the emulation as fast as it can when a game is loading data from the disk, which greatly reduces the time spent on loading screens.","title":"Core options"},{"location":"library/mesen/#controllers","text":"The Mesen core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/mesen/#user-1-2-device-types","text":"None - Input disabled. Auto - Joypad - Automatically selects an input device according to the data in the game database. Standard Controller - Joypad - Manually selects a standard game controller. Zapper - Pointer - Manually selects a Zapper light gun. Power Pad - Joypad - Manually selects a Power Pad peripheral. Arkanoid - Mouse - Manually selects an Arkanoid controller. SNES Controller - Joypad - Manually selects a SNES Controller. SNES Mouse - Mouse - Manually selects a SNES Mouse.","title":"User 1 - 2 device types"},{"location":"library/mesen/#user-3-device-types","text":"None - Input disabled. Auto - Joypad - Automatically selects an input device according to the data in the game database. Standard Controller - Joypad - Manually selects a standard game controller.","title":"User 3 device types"},{"location":"library/mesen/#user-4-device-types","text":"None - Input disabled. Auto - Joypad - Automatically selects an input device according to the data in the game database. Standard Controller - Joypad - Manually selects a standard game controller.","title":"User 4 device types"},{"location":"library/mesen/#user-5-device-types","text":"None - Input disabled. Auto - Joypad - Automatically selects an input device according to the data in the game database. Arkanoid - Mouse - Manually selects an Arkanoid controller. Ascii Turbo Fire - None - Manually selects an Ascii Turbo Fire device. Bandai Hypershot - Pointer - Manually selects a Bandai Hypershot light gun. Battle Box - None - Manually selects a Battle Box device. Exciting Boxing - Joypad - Manually selects an Exciting Boxing punching bag. Family Trainer - Joypad - Manually selects a Family Trainer peripheral. Four Player Adapter - None - Manually selects a Four Player Adapter device. Hori Track - Mouse - Manually selects a Hori Track trackball. Konami Hypershot - Joypad - Manually selects a Konami Hypershot controller. Pachinko - Joypad - Manually selects a Pachinko controller. Partytap - Joypad - Manually selects Partytap controllers.","title":"User 5 device types"},{"location":"library/mesen/#other-controllers","text":"Oeka Kids Tablet - Pointer - The Mesen core will automatically select the Oeka Kids Tablet input device according to the data in the game database. It cannot be manually selected as a device type in RetroArch's controls menu.","title":"Other controllers"},{"location":"library/mesen/#multitap-support","text":"Multitap support can be activated in the Mesen core by switching User 5's device type to Four Player Adapter.","title":"Multitap support"},{"location":"library/mesen/#controller-tables","text":"","title":"Controller tables"},{"location":"library/mesen/#joypad","text":"Attention The (FDS) Insert Next Disk and (FDS) Switch Disk Side inputs will NOT do anything while the 'FDS: Automatically insert disks' core option is enabled. User Remap descriptors for 'Standard Controller' device type RetroPad Inputs A B Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right Turbo A Turbo B (FDS) Insert Next Disk (FDS) Switch Disk Side (VS) Insert Coin 1 (VS) Insert Coin 2 (Famicom) Microphone User Remap descriptors for 'SNES Controller' device type RetroPad Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R User Remap descriptors for 'Power Pad' and 'Family Trainer' device types RetroPad Inputs Powerpad B1 Powerpad B3 Powerpad B11 Powerpad B12 Powerpad B9 Powerpad B10 Powerpad B7 Powerpad B8 Powerpad B2 Powerpad B4 Powerpad B5 Powerpad B6 User Remap descriptors for 'Exciting Boxing' device type RetroPad Inputs Left Hook Left Jab Move Left Move Right Right Hook Right Jab Body Straight User Remap descriptors for 'Pachinko' device type RetroPad Inputs Release Trigger Press Trigger User Remap descriptors for 'Partytap' device type RetroPad Inputs Partytap P1 Partytap P3 Partytap P2 Partytap P4 Partytap P5 Partytap P6 RetroPad Inputs Konami Hypershot Jump Run Turbo Jump Turbo Run","title":"Joypad"},{"location":"library/mesen/#mouse","text":"RetroMouse Inputs Arkanoid SNES Mouse Hori Track Mouse Cursor Arkanoid Movement SNES Mouse Cursor Hori Track Cursor Mouse 1 Arkanoid Fire SNES Mouse Left Button Hori Track Left Button Mouse 2 SNES Mouse Right Button Hori Track Right Button","title":"Mouse"},{"location":"library/mesen/#pointer","text":"RetroPointer Inputs Zapper Bandai Hypershot Oeka Kids Tablet or Pointer Position Zapper Crosshair Bandai Hypershot Crosshair Oeka Kids Tablet Stylus Mouse 1 Zapper Fire Bandai Hypershot Fire Oeka Kids Tablet Click/Touch Mouse 2 Zapper Offscreen Bandai Hypershot Offscreen","title":"Pointer"},{"location":"library/mesen/#compatibility","text":"Mesen Mapper Support List","title":"Compatibility"},{"location":"library/mesen/#external-links","text":"Official Mesen Website Official Mesen Documentation Official Mesen Downloads Official Mesen Changelog Libretro Mesen Core info file Official Mesen Github Repository Report Libretro Mesen Core Issues Here","title":"External Links"},{"location":"library/mesen/#see-also","text":"","title":"See also"},{"location":"library/mesen/#nintendo-family-computer-disk-system","text":"Nintendo - NES / Famicom (FCEUmm) Nintendo - NES / Famicom (Nestopia UE)","title":"Nintendo - Family Computer Disk System"},{"location":"library/mesen/#nintendo-nintendo-entertainment-system","text":"Nintendo - NES / Famicom (bnes) Nintendo - NES / Famicom (Emux NES) Nintendo - NES / Famicom (FCEUmm) Nintendo - NES / Famicom (Nestopia UE) Nintendo - NES / Famicom (QuickNES)","title":"Nintendo - Nintendo Entertainment System"},{"location":"library/meteor/","text":"Nintendo - Game Boy Advance (Meteor) \u00b6 Background \u00b6 Meteor is a Nintendo Gameboy Advance emulator. Author/License \u00b6 The Meteor core has been authored by Philippe Daouadi The Meteor core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the Meteor core have the following file extensions: .gba Databases \u00b6 RetroArch database(s) that are associated with the Meteor core: Nintendo - Game Boy Advance Features \u00b6 Frontend-level settings or features that the Meteor core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The Meteor core's internal core name is 'Meteor GBA' The Meteor core saves/loads to/from these directories. Frontend's Save directory 'content-name'.srm (Cartridge battery save) Frontend's State directory 'content-name'.state# (State) Geometry and timing \u00b6 The Meteor core's core provided FPS is 59.7275005696 The Meteor core's core provided sample rate is 44100 Hz The Meteor core's core provided aspect ratio is 3/2 Controllers \u00b6 The Meteor core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 device types \u00b6 None - Doesn't disable input. There's no reason to switch to this. RetroPad - Joypad - Stay on this. RetroPad w/Analog - Joypad - Same as RetroPad. There's no reason to switch to this. Controller tables \u00b6 Joypad \u00b6 User 1 Remap descriptors RetroPad Inputs B Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A L R Compatibility \u00b6 Awaiting description. External Links \u00b6 Official Meteor Github Repository Libretro Meteor Core info file Libretro Meteor Github Repository Report Libretro Meteor Core Issues Here See also \u00b6 Nintendo - Game Boy Advance \u00b6 Nintendo - Game Boy Advance (Beetle GBA) Nintendo - Game Boy Advance (gpSP) Nintendo - Game Boy Advance (mGBA) Nintendo - Game Boy Advance (TempGBA) Nintendo - Game Boy Advance (VBA-M) Nintendo - Game Boy Advance (VBA Next)","title":"Nintendo - Game Boy Advance (Meteor)"},{"location":"library/meteor/#nintendo-game-boy-advance-meteor","text":"","title":"Nintendo - Game Boy Advance (Meteor)"},{"location":"library/meteor/#background","text":"Meteor is a Nintendo Gameboy Advance emulator.","title":"Background"},{"location":"library/meteor/#authorlicense","text":"The Meteor core has been authored by Philippe Daouadi The Meteor core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/meteor/#extensions","text":"Content that can be loaded by the Meteor core have the following file extensions: .gba","title":"Extensions"},{"location":"library/meteor/#databases","text":"RetroArch database(s) that are associated with the Meteor core: Nintendo - Game Boy Advance","title":"Databases"},{"location":"library/meteor/#features","text":"Frontend-level settings or features that the Meteor core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/meteor/#directories","text":"The Meteor core's internal core name is 'Meteor GBA' The Meteor core saves/loads to/from these directories. Frontend's Save directory 'content-name'.srm (Cartridge battery save) Frontend's State directory 'content-name'.state# (State)","title":"Directories"},{"location":"library/meteor/#geometry-and-timing","text":"The Meteor core's core provided FPS is 59.7275005696 The Meteor core's core provided sample rate is 44100 Hz The Meteor core's core provided aspect ratio is 3/2","title":"Geometry and timing"},{"location":"library/meteor/#controllers","text":"The Meteor core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/meteor/#user-1-device-types","text":"None - Doesn't disable input. There's no reason to switch to this. RetroPad - Joypad - Stay on this. RetroPad w/Analog - Joypad - Same as RetroPad. There's no reason to switch to this.","title":"User 1 device types"},{"location":"library/meteor/#controller-tables","text":"","title":"Controller tables"},{"location":"library/meteor/#joypad","text":"User 1 Remap descriptors RetroPad Inputs B Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A L R","title":"Joypad"},{"location":"library/meteor/#compatibility","text":"Awaiting description.","title":"Compatibility"},{"location":"library/meteor/#external-links","text":"Official Meteor Github Repository Libretro Meteor Core info file Libretro Meteor Github Repository Report Libretro Meteor Core Issues Here","title":"External Links"},{"location":"library/meteor/#see-also","text":"","title":"See also"},{"location":"library/meteor/#nintendo-game-boy-advance","text":"Nintendo - Game Boy Advance (Beetle GBA) Nintendo - Game Boy Advance (gpSP) Nintendo - Game Boy Advance (mGBA) Nintendo - Game Boy Advance (TempGBA) Nintendo - Game Boy Advance (VBA-M) Nintendo - Game Boy Advance (VBA Next)","title":"Nintendo - Game Boy Advance"},{"location":"library/mgba/","text":"Nintendo - Game Boy Advance (mGBA) \u00b6 Background \u00b6 mGBA is an emulator for running Game Boy Advance games. It aims to be faster and more accurate than many existing Game Boy Advance emulators, as well as adding features that other emulators lack. It also supports Game Boy and Game Boy Color games. The mGBA core has been authored by endrift The mGBA core is licensed under MPLv2.0 A summary of the licenses behind RetroArch and its cores can be found here . BIOS \u00b6 Required or optional firmware files go in the frontend's system directory. Warning In order for the BIOS to be used, the 'Use BIOS file if found' core option must be set to On. Filename Description md5sum gba_bios.bin Game Boy Advance BIOS - Optional a860e8c0b6d573d191e4ec7db1b1e4f6 gb_bios.bin Game Boy BIOS - Optional 32fbbd84168d3482956eb3c5051637f5 gbc_bios.bin Game Boy Color BIOS - Optional dbfce9db9deaa2567f6a84fde55f9680 sgb_bios.bin Super Game Boy BIOS - Optional d574d4f9c12f305074798f54c091a8b4 Extensions \u00b6 Content that can be loaded by the mGBA core have the following file extensions: .gb .gbc .gba RetroArch database(s) that are associated with the [Core name] core: Nintendo - Game Boy Nintendo - Game Boy Color Nintendo - Game Boy Advance Features \u00b6 Frontend-level settings or features that the mGBA core respects. Feature Supported Restart \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2714 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The mGBA core's library name is 'mGBA' The mGBA core saves/loads to/from these directories. Frontend's Save directory File Description *.srm Cartridge battery save Frontend's State directory File Description *.state# State Geometry and timing \u00b6 The mGBA core's core provided FPS is [FPS] The mGBA core's core provided sample rate is 32768 Hz The mGBA core's base width is [Base width] The mGBA core's base height is [Base height] The mGBA core's max width is [Max width] The mGBA core's max height is [Max height] The mGBA core's core provided aspect ratio is [Aspect ratio] Core options \u00b6 The mGBA core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Solar sensor level [mgba_solar_sensor_level] ( 0 |1|2|3|4|5|6|7|8|9|10) Can be used by games that employed the use of a solar sensor on their cartridges. E.g.: Boktai games. Allow opposing directional input [mgba_allow_opposing_directions] ( OFF |ON) Allows opposing directional inputs. Up with Down. Right with Left. Game Boy model (requires restart) [mgba_gb_model] ( Autodetect |Game Boy|Super Game Boy|Game Boy Color|Game Boy Advance) Runs loaded content with a specific Game Boy model. Autodetect will select the most appropriate model for the current game. Use BIOS file if found [mgba_use_bios] ( ON |OFF) Uses BIOS present in RetroArch's system directory. Look at the BIOS section for more information. Skip BIOS intro [mgba_skip_bios] ( OFF |ON) The 'Use BIOS file if found' core option must be set to On for proper operation. Skips the BIOS intro when a BIOS is present in RetroArch's system directory is used. Skip BIOS intro - Off Use Super Game Boy borders (requires restart) [mgba_sgb_borders] ( ON |OFF) Display Super Game Boy borders for Super Game Boy enhanced games. Idle loop removal [mgba_idle_optimization] ( Remove Known |Detect and Remove|Don't Remove) Optimizes game performance by driving the GBA's CPU less hard. Use this on low-powered hardware if its struggling with game performance. Frameskip [mgba_frameskip] ( 0 |1|2|3|4|5|6|7|8|9|10) Choose how much frames should be skipped to improve performance at the expense of visual smoothness. Rumble \u00b6 Rumble only works in the mGBA core when The content being ran has rumble support. (e.g. Cartridges with a Rumble Pak) The frontend being used has rumble support. The joypad device being used has rumble support. Joypad \u00b6 User 1 input descriptors RetroPad Inputs B Turbo B Select Start Up Down Left Right A Turbo A L R Turbo L Turbo R Darken Solar Sensor Brighten Solar Sensor Compatibility \u00b6 Please file game bugs on the issue tracker here External Links \u00b6 Official mGBA Website Official mGBA Github Repository Libretro mGBA Core info file Libretro mGBA Github Repository Report Libretro mGBA Core Issues Here See also \u00b6 Nintendo - Game Boy Advance \u00b6 Nintendo - Game Boy Advance (Beetle GBA) Nintendo - Game Boy Advance (gpSP) Nintendo - Game Boy Advance (Meteor) Nintendo - Game Boy Advance (VBA Next) Nintendo - Game Boy Advance (VBA-M) Nintendo - Game Boy (+ Color) \u00b6 Nintendo - Game Boy / Color (Emux GB) Nintendo - Game Boy / Color (Gambatte) Nintendo - Game Boy / Color (Gearboy) Nintendo - Game Boy / Color (SameBoy) Nintendo - Game Boy / Color (TGB Dual) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (nSide Balanced) Nintendo - SNES / Famicom (Mesen-S)","title":"Nintendo - Game Boy Advance (mGBA)"},{"location":"library/mgba/#nintendo-game-boy-advance-mgba","text":"","title":"Nintendo - Game Boy Advance (mGBA)"},{"location":"library/mgba/#background","text":"mGBA is an emulator for running Game Boy Advance games. It aims to be faster and more accurate than many existing Game Boy Advance emulators, as well as adding features that other emulators lack. It also supports Game Boy and Game Boy Color games. The mGBA core has been authored by endrift The mGBA core is licensed under MPLv2.0 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Background"},{"location":"library/mgba/#bios","text":"Required or optional firmware files go in the frontend's system directory. Warning In order for the BIOS to be used, the 'Use BIOS file if found' core option must be set to On. Filename Description md5sum gba_bios.bin Game Boy Advance BIOS - Optional a860e8c0b6d573d191e4ec7db1b1e4f6 gb_bios.bin Game Boy BIOS - Optional 32fbbd84168d3482956eb3c5051637f5 gbc_bios.bin Game Boy Color BIOS - Optional dbfce9db9deaa2567f6a84fde55f9680 sgb_bios.bin Super Game Boy BIOS - Optional d574d4f9c12f305074798f54c091a8b4","title":"BIOS"},{"location":"library/mgba/#extensions","text":"Content that can be loaded by the mGBA core have the following file extensions: .gb .gbc .gba RetroArch database(s) that are associated with the [Core name] core: Nintendo - Game Boy Nintendo - Game Boy Color Nintendo - Game Boy Advance","title":"Extensions"},{"location":"library/mgba/#features","text":"Frontend-level settings or features that the mGBA core respects. Feature Supported Restart \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2714 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/mgba/#directories","text":"The mGBA core's library name is 'mGBA' The mGBA core saves/loads to/from these directories. Frontend's Save directory File Description *.srm Cartridge battery save Frontend's State directory File Description *.state# State","title":"Directories"},{"location":"library/mgba/#geometry-and-timing","text":"The mGBA core's core provided FPS is [FPS] The mGBA core's core provided sample rate is 32768 Hz The mGBA core's base width is [Base width] The mGBA core's base height is [Base height] The mGBA core's max width is [Max width] The mGBA core's max height is [Max height] The mGBA core's core provided aspect ratio is [Aspect ratio]","title":"Geometry and timing"},{"location":"library/mgba/#core-options","text":"The mGBA core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Solar sensor level [mgba_solar_sensor_level] ( 0 |1|2|3|4|5|6|7|8|9|10) Can be used by games that employed the use of a solar sensor on their cartridges. E.g.: Boktai games. Allow opposing directional input [mgba_allow_opposing_directions] ( OFF |ON) Allows opposing directional inputs. Up with Down. Right with Left. Game Boy model (requires restart) [mgba_gb_model] ( Autodetect |Game Boy|Super Game Boy|Game Boy Color|Game Boy Advance) Runs loaded content with a specific Game Boy model. Autodetect will select the most appropriate model for the current game. Use BIOS file if found [mgba_use_bios] ( ON |OFF) Uses BIOS present in RetroArch's system directory. Look at the BIOS section for more information. Skip BIOS intro [mgba_skip_bios] ( OFF |ON) The 'Use BIOS file if found' core option must be set to On for proper operation. Skips the BIOS intro when a BIOS is present in RetroArch's system directory is used. Skip BIOS intro - Off Use Super Game Boy borders (requires restart) [mgba_sgb_borders] ( ON |OFF) Display Super Game Boy borders for Super Game Boy enhanced games. Idle loop removal [mgba_idle_optimization] ( Remove Known |Detect and Remove|Don't Remove) Optimizes game performance by driving the GBA's CPU less hard. Use this on low-powered hardware if its struggling with game performance. Frameskip [mgba_frameskip] ( 0 |1|2|3|4|5|6|7|8|9|10) Choose how much frames should be skipped to improve performance at the expense of visual smoothness.","title":"Core options"},{"location":"library/mgba/#rumble","text":"Rumble only works in the mGBA core when The content being ran has rumble support. (e.g. Cartridges with a Rumble Pak) The frontend being used has rumble support. The joypad device being used has rumble support.","title":"Rumble"},{"location":"library/mgba/#joypad","text":"User 1 input descriptors RetroPad Inputs B Turbo B Select Start Up Down Left Right A Turbo A L R Turbo L Turbo R Darken Solar Sensor Brighten Solar Sensor","title":"Joypad"},{"location":"library/mgba/#compatibility","text":"Please file game bugs on the issue tracker here","title":"Compatibility"},{"location":"library/mgba/#external-links","text":"Official mGBA Website Official mGBA Github Repository Libretro mGBA Core info file Libretro mGBA Github Repository Report Libretro mGBA Core Issues Here","title":"External Links"},{"location":"library/mgba/#see-also","text":"","title":"See also"},{"location":"library/mgba/#nintendo-game-boy-advance","text":"Nintendo - Game Boy Advance (Beetle GBA) Nintendo - Game Boy Advance (gpSP) Nintendo - Game Boy Advance (Meteor) Nintendo - Game Boy Advance (VBA Next) Nintendo - Game Boy Advance (VBA-M)","title":"Nintendo - Game Boy Advance"},{"location":"library/mgba/#nintendo-game-boy-color","text":"Nintendo - Game Boy / Color (Emux GB) Nintendo - Game Boy / Color (Gambatte) Nintendo - Game Boy / Color (Gearboy) Nintendo - Game Boy / Color (SameBoy) Nintendo - Game Boy / Color (TGB Dual) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (nSide Balanced) Nintendo - SNES / Famicom (Mesen-S)","title":"Nintendo - Game Boy (+ Color)"},{"location":"library/mr_boom/","text":"Mr.Boom (Bomberman) \u00b6 Background \u00b6 Mr.Boom is an up to 8 player Bomberman clone for LibRetro/RetroArch. The goal of the game is to bomb away your enemies and other players. Author(s): \u00b6 Remdy Software Contribute to this documentation \u00b6 In order to propose improvements to this document, visit it's corresponding source page on github . Changes are proposed using \"Pull Requests.\" License \u00b6 MIT Extensions \u00b6 The Mr.Boom core does not feature extension use. Just load and start the core. Features \u00b6 Feature Supported Saves \u2715 States \u2714 Rewind \u2714 Netplay \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controllers \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 The Mr.Boom core's directory name is 'Mr.Boom' Save states are saved/loaded to and from where state files are stored. Core options \u00b6 The Mr.Boom core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Team mode ( Selfie /Color/Sex): Team mode color. Monsters (Off/ On ): Awaiting description. Enable or disable monsters. Monsters - On Monsters - Off Drop bomb autofire ( Off /On): Enables Drop bomb autofire mode. Holding down the Drop bomb button will repeatedly use the Drop bomb action. (Potentially useful when used in conjunction with certain powerups) Controllers \u00b6 The Mr.Boom core supports the following controller setting(s), bolded controller settings are the default for the specified user(s): User 1 - 16 Device Type(s) \u00b6 RetroPad - Joypad with analog RetroPad w/Analog - There is no reason to switch to this. Controllers graph \u00b6 RetroPad Inputs Mr.Boom core inputs Drop Bomb/Join game Add a bomberman bot (while in the join game screen) Start game Up/Push bomb Down/Push bomb Left/Push bomb Right/Push bomb Detonate bomb (when you have the Remote control power)/Join game Jump (while riding a Kangaroo)/Join game) External Links \u00b6 Libretro Repository Report Core Issues Here Official Website Upstream Repository","title":"Mr.Boom (Bomberman)"},{"location":"library/mr_boom/#mrboom-bomberman","text":"","title":"Mr.Boom (Bomberman)"},{"location":"library/mr_boom/#background","text":"Mr.Boom is an up to 8 player Bomberman clone for LibRetro/RetroArch. The goal of the game is to bomb away your enemies and other players.","title":"Background"},{"location":"library/mr_boom/#authors","text":"Remdy Software","title":"Author(s):"},{"location":"library/mr_boom/#contribute-to-this-documentation","text":"In order to propose improvements to this document, visit it's corresponding source page on github . Changes are proposed using \"Pull Requests.\"","title":"Contribute to this documentation"},{"location":"library/mr_boom/#license","text":"MIT","title":"License"},{"location":"library/mr_boom/#extensions","text":"The Mr.Boom core does not feature extension use. Just load and start the core.","title":"Extensions"},{"location":"library/mr_boom/#features","text":"Feature Supported Saves \u2715 States \u2714 Rewind \u2714 Netplay \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controllers \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 The Mr.Boom core's directory name is 'Mr.Boom' Save states are saved/loaded to and from where state files are stored.","title":"Features"},{"location":"library/mr_boom/#core-options","text":"The Mr.Boom core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Team mode ( Selfie /Color/Sex): Team mode color. Monsters (Off/ On ): Awaiting description. Enable or disable monsters. Monsters - On Monsters - Off Drop bomb autofire ( Off /On): Enables Drop bomb autofire mode. Holding down the Drop bomb button will repeatedly use the Drop bomb action. (Potentially useful when used in conjunction with certain powerups)","title":"Core options"},{"location":"library/mr_boom/#controllers","text":"The Mr.Boom core supports the following controller setting(s), bolded controller settings are the default for the specified user(s):","title":"Controllers"},{"location":"library/mr_boom/#user-1-16-device-types","text":"RetroPad - Joypad with analog RetroPad w/Analog - There is no reason to switch to this.","title":"User 1 - 16 Device Type(s)"},{"location":"library/mr_boom/#controllers-graph","text":"RetroPad Inputs Mr.Boom core inputs Drop Bomb/Join game Add a bomberman bot (while in the join game screen) Start game Up/Push bomb Down/Push bomb Left/Push bomb Right/Push bomb Detonate bomb (when you have the Remote control power)/Join game Jump (while riding a Kangaroo)/Join game)","title":"Controllers graph"},{"location":"library/mr_boom/#external-links","text":"Libretro Repository Report Core Issues Here Official Website Upstream Repository","title":"External Links"},{"location":"library/mupen64plus/","text":"Nintendo 64 (Mupen64Plus) \u00b6 Contribute to this documentation \u00b6 DOCUMENTATION IS A WORK IN PROGRESS In order to propose improvements to this document, visit its corresponding source page on github . Changes are proposed using \"Pull Requests.\" There is a To-Do list for libretro/docs here You can submit suggestions or issues regarding documentation at the libretro/docs issue tracker or in our forum thread . Background \u00b6 Mupen64Plus for libretro is the port of Mupen64Plus, a Nintendo 64 emulator. Mupen64Plus for libretro uses GLideN64 as graphic plugin. The original Mupen64Plus can use one of the several available graphic plugins (Rice, Glide64, ect.). By choosing one graphics plugin (GLideN64), it will be possible to keep the code in line with upstream, and maintaining the code will be much simpler. For Android there are two versions of Mupen64Plus. One is designed to work with GLES 2.0 and another one with GLES 3.0. How is this different from Parallel-N64? Parallel-N64 implements multiple Graphics plugins amongst them the new Parallel plugin. There are also code modifications that make it different from the standalone Mupen64Plus. The graphic plugin GLideN64 is not available in Parallel-N64. Why use this core? \u00b6 The GlideN64 video plugin is very capable. Outstanding support of Hires Textures. Multi-plugin support is in the making. Authors \u00b6 Hacktarux Mupen64Plus Team See also \u00b6 N64 \u00b6 Nintendo 64 (ParaLLEl N64) License \u00b6 A summary of the licenses behind RetroArch and its cores can be found here . The Mupen64Plus core is licensed under GPLv3 Extensions \u00b6 Content that can be loaded by the Mupen64Plus core have the following file extensions: .n64 .v64 .z64 .bin .u1 .ndd Databases \u00b6 RetroArch database(s) that are associated with the Mupen64Plus core: Nintendo - Nintendo 64 Nintendo - Nintendo 64DD Features \u00b6 RetroArch-level settings or features that the Mupen64Plus core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2714 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 Directories \u00b6 The Mupen64Plus core's directory name is 'Mupen64Plus OpenGL' The Mupen64Plus core saves/loads to/from these directories. RetroArch's Save directory 'content-name'.srm (Cartridge backup save) RetroArch's State directory 'content-name'.state# (State) RetroArch's System directory - Mupen64plus/ - mupen64plus.ini - shaders/ Geometry and timing \u00b6 The Mupen64Plus core's internal FPS is (FPS) The Mupen64Plus core's internal sample rate is 44100 Hz The Mupen64Plus core's core provided aspect ratio is (Ratio) Hires Textures \u00b6 You can either use pre-compiled hires texture packs (.htc format, available for download) or compile your own hires texture packs from uncompressed Rice sources. Pre-compiled hires textures in .htc format have to be put into Mupen64plus/cache. The name of the .htc file must match the system name of the game in the mupen64plus console. Pre-compiled hires packs will only work if the Retroarch core settings regarding textures are identical when compiled. This is why an own compilation of uncompressed textures is recommended. Recommended Core Options for pre-compiled very popular .htc texture packs, such as those of Djipi or Mollymutt, are: - mupen64plus-EnableTextureCache = \"True\" - mupen64plus-txHiresEnable = \"True\" - mupen64plus-txCacheCompression = \"True\" - mupen64plus-txHiresFullAlphaChannel = \"False\" - mupen64plus-EnableEnhancedTextureStorage = \"False\" - mupen64plus-EnableEnhancedHighResStorage = \"False\" For a compilation of your own hires texture pack, you need the high resolution textures in the uncompressed Rice format, and the folder name must match the system name of the game in the mupen64plus console. Put this folder into Mupen64plus/hires_texture. At the first start of the game, the .htc texture pack is created, which can take a while. After successful creation of the .htc file in the cache subdirectory, you can delete the uncompressed texture directory as it is no longer needed. If you want to re-use your newly created texture pack on a different system, you must enable the same core options on the new system that you used when you compiled the pack. If you compile your own texture pack, you should be sure to enable the further three for Alpha Channel and Enhanced Storage, which will then produce a hires texture pack with the *.hts extension. Compilation under Windows seems to be more complicated than under Linux or iOS. Rice texture packs must be converted to 32bit PNG. Core options \u00b6 The Mupen64Plus core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. CPU Core ( dynamic_recompiler /cached_interpreter/pure_interpreter) Choose which kind of CPU emulation is going to be used. Dynamic recompiler is the fastest mode. Dynamic recompilier is not available on all platforms. RSP Mode ( HLE /LLE) How the RSP is emulated, High Level Emulation or Low Level Emulation. Low level emulation should be more precise but it requires more computational power. LLE mode is not available on all platforms 4:3 Resolution ( 320x240 /640x480/960x720/1280x960/1600x1200/1920x1440/2240x1680/2560x1920/2880x2160/3200x2400/3520x2640/3840x2880) Select the internal rendering resolution for 4:3 Aspect Ratio mode. The 'Aspect Ratio' core option must be set to 4:3 for this to have an effect. Higher values require more computational power. 16:9 Resolution ( 640x360 /960x540/1280x720/1920x1080/2560x1440/3840x2160/7680x4320) Select the internal rendering resolution for 16:9 Aspect Ratio mode. The 'Aspect Ratio' core option must be set to 16:9 or 16:9 adjusted for this to have an effect. Higher values require more computational power. Aspect Ratio ( 4:3 /16:9/16:9 adjusted) This setting adjusts the aspect ratio of the video output. All N64 games support 4:3. Some games support 16:9 within game settings. Bilinear filtering mode ( standard /3point) Bilinear filtering: Textures will use standard PC-style bilinear filtering. 3 point: Textures will be filtered more like the N64. The result is less smooth but more accurate. MSAA level (0/2/4/8/16) Enable/Disable MultiSampling Anti-aliasing (0=off, 2,4,8,16=quality). This core option is not available on all platforms. Framebuffer Emulation ( True /False) Enable the framebuffer emulation. Frame buffer emulation is a set of techniques used to emulate manipulations with color and depth buffer areas on the real console. Unchecking this option disables many effects including cropping, aspect ratio, N64 resolution factor and more. Do not uncheck this option unless you have performance issues. Color buffer to RDRAM ( Async /Sync/Off) Used with the framebuffer emulation. Frame buffer copy is used for some effects (e.g. TV monitor effect where TV shows part of the displayed picture). In some games GLideN64 cannot detect when the game uses the frame buffer. With these options, you can have GLideN64 copy each frame of your video cards frame buffer to N64 memory. Off: Disable copying buffers from video card. Synchronous: Effects are detected for all games, but it can be slow. Use for games where Asynchronous does not work. Asynchronous: Effects are detected for most games (best choice). The default setting is dependent on your platform. Depth buffer to RDRAM ( Software /FromMem/Off) Used with the framebuffer emulation. The depth buffer is used to emulate some effects (e.g. coronas). Off: Depth buffer is disabled. FromMem: Your video card\u2019s depth buffer is copied to N64 memory each frame, which can be slow on some games. Software: Generally faster than copying from VRAM, but the result can be imperfect. Hardware per-pixel lighting ( False /True) In N64 games lighting is calculated per vertex. This option enables hardware per-pixel lighting calculation known as Phong shading, which provides smoother and more realistic lighting. Per-vertex lighting is instead calculated via software. HLE only. Continuous texrect coords ( Off /Auto/Force) In some games the coordinates for parts of 2D elements are not aligned: there is a half-pixel split between adjacent elements. When rendering at the N64\u2019s original resolution it is not visible, but when the image is scaled up it results in black lines. This option attempts to connect these 2D elements. Native res. 2D texrects ( False /True) When checked, 2D elements are rendered at the N64s resolution before copying them to output. This usually eliminates display issues with 2D elements, but it can be slow. This option uses heuristics to detect adjacent 2D elements that does not work for every game. Less accurate blending mode ( True /False) Do not use shaders to emulate N64 blending modes. Works faster on slow GPU. It can cause glitches. The default setting is dependent on your platform. GPU shader depth write ( False /True) Enable writing of fragment depth. Some mobile GPUs do not support it, thus it made optional. The default seeting is dependent on your platform. Cache GPU Shaders ( True /False) When the option is enabled, plugin saves all new created shaders in a file. When user starts that game again, plugin loads all previously compiled shaders from that file and further gameplay goes smooth. Crop Mode ( Auto /Off) Its purpose is to remove black borders, which many N64 games add around image. In auto mode plugins tries to detect empty space and remove it. It works only if frame buffer emulation is enabled, as all other post-processing filters. Texture filter ( None /Smooth filtering 1/Smooth filtering 2/Smooth filtering 3/Smooth filtering 4/Sharp filtering 1/Sharp filtering 2) This filter smooths or sharpens textures. There are four smoothing filters and two sharpening filters. The higher the number, the stronger the effect. Performance may be affected depending on the game and/or your device. Texture Enhancement ( None /As Is/X2/X2SAI/HQ2X/HQ2XS/LQ2X/LQ2XS/HQ4X/2xBRZ/3xBRZ/4xBRZ/5xBRZ/6xBRZ) Filter applied to textures. Depending on which filter, they may cause performance problems. When AS IS is selected, textures are saved to the cache as-is; this improves performance in games that load many textures; unset Filer background textures for the best performance. Filter background textures ( True /False) This option skips texture enhancements for long, narrow textures that are usually used for backgrounds. This may save texture memory and improve performance. Set true unless Enhancement mode is set to AS IS. Use High-Res textures ( False /True) Enable the high resolution textures. Usage of hires textures is explained above. Use High-Res Full Alpha Channel ( False /True) When this option is selected, GlideN64 will check how the texture\u2019s alpha channel was designed and will select the most appropriate format. This gives texture pack designers freedom to use semi-transparent textures. Clear this option for older or poorly designed texture packs. Recommended for newer texture packs. Analog Deadzone (percent) ( 15 /20/25/30/0/5/10) The minimum absolute value of SDL analog Joystick axis to move the N64 controller axis value Analog Sensitivity (percent) ( 100 /95/90/85/80/105/110) The sensitivity of the analog Joystick. Right C Button ( C1 /C2/C3/C4) Awaiting description. Left C Button ( C2 /C3/C4/C1) Awaiting description. Down C Button ( C3 /C4/C1/C2) Awaiting description. Up C Button ( C4 /C1/C2/C3) Awaiting description, Player 1 Pak ( memory /rumble/none) Choose what Pak has been inserted in the player 1 controller. Player 2 Pak ( none /memory/rumble) Choose what Pak has been inserted in the player 2 controller. Player 3 Pak ( none /memory/rumble) Choose what Pak has been inserted in the player 3 controller. Player 4 Pak ( none /memory/rumble) Choose what Pak has been inserted in the player 4 controller. Count Per Op (0/\u00bd/3) Force the number of cycle per emulated instructions. Controllers \u00b6 Device types \u00b6 The Mupen64Plus core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 - 4 device types \u00b6 None - Input disabled. Controller - Joypad Rumble support \u00b6 Rumble only works in the Mupen64Plus core when The content being ran has rumble support. The joypad input driver being used has rumble support. (e.g. Xinput) The joypad device being used has rumble support. The 'Player # Pak' core options are set to rumble for the respective players. List of Nintendo 64 games with Rumble Pak support Controller tables \u00b6 Joypad and analog device type table \u00b6 User 1 - 4 Remap descriptors RetroPad Inputs A Button (C3) B Button (C2) START Button Up (digital) Down (digital) Left (digital) Right (digital) (C1) (C4) L-Trigger R-Trigger Z-Trigger C Buttons Mode Control Stick X X Control Stick Y Y C Buttons X X C Buttons Y Y Compatibility \u00b6 Awaiting description. External Links \u00b6 Libretro Mupen64Plus Core info file Libretro Mupen64Plus Github Repository Report Libretro Mupen64Plus Core Issues Here Official Mupen64Plus Website Official Mupen64Plus Github Organization","title":"Nintendo - Nintendo 64 (Mupen64Plus)"},{"location":"library/mupen64plus/#nintendo-64-mupen64plus","text":"","title":"Nintendo 64 (Mupen64Plus)"},{"location":"library/mupen64plus/#contribute-to-this-documentation","text":"DOCUMENTATION IS A WORK IN PROGRESS In order to propose improvements to this document, visit its corresponding source page on github . Changes are proposed using \"Pull Requests.\" There is a To-Do list for libretro/docs here You can submit suggestions or issues regarding documentation at the libretro/docs issue tracker or in our forum thread .","title":"Contribute to this documentation"},{"location":"library/mupen64plus/#background","text":"Mupen64Plus for libretro is the port of Mupen64Plus, a Nintendo 64 emulator. Mupen64Plus for libretro uses GLideN64 as graphic plugin. The original Mupen64Plus can use one of the several available graphic plugins (Rice, Glide64, ect.). By choosing one graphics plugin (GLideN64), it will be possible to keep the code in line with upstream, and maintaining the code will be much simpler. For Android there are two versions of Mupen64Plus. One is designed to work with GLES 2.0 and another one with GLES 3.0. How is this different from Parallel-N64? Parallel-N64 implements multiple Graphics plugins amongst them the new Parallel plugin. There are also code modifications that make it different from the standalone Mupen64Plus. The graphic plugin GLideN64 is not available in Parallel-N64.","title":"Background"},{"location":"library/mupen64plus/#why-use-this-core","text":"The GlideN64 video plugin is very capable. Outstanding support of Hires Textures. Multi-plugin support is in the making.","title":"Why use this core?"},{"location":"library/mupen64plus/#authors","text":"Hacktarux Mupen64Plus Team","title":"Authors"},{"location":"library/mupen64plus/#see-also","text":"","title":"See also"},{"location":"library/mupen64plus/#n64","text":"Nintendo 64 (ParaLLEl N64)","title":"N64"},{"location":"library/mupen64plus/#license","text":"A summary of the licenses behind RetroArch and its cores can be found here . The Mupen64Plus core is licensed under GPLv3","title":"License"},{"location":"library/mupen64plus/#extensions","text":"Content that can be loaded by the Mupen64Plus core have the following file extensions: .n64 .v64 .z64 .bin .u1 .ndd","title":"Extensions"},{"location":"library/mupen64plus/#databases","text":"RetroArch database(s) that are associated with the Mupen64Plus core: Nintendo - Nintendo 64 Nintendo - Nintendo 64DD","title":"Databases"},{"location":"library/mupen64plus/#features","text":"RetroArch-level settings or features that the Mupen64Plus core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2714 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715","title":"Features"},{"location":"library/mupen64plus/#directories","text":"The Mupen64Plus core's directory name is 'Mupen64Plus OpenGL' The Mupen64Plus core saves/loads to/from these directories. RetroArch's Save directory 'content-name'.srm (Cartridge backup save) RetroArch's State directory 'content-name'.state# (State) RetroArch's System directory - Mupen64plus/ - mupen64plus.ini - shaders/","title":"Directories"},{"location":"library/mupen64plus/#geometry-and-timing","text":"The Mupen64Plus core's internal FPS is (FPS) The Mupen64Plus core's internal sample rate is 44100 Hz The Mupen64Plus core's core provided aspect ratio is (Ratio)","title":"Geometry and timing"},{"location":"library/mupen64plus/#hires-textures","text":"You can either use pre-compiled hires texture packs (.htc format, available for download) or compile your own hires texture packs from uncompressed Rice sources. Pre-compiled hires textures in .htc format have to be put into Mupen64plus/cache. The name of the .htc file must match the system name of the game in the mupen64plus console. Pre-compiled hires packs will only work if the Retroarch core settings regarding textures are identical when compiled. This is why an own compilation of uncompressed textures is recommended. Recommended Core Options for pre-compiled very popular .htc texture packs, such as those of Djipi or Mollymutt, are: - mupen64plus-EnableTextureCache = \"True\" - mupen64plus-txHiresEnable = \"True\" - mupen64plus-txCacheCompression = \"True\" - mupen64plus-txHiresFullAlphaChannel = \"False\" - mupen64plus-EnableEnhancedTextureStorage = \"False\" - mupen64plus-EnableEnhancedHighResStorage = \"False\" For a compilation of your own hires texture pack, you need the high resolution textures in the uncompressed Rice format, and the folder name must match the system name of the game in the mupen64plus console. Put this folder into Mupen64plus/hires_texture. At the first start of the game, the .htc texture pack is created, which can take a while. After successful creation of the .htc file in the cache subdirectory, you can delete the uncompressed texture directory as it is no longer needed. If you want to re-use your newly created texture pack on a different system, you must enable the same core options on the new system that you used when you compiled the pack. If you compile your own texture pack, you should be sure to enable the further three for Alpha Channel and Enhanced Storage, which will then produce a hires texture pack with the *.hts extension. Compilation under Windows seems to be more complicated than under Linux or iOS. Rice texture packs must be converted to 32bit PNG.","title":"Hires Textures"},{"location":"library/mupen64plus/#core-options","text":"The Mupen64Plus core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. CPU Core ( dynamic_recompiler /cached_interpreter/pure_interpreter) Choose which kind of CPU emulation is going to be used. Dynamic recompiler is the fastest mode. Dynamic recompilier is not available on all platforms. RSP Mode ( HLE /LLE) How the RSP is emulated, High Level Emulation or Low Level Emulation. Low level emulation should be more precise but it requires more computational power. LLE mode is not available on all platforms 4:3 Resolution ( 320x240 /640x480/960x720/1280x960/1600x1200/1920x1440/2240x1680/2560x1920/2880x2160/3200x2400/3520x2640/3840x2880) Select the internal rendering resolution for 4:3 Aspect Ratio mode. The 'Aspect Ratio' core option must be set to 4:3 for this to have an effect. Higher values require more computational power. 16:9 Resolution ( 640x360 /960x540/1280x720/1920x1080/2560x1440/3840x2160/7680x4320) Select the internal rendering resolution for 16:9 Aspect Ratio mode. The 'Aspect Ratio' core option must be set to 16:9 or 16:9 adjusted for this to have an effect. Higher values require more computational power. Aspect Ratio ( 4:3 /16:9/16:9 adjusted) This setting adjusts the aspect ratio of the video output. All N64 games support 4:3. Some games support 16:9 within game settings. Bilinear filtering mode ( standard /3point) Bilinear filtering: Textures will use standard PC-style bilinear filtering. 3 point: Textures will be filtered more like the N64. The result is less smooth but more accurate. MSAA level (0/2/4/8/16) Enable/Disable MultiSampling Anti-aliasing (0=off, 2,4,8,16=quality). This core option is not available on all platforms. Framebuffer Emulation ( True /False) Enable the framebuffer emulation. Frame buffer emulation is a set of techniques used to emulate manipulations with color and depth buffer areas on the real console. Unchecking this option disables many effects including cropping, aspect ratio, N64 resolution factor and more. Do not uncheck this option unless you have performance issues. Color buffer to RDRAM ( Async /Sync/Off) Used with the framebuffer emulation. Frame buffer copy is used for some effects (e.g. TV monitor effect where TV shows part of the displayed picture). In some games GLideN64 cannot detect when the game uses the frame buffer. With these options, you can have GLideN64 copy each frame of your video cards frame buffer to N64 memory. Off: Disable copying buffers from video card. Synchronous: Effects are detected for all games, but it can be slow. Use for games where Asynchronous does not work. Asynchronous: Effects are detected for most games (best choice). The default setting is dependent on your platform. Depth buffer to RDRAM ( Software /FromMem/Off) Used with the framebuffer emulation. The depth buffer is used to emulate some effects (e.g. coronas). Off: Depth buffer is disabled. FromMem: Your video card\u2019s depth buffer is copied to N64 memory each frame, which can be slow on some games. Software: Generally faster than copying from VRAM, but the result can be imperfect. Hardware per-pixel lighting ( False /True) In N64 games lighting is calculated per vertex. This option enables hardware per-pixel lighting calculation known as Phong shading, which provides smoother and more realistic lighting. Per-vertex lighting is instead calculated via software. HLE only. Continuous texrect coords ( Off /Auto/Force) In some games the coordinates for parts of 2D elements are not aligned: there is a half-pixel split between adjacent elements. When rendering at the N64\u2019s original resolution it is not visible, but when the image is scaled up it results in black lines. This option attempts to connect these 2D elements. Native res. 2D texrects ( False /True) When checked, 2D elements are rendered at the N64s resolution before copying them to output. This usually eliminates display issues with 2D elements, but it can be slow. This option uses heuristics to detect adjacent 2D elements that does not work for every game. Less accurate blending mode ( True /False) Do not use shaders to emulate N64 blending modes. Works faster on slow GPU. It can cause glitches. The default setting is dependent on your platform. GPU shader depth write ( False /True) Enable writing of fragment depth. Some mobile GPUs do not support it, thus it made optional. The default seeting is dependent on your platform. Cache GPU Shaders ( True /False) When the option is enabled, plugin saves all new created shaders in a file. When user starts that game again, plugin loads all previously compiled shaders from that file and further gameplay goes smooth. Crop Mode ( Auto /Off) Its purpose is to remove black borders, which many N64 games add around image. In auto mode plugins tries to detect empty space and remove it. It works only if frame buffer emulation is enabled, as all other post-processing filters. Texture filter ( None /Smooth filtering 1/Smooth filtering 2/Smooth filtering 3/Smooth filtering 4/Sharp filtering 1/Sharp filtering 2) This filter smooths or sharpens textures. There are four smoothing filters and two sharpening filters. The higher the number, the stronger the effect. Performance may be affected depending on the game and/or your device. Texture Enhancement ( None /As Is/X2/X2SAI/HQ2X/HQ2XS/LQ2X/LQ2XS/HQ4X/2xBRZ/3xBRZ/4xBRZ/5xBRZ/6xBRZ) Filter applied to textures. Depending on which filter, they may cause performance problems. When AS IS is selected, textures are saved to the cache as-is; this improves performance in games that load many textures; unset Filer background textures for the best performance. Filter background textures ( True /False) This option skips texture enhancements for long, narrow textures that are usually used for backgrounds. This may save texture memory and improve performance. Set true unless Enhancement mode is set to AS IS. Use High-Res textures ( False /True) Enable the high resolution textures. Usage of hires textures is explained above. Use High-Res Full Alpha Channel ( False /True) When this option is selected, GlideN64 will check how the texture\u2019s alpha channel was designed and will select the most appropriate format. This gives texture pack designers freedom to use semi-transparent textures. Clear this option for older or poorly designed texture packs. Recommended for newer texture packs. Analog Deadzone (percent) ( 15 /20/25/30/0/5/10) The minimum absolute value of SDL analog Joystick axis to move the N64 controller axis value Analog Sensitivity (percent) ( 100 /95/90/85/80/105/110) The sensitivity of the analog Joystick. Right C Button ( C1 /C2/C3/C4) Awaiting description. Left C Button ( C2 /C3/C4/C1) Awaiting description. Down C Button ( C3 /C4/C1/C2) Awaiting description. Up C Button ( C4 /C1/C2/C3) Awaiting description, Player 1 Pak ( memory /rumble/none) Choose what Pak has been inserted in the player 1 controller. Player 2 Pak ( none /memory/rumble) Choose what Pak has been inserted in the player 2 controller. Player 3 Pak ( none /memory/rumble) Choose what Pak has been inserted in the player 3 controller. Player 4 Pak ( none /memory/rumble) Choose what Pak has been inserted in the player 4 controller. Count Per Op (0/\u00bd/3) Force the number of cycle per emulated instructions.","title":"Core options"},{"location":"library/mupen64plus/#controllers","text":"","title":"Controllers"},{"location":"library/mupen64plus/#device-types","text":"The Mupen64Plus core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Device types"},{"location":"library/mupen64plus/#user-1-4-device-types","text":"None - Input disabled. Controller - Joypad","title":"User 1 - 4 device types"},{"location":"library/mupen64plus/#rumble-support","text":"Rumble only works in the Mupen64Plus core when The content being ran has rumble support. The joypad input driver being used has rumble support. (e.g. Xinput) The joypad device being used has rumble support. The 'Player # Pak' core options are set to rumble for the respective players. List of Nintendo 64 games with Rumble Pak support","title":"Rumble support"},{"location":"library/mupen64plus/#controller-tables","text":"","title":"Controller tables"},{"location":"library/mupen64plus/#joypad-and-analog-device-type-table","text":"User 1 - 4 Remap descriptors RetroPad Inputs A Button (C3) B Button (C2) START Button Up (digital) Down (digital) Left (digital) Right (digital) (C1) (C4) L-Trigger R-Trigger Z-Trigger C Buttons Mode Control Stick X X Control Stick Y Y C Buttons X X C Buttons Y Y","title":"Joypad and analog device type table"},{"location":"library/mupen64plus/#compatibility","text":"Awaiting description.","title":"Compatibility"},{"location":"library/mupen64plus/#external-links","text":"Libretro Mupen64Plus Core info file Libretro Mupen64Plus Github Repository Report Libretro Mupen64Plus Core Issues Here Official Mupen64Plus Website Official Mupen64Plus Github Organization","title":"External Links"},{"location":"library/neko_project_ii_kai/","text":"NEC - PC-98 (Neko Project II Kai) \u00b6 Background \u00b6 Awaiting description. Author/License \u00b6 The Neko Project II Kai core has been authored by Neko Project II Team Tomohiro Yoshidomi The Neko Project II Kai core is licensed under MIT A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the Neko Project II Kai core have the following file extensions: .d98 .zip .98d .fdi .fdd .2hd .tfd .d88 .88d .hdm .xdf .dup .cmd .hdi .thd .nhd .hdd .hdn BIOS \u00b6 Required or optional firmware files go in the frontend's system directory. Attention These firmware files need to be in a directory named 'np2kai' in the frontend's system directory. Filename Description md5sum np2kai/font.bmp Needed to display text - Required np2kai/FONT.ROM Alt font file - Required np2kai/bios.rom - Required np2kai/itf.rom - Required np2kai/sound.rom - Required np2kai/bios9821.rom - Optional np2kai/d8000.rom - Optional np2kai/2608_BD.WAV YM2608 RYTHM sample - Optional np2kai/2608_SD.WAV YM2608 RYTHM sample - Optional np2kai/2608_TOP.WAV YM2608 RYTHM sample - Optional np2kai/2608_HH.WAV YM2608 RYTHM sample - Optional np2kai/2608_TOM.WAV YM2608 RYTHM sample - Optional np2kai/2608_RIM.WAV YM2608 RYTHM sample - Optional Features \u00b6 Frontend-level settings or features that the Neko Project II Kai core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2715 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2714 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The Neko Project II Kai core's directory name is 'Neko Project II kai' The Neko Project II Kai core saves/loads to/from these directories. - Frontend's Home directory .bmp (???) \u00b6 Frontend's State directory 'content-name'.state# (State) Frontend's System directory np2/np2.cfg (Neko Project II Config file) Geometry and timing \u00b6 The Neko Project II Kai core's core provided FPS is 56.4 The Neko Project II Kai core's core provided sample rate is 44100 Hz The Neko Project II Kai core's core provided aspect ratio is 8/5 Usage \u00b6 NP2 menu can FDD/HDD swap. Mouse is cuptured (hidden/show toggle) by F11 key. NP2 menu is opened when F12 key Keep 'end' key down when booting for machine options. How to set GDC 2.5MHz/5MHz? Press End key(assigned Help key) + reset Select '\u30c7\u30a3\u30c3\u30d7\u30b9\u30a4\u30c3\u30c1\uff12'(DIP switch 2) How to use CD drive with MS-DOS 6.2? Write follow to CONFIG.SYS. LASTDRIVE=Z DEVICE=A:\uffe5DOS\uffe5NECCDD.SYS /D:CD_101 And write follow to AUTOEXEC.BAT. A:\uffe5DOS\uffe5MSCDEX.EXE /D:CD_101 /L:Q Then, you'll can use CD drive as Q drive. Core options \u00b6 The Neko Project II Kai core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. PC Model (Restart) [np2kai_model] ( PC-9801VX /PC-286/PC-9801VM) Awaiting description. CPU Base Clock (Restart) [np2kai_clk_base] ( 2.4576 MHz /1.9968 MHz) Awaiting description. CPU Clock Multiplier (Restart) [np2kai_clk_mult] ( 4 /\u215a/8/10/12/16/20/24/30/36/40/42/\u00bd) Awaiting description. RAM Size (Restart)* [np2kai_ExMemory] (**3 /7/11/13/16/32/64/120/230/1) Awaiting description. GDC [np2kai_gdc] ( uPD7220 /uPD72020) Awaiting description. Skipline Revisions [np2kai_skipline] ( Full 255 lines /ON/OFF) Awaiting description. Real Palettes [np2kai_realpal] ( OFF /ON) Awaiting description. LCD [np2kai_lcd ] ( OFF /ON) Awaiting description. Sound Board (Restart) [np2kai_SNDboard] ( PC9801-86 /PC9801-26K + 86/PC9801-86 + Chibi-oto/PC9801-118/PC9801-86 + Mate-X PCM(B460)/Mate-X PCM(B460)/Chibi-oto/Speak Board/Spark Board/Sound Orchestra/Sound Orchestra-V/Sound Blaster 16/AMD-98/Otomi-chanx2/Otomi-chanx2 + 86/None/PC9801-14/PC9801-26K) 26K: for old games. 86: for newer games. JastSound [np2kai_jast_snd] ( OFF /ON) Awaiting description. Sound Generator [np2kai_usefmgen] ( fmgen /Default) Awaiting description. Volume FM [np2kai_volume_F] (0 to 128 in increments of 4. 64 is default .) Awaiting description. Volume SSG [np2kai_volume_S] (0 to 128 in increments of 4. 64 is default .) Awaiting description. Volume ADPCM [np2kai_volume_A] (0 to 128 in increments of 4. 64 is default .) Awaiting description. Volume PCM [np2kai_volume_P] (0 to 128 in increments of 4. 64 is default .) Awaiting description. Volume RHYTHM [np2kai_volume_R] (0 to 128 in increments of 4. 64 is default .) Awaiting description. Volume CD-DA [np2kai_volume_C] (0 to 255 in increments of 8. 128 is default .) Awaiting description. Floppy Seek Sound [np2kai_Seek_Snd] ( OFF /ON) Awaiting description. Volume Floppy Seek [np2kai_Seek_Vol] (0 to 128 in increments of 4. 80 is default .) Awaiting description. Volume Beep [np2kai_BEEP_vol] ( 3 /0/\u00bd) Awaiting description. Joypad to Mouse Mapping [np2kai_joy2mouse] ( OFF /ON) Awaiting description. Joypad to Keyboard Mapping [np2kai_joy2key] ( OFF /Arrows/Keypad) Awaiting description. Controllers \u00b6 The Neko Project II Kai core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 device types \u00b6 None - Doesn't disable input. RetroPad - Joypad RetroPad w/Analog - Joypad - There's no reason to switch to this. Controller tables \u00b6 Joypad \u00b6 Attention The Joy2Key and Joy2Mouse modes can be activated with the 'Joypad to Mouse Mapping' and 'Joypad to Keyboard Mapping' core options. RetroPad Inputs Joy2Key (Arrows) Joy2Key (Keypad) Joy2Mouse Z key Z key Mouse left button Left control key Left control key Escape key Escape key Return key Return key Up arrow key Keypad Up arrow key (8) Move mouse up Down arrow key Keypad down arrow key (2) Move mouse down Left arrow key Keypad left arrow key (4) Move mouse left Right arrow key Keypad right arrow key (6) Move mouse right X key X key Mouse right button Space key Space key Backspace key Backspace key Increase mouse speed Right shift key Right shift key NP2 menu key NP2 menu key NP2 menu key Keyboard \u00b6 RetroKeyboard Inputs NP2 Keyboard Inputs Keyboard Backspace NKEY_BACKSPACE Keyboard Tab NKEY_TAB Keyboard Return NKEY_RETURN Keyboard Pause NKEY_STOP Keyboard Escape NKEY_ESC Keyboard Space NKEY_SPACE Keyboard Quote ' NKEY_COLON Keyboard Comma , NKEY_COMMA Keyboard Minus - NKEY_MINUS Keyboard Period . NKEY_DOT Keyboard Slash / NKEY_SLASH Keyboard 0 NKEY_0 Keyboard 1 NKEY_1 Keyboard 2 NKEY_2 Keyboard 3 NKEY_3 Keyboard 4 NKEY_4 Keyboard 5 NKEY_5 Keyboard 6 NKEY_6 Keyboard 7 NKEY_7 Keyboard 8 NKEY_8 Keyboard 9 NKEY_9 Keyboard Colon : NKEY_COLON Keyboard Semicolon ; NKEY_SEMICOLON Keyboard Equals = NKEY_CIRCUMFLEX Keyboard At @ NKEY_ATMARK Keyboard Left Bracket [ NKEY_LEFTSBRACKET Keyboard Backslash \\ NKEY_YEN Keyboard Right Bracket ] NKEY_RIGHTSBRACKET Keyboard Caret ^ NKEY_CIRCUMFLEX Keyboard Underscore _ NKEY_UNDERSCORE Keyboard Backquote ` NKEY_ATMARK Keyboard a NKEY_A Keyboard b NKEY_B Keyboard c NKEY_C Keyboard d NKEY_D Keyboard e NKEY_E Keyboard f NKEY_F Keyboard g NKEY_G Keyboard h NKEY_H Keyboard i NKEY_I Keyboard j NKEY_J Keyboard k NKEY_K Keyboard l NKEY_L Keyboard m NKEY_M Keyboard n NKEY_N Keyboard o NKEY_O Keyboard p NKEY_P Keyboard q NKEY_Q Keyboard r NKEY_R Keyboard s NKEY_S Keyboard t NKEY_T Keyboard u NKEY_U Keyboard v NKEY_V Keyboard w NKEY_W Keyboard x NKEY_X Keyboard y NKEY_Q Keyboard z NKEY_Z Keyboard Delete NKEY_DEL Keyboard Keypad 0 NKEY_KP_0 Keyboard Keypad 1 NKEY_KP_1 Keyboard Keypad 2 NKEY_KP_2 Keyboard Keypad 3 NKEY_KP_2 Keyboard Keypad 4 NKEY_KP_4 Keyboard Keypad 5 NKEY_KP_5 Keyboard Keypad 6 NKEY_KP_6 Keyboard Keypad 7 NKEY_KP_7 Keyboard Keypad 8 NKEY_KP_8 Keyboard Keypad 9 NKEY_KP_9 Keyboard Keypad Period . NKEY_KP_DOT Keyboard Keypad Divide / NKEY_KP_SLASH Keyboard Keypad Multiply * NKEY_KP_ASTERISK Keyboard Keypad Minus - NKEY_KP_MINUS Keyboard Keypad Plus + NKEY_KP_PLUS Keyboard Keypad Enter NKEY_RETURN Keyboard Keypad Equals = NKEY_KP_EQUAL Keyboard Up NKEY_UP Keyboard Down NKEY_DOWN Keyboard Right NKEY_RIGHT Keyboard Left NKEY_LEFT Keyboard Insert NKEY_INS Keyboard Home NKEY_HOMECLR Keyboard End NKEY_HELP Keyboard Page Up NKEY_ROLLUP Keyboard Page Down NKEY_ROLLDOWN Keyboard F1 NKEY_F1 Keyboard F2 NKEY_F2 Keyboard F3 NKEY_F3 Keyboard F4 NKEY_F4 Keyboard F5 NKEY_F5 Keyboard F6 NKEY_F6 Keyboard F7 NKEY_F7 Keyboard F8 NKEY_F8 Keyboard F9 NKEY_F9 Keyboard F10 NKEY_F10 Keyboard F11 Mouse capture (hidden/show toggle) Keyboard F12 NP2 menu key Keyboard Caps Lock NKEY_CAPS Keyboard Right Shift NKEY_SHIFT Keyboard Left Shift NKEY_SHIFT Keyboard Right Control NKEY_CTRL Keyboard Left Control NKEY_CTRL Keyboard Right Alt NKEY_KANA Keyboard Left Alt NKEY_KANA Keyboard Print NKEY_COPY Supported combinations If you use 104 western keyboard, to input underscore(_), press Shift+right Ctrl. Mouse \u00b6 RetroMouse Inputs NP2 Mouse Inputs Mouse Cursor Mouse Cursor Mouse 1 Mouse Left Button Mouse 2 Mouse Right Button Mouse 3 NP2 menu key Compatibility \u00b6 Awaiting description. External Links \u00b6 Official Neko Project II Kai Website Original Neko Project II Website Libretro Neko Project II Kai Core info file Libretro Neko Project II Kai Repository Report Libretro Neko Project II Kai Core Issues Here","title":"NEC - PC-98 (Neko Project II Kai)"},{"location":"library/neko_project_ii_kai/#nec-pc-98-neko-project-ii-kai","text":"","title":"NEC - PC-98 (Neko Project II Kai)"},{"location":"library/neko_project_ii_kai/#background","text":"Awaiting description.","title":"Background"},{"location":"library/neko_project_ii_kai/#authorlicense","text":"The Neko Project II Kai core has been authored by Neko Project II Team Tomohiro Yoshidomi The Neko Project II Kai core is licensed under MIT A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/neko_project_ii_kai/#extensions","text":"Content that can be loaded by the Neko Project II Kai core have the following file extensions: .d98 .zip .98d .fdi .fdd .2hd .tfd .d88 .88d .hdm .xdf .dup .cmd .hdi .thd .nhd .hdd .hdn","title":"Extensions"},{"location":"library/neko_project_ii_kai/#bios","text":"Required or optional firmware files go in the frontend's system directory. Attention These firmware files need to be in a directory named 'np2kai' in the frontend's system directory. Filename Description md5sum np2kai/font.bmp Needed to display text - Required np2kai/FONT.ROM Alt font file - Required np2kai/bios.rom - Required np2kai/itf.rom - Required np2kai/sound.rom - Required np2kai/bios9821.rom - Optional np2kai/d8000.rom - Optional np2kai/2608_BD.WAV YM2608 RYTHM sample - Optional np2kai/2608_SD.WAV YM2608 RYTHM sample - Optional np2kai/2608_TOP.WAV YM2608 RYTHM sample - Optional np2kai/2608_HH.WAV YM2608 RYTHM sample - Optional np2kai/2608_TOM.WAV YM2608 RYTHM sample - Optional np2kai/2608_RIM.WAV YM2608 RYTHM sample - Optional","title":"BIOS"},{"location":"library/neko_project_ii_kai/#features","text":"Frontend-level settings or features that the Neko Project II Kai core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2715 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2714 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/neko_project_ii_kai/#directories","text":"The Neko Project II Kai core's directory name is 'Neko Project II kai' The Neko Project II Kai core saves/loads to/from these directories. - Frontend's Home directory","title":"Directories"},{"location":"library/neko_project_ii_kai/#bmp","text":"Frontend's State directory 'content-name'.state# (State) Frontend's System directory np2/np2.cfg (Neko Project II Config file)","title":".bmp (???)"},{"location":"library/neko_project_ii_kai/#geometry-and-timing","text":"The Neko Project II Kai core's core provided FPS is 56.4 The Neko Project II Kai core's core provided sample rate is 44100 Hz The Neko Project II Kai core's core provided aspect ratio is 8/5","title":"Geometry and timing"},{"location":"library/neko_project_ii_kai/#usage","text":"NP2 menu can FDD/HDD swap. Mouse is cuptured (hidden/show toggle) by F11 key. NP2 menu is opened when F12 key Keep 'end' key down when booting for machine options. How to set GDC 2.5MHz/5MHz? Press End key(assigned Help key) + reset Select '\u30c7\u30a3\u30c3\u30d7\u30b9\u30a4\u30c3\u30c1\uff12'(DIP switch 2) How to use CD drive with MS-DOS 6.2? Write follow to CONFIG.SYS. LASTDRIVE=Z DEVICE=A:\uffe5DOS\uffe5NECCDD.SYS /D:CD_101 And write follow to AUTOEXEC.BAT. A:\uffe5DOS\uffe5MSCDEX.EXE /D:CD_101 /L:Q Then, you'll can use CD drive as Q drive.","title":"Usage"},{"location":"library/neko_project_ii_kai/#core-options","text":"The Neko Project II Kai core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. PC Model (Restart) [np2kai_model] ( PC-9801VX /PC-286/PC-9801VM) Awaiting description. CPU Base Clock (Restart) [np2kai_clk_base] ( 2.4576 MHz /1.9968 MHz) Awaiting description. CPU Clock Multiplier (Restart) [np2kai_clk_mult] ( 4 /\u215a/8/10/12/16/20/24/30/36/40/42/\u00bd) Awaiting description. RAM Size (Restart)* [np2kai_ExMemory] (**3 /7/11/13/16/32/64/120/230/1) Awaiting description. GDC [np2kai_gdc] ( uPD7220 /uPD72020) Awaiting description. Skipline Revisions [np2kai_skipline] ( Full 255 lines /ON/OFF) Awaiting description. Real Palettes [np2kai_realpal] ( OFF /ON) Awaiting description. LCD [np2kai_lcd ] ( OFF /ON) Awaiting description. Sound Board (Restart) [np2kai_SNDboard] ( PC9801-86 /PC9801-26K + 86/PC9801-86 + Chibi-oto/PC9801-118/PC9801-86 + Mate-X PCM(B460)/Mate-X PCM(B460)/Chibi-oto/Speak Board/Spark Board/Sound Orchestra/Sound Orchestra-V/Sound Blaster 16/AMD-98/Otomi-chanx2/Otomi-chanx2 + 86/None/PC9801-14/PC9801-26K) 26K: for old games. 86: for newer games. JastSound [np2kai_jast_snd] ( OFF /ON) Awaiting description. Sound Generator [np2kai_usefmgen] ( fmgen /Default) Awaiting description. Volume FM [np2kai_volume_F] (0 to 128 in increments of 4. 64 is default .) Awaiting description. Volume SSG [np2kai_volume_S] (0 to 128 in increments of 4. 64 is default .) Awaiting description. Volume ADPCM [np2kai_volume_A] (0 to 128 in increments of 4. 64 is default .) Awaiting description. Volume PCM [np2kai_volume_P] (0 to 128 in increments of 4. 64 is default .) Awaiting description. Volume RHYTHM [np2kai_volume_R] (0 to 128 in increments of 4. 64 is default .) Awaiting description. Volume CD-DA [np2kai_volume_C] (0 to 255 in increments of 8. 128 is default .) Awaiting description. Floppy Seek Sound [np2kai_Seek_Snd] ( OFF /ON) Awaiting description. Volume Floppy Seek [np2kai_Seek_Vol] (0 to 128 in increments of 4. 80 is default .) Awaiting description. Volume Beep [np2kai_BEEP_vol] ( 3 /0/\u00bd) Awaiting description. Joypad to Mouse Mapping [np2kai_joy2mouse] ( OFF /ON) Awaiting description. Joypad to Keyboard Mapping [np2kai_joy2key] ( OFF /Arrows/Keypad) Awaiting description.","title":"Core options"},{"location":"library/neko_project_ii_kai/#controllers","text":"The Neko Project II Kai core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/neko_project_ii_kai/#user-1-device-types","text":"None - Doesn't disable input. RetroPad - Joypad RetroPad w/Analog - Joypad - There's no reason to switch to this.","title":"User 1 device types"},{"location":"library/neko_project_ii_kai/#controller-tables","text":"","title":"Controller tables"},{"location":"library/neko_project_ii_kai/#joypad","text":"Attention The Joy2Key and Joy2Mouse modes can be activated with the 'Joypad to Mouse Mapping' and 'Joypad to Keyboard Mapping' core options. RetroPad Inputs Joy2Key (Arrows) Joy2Key (Keypad) Joy2Mouse Z key Z key Mouse left button Left control key Left control key Escape key Escape key Return key Return key Up arrow key Keypad Up arrow key (8) Move mouse up Down arrow key Keypad down arrow key (2) Move mouse down Left arrow key Keypad left arrow key (4) Move mouse left Right arrow key Keypad right arrow key (6) Move mouse right X key X key Mouse right button Space key Space key Backspace key Backspace key Increase mouse speed Right shift key Right shift key NP2 menu key NP2 menu key NP2 menu key","title":"Joypad"},{"location":"library/neko_project_ii_kai/#keyboard","text":"RetroKeyboard Inputs NP2 Keyboard Inputs Keyboard Backspace NKEY_BACKSPACE Keyboard Tab NKEY_TAB Keyboard Return NKEY_RETURN Keyboard Pause NKEY_STOP Keyboard Escape NKEY_ESC Keyboard Space NKEY_SPACE Keyboard Quote ' NKEY_COLON Keyboard Comma , NKEY_COMMA Keyboard Minus - NKEY_MINUS Keyboard Period . NKEY_DOT Keyboard Slash / NKEY_SLASH Keyboard 0 NKEY_0 Keyboard 1 NKEY_1 Keyboard 2 NKEY_2 Keyboard 3 NKEY_3 Keyboard 4 NKEY_4 Keyboard 5 NKEY_5 Keyboard 6 NKEY_6 Keyboard 7 NKEY_7 Keyboard 8 NKEY_8 Keyboard 9 NKEY_9 Keyboard Colon : NKEY_COLON Keyboard Semicolon ; NKEY_SEMICOLON Keyboard Equals = NKEY_CIRCUMFLEX Keyboard At @ NKEY_ATMARK Keyboard Left Bracket [ NKEY_LEFTSBRACKET Keyboard Backslash \\ NKEY_YEN Keyboard Right Bracket ] NKEY_RIGHTSBRACKET Keyboard Caret ^ NKEY_CIRCUMFLEX Keyboard Underscore _ NKEY_UNDERSCORE Keyboard Backquote ` NKEY_ATMARK Keyboard a NKEY_A Keyboard b NKEY_B Keyboard c NKEY_C Keyboard d NKEY_D Keyboard e NKEY_E Keyboard f NKEY_F Keyboard g NKEY_G Keyboard h NKEY_H Keyboard i NKEY_I Keyboard j NKEY_J Keyboard k NKEY_K Keyboard l NKEY_L Keyboard m NKEY_M Keyboard n NKEY_N Keyboard o NKEY_O Keyboard p NKEY_P Keyboard q NKEY_Q Keyboard r NKEY_R Keyboard s NKEY_S Keyboard t NKEY_T Keyboard u NKEY_U Keyboard v NKEY_V Keyboard w NKEY_W Keyboard x NKEY_X Keyboard y NKEY_Q Keyboard z NKEY_Z Keyboard Delete NKEY_DEL Keyboard Keypad 0 NKEY_KP_0 Keyboard Keypad 1 NKEY_KP_1 Keyboard Keypad 2 NKEY_KP_2 Keyboard Keypad 3 NKEY_KP_2 Keyboard Keypad 4 NKEY_KP_4 Keyboard Keypad 5 NKEY_KP_5 Keyboard Keypad 6 NKEY_KP_6 Keyboard Keypad 7 NKEY_KP_7 Keyboard Keypad 8 NKEY_KP_8 Keyboard Keypad 9 NKEY_KP_9 Keyboard Keypad Period . NKEY_KP_DOT Keyboard Keypad Divide / NKEY_KP_SLASH Keyboard Keypad Multiply * NKEY_KP_ASTERISK Keyboard Keypad Minus - NKEY_KP_MINUS Keyboard Keypad Plus + NKEY_KP_PLUS Keyboard Keypad Enter NKEY_RETURN Keyboard Keypad Equals = NKEY_KP_EQUAL Keyboard Up NKEY_UP Keyboard Down NKEY_DOWN Keyboard Right NKEY_RIGHT Keyboard Left NKEY_LEFT Keyboard Insert NKEY_INS Keyboard Home NKEY_HOMECLR Keyboard End NKEY_HELP Keyboard Page Up NKEY_ROLLUP Keyboard Page Down NKEY_ROLLDOWN Keyboard F1 NKEY_F1 Keyboard F2 NKEY_F2 Keyboard F3 NKEY_F3 Keyboard F4 NKEY_F4 Keyboard F5 NKEY_F5 Keyboard F6 NKEY_F6 Keyboard F7 NKEY_F7 Keyboard F8 NKEY_F8 Keyboard F9 NKEY_F9 Keyboard F10 NKEY_F10 Keyboard F11 Mouse capture (hidden/show toggle) Keyboard F12 NP2 menu key Keyboard Caps Lock NKEY_CAPS Keyboard Right Shift NKEY_SHIFT Keyboard Left Shift NKEY_SHIFT Keyboard Right Control NKEY_CTRL Keyboard Left Control NKEY_CTRL Keyboard Right Alt NKEY_KANA Keyboard Left Alt NKEY_KANA Keyboard Print NKEY_COPY Supported combinations If you use 104 western keyboard, to input underscore(_), press Shift+right Ctrl.","title":"Keyboard"},{"location":"library/neko_project_ii_kai/#mouse","text":"RetroMouse Inputs NP2 Mouse Inputs Mouse Cursor Mouse Cursor Mouse 1 Mouse Left Button Mouse 2 Mouse Right Button Mouse 3 NP2 menu key","title":"Mouse"},{"location":"library/neko_project_ii_kai/#compatibility","text":"Awaiting description.","title":"Compatibility"},{"location":"library/neko_project_ii_kai/#external-links","text":"Official Neko Project II Kai Website Original Neko Project II Website Libretro Neko Project II Kai Core info file Libretro Neko Project II Kai Repository Report Libretro Neko Project II Kai Core Issues Here","title":"External Links"},{"location":"library/nestopia_ue/","text":"Nintendo - NES / Famicom (Nestopia UE) \u00b6 Background \u00b6 Nestopia is a portable and cycle-accurate NES/Famicom emulator written in C++. Nestopia UE (Undead Edition) is a fork of the original source code, with enhancements from members of the emulation community. This includes support for new platforms, and bug fixes in the emulator core. Author/License \u00b6 The Nestopia UE core has been authored by Martin Freij R. Belmont R. Danbrook The Nestopia UE core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the Nestopia UE core have the following file extensions: .nes .fds .unf .unif Databases \u00b6 RetroArch database(s) that are associated with the Nestopia UE core: Nintendo - Nintendo Entertainment System Nintendo - Family Computer Disk System BIOS \u00b6 Required or optional firmware files go in the frontend's system directory. Warning Nestopia UE requires the NstDatabase.xml for general proper emulation. Make sure it's in RetroArch's system directory. Filename Description md5sum NstDatabase.xml Nestopia UE Database file - Required disksys.rom Family Computer Disk System BIOS - Required for Famicom Disk System emulation ca30b50f880eb660a320674ed365ef7a Features \u00b6 Frontend-level settings or features that the Nestopia UE core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The Nestopia UE core's internal core name is 'Nestopia' The Nestopia UE core saves/loads to/from these directories. Frontend's Save directory 'content-name'.srm (Cartridge battery save) Frontend's State directory 'content-name'.state# (State) Frontend's System directory custom.pal (Custom palette file) Geometry and timing \u00b6 The Nestopia UE core's core provided FPS is (FPS) The Nestopia UE core's core provided sample rate is 44100 Hz The Nestopia UE core's core provided aspect ratio is dependent on the 'Preferred aspect ratio' core option . NstDatabase.xml \u00b6 It is HIGHLY RECOMMENDED you have NstDatabase.xml in RetroArch's system directory, you can get it from https://github.com/0ldsk00l/nestopia The Nestopia UE core relies on the NstDatabase.xml database file for Games that support a custom mapper Games that support multitap accessories Games that support the Zapper ROM Hacks Famicom Disk System games General proper emulation of games Many games will have issues if NstDatabase.xml is not present in RetroArch's system directory. Custom color palettes \u00b6 To use custom color palettes in the Nestopia UE core, the custom color palette file you want to use must be in RetroArch's system directory. Make sure the custom palette file is named 'custom.pal' Also, the 'Palette' core option must be set to custom. Custom color palettes for the NES can be generated with either of these tools. Bisqwit's NTSC NES palette generator Drag's NTSC NES palette generator Core options \u00b6 The Nestopia UE core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Blargg NTSC filter [nestopia_blargg_ntsc_filter] ( disabled |composite|svideo|rgb|monochrome) Enable Blargg NTSC filters. Disclaimer These 'Blargg NTSC filter' core option screenshots have been taken with the 'Palette' core option set to cxa2025as. Blargg NTSC filter - Off Blargg NTSC filter - composite Blargg NTSC filter - svideo Blargg NTSC filter - rgb Blargg NTSC filter - monochrome Palette [nestopia_palette] ( cxa2025as |consumer|canonical|alternative|rgb|pal|composite-direct-fbx|pvm-style-d93-fbx|ntsc-hardware-fbx|nes-classic-fbx-fs|raw|custom) Choose which color palette is going to be used. Disclaimer These 'Palette' core option screenshots have been taken with the 'Blargg NTSC filter' core option set to Off. Palette - cxa2025as Palette - consumer Palette - canonical Palette - alternative Palette - rgb Palette - pal Palette - composite-direct-fbx Palette - pvm-style-d93-fbx Palette - ntsc-hardware-fbx Palette - nes-classic-fbx-fs Palette - raw Remove 8-sprites-per-scanline hardware limit [nestopia_nospritelimit] ( disabled |enabled) Self-explanatory. CPU Speed (Overclock) [nestopia_overclock] ( 1x |2x) Overclock the emulated CPU. 4 Player Adapter [nestopia_select_adapter] ( auto |ntsc|famicom) Manually select a 4 Player Adapter if needed. Some games will not recognize the adapter correctly through the NstDatabase.xml database, this option should help fix that. Automatically insert first FDS disk on reset [nestopia_fds_auto_insert] ( enabled |disabled) Self-explanatory. Mask Overscan (Vertical) [nestopia_overscan_v] ( enabled |disabled) Mask out (vertically) the potentially random glitchy video output that would have been hidden by the bezel around the edge of a standard-definition television screen. Mask Overscan (Vertical) - On Mask Overscan (Vertical) - Off Mask Overscan (Horizontal) [nestopia_overscan_h] ( disabled |enabled) Mask out (horizontally) the potentially random glitchy video output that would have been hidden by the bezel around the edge of a standard-definition television screen. Mask Overscan (Horizontal) - Off Mask Overscan (Horizontal) - On Preferred aspect ratio [nestopia_aspect] ( auto |ntsc|pal|4:3) Choose the preferred aspect ratio. RetroArch's aspect ratio must be set to Core provided in the Video seetings. 'auto' will use the NstDatabase.xml database file for aspect ratio autodetection. If there is no database present it will default to NTSC for 'auto'. Preferred aspect ratio - ntsc Preferred aspect ratio - pal Preferred aspect ratio - 4:3 Game Genie Sound Distortion [nestopia_genie_distortion] ( disabled |enabled) The Game Genie cheat device could inadvertently introduce sound distortion in games. By enabling this, you can simulate the distortion it would add to a game's sound. Favored System [nestopia_favored_system] ( auto |ntsc|pal|famicom|dendy) Choose which region the system is from. 'auto' will use the NstDatabase.xml database file for region autodetection. If there is no database present it will default to NTSC for 'auto'. RAM Power-on State [nestopia_ram_power_state] ( 0x00 |0xFF|random) Awaiting description. Turbo Pulse Speed [nestopia_turbo_pulse] ( 2 |3|4|5|6|7|8|9) Set the turbo pulse speed for the Turbo B and Turbo A buttons. Controllers \u00b6 The Nestopia UE core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 - 4 device types \u00b6 None - Doesn't disable input. There's no reason to switch to this. RetroPad - Joypad - Stay on this. RetroPad w/Analog - Joypad - Same as RetroPad. There's no reason to switch to this. Other controllers \u00b6 Zapper - Lightgun - The Nestopia UE core can emulate Zapper inputs but this is done automatically based off of the NstDatabase.xml Database file and cannot be manually selected a device type. Multitap support \u00b6 The Nestopia UE core uses the NstDatabase.xml database file to detect which games have multitap support. Controller tables \u00b6 Joypad \u00b6 User 1 Remap descriptors RetroPad Inputs B Turbo B Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A Turbo A (FDS) Disk Side Change (FDS) Eject Disk (VSSystem) Coin 1 (VSSystem) Coin 2 (Famicom) Microphone User 2 - 4 Remap descriptors RetroPad Inputs B Turbo B Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A Turbo A (FDS) Disk Side Change (FDS) Eject Disk Lightgun \u00b6 RetroLightgun Inputs Zapper Gun Crosshair Zapper Crosshair Gun Trigger Zapper Trigger Gun Aux B Zapper Light On Compatibility \u00b6 Game Issue Skull & Crossbones Graphical glitches and screen shaking when in 2-player mode. (1) (1) External Links \u00b6 Official Nestopia UE Website Official Nestopia UE Github Repository Libretro Nestopia UE Core info file Libretro Nestopia UE Github Repository Report Libretro Nestopia UE Core Issues Here See also \u00b6 Nintendo - Family Computer Disk System \u00b6 Nintendo - NES / Famicom (FCEUmm) Nintendo - NES / Famicom (Mesen) Nintendo - Nintendo Entertainment System \u00b6 Nintendo - NES / Famicom (bnes) Nintendo - NES / Famicom (Emux NES) Nintendo - NES / Famicom (FCEUmm) Nintendo - NES / Famicom (Mesen) Nintendo - NES / Famicom (QuickNES)","title":"Nintendo - NES / Famicom (Nestopia UE)"},{"location":"library/nestopia_ue/#nintendo-nes-famicom-nestopia-ue","text":"","title":"Nintendo - NES / Famicom (Nestopia UE)"},{"location":"library/nestopia_ue/#background","text":"Nestopia is a portable and cycle-accurate NES/Famicom emulator written in C++. Nestopia UE (Undead Edition) is a fork of the original source code, with enhancements from members of the emulation community. This includes support for new platforms, and bug fixes in the emulator core.","title":"Background"},{"location":"library/nestopia_ue/#authorlicense","text":"The Nestopia UE core has been authored by Martin Freij R. Belmont R. Danbrook The Nestopia UE core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/nestopia_ue/#extensions","text":"Content that can be loaded by the Nestopia UE core have the following file extensions: .nes .fds .unf .unif","title":"Extensions"},{"location":"library/nestopia_ue/#databases","text":"RetroArch database(s) that are associated with the Nestopia UE core: Nintendo - Nintendo Entertainment System Nintendo - Family Computer Disk System","title":"Databases"},{"location":"library/nestopia_ue/#bios","text":"Required or optional firmware files go in the frontend's system directory. Warning Nestopia UE requires the NstDatabase.xml for general proper emulation. Make sure it's in RetroArch's system directory. Filename Description md5sum NstDatabase.xml Nestopia UE Database file - Required disksys.rom Family Computer Disk System BIOS - Required for Famicom Disk System emulation ca30b50f880eb660a320674ed365ef7a","title":"BIOS"},{"location":"library/nestopia_ue/#features","text":"Frontend-level settings or features that the Nestopia UE core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/nestopia_ue/#directories","text":"The Nestopia UE core's internal core name is 'Nestopia' The Nestopia UE core saves/loads to/from these directories. Frontend's Save directory 'content-name'.srm (Cartridge battery save) Frontend's State directory 'content-name'.state# (State) Frontend's System directory custom.pal (Custom palette file)","title":"Directories"},{"location":"library/nestopia_ue/#geometry-and-timing","text":"The Nestopia UE core's core provided FPS is (FPS) The Nestopia UE core's core provided sample rate is 44100 Hz The Nestopia UE core's core provided aspect ratio is dependent on the 'Preferred aspect ratio' core option .","title":"Geometry and timing"},{"location":"library/nestopia_ue/#nstdatabasexml","text":"It is HIGHLY RECOMMENDED you have NstDatabase.xml in RetroArch's system directory, you can get it from https://github.com/0ldsk00l/nestopia The Nestopia UE core relies on the NstDatabase.xml database file for Games that support a custom mapper Games that support multitap accessories Games that support the Zapper ROM Hacks Famicom Disk System games General proper emulation of games Many games will have issues if NstDatabase.xml is not present in RetroArch's system directory.","title":"NstDatabase.xml"},{"location":"library/nestopia_ue/#custom-color-palettes","text":"To use custom color palettes in the Nestopia UE core, the custom color palette file you want to use must be in RetroArch's system directory. Make sure the custom palette file is named 'custom.pal' Also, the 'Palette' core option must be set to custom. Custom color palettes for the NES can be generated with either of these tools. Bisqwit's NTSC NES palette generator Drag's NTSC NES palette generator","title":"Custom color palettes"},{"location":"library/nestopia_ue/#core-options","text":"The Nestopia UE core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Blargg NTSC filter [nestopia_blargg_ntsc_filter] ( disabled |composite|svideo|rgb|monochrome) Enable Blargg NTSC filters. Disclaimer These 'Blargg NTSC filter' core option screenshots have been taken with the 'Palette' core option set to cxa2025as. Blargg NTSC filter - Off Blargg NTSC filter - composite Blargg NTSC filter - svideo Blargg NTSC filter - rgb Blargg NTSC filter - monochrome Palette [nestopia_palette] ( cxa2025as |consumer|canonical|alternative|rgb|pal|composite-direct-fbx|pvm-style-d93-fbx|ntsc-hardware-fbx|nes-classic-fbx-fs|raw|custom) Choose which color palette is going to be used. Disclaimer These 'Palette' core option screenshots have been taken with the 'Blargg NTSC filter' core option set to Off. Palette - cxa2025as Palette - consumer Palette - canonical Palette - alternative Palette - rgb Palette - pal Palette - composite-direct-fbx Palette - pvm-style-d93-fbx Palette - ntsc-hardware-fbx Palette - nes-classic-fbx-fs Palette - raw Remove 8-sprites-per-scanline hardware limit [nestopia_nospritelimit] ( disabled |enabled) Self-explanatory. CPU Speed (Overclock) [nestopia_overclock] ( 1x |2x) Overclock the emulated CPU. 4 Player Adapter [nestopia_select_adapter] ( auto |ntsc|famicom) Manually select a 4 Player Adapter if needed. Some games will not recognize the adapter correctly through the NstDatabase.xml database, this option should help fix that. Automatically insert first FDS disk on reset [nestopia_fds_auto_insert] ( enabled |disabled) Self-explanatory. Mask Overscan (Vertical) [nestopia_overscan_v] ( enabled |disabled) Mask out (vertically) the potentially random glitchy video output that would have been hidden by the bezel around the edge of a standard-definition television screen. Mask Overscan (Vertical) - On Mask Overscan (Vertical) - Off Mask Overscan (Horizontal) [nestopia_overscan_h] ( disabled |enabled) Mask out (horizontally) the potentially random glitchy video output that would have been hidden by the bezel around the edge of a standard-definition television screen. Mask Overscan (Horizontal) - Off Mask Overscan (Horizontal) - On Preferred aspect ratio [nestopia_aspect] ( auto |ntsc|pal|4:3) Choose the preferred aspect ratio. RetroArch's aspect ratio must be set to Core provided in the Video seetings. 'auto' will use the NstDatabase.xml database file for aspect ratio autodetection. If there is no database present it will default to NTSC for 'auto'. Preferred aspect ratio - ntsc Preferred aspect ratio - pal Preferred aspect ratio - 4:3 Game Genie Sound Distortion [nestopia_genie_distortion] ( disabled |enabled) The Game Genie cheat device could inadvertently introduce sound distortion in games. By enabling this, you can simulate the distortion it would add to a game's sound. Favored System [nestopia_favored_system] ( auto |ntsc|pal|famicom|dendy) Choose which region the system is from. 'auto' will use the NstDatabase.xml database file for region autodetection. If there is no database present it will default to NTSC for 'auto'. RAM Power-on State [nestopia_ram_power_state] ( 0x00 |0xFF|random) Awaiting description. Turbo Pulse Speed [nestopia_turbo_pulse] ( 2 |3|4|5|6|7|8|9) Set the turbo pulse speed for the Turbo B and Turbo A buttons.","title":"Core options"},{"location":"library/nestopia_ue/#controllers","text":"The Nestopia UE core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/nestopia_ue/#user-1-4-device-types","text":"None - Doesn't disable input. There's no reason to switch to this. RetroPad - Joypad - Stay on this. RetroPad w/Analog - Joypad - Same as RetroPad. There's no reason to switch to this.","title":"User 1 - 4 device types"},{"location":"library/nestopia_ue/#other-controllers","text":"Zapper - Lightgun - The Nestopia UE core can emulate Zapper inputs but this is done automatically based off of the NstDatabase.xml Database file and cannot be manually selected a device type.","title":"Other controllers"},{"location":"library/nestopia_ue/#multitap-support","text":"The Nestopia UE core uses the NstDatabase.xml database file to detect which games have multitap support.","title":"Multitap support"},{"location":"library/nestopia_ue/#controller-tables","text":"","title":"Controller tables"},{"location":"library/nestopia_ue/#joypad","text":"User 1 Remap descriptors RetroPad Inputs B Turbo B Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A Turbo A (FDS) Disk Side Change (FDS) Eject Disk (VSSystem) Coin 1 (VSSystem) Coin 2 (Famicom) Microphone User 2 - 4 Remap descriptors RetroPad Inputs B Turbo B Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A Turbo A (FDS) Disk Side Change (FDS) Eject Disk","title":"Joypad"},{"location":"library/nestopia_ue/#lightgun","text":"RetroLightgun Inputs Zapper Gun Crosshair Zapper Crosshair Gun Trigger Zapper Trigger Gun Aux B Zapper Light On","title":"Lightgun"},{"location":"library/nestopia_ue/#compatibility","text":"Game Issue Skull & Crossbones Graphical glitches and screen shaking when in 2-player mode. (1) (1)","title":"Compatibility"},{"location":"library/nestopia_ue/#external-links","text":"Official Nestopia UE Website Official Nestopia UE Github Repository Libretro Nestopia UE Core info file Libretro Nestopia UE Github Repository Report Libretro Nestopia UE Core Issues Here","title":"External Links"},{"location":"library/nestopia_ue/#see-also","text":"","title":"See also"},{"location":"library/nestopia_ue/#nintendo-family-computer-disk-system","text":"Nintendo - NES / Famicom (FCEUmm) Nintendo - NES / Famicom (Mesen)","title":"Nintendo - Family Computer Disk System"},{"location":"library/nestopia_ue/#nintendo-nintendo-entertainment-system","text":"Nintendo - NES / Famicom (bnes) Nintendo - NES / Famicom (Emux NES) Nintendo - NES / Famicom (FCEUmm) Nintendo - NES / Famicom (Mesen) Nintendo - NES / Famicom (QuickNES)","title":"Nintendo - Nintendo Entertainment System"},{"location":"library/nside_balanced/","text":"Nintendo - SNES / Famicom (nSide Balanced) \u00b6 Background \u00b6 A fork of higan v106 that reimplements the Balanced profile. Author/License \u00b6 The nSide Balanced core has been authored by hex-usr The nSide Balanced core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the nSide Balanced core have the following file extensions: .sfc .smc .gb .gbc .bml .rom Databases \u00b6 RetroArch database(s) that are associated with the nSide Balanced core: Nintendo - Super Nintendo Entertainment System Nintendo - Super Nintendo Entertainment System Hacks Nintendo - Game Boy Nintendo - Game Boy Color BIOS \u00b6 Required or optional firmware files go in the frontend's system directory. Attention nSide Balanced uses split ROMS for special chip games. Attention Firmware files for SGB emulation need to be in directories called SGB1.sfc and SGB2.sfc in RetroArch's system directory. Look at the Super GameBoy support section for more information. Notable DSP1.mdDSP1B Games: Super Mario Kart Pilotwings Notable DSP2 Games: Dungeon Master Notable DSP3 Games: SD Gundam GX Notable DSP4 Games: Top Gear 3000 Notable Cx4 Games: Mega Man X2 Mega Man X3 Filename Description md5sum dsp1.data.rom DSP1 co-processor firmware - Optional 3d81b45fa0c2aa8b852dfb1ece7c0971 dsp1.program.rom DSP1 co-processor firmware - Optional ae209fbe789fbf11a48aea5ab1197321 dsp1b.data.rom DSP1B co-processor firmware - Optional 1e3f568634a7d8284020dddc0ae905bc dsp1b.program.rom DSP1B co-processor firmware - Optional d10f446888e097cbf500f3f663cf4f6d dsp2.data.rom DSP2 co-processor firmware - Optional e9417e29223b139c3c4b635a2a3b8744 dsp2.program.rom DSP2 co-processor firmware - Optional aa6e5922a3ed5ded54f24247c11143c5 dsp3.data.rom DSP3 co-processor firmware - Optional 0a81210c0a940b997dd9843281008ee6 dsp3.program.rom DSP3 co-processor firmware - Optional d99ca4562818d49cee1f242705bba6f8 dsp4.data.rom DSP4 co-processor firmware - Optional ee4990879eb68e3cbca239c5bc20303d dsp4.program.rom DSP4 co-processor firmware - Optional a151023b948b90ffc23a5b594bb6fef2 cx4.data.rom CX4 co-processor firmware - Optional 037ac4296b6b6a5c47c440188d3c72e3 st010.data.rom ST010 co-processor firmware - Optional 254d70762b6f59f99c27c395aba7d07d st010.program.rom ST010 co-processor firmware - Optional 1d70019179a59a566a0bb5d3f2845544 st011.data.rom ST011 co-processor firmware - Optional 10bd3f4aa949737ab9836512c35bcc29 st011.program.rom ST011 co-processor firmware - Optional 95222ebf1c0c2990bcf25db43743f032 st018.data.rom ST018 co-processor firmware - Optional 49c898b60d0f15e90d0ba780dd12f366 st018.program.rom ST018 co-processor firmware - Optional dda40ccd57390c96e49d30a041f9a9e7 SGB1.sfc/sgb1.boot.rom Super Game Boy BIOS - Optional SGB1.sfc/program.rom Super Game Boy ROM - Optional SGB2.sfc/sgb2.boot.rom Super Game Boy 2 BIOS - Optional SGB2.sfc/program.rom Super Game Boy 2 ROM - Optional Features \u00b6 Frontend-level settings or features that the nSide Balanced core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse - Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The nSide Balanced core's internal core name is 'higan (Super Famicom Balanced)' The nSide Balanced core saves/loads to/from these directories. Frontend's Save directory 'content-name'.srm (Cartridge battery save) Frontend's State directory 'content-name'.state# (State) Geometry and timing \u00b6 The nSide Balanced core's core provided FPS is (FPS) The nSide Balanced core's core provided sample rate is (Rate) The nSide Balanced core's core provided aspect ratio is (Ratio) Super Gameboy Support \u00b6 The nSide Balanced core uses a simplified Super Game Boy routine that makes it much easier to access this feature than with the old v094-based cores. Instead of using the complex, CLI-based 'subsystem' launch commands, it looks for the necessary files in the system/BIOS directory whenever you feed the core a *.gb/c file. To get it working, you'll need one or more Super Game Boy ROMs and the sgb.boot.rom BIOS. Step 1 Make 2 subdirectories in RetroArch's system directory, one named SGB1.sfc and the other named SGB2.sfc. Step 2 Copy your original Super Game Boy ROM into the SGB1.sfc directory and then rename it to program.rom. Copy your Super Game Boy 2 ROM into the SGB2.sfc directory and then rename it program.rom, as well. Step 3 Copy your sgb.boot.rom BIOS into each of your SGB1.sfc and SGB2.sfc directories, and rename them to sgb1.boot.rom and sgb2.boot.rom, respectively. The 'Preferred Super GameBoy BIOS' core option lets you choose which of the two SGB BIOSes to use. Step 4 Load a SGB-supported GB.mdGBC rom. Done Warning There may be graphical glitches when Rewind is set to On in RetroArch's settings. MSU-1 \u00b6 Attention MSU-1 support in this core is complex. Use the Snes9x core for simplified and easily accessible MSU-1 support. MSU-1 support can be used by loading a correct .bml file. There's documentation for loading MSU-1 games in standalone higan here . Core options \u00b6 The nSide Balanced core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Internal resolution [higan_sfc_internal_resolution] ( 512x480 |512x448|512x240|512x224|256x240|256x224) Self-explanatory. 512x480 512x448 512x240 512x224 256x240 256x224 Color emulation [higan_sfc_color_emulation] ( OFF |ON) Simulates the way a console\u2019s display device differs from modern computer monitor\u2019s colour reproduction. In particular, it simulates the slightly-different gamma correction used by the Super Famicom. Color emulation - Disabled Color emulation - Enabled Blur emulation [higan_sfc_blur_emulation] ( OFF |ON) Simulates the limited horizontal resolution of standard-definition TVs by blurring together horizontally-adjacent pixels. Games like Jurassic Park for the Super Famicom depend on this to emulate a transparency effect. Blur emulation - Disabled Blur emulation - Enabled Scanline emulation [higan_sfc_scanline_emulation] ( OFF |ON) Currently does not function properly. Preferred Super GameBoy BIOS (restart) [higan_sfc_sgb_bios] ( SGB1.sfc/ |SGB2.sfc/) Choose what Super GameBoy BIOS you want to use. Look at the Super GameBoy Support section for more information. Controllers \u00b6 The nSide Balanced core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 device types \u00b6 None - Input disabled. SNES Joypad - Joypad SNES Mouse - Mouse User 2 device types \u00b6 None - Input disabled. SNES Joypad - Joypad SNES Mouse - Mouse Multitap - Joypad - Allows for up to five players to play together in multitap games. SuperScope - Lightgun - Inputs are not hooked up in this core. Justifier - Lightgun - Inputs are not hooked up in this core. Justifiers - Lightgun - Two Justifiers are plugged in, for two-player Justifier games. Inputs are not hooked up in this core. Multitap support \u00b6 Activating multitap support in compatible games can be configured by switching to the Multitap device type for User 2. Controller tables \u00b6 Joypad \u00b6 User 1 - 5 Remap descriptors RetroPad Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R Mouse \u00b6 RetroMouse Inputs SNES Mouse Mouse Cursor SNES Mouse Cursor Mouse 1 SNES Mouse Left Button Mouse 2 SNES Mouse Right Button Compatibility \u00b6 Game Issue A.S.P. Air Strike Patrol Black lines show up during gameplay. The shadow below the aircraft is missing. Incompatible with ROM hacks made to take advantage of emulator quirks, much like real hardware. External Links \u00b6 Official higan Website Official higan Upstream Downloads Libretro nSide Balanced Core info file Libretro nSide Balanced Github Repository Report Libretro nSide Balanced Core Issues Here See also \u00b6 Nintendo - Game Boy (+ Color) \u00b6 Nintendo - Game Boy / Color (Emux GB) Nintendo - Game Boy / Color (Gambatte) Nintendo - Game Boy / Color (Gearboy) Nintendo - Game Boy / Color (SameBoy) Nintendo - Game Boy / Color (TGB Dual) Nintendo - Game Boy Advance (mGBA) Nintendo - Game Boy Advance (VBA-M) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (Mesen-S) Nintendo - Super Nintendo Entertainment System (+ Hacks) \u00b6 Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (Mesen-S) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2005) Nintendo - SNES / Famicom (Snes9x 2010)","title":"Nintendo - SNES / Famicom (nSide Balanced)"},{"location":"library/nside_balanced/#nintendo-snes-famicom-nside-balanced","text":"","title":"Nintendo - SNES / Famicom (nSide Balanced)"},{"location":"library/nside_balanced/#background","text":"A fork of higan v106 that reimplements the Balanced profile.","title":"Background"},{"location":"library/nside_balanced/#authorlicense","text":"The nSide Balanced core has been authored by hex-usr The nSide Balanced core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/nside_balanced/#extensions","text":"Content that can be loaded by the nSide Balanced core have the following file extensions: .sfc .smc .gb .gbc .bml .rom","title":"Extensions"},{"location":"library/nside_balanced/#databases","text":"RetroArch database(s) that are associated with the nSide Balanced core: Nintendo - Super Nintendo Entertainment System Nintendo - Super Nintendo Entertainment System Hacks Nintendo - Game Boy Nintendo - Game Boy Color","title":"Databases"},{"location":"library/nside_balanced/#bios","text":"Required or optional firmware files go in the frontend's system directory. Attention nSide Balanced uses split ROMS for special chip games. Attention Firmware files for SGB emulation need to be in directories called SGB1.sfc and SGB2.sfc in RetroArch's system directory. Look at the Super GameBoy support section for more information. Notable DSP1.mdDSP1B Games: Super Mario Kart Pilotwings Notable DSP2 Games: Dungeon Master Notable DSP3 Games: SD Gundam GX Notable DSP4 Games: Top Gear 3000 Notable Cx4 Games: Mega Man X2 Mega Man X3 Filename Description md5sum dsp1.data.rom DSP1 co-processor firmware - Optional 3d81b45fa0c2aa8b852dfb1ece7c0971 dsp1.program.rom DSP1 co-processor firmware - Optional ae209fbe789fbf11a48aea5ab1197321 dsp1b.data.rom DSP1B co-processor firmware - Optional 1e3f568634a7d8284020dddc0ae905bc dsp1b.program.rom DSP1B co-processor firmware - Optional d10f446888e097cbf500f3f663cf4f6d dsp2.data.rom DSP2 co-processor firmware - Optional e9417e29223b139c3c4b635a2a3b8744 dsp2.program.rom DSP2 co-processor firmware - Optional aa6e5922a3ed5ded54f24247c11143c5 dsp3.data.rom DSP3 co-processor firmware - Optional 0a81210c0a940b997dd9843281008ee6 dsp3.program.rom DSP3 co-processor firmware - Optional d99ca4562818d49cee1f242705bba6f8 dsp4.data.rom DSP4 co-processor firmware - Optional ee4990879eb68e3cbca239c5bc20303d dsp4.program.rom DSP4 co-processor firmware - Optional a151023b948b90ffc23a5b594bb6fef2 cx4.data.rom CX4 co-processor firmware - Optional 037ac4296b6b6a5c47c440188d3c72e3 st010.data.rom ST010 co-processor firmware - Optional 254d70762b6f59f99c27c395aba7d07d st010.program.rom ST010 co-processor firmware - Optional 1d70019179a59a566a0bb5d3f2845544 st011.data.rom ST011 co-processor firmware - Optional 10bd3f4aa949737ab9836512c35bcc29 st011.program.rom ST011 co-processor firmware - Optional 95222ebf1c0c2990bcf25db43743f032 st018.data.rom ST018 co-processor firmware - Optional 49c898b60d0f15e90d0ba780dd12f366 st018.program.rom ST018 co-processor firmware - Optional dda40ccd57390c96e49d30a041f9a9e7 SGB1.sfc/sgb1.boot.rom Super Game Boy BIOS - Optional SGB1.sfc/program.rom Super Game Boy ROM - Optional SGB2.sfc/sgb2.boot.rom Super Game Boy 2 BIOS - Optional SGB2.sfc/program.rom Super Game Boy 2 ROM - Optional","title":"BIOS"},{"location":"library/nside_balanced/#features","text":"Frontend-level settings or features that the nSide Balanced core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse - Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/nside_balanced/#directories","text":"The nSide Balanced core's internal core name is 'higan (Super Famicom Balanced)' The nSide Balanced core saves/loads to/from these directories. Frontend's Save directory 'content-name'.srm (Cartridge battery save) Frontend's State directory 'content-name'.state# (State)","title":"Directories"},{"location":"library/nside_balanced/#geometry-and-timing","text":"The nSide Balanced core's core provided FPS is (FPS) The nSide Balanced core's core provided sample rate is (Rate) The nSide Balanced core's core provided aspect ratio is (Ratio)","title":"Geometry and timing"},{"location":"library/nside_balanced/#super-gameboy-support","text":"The nSide Balanced core uses a simplified Super Game Boy routine that makes it much easier to access this feature than with the old v094-based cores. Instead of using the complex, CLI-based 'subsystem' launch commands, it looks for the necessary files in the system/BIOS directory whenever you feed the core a *.gb/c file. To get it working, you'll need one or more Super Game Boy ROMs and the sgb.boot.rom BIOS. Step 1 Make 2 subdirectories in RetroArch's system directory, one named SGB1.sfc and the other named SGB2.sfc. Step 2 Copy your original Super Game Boy ROM into the SGB1.sfc directory and then rename it to program.rom. Copy your Super Game Boy 2 ROM into the SGB2.sfc directory and then rename it program.rom, as well. Step 3 Copy your sgb.boot.rom BIOS into each of your SGB1.sfc and SGB2.sfc directories, and rename them to sgb1.boot.rom and sgb2.boot.rom, respectively. The 'Preferred Super GameBoy BIOS' core option lets you choose which of the two SGB BIOSes to use. Step 4 Load a SGB-supported GB.mdGBC rom. Done Warning There may be graphical glitches when Rewind is set to On in RetroArch's settings.","title":"Super Gameboy Support"},{"location":"library/nside_balanced/#msu-1","text":"Attention MSU-1 support in this core is complex. Use the Snes9x core for simplified and easily accessible MSU-1 support. MSU-1 support can be used by loading a correct .bml file. There's documentation for loading MSU-1 games in standalone higan here .","title":"MSU-1"},{"location":"library/nside_balanced/#core-options","text":"The nSide Balanced core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Internal resolution [higan_sfc_internal_resolution] ( 512x480 |512x448|512x240|512x224|256x240|256x224) Self-explanatory. 512x480 512x448 512x240 512x224 256x240 256x224 Color emulation [higan_sfc_color_emulation] ( OFF |ON) Simulates the way a console\u2019s display device differs from modern computer monitor\u2019s colour reproduction. In particular, it simulates the slightly-different gamma correction used by the Super Famicom. Color emulation - Disabled Color emulation - Enabled Blur emulation [higan_sfc_blur_emulation] ( OFF |ON) Simulates the limited horizontal resolution of standard-definition TVs by blurring together horizontally-adjacent pixels. Games like Jurassic Park for the Super Famicom depend on this to emulate a transparency effect. Blur emulation - Disabled Blur emulation - Enabled Scanline emulation [higan_sfc_scanline_emulation] ( OFF |ON) Currently does not function properly. Preferred Super GameBoy BIOS (restart) [higan_sfc_sgb_bios] ( SGB1.sfc/ |SGB2.sfc/) Choose what Super GameBoy BIOS you want to use. Look at the Super GameBoy Support section for more information.","title":"Core options"},{"location":"library/nside_balanced/#controllers","text":"The nSide Balanced core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/nside_balanced/#user-1-device-types","text":"None - Input disabled. SNES Joypad - Joypad SNES Mouse - Mouse","title":"User 1 device types"},{"location":"library/nside_balanced/#user-2-device-types","text":"None - Input disabled. SNES Joypad - Joypad SNES Mouse - Mouse Multitap - Joypad - Allows for up to five players to play together in multitap games. SuperScope - Lightgun - Inputs are not hooked up in this core. Justifier - Lightgun - Inputs are not hooked up in this core. Justifiers - Lightgun - Two Justifiers are plugged in, for two-player Justifier games. Inputs are not hooked up in this core.","title":"User 2 device types"},{"location":"library/nside_balanced/#multitap-support","text":"Activating multitap support in compatible games can be configured by switching to the Multitap device type for User 2.","title":"Multitap support"},{"location":"library/nside_balanced/#controller-tables","text":"","title":"Controller tables"},{"location":"library/nside_balanced/#joypad","text":"User 1 - 5 Remap descriptors RetroPad Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R","title":"Joypad"},{"location":"library/nside_balanced/#mouse","text":"RetroMouse Inputs SNES Mouse Mouse Cursor SNES Mouse Cursor Mouse 1 SNES Mouse Left Button Mouse 2 SNES Mouse Right Button","title":"Mouse"},{"location":"library/nside_balanced/#compatibility","text":"Game Issue A.S.P. Air Strike Patrol Black lines show up during gameplay. The shadow below the aircraft is missing. Incompatible with ROM hacks made to take advantage of emulator quirks, much like real hardware.","title":"Compatibility"},{"location":"library/nside_balanced/#external-links","text":"Official higan Website Official higan Upstream Downloads Libretro nSide Balanced Core info file Libretro nSide Balanced Github Repository Report Libretro nSide Balanced Core Issues Here","title":"External Links"},{"location":"library/nside_balanced/#see-also","text":"","title":"See also"},{"location":"library/nside_balanced/#nintendo-game-boy-color","text":"Nintendo - Game Boy / Color (Emux GB) Nintendo - Game Boy / Color (Gambatte) Nintendo - Game Boy / Color (Gearboy) Nintendo - Game Boy / Color (SameBoy) Nintendo - Game Boy / Color (TGB Dual) Nintendo - Game Boy Advance (mGBA) Nintendo - Game Boy Advance (VBA-M) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (Mesen-S)","title":"Nintendo - Game Boy (+ Color)"},{"location":"library/nside_balanced/#nintendo-super-nintendo-entertainment-system-hacks","text":"Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (Mesen-S) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2005) Nintendo - SNES / Famicom (Snes9x 2010)","title":"Nintendo - Super Nintendo Entertainment System (+ Hacks)"},{"location":"library/nxengine/","text":"Cave Story (NXEngine) \u00b6 Background \u00b6 NXEngine is a open source reproduction of the Cave Story game engine . How to start the NXEngine core: \u00b6 To start the NXEngine core, you need to obtain NXEngine's data files. You can do this by going to RetroArch's main menu screen and selecting 'Online Updater'. From there, select 'Content Downloader'. Select 'NXEngine'', then select 'Cave Story (En).zip'. This should download and extract this file to RetroArch's Downloads directory. Go back to RetroArch's main menu screen. Select 'Load Content', then 'Downloads'. Select the 'Cave Story (en)' directory, then select 'Doukutsu.exe'. If you are asked which core to select, choose 'Cave Story (NXEngine)'. The content should now start running! Author/License \u00b6 The NXEngine core has been authored by Caitlin Shaw The NXEngine core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the NXEngine core have the following file extensions: .exe Databases \u00b6 RetroArch database(s) that are associated with the NXEngine core: Cave Story Features \u00b6 Frontend-level settings or features that the NXEngine core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2715 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The NXEngine core's directory name is 'NXEngine' The NXEngine core saves/loads to/from these directories. Frontend's Save directory profile#.dat (Save data profile) Geometry and timing \u00b6 The NXEngine core's core provided FPS is 60 The NXEngine core's core provided FPS is 22050 Hz The NXEngine core's core provided aspect ratio is 4/3 Controllers \u00b6 The NXEngine core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 device types \u00b6 None - Doesn't disable input RetroPad - Joypad RetroPad w/Analog - Joypad - There is no reason to switch to this. Controller tables \u00b6 Joypad \u00b6 User 1 Remap descriptors RetroPad Inputs Jump Settings Inventory D-Pad Up D-Pad Down D-Pad Left D-Pad Right Fire Show/Hide Map Previous Weapon Next Weapon External Links \u00b6 Official NXEngine Website Official NXEngine Github Repository Libretro NXEngine Core info file Libretro NXEngine Github Repository Report Libretro NXEngine Core Issues Here","title":"Cave Story (NXEngine)"},{"location":"library/nxengine/#cave-story-nxengine","text":"","title":"Cave Story (NXEngine)"},{"location":"library/nxengine/#background","text":"NXEngine is a open source reproduction of the Cave Story game engine .","title":"Background"},{"location":"library/nxengine/#how-to-start-the-nxengine-core","text":"To start the NXEngine core, you need to obtain NXEngine's data files. You can do this by going to RetroArch's main menu screen and selecting 'Online Updater'. From there, select 'Content Downloader'. Select 'NXEngine'', then select 'Cave Story (En).zip'. This should download and extract this file to RetroArch's Downloads directory. Go back to RetroArch's main menu screen. Select 'Load Content', then 'Downloads'. Select the 'Cave Story (en)' directory, then select 'Doukutsu.exe'. If you are asked which core to select, choose 'Cave Story (NXEngine)'. The content should now start running!","title":"How to start the NXEngine core:"},{"location":"library/nxengine/#authorlicense","text":"The NXEngine core has been authored by Caitlin Shaw The NXEngine core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/nxengine/#extensions","text":"Content that can be loaded by the NXEngine core have the following file extensions: .exe","title":"Extensions"},{"location":"library/nxengine/#databases","text":"RetroArch database(s) that are associated with the NXEngine core: Cave Story","title":"Databases"},{"location":"library/nxengine/#features","text":"Frontend-level settings or features that the NXEngine core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2715 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/nxengine/#directories","text":"The NXEngine core's directory name is 'NXEngine' The NXEngine core saves/loads to/from these directories. Frontend's Save directory profile#.dat (Save data profile)","title":"Directories"},{"location":"library/nxengine/#geometry-and-timing","text":"The NXEngine core's core provided FPS is 60 The NXEngine core's core provided FPS is 22050 Hz The NXEngine core's core provided aspect ratio is 4/3","title":"Geometry and timing"},{"location":"library/nxengine/#controllers","text":"The NXEngine core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/nxengine/#user-1-device-types","text":"None - Doesn't disable input RetroPad - Joypad RetroPad w/Analog - Joypad - There is no reason to switch to this.","title":"User 1 device types"},{"location":"library/nxengine/#controller-tables","text":"","title":"Controller tables"},{"location":"library/nxengine/#joypad","text":"User 1 Remap descriptors RetroPad Inputs Jump Settings Inventory D-Pad Up D-Pad Down D-Pad Left D-Pad Right Fire Show/Hide Map Previous Weapon Next Weapon","title":"Joypad"},{"location":"library/nxengine/#external-links","text":"Official NXEngine Website Official NXEngine Github Repository Libretro NXEngine Core info file Libretro NXEngine Github Repository Report Libretro NXEngine Core Issues Here","title":"External Links"},{"location":"library/o2em/","text":"Magnavox - Odyssey2 / Phillips Videopac+ (O2EM) \u00b6 Background \u00b6 O2EM is an open source multi-platform Odyssey2 / Videopac+ emulator. The Odyssey2 (Videopac/Jopac in Europe) was a video game console created in the late 70s. The O2EM core has been authored by Daniel Boris Andre de la Rocha Arlindo M. de Oliveira The O2EM core is licensed under Artistic License A summary of the licenses behind RetroArch and its cores can be found here . BIOS \u00b6 Required or optional firmware files go in the frontend's system directory. Filename Description md5sum o2rom.bin Odyssey2 BIOS - G7000 model - Required 562d5ebf9e030a40d6fabfc2f33139fd c52.bin Videopac+ French BIOS - G7000 model - Required f1071cdb0b6b10dde94d3bc8a6146387 g7400.bin Videopac+ European BIOS - G7400 model - Required c500ff71236068e0dc0d0603d265ae76 jopac.bin Videopac+ French BIOS - G7400 model - Required 279008e4a0db2dc5f1c048853b033828 Currently the libretro core only works with the o2rom.bin. As a workaround for playing Videopac+ games, you can rename the g7400.bin firmware file into o2rom.bin, and the core plays it correctly as a Videopac+ game. Extensions \u00b6 Content that can be loaded by the O2EM core have the following file extensions: .bin RetroArch database(s) that are associated with the O2EM core: Magnavox - Odyssey2 Phillips - Videopac+ Features \u00b6 Frontend-level settings or features that the O2EM core respects. Feature Supported Restart \u2714 Saves \u2715 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The O2EM core's library name is 'O2EM' The O2EM core saves/loads to/from these directories. Frontend's State directory File Description *.state# State Geometry and timing \u00b6 The O2EM core's core provided FPS is 60 for NTSC games and 50 for PAL games The O2EM core's core provided sample rate is 44100 Hz The O2EM core's base width is 340 The O2EM core's base height is 250 The O2EM core's max width is 340 The O2EM core's max height is 250 The O2EM core's core provided aspect ratio is 4/3 Core options \u00b6 The O2EM core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Virtual keyboard transparency [o2em_vkb_transparency] ( 0% |10%|20%|30%|40%|50%|60%|70%|80%|90%) Joypad \u00b6 RetroPad Inputs User 1 input descriptors Up Down Left Right Action / Press Key (Virtual Keyboard) Move Virtual Keyboard Up/Down Show/Hide Virtual Keyboard RetroPad Inputs User 2 input descriptors Up Down Left Right Action In some games, for example UFO/Satellite Attack, the original had the joypads swapped so that Player 1 was on Joypad 2. If you only use one Joypad, a workaround is to provide identical assignments of both Retropads to one joystick and save it as Game Remap or Core Remap. Keyboard \u00b6 RetroKeyboard Inputs O2EM Inputs Keyboard Return Enter Keyboard Space Space Keyboard Minus - - Keyboard Period . . Keyboard Slash / / Keyboard 0 0 Keyboard 1 1 Keyboard 2 2 Keyboard 3 3 Keyboard 4 4 Keyboard 5 5 Keyboard 6 6 Keyboard 7 7 Keyboard 8 8 Keyboard 9 9 Keyboard Equals = = Keyboard Question ? ? Keyboard a a Keyboard b b Keyboard c c Keyboard d d Keyboard e e Keyboard f f Keyboard g g Keyboard h h Keyboard i i Keyboard j j Keyboard k k Keyboard l l Keyboard m m Keyboard n n Keyboard o o Keyboard p p Keyboard q q Keyboard r r Keyboard s s Keyboard t t Keyboard u u Keyboard v v Keyboard w w Keyboard x x Keyboard y y Keyboard z z Keyboard End Clear External Links \u00b6 Official O2EM Website Official O2EM SourceForge Repository Libretro O2EM Core info file Libretro O2EM Github Repository Report Libretro O2EM Core Issues Here","title":"Magnavox - Odyssey2 / Phillips Videopac+ (O2EM)"},{"location":"library/o2em/#magnavox-odyssey2-phillips-videopac-o2em","text":"","title":"Magnavox - Odyssey2 / Phillips Videopac+ (O2EM)"},{"location":"library/o2em/#background","text":"O2EM is an open source multi-platform Odyssey2 / Videopac+ emulator. The Odyssey2 (Videopac/Jopac in Europe) was a video game console created in the late 70s. The O2EM core has been authored by Daniel Boris Andre de la Rocha Arlindo M. de Oliveira The O2EM core is licensed under Artistic License A summary of the licenses behind RetroArch and its cores can be found here .","title":"Background"},{"location":"library/o2em/#bios","text":"Required or optional firmware files go in the frontend's system directory. Filename Description md5sum o2rom.bin Odyssey2 BIOS - G7000 model - Required 562d5ebf9e030a40d6fabfc2f33139fd c52.bin Videopac+ French BIOS - G7000 model - Required f1071cdb0b6b10dde94d3bc8a6146387 g7400.bin Videopac+ European BIOS - G7400 model - Required c500ff71236068e0dc0d0603d265ae76 jopac.bin Videopac+ French BIOS - G7400 model - Required 279008e4a0db2dc5f1c048853b033828 Currently the libretro core only works with the o2rom.bin. As a workaround for playing Videopac+ games, you can rename the g7400.bin firmware file into o2rom.bin, and the core plays it correctly as a Videopac+ game.","title":"BIOS"},{"location":"library/o2em/#extensions","text":"Content that can be loaded by the O2EM core have the following file extensions: .bin RetroArch database(s) that are associated with the O2EM core: Magnavox - Odyssey2 Phillips - Videopac+","title":"Extensions"},{"location":"library/o2em/#features","text":"Frontend-level settings or features that the O2EM core respects. Feature Supported Restart \u2714 Saves \u2715 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/o2em/#directories","text":"The O2EM core's library name is 'O2EM' The O2EM core saves/loads to/from these directories. Frontend's State directory File Description *.state# State","title":"Directories"},{"location":"library/o2em/#geometry-and-timing","text":"The O2EM core's core provided FPS is 60 for NTSC games and 50 for PAL games The O2EM core's core provided sample rate is 44100 Hz The O2EM core's base width is 340 The O2EM core's base height is 250 The O2EM core's max width is 340 The O2EM core's max height is 250 The O2EM core's core provided aspect ratio is 4/3","title":"Geometry and timing"},{"location":"library/o2em/#core-options","text":"The O2EM core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Virtual keyboard transparency [o2em_vkb_transparency] ( 0% |10%|20%|30%|40%|50%|60%|70%|80%|90%)","title":"Core options"},{"location":"library/o2em/#joypad","text":"RetroPad Inputs User 1 input descriptors Up Down Left Right Action / Press Key (Virtual Keyboard) Move Virtual Keyboard Up/Down Show/Hide Virtual Keyboard RetroPad Inputs User 2 input descriptors Up Down Left Right Action In some games, for example UFO/Satellite Attack, the original had the joypads swapped so that Player 1 was on Joypad 2. If you only use one Joypad, a workaround is to provide identical assignments of both Retropads to one joystick and save it as Game Remap or Core Remap.","title":"Joypad"},{"location":"library/o2em/#keyboard","text":"RetroKeyboard Inputs O2EM Inputs Keyboard Return Enter Keyboard Space Space Keyboard Minus - - Keyboard Period . . Keyboard Slash / / Keyboard 0 0 Keyboard 1 1 Keyboard 2 2 Keyboard 3 3 Keyboard 4 4 Keyboard 5 5 Keyboard 6 6 Keyboard 7 7 Keyboard 8 8 Keyboard 9 9 Keyboard Equals = = Keyboard Question ? ? Keyboard a a Keyboard b b Keyboard c c Keyboard d d Keyboard e e Keyboard f f Keyboard g g Keyboard h h Keyboard i i Keyboard j j Keyboard k k Keyboard l l Keyboard m m Keyboard n n Keyboard o o Keyboard p p Keyboard q q Keyboard r r Keyboard s s Keyboard t t Keyboard u u Keyboard v v Keyboard w w Keyboard x x Keyboard y y Keyboard z z Keyboard End Clear","title":"Keyboard"},{"location":"library/o2em/#external-links","text":"Official O2EM Website Official O2EM SourceForge Repository Libretro O2EM Core info file Libretro O2EM Github Repository Report Libretro O2EM Core Issues Here","title":"External Links"},{"location":"library/openlara/","text":"Tomb Raider (OpenLara) \u00b6 Background \u00b6 A new work-in-progress Tomb Raider game engine ported to libretro. This game engine recreation seeks to allow you to play the original Tomb Raider engine games, from 1 all the way up to 5. OpenLara V1 Tomb Raider 1 is fully playable. The nice thing about OpenLara is that, while staying true to the original look and feel of the original, it also adds some enhancements to it that manages to make the boxy old-school Tomb Raider games look a bit less archaic. Some examples include : The framerate is no longer fixed to 30fps, and you can now run it at a smooth 60fps framerate. There are even more framerate options, allowing you to play at 90fps, 120fps or even 144fps. You can set the internal resolution of the game. New water effects which replaces the simple vertex manipulation of the water surface on the PSX. The Saturn version actually was the only version that tried to do something a bit more sophisticated with the water. Self-shadowing on all the player models (although this still has some visual anomalies at places). Improved lighting effects, including colored lighting (you can see the save crystals emanating a blue light for instance, something which definitely was not in any of the prior Tomb Raider versions). Shading effects \u2013 after Lara gets out of the water, her skin has a slightly wet shading effect. There is also a brand new local multiplayer mode. You toggle the game into splitscreen mode by pressing Start at any one time. From there, you can see a second Lara character, which is only distinguished from the main character by a slightly jerky animation update routine. Player 2 can now take control of this Lara and you can engage in \u2018jolly co-operation\u2019. At all times, Player 1 can beckon Player 2 back to his position by pressing the Start button, which resets player 2\u2019s position back to Player 1\u2019s so that Player 2 can always be brought back in case he/she is running too far astray. There is also a first person view that you can toggle into by pressing the Look button (L button) and then pressing the Action button (B button). This gives you a Mirror\u2019s Edge-esque first person view. The ability to target two enemies at the same time individually. The graphical enhancements can all be toggled on/off inside the game\u2019s inventory settings screen (toggleable by pressing the Select button). The OpenLara core has been authored by XProger The OpenLara core is licensed under 2-clause BSD A summary of the licenses behind RetroArch and its cores can be found here . Requirements \u00b6 This core requires that you use OpenGL as the video driver. Go to Settings -> Driver. If \u2018video driver\u2019 is set to \u2018vulkan\u2019, switch it back to \u2018gl\u2019, and then restart. Attention There is currently no \u2018working\u2019 macOS version available due to the OpenGL requirement. Extensions \u00b6 Content that can be loaded by the OpenLara core have the following file extensions: .phd .psx .tr2 RetroArch dat that is associated with the OpenLara core: Tomb Raider Features \u00b6 Frontend-level settings or features that the OpenLara core respects. Feature Supported Restart \u2715 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The OpenLara core's library name is 'OpenLara' To achieve a continuous game that loads from one level to the next you can load directly from CD or preferably setup the content folder like this: Folder File Type(s) Description audio/1/ track_XX.ogg or XXX.ogg X represents a number audio/2/ track_XX.ogg and MAIN.SFX Both tracks and MAIN.SFX are required audio/3/ track_XX.ogg and MAIN.SFX Both tracks and MAIN.SFX are required level/1/ *.PNG and *.PHD or *.PSX or *.SAT Load-screens and levels level/2/ *.PNG and *.TR2 or *.PSX Load-screens and levels level/3/ *.PNG and *.TR2 or *.PSX Load-screens and levels video/1/ *.RPL or *.FMV Video cut-scenes video/2/ *.RPL or *.FMV Video cut-scenes video/3/ *.RPL or *.FMV Video cut-scenes Note if you load from CD you won't have soundtrack in TR1 The OpenLara core saves/loads to/from these directories. File Description system/openlara/*.xsh Shader files saves/openlara/savegame.dat Savegame saves/openlara/settings Settings Geometry and timing \u00b6 The OpenLara core's core provided FPS is dependent on the 'Framerate' core option . The OpenLara core's core provided sample rate is 44100 Hz The OpenLara core's base width is 320 The OpenLara core's base height is 240 The OpenLara core's max width is dependent on the 'Internal resolution' core option The OpenLara core's max height is dependent on the 'Internal resolution' core option The OpenLara core's core provided aspect ratio is 4/3 Core options \u00b6 The OpenLara core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Framerate (restart) [openlara_framerate] ( 60fps |70fps|72fps|75fps|90fps|100fps|119fps|120fps| 144fps|240fps|244fps|15fps|30fps) Modify framerate. Requires a restart. Internal resolution (restart) [openlara_resolution] ( 320x240 |360x480|480x272|512x384|512x512|640x240| 640x448|640x480|720x576|800x600|960x720|1024x768| 1024x1024|1280x720|1280x960|1600x1200|1920x1080| 1920x1440|1920x1600|2048x2048|2560x1440| 3840x2160|7680x4320|15360x8640|16000x9000) Modify the internal resolution. Requires a restart. Internal resolution - 320x240 Internal resolution - 1920x1080 Joypad \u00b6 RetroPad Inputs User 1 input descriptors Action (Shoot/grab) Jump Inventory Start Up Down Left Right Roll Draw weapon Walk (when holding) Duck/Crouch (TR3 and up) Dash (TR3 and up) External Links \u00b6 Official OpenLara Github Repository Official OpenLara Website Libretro OpenLara Core info file Libretro OpenLara Github Repository Report Libretro OpenLara Core Issues Here","title":"Tomb Raider (OpenLara)"},{"location":"library/openlara/#tomb-raider-openlara","text":"","title":"Tomb Raider (OpenLara)"},{"location":"library/openlara/#background","text":"A new work-in-progress Tomb Raider game engine ported to libretro. This game engine recreation seeks to allow you to play the original Tomb Raider engine games, from 1 all the way up to 5. OpenLara V1 Tomb Raider 1 is fully playable. The nice thing about OpenLara is that, while staying true to the original look and feel of the original, it also adds some enhancements to it that manages to make the boxy old-school Tomb Raider games look a bit less archaic. Some examples include : The framerate is no longer fixed to 30fps, and you can now run it at a smooth 60fps framerate. There are even more framerate options, allowing you to play at 90fps, 120fps or even 144fps. You can set the internal resolution of the game. New water effects which replaces the simple vertex manipulation of the water surface on the PSX. The Saturn version actually was the only version that tried to do something a bit more sophisticated with the water. Self-shadowing on all the player models (although this still has some visual anomalies at places). Improved lighting effects, including colored lighting (you can see the save crystals emanating a blue light for instance, something which definitely was not in any of the prior Tomb Raider versions). Shading effects \u2013 after Lara gets out of the water, her skin has a slightly wet shading effect. There is also a brand new local multiplayer mode. You toggle the game into splitscreen mode by pressing Start at any one time. From there, you can see a second Lara character, which is only distinguished from the main character by a slightly jerky animation update routine. Player 2 can now take control of this Lara and you can engage in \u2018jolly co-operation\u2019. At all times, Player 1 can beckon Player 2 back to his position by pressing the Start button, which resets player 2\u2019s position back to Player 1\u2019s so that Player 2 can always be brought back in case he/she is running too far astray. There is also a first person view that you can toggle into by pressing the Look button (L button) and then pressing the Action button (B button). This gives you a Mirror\u2019s Edge-esque first person view. The ability to target two enemies at the same time individually. The graphical enhancements can all be toggled on/off inside the game\u2019s inventory settings screen (toggleable by pressing the Select button). The OpenLara core has been authored by XProger The OpenLara core is licensed under 2-clause BSD A summary of the licenses behind RetroArch and its cores can be found here .","title":"Background"},{"location":"library/openlara/#requirements","text":"This core requires that you use OpenGL as the video driver. Go to Settings -> Driver. If \u2018video driver\u2019 is set to \u2018vulkan\u2019, switch it back to \u2018gl\u2019, and then restart. Attention There is currently no \u2018working\u2019 macOS version available due to the OpenGL requirement.","title":"Requirements"},{"location":"library/openlara/#extensions","text":"Content that can be loaded by the OpenLara core have the following file extensions: .phd .psx .tr2 RetroArch dat that is associated with the OpenLara core: Tomb Raider","title":"Extensions"},{"location":"library/openlara/#features","text":"Frontend-level settings or features that the OpenLara core respects. Feature Supported Restart \u2715 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/openlara/#directories","text":"The OpenLara core's library name is 'OpenLara' To achieve a continuous game that loads from one level to the next you can load directly from CD or preferably setup the content folder like this: Folder File Type(s) Description audio/1/ track_XX.ogg or XXX.ogg X represents a number audio/2/ track_XX.ogg and MAIN.SFX Both tracks and MAIN.SFX are required audio/3/ track_XX.ogg and MAIN.SFX Both tracks and MAIN.SFX are required level/1/ *.PNG and *.PHD or *.PSX or *.SAT Load-screens and levels level/2/ *.PNG and *.TR2 or *.PSX Load-screens and levels level/3/ *.PNG and *.TR2 or *.PSX Load-screens and levels video/1/ *.RPL or *.FMV Video cut-scenes video/2/ *.RPL or *.FMV Video cut-scenes video/3/ *.RPL or *.FMV Video cut-scenes Note if you load from CD you won't have soundtrack in TR1 The OpenLara core saves/loads to/from these directories. File Description system/openlara/*.xsh Shader files saves/openlara/savegame.dat Savegame saves/openlara/settings Settings","title":"Directories"},{"location":"library/openlara/#geometry-and-timing","text":"The OpenLara core's core provided FPS is dependent on the 'Framerate' core option . The OpenLara core's core provided sample rate is 44100 Hz The OpenLara core's base width is 320 The OpenLara core's base height is 240 The OpenLara core's max width is dependent on the 'Internal resolution' core option The OpenLara core's max height is dependent on the 'Internal resolution' core option The OpenLara core's core provided aspect ratio is 4/3","title":"Geometry and timing"},{"location":"library/openlara/#core-options","text":"The OpenLara core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Framerate (restart) [openlara_framerate] ( 60fps |70fps|72fps|75fps|90fps|100fps|119fps|120fps| 144fps|240fps|244fps|15fps|30fps) Modify framerate. Requires a restart. Internal resolution (restart) [openlara_resolution] ( 320x240 |360x480|480x272|512x384|512x512|640x240| 640x448|640x480|720x576|800x600|960x720|1024x768| 1024x1024|1280x720|1280x960|1600x1200|1920x1080| 1920x1440|1920x1600|2048x2048|2560x1440| 3840x2160|7680x4320|15360x8640|16000x9000) Modify the internal resolution. Requires a restart. Internal resolution - 320x240 Internal resolution - 1920x1080","title":"Core options"},{"location":"library/openlara/#joypad","text":"RetroPad Inputs User 1 input descriptors Action (Shoot/grab) Jump Inventory Start Up Down Left Right Roll Draw weapon Walk (when holding) Duck/Crouch (TR3 and up) Dash (TR3 and up)","title":"Joypad"},{"location":"library/openlara/#external-links","text":"Official OpenLara Github Repository Official OpenLara Website Libretro OpenLara Core info file Libretro OpenLara Github Repository Report Libretro OpenLara Core Issues Here","title":"External Links"},{"location":"library/opera/","text":"The 3DO Company - 3DO (Opera) \u00b6 Background \u00b6 Opera is an open-source, low-level emulator for the 3DO Game Console. Opera is a fork of 4DO, originally a port of 4DO, itself a fork of FreeDO, to libretro. The fork/rename occurred due to the original 4DO project being dormant and to differentiate the project due to new development and focus. The Opera core has been authored by trapexit JohnnyDude FreeDO team The Opera core is licensed under Modified GNU LGPL / Non-commercial A summary of the licenses behind RetroArch and its cores can be found here . BIOS \u00b6 One of the following system BIOSes is required to run software. Place in the frontend's system directory. Filename Description md5sum panafz1.bin Panasonic FZ-1 f47264dd47fe30f73ab3c010015c155b panafz10.bin Panasonic FZ-10 51f2f43ae2f3508a14d9f56597e2d3ce panafz10-norsa.bin Panasonic FZ-10 [RSA Patch] 1477bda80dc33731a65468c1f5bcbee9 panafz10e-anvil.bin Panasonic FZ-10-E [Anvil] a48e6746bd7edec0f40cff078f0bb19f panafz10e-anvil-norsa.bin Panasonic FZ-10-E [Anvil RSA Patch] cf11bbb5a16d7af9875cca9de9a15e09 panafz1j.bin Panasonic FZ-1J a496cfdded3da562759be3561317b605 panafz1j-norsa.bin Panasonic FZ-1J [RSA Patch] f6c71de7470d16abe4f71b1444883dc8 goldstar.bin Goldstar GDO-101M 8639fd5e549bd6238cfee79e3e749114 sanyotry.bin Sanyo IMP-21J TRY 35fa1a1ebaaeea286dc5cd15487c13ea 3do_arcade_saot.bin Shootout At Old Tucson 8970fc987ab89a7f64da9f8a8c4333ff FONT ROM \u00b6 Required for some Japanese games. Optional otherwise. Filename Description md5sum panafz1-kanji.bin Panasonic FZ-1 Kanji ROM b8dc97f778a6245c58e064b0312e8281 panafz10ja-anvil-kanji.bin Panasonic FZ-10JA Kanji ROM 428577250f43edc902ea239c50d2240d panafz1j-kanji.bin Panasonic FZ-1J Kanji ROM c23fb5d5e6bb1c240d02cf968972be37 Extensions \u00b6 Content that can be loaded by the Opera core have the following file extensions: .iso .bin .chd .cue RetroArch database(s) that are associated with the Opera core: The 3DO Company - 3DO Features \u00b6 Frontend-level settings or features that the Opera core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The Opera core's library name is 'Opera' The Opera core saves/loads to/from these directories. Frontend's Save directory File Description *.srm Per game NVRAM 3DO.nvram Shared NVRAM 3DO.nvram.tmp Only used for atomic saves Frontend's State directory File Description *.state# State Geometry and timing \u00b6 The Opera core's core provided FPS is 60 The Opera core's core provided sample rate is 44100 Hz The Opera core's base width is 320 when the 'High Resolution' core option is set to disabled. The Opera core's base height is 240 when the 'High Resolution' core option is set to disabled. The Opera core's max width is 320 when the 'High Resolution' core option is set to disabled. The Opera core's max height is 240 when the 'High Resolution' core option is set to disabled. The Opera core's base width is 640 when the 'High Resolution' core option is set to enabled. The Opera core's base height is 480 when the 'High Resolution' core option is set to enabled. The Opera core's max width is 640 when the 'High Resolution' core option is set to enabled. The Opera core's max height is 480 when the 'High Resolution' core option is set to enabled. The Opera core's core provided aspect ratio is 4/3 Core options \u00b6 The Opera core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. CPU overclock [opera_cpu_overclock] ( 1.0x (12.50Mhz) |1.1x (13.75Mhz)|1.2x (15.00Mhz)|1.5x (18.75Mhz)|1.6x (20.00Mhz)|1.8x (22.50Mhz)|2.0x (25.00Mhz)) The 3DO used a 12.5MHz ARM60 CPU as its central processor. We have implemented a CPU overclocking feature in the Opera core so that you can increase performance upto 2x. May not have an impact on all games. https://www.youtube.com/watch?v=7bT2ecwKdHQ High Resolution [opera_high_resolution] ( disabled |enabled) The default internal resolution is 320x240, but the output resolution is 640x480. This feature makes the system behave as if it has a 640x480 framebuffer. High Resolution - disabled High Resolution - enabled NVRAM Storage [opera_nvram_storage] ( per game |shared) Choose whether NVRAM saves are per game or NVRAM saves are shared between all games. Look at the Directories section for more information. Active Devices [opera_active_devices] ( 1 |2|3|4|5|6|7|8|0) There is a bug (maybe in Opera but possibly in certain games) in which having more than 1 controller emulated causes the game not to respond to input. This allows working around the issue. Timing Hack 1 (Crash 'n Burn) [opera_hack_timing_1] ( disabled |enabled) Enable this to fix Crash 'n Burn. Timing Hack 3 (Dinopark Tycoon) [opera_hack_timing_3] ( disabled |enabled) Enable this to fix Dinopark Tycoon. Timing Hack 5 (Microcosm) [opera_hack_timing_5] ( disabled |enabled) Enable this to fix Microcosm. Timing Hack 6 (Alone in the Dark) [opera_hack_timing_6] ( disabled |enabled) Enable this to fix Alone in the Dark. Graphics Step Y Hack (Samurai Shodown) [opera_hack_graphics_step_y] ( disabled |enabled) Enable this to fix Samurai Shodown's background rendering. Joypad \u00b6 User 1 - 2 Remap descriptors RetroPad Inputs B A X (Stop) P (Play/Pause) D-Pad Up D-Pad Down D-Pad Left D-Pad Right C L R Compatibility \u00b6 Opera Core Compatibility List External Links \u00b6 Official 4DO Website Official 4DO Wiki Official 4DO SourceForge Repository Libretro Opera Core info file Libretro Opera Github Repository Report Libretro Opera Core Issues Here","title":"The 3DO Company - 3DO (Opera)"},{"location":"library/opera/#the-3do-company-3do-opera","text":"","title":"The 3DO Company - 3DO (Opera)"},{"location":"library/opera/#background","text":"Opera is an open-source, low-level emulator for the 3DO Game Console. Opera is a fork of 4DO, originally a port of 4DO, itself a fork of FreeDO, to libretro. The fork/rename occurred due to the original 4DO project being dormant and to differentiate the project due to new development and focus. The Opera core has been authored by trapexit JohnnyDude FreeDO team The Opera core is licensed under Modified GNU LGPL / Non-commercial A summary of the licenses behind RetroArch and its cores can be found here .","title":"Background"},{"location":"library/opera/#bios","text":"One of the following system BIOSes is required to run software. Place in the frontend's system directory. Filename Description md5sum panafz1.bin Panasonic FZ-1 f47264dd47fe30f73ab3c010015c155b panafz10.bin Panasonic FZ-10 51f2f43ae2f3508a14d9f56597e2d3ce panafz10-norsa.bin Panasonic FZ-10 [RSA Patch] 1477bda80dc33731a65468c1f5bcbee9 panafz10e-anvil.bin Panasonic FZ-10-E [Anvil] a48e6746bd7edec0f40cff078f0bb19f panafz10e-anvil-norsa.bin Panasonic FZ-10-E [Anvil RSA Patch] cf11bbb5a16d7af9875cca9de9a15e09 panafz1j.bin Panasonic FZ-1J a496cfdded3da562759be3561317b605 panafz1j-norsa.bin Panasonic FZ-1J [RSA Patch] f6c71de7470d16abe4f71b1444883dc8 goldstar.bin Goldstar GDO-101M 8639fd5e549bd6238cfee79e3e749114 sanyotry.bin Sanyo IMP-21J TRY 35fa1a1ebaaeea286dc5cd15487c13ea 3do_arcade_saot.bin Shootout At Old Tucson 8970fc987ab89a7f64da9f8a8c4333ff","title":"BIOS"},{"location":"library/opera/#font-rom","text":"Required for some Japanese games. Optional otherwise. Filename Description md5sum panafz1-kanji.bin Panasonic FZ-1 Kanji ROM b8dc97f778a6245c58e064b0312e8281 panafz10ja-anvil-kanji.bin Panasonic FZ-10JA Kanji ROM 428577250f43edc902ea239c50d2240d panafz1j-kanji.bin Panasonic FZ-1J Kanji ROM c23fb5d5e6bb1c240d02cf968972be37","title":"FONT ROM"},{"location":"library/opera/#extensions","text":"Content that can be loaded by the Opera core have the following file extensions: .iso .bin .chd .cue RetroArch database(s) that are associated with the Opera core: The 3DO Company - 3DO","title":"Extensions"},{"location":"library/opera/#features","text":"Frontend-level settings or features that the Opera core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/opera/#directories","text":"The Opera core's library name is 'Opera' The Opera core saves/loads to/from these directories. Frontend's Save directory File Description *.srm Per game NVRAM 3DO.nvram Shared NVRAM 3DO.nvram.tmp Only used for atomic saves Frontend's State directory File Description *.state# State","title":"Directories"},{"location":"library/opera/#geometry-and-timing","text":"The Opera core's core provided FPS is 60 The Opera core's core provided sample rate is 44100 Hz The Opera core's base width is 320 when the 'High Resolution' core option is set to disabled. The Opera core's base height is 240 when the 'High Resolution' core option is set to disabled. The Opera core's max width is 320 when the 'High Resolution' core option is set to disabled. The Opera core's max height is 240 when the 'High Resolution' core option is set to disabled. The Opera core's base width is 640 when the 'High Resolution' core option is set to enabled. The Opera core's base height is 480 when the 'High Resolution' core option is set to enabled. The Opera core's max width is 640 when the 'High Resolution' core option is set to enabled. The Opera core's max height is 480 when the 'High Resolution' core option is set to enabled. The Opera core's core provided aspect ratio is 4/3","title":"Geometry and timing"},{"location":"library/opera/#core-options","text":"The Opera core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. CPU overclock [opera_cpu_overclock] ( 1.0x (12.50Mhz) |1.1x (13.75Mhz)|1.2x (15.00Mhz)|1.5x (18.75Mhz)|1.6x (20.00Mhz)|1.8x (22.50Mhz)|2.0x (25.00Mhz)) The 3DO used a 12.5MHz ARM60 CPU as its central processor. We have implemented a CPU overclocking feature in the Opera core so that you can increase performance upto 2x. May not have an impact on all games. https://www.youtube.com/watch?v=7bT2ecwKdHQ High Resolution [opera_high_resolution] ( disabled |enabled) The default internal resolution is 320x240, but the output resolution is 640x480. This feature makes the system behave as if it has a 640x480 framebuffer. High Resolution - disabled High Resolution - enabled NVRAM Storage [opera_nvram_storage] ( per game |shared) Choose whether NVRAM saves are per game or NVRAM saves are shared between all games. Look at the Directories section for more information. Active Devices [opera_active_devices] ( 1 |2|3|4|5|6|7|8|0) There is a bug (maybe in Opera but possibly in certain games) in which having more than 1 controller emulated causes the game not to respond to input. This allows working around the issue. Timing Hack 1 (Crash 'n Burn) [opera_hack_timing_1] ( disabled |enabled) Enable this to fix Crash 'n Burn. Timing Hack 3 (Dinopark Tycoon) [opera_hack_timing_3] ( disabled |enabled) Enable this to fix Dinopark Tycoon. Timing Hack 5 (Microcosm) [opera_hack_timing_5] ( disabled |enabled) Enable this to fix Microcosm. Timing Hack 6 (Alone in the Dark) [opera_hack_timing_6] ( disabled |enabled) Enable this to fix Alone in the Dark. Graphics Step Y Hack (Samurai Shodown) [opera_hack_graphics_step_y] ( disabled |enabled) Enable this to fix Samurai Shodown's background rendering.","title":"Core options"},{"location":"library/opera/#joypad","text":"User 1 - 2 Remap descriptors RetroPad Inputs B A X (Stop) P (Play/Pause) D-Pad Up D-Pad Down D-Pad Left D-Pad Right C L R","title":"Joypad"},{"location":"library/opera/#compatibility","text":"Opera Core Compatibility List","title":"Compatibility"},{"location":"library/opera/#external-links","text":"Official 4DO Website Official 4DO Wiki Official 4DO SourceForge Repository Libretro Opera Core info file Libretro Opera Github Repository Report Libretro Opera Core Issues Here","title":"External Links"},{"location":"library/pcsx_rearmed/","text":"Sony - PlayStation (PCSX ReARMed) \u00b6 Background \u00b6 PCSX ReARMed is a fork of PCSX Reloaded. It differs from the latter in that it has special optimizations for systems that have an ARM architecture-based CPU. The PCSX ReARMed core has been authored by PCSX Team notaz Exophase The PCSX ReARMed core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here . BIOS \u00b6 Required or optional firmware files go in the frontend's system directory. Attention In case the PCSX ReARMed core can find no BIOS files named like this in RetroArch's system directory, it will default to a High-Level Emulation BIOS. This decreases the level of compatibility of the emulator, so it is recommended that you always supply valid BIOS images inside the system directory. Filename Description md5sum scph101.bin Version 4.4 03/24/00 A 6E3735FF4C7DC899EE98981385F6F3D0 scph7001.bin Version 4.1 12/16/97 A 1e68c231d0896b7eadcad1d7d8e76129 scph5501.bin Version 3.0 11/18/96 A 490f666e1afb15b7362b406ed1cea246 scph1001.bin Version 2.0 05/07/95 A dc2b9bf8da62ec93e868cfd29f0d067d In the event that none of the above is found, PCSX_ReARMed will search for filenames starting with \"scph\" and use that instead. It doesnt seem to matter whatever bios version is used and from what region as long as its from a retail psx/ps-one. If no compatible bios is found, PCSX_ReARMed will revert to use HLE bios, which can have compatibility issues (e.g. memcard issues in Suikoden games and some games just going into black screens...) Extensions \u00b6 Content that can be loaded by the PCSX ReARMed core have the following file extensions: .bin .cue .img .mdf .pbp .toc .cbn .m3u .ccd RetroArch database(s) that are associated with the PCSX ReARMed core: Sony - PlayStation Features \u00b6 Frontend-level settings or features that the PCSX ReARMed core respects. Feature Supported Restart \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2714 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2714 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The PCSX ReARMed core's library name is 'PCSX-ReARMed' The PCSX ReARMed core saves/loads to/from these directories. Frontend's Save directory File Description *.srm Memory card slot 0 pcsx-card2.mcd Memory card slot 1 (if enabled, default to disabled) Frontend's State directory File Description *.state# State Geometry and timing \u00b6 The PCSX ReARMed core's core provided FPS is 60 for NTSC games. 50 for PAL games. The PCSX ReARMed core's core provided sample rate is 44100 Hz The PCSX ReARMed core's base width is 320 The PCSX ReARMed core's base height is 240 The PCSX ReARMed core's max width is 1024 The PCSX ReARMed core's max height is 512 The PCSX ReARMed core's core provided aspect ratio is 4/3 Loading content \u00b6 PCSX ReARMed needs a cue-sheet that points to an image file. A cue sheet, or cue file, is a metadata file which describes how the tracks of a CD or DVD are laid out. If you have e.g. foo.bin , you should create a text file and save it as foo.cue . Most PS1 games are single-track, so the cue file contents should look like this: foobin.cue FILE \"foo.bin\" BINARY TRACK 01 MODE1/2352 INDEX 01 00:00:00 After that, you can load the foo.cue file in RetroArch with the PCSX ReARMed core. Attention Certain PS1 games are multi-track, so their .cue files might be more complicated. Playing PAL copy protected games \u00b6 PAL copy protected games need a SBI Subchannel file next to the bin/cue files in order to get past the copy protection. Ape Escape (Europe).bin Ape Escape (Europe).cue Ape Escape (Europe).sbi Multiple-disk games \u00b6 If foo is a multiple-disk game, you should have .cue files for each one, e.g. foo (Disc 1).cue , foo (Disc 2).cue , foo (Disc 3).cue . To take advantage of PCSX ReARMed's Disk Control feature for disk swapping, an index file (a m3u file) should be made. Create a text file and save it as foo.m3u . Then enter your game's .cue files on it. The m3u file contents should look something like this: foo.m3u foo (Disc 1).cue foo (Disc 2).cue foo (Disc 3).cue After that, you can load the foo.m3u file in RetroArch with the PCSX ReARMed core. Here's a m3u example done with Valkryie Profile Valkyrie Profile (USA).m3u Valkyrie Profile (USA) (Disc 1).cue Valkyrie Profile (USA) (Disc 2).cue Attention Adding multi-track games to a RetroArch playlist is recommended. (Manually add an entry a playlist that points to foo.m3u ) Swapping disks \u00b6 Swapping disks follows this procedure Open tray (Disk Cycle Tray Status) Change the Disk Index to the disk you want to swap to. Close tray (Disk Cycle Tray Status) Return to the game and wait a few seconds to let it take effect PBP \u00b6 Alternatively to using cue sheets with .bin/.iso files, you can convert your games to .pbp (Playstation Portable update file). A recommended .pbp convert tool is PSX2PSP. If converting a multiple-disk game, all disks should be added to the same .pbp file, rather than making a .m3u file for them. Most conversion tools will want a single .bin file for each disk. If your game uses multiple .bin files (tracks) per disk, you will have to mount the cue sheet to a virtual drive and re-burn the images onto a single track before conversion. Attention RetroArch does not currently have .pbp database due to variability in users' conversion methods. All .pbp games will have to be added to playlists manually. Saves \u00b6 For game savedata storage, the PSX console used memory cards. The PSX console had two slots for memory cards. The PCSX ReARMed core defaults to only support the first memory card slot. Second memory card slot can be enabled via the pcsx_rearmed_memcard2 option. In this doc, the first memory card slot will be referred to as 'Memcard slot 0'. The second memory card slot will be referred to as 'Memcard slot 1'. For memory card functionality and usage, the PCSX ReARMed core will the Libretro savedata format. Libretro savedata format gamename.srm pcsx-card2.mcd By default , the filename of the Memcard slot 0 savedata will match the loaded cue or m3u or pbp filename, like this: By default , the filename of the Memcard slot 1 savedata (if enabled) will be pcsx-card2.mcd . This basically means that all games in the same folder share the same nemory card in slot 1. Loaded content: Breath of Fire III (USA).cue Memcard slot 0: Breath of Fire III (USA).srm or Loaded content: Final Fantasy VII (USA).m3u Memcard slot 0: Final Fantasy VII (USA).srm or Loaded content: Wild Arms 2 (USA).pbp Memcard slot 0: `Wild Arms 2 (USA).srm Attention To import your old memory cards from other emulators, you need to rename them to the Libretro savedata format. Warning Keep in mind that save states also include the state of the memory card; carelessly loading an old save state will OVEWRITE the memory card, potentially resulting in lost saved games. You can set the 'Don't overwrite SaveRAM on loading savestate' option in RetroArch's Saving settings to On to prevent this. Core options \u00b6 The PCSX ReARMed core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Frameskip [pcsx_rearmed_frameskip] ( 0 |1|2|3) Choose how much frames should be skipped to improve performance at the expense of visual smoothness. Use BIOS [pcsx_rearmed_bios] ( auto |HLE) Allows you to use real bios file (if available) or emulated bios (HLE). HLE - Forces core to use built-in bios emulation auto - Tries to search for compatible bios file, falls back to use HLE if none is found. Region [pcsx_rearmed_region] ( auto |NTSC|PAL) Choose what region the system is from. Enable second memory card [pcsx_rearmed_memcard2] ( disabled |enabled) Enables or disabled second memory card (Memcard 2 slot). When enabled, Memcard 2 slot's save data will be loaded and saved as pcsx-card2.mcd file in the saves directory. All games will share the same second memory card. Pad 1 Type [pcsx_rearmed_pad1type] ( standard |analog|dualshock|negcon|none) Choose the Pad Type for User 1. With the none setting, input is disabled. With the standard setting, a standard PlayStation Controller is emulated. With the analog setting, a PlayStation Analog Joystick or Dual Analog Controller with the green led on is emulated. With the dualshock setting, a Dual Analog Controller with the red led on or DualShock is emulated. With the negcon setting, a neGcon Controller is emulated. Pad 2 Type [pcsx_rearmed_pad2type] ( standard |analog|dualshock|negcon|none) Choose the Pad Type for User 2. With the none setting, input is disabled. With the standard setting, a standard PlayStation Controller is emulated. With the analog setting, a PlayStation Analog Joystick or Dual Analog Controller with the green led on is emulated. With the dualshock setting, a Dual Analog Controller with the red led on or DualShock is emulated. With the negcon setting, a neGcon Controller is emulated. Pad 3 Type [pcsx_rearmed_pad3type] ( none |standard|analog|dualshock|negcon) Choose the Pad Type for User 3. With the none setting, input is disabled. With the standard setting, a standard PlayStation Controller is emulated. With the analog setting, a PlayStation Analog Joystick or Dual Analog Controller with the green led on is emulated. With the dualshock setting, a Dual Analog Controller with the red led on or DualShock is emulated. With the negcon setting, a neGcon Controller is emulated. Pad 4 Type [pcsx_rearmed_pad4type] ( none |standard|analog|dualshock|negcon) Choose the Pad Type for User 4. With the none setting, input is disabled. With the standard setting, a standard PlayStation Controller is emulated. With the analog setting, a PlayStation Analog Joystick or Dual Analog Controller with the green led on is emulated. With the dualshock setting, a Dual Analog Controller with the red led on or DualShock is emulated. With the negcon setting, a neGcon Controller is emulated. Pad 5 Type [pcsx_rearmed_pad5type] ( none |standard|analog|dualshock|negcon) Choose the Pad Type for User 5. With the none setting, input is disabled. With the standard setting, a standard PlayStation Controller is emulated. With the analog setting, a PlayStation Analog Joystick or Dual Analog Controller with the green led on is emulated. With the dualshock setting, a Dual Analog Controller with the red led on or DualShock is emulated. With the negcon setting, a neGcon Controller is emulated. Pad 6 Type [pcsx_rearmed_pad6type] ( none |standard|analog|dualshock|negcon) Choose the Pad Type for User 6. With the none setting, input is disabled. With the standard setting, a standard PlayStation Controller is emulated. With the analog setting, a PlayStation Analog Joystick or Dual Analog Controller with the green led on is emulated. With the dualshock setting, a Dual Analog Controller with the red led on or DualShock is emulated. With the negcon setting, a neGcon Controller is emulated. Pad 7 Type [pcsx_rearmed_pad7type] ( none |standard|analog|dualshock|negcon) Choose the Pad Type for User 7. With the none setting, input is disabled. With the standard setting, a standard PlayStation Controller is emulated. With the analog setting, a PlayStation Analog Joystick or Dual Analog Controller with the green led on is emulated. With the dualshock setting, a Dual Analog Controller with the red led on or DualShock is emulated. With the negcon setting, a neGcon Controller is emulated. Pad 8 Type [pcsx_rearmed_pad8type] ( none |standard|analog|dualshock|negcon) Choose the Pad Type for User 8. With the none setting, input is disabled. With the standard setting, a standard PlayStation Controller is emulated. With the analog setting, a PlayStation Analog Joystick or Dual Analog Controller with the green led on is emulated. With the dualshock setting, a Dual Analog Controller with the red led on or DualShock is emulated. With the negcon setting, a neGcon Controller is emulated. Multitap 1 [pcsx_rearmed_multitap1] ( auto |disabled|enabled) Enables/Disables multitap functionality on port 1, allowing 3-8 player support in games that permit it. auto - Enables multitap 1 when Pad 3-8 is not set to none. enabled/disabled - Forces multitap 1 to be enabled or disabled regardless if pads 3-8 is used. Multitap 2 [pcsx_rearmed_multitap2] ( auto |disabled|enabled) Enables/Disables multitap functionality on port 2, allowing 3-8 player support in games that permit it. auto - Enables multitap 2 when Pad 5-8 is not set to none. enabled/disabled - Forces multitap 2 to be enabled or disabled regardless if pads 5-8 is used. NegCon Twist Deadzone (percent) [pcsx_rearmed_negcon_deadzone] ( 0 |5|10|15|20|25|30) Sets the deadzone of the RetroPad left analog stick when simulating the 'twist' action of emulated neGcon Controllers . Used to eliminate drift/unwanted input. Attention Most (all?) negCon compatible titles provide in-game options for setting a 'twist' deadzone value. To avoid loss of precision, the in-game deadzone should always be set to zero. Any analog stick drift should instead be accounted for by configuring the 'NegCon Twist Deadzone' core option. This is particularly important when 'NegCon Twist Response' is set to 'quadratic' or 'cubic'. Xbox gamepads typically require a deadzone of 15-20%. Many Android-compatible bluetooth gamepads have an internal 'hardware' deadzone, allowing the deadzone value here to be set to 0%. For convenience, it is recommended to make use of the 'Options \u2192 Analog Setting 1P' menu of Gran Turismo when calibrating the 'NegCon Twist Deadzone'. This provides a clear and precise representation of 'real' controller input values. NegCon Twist Response [pcsx_rearmed_negcon_response] ( linear |quadratic|cubic) Specifies the analog response when using a RetroPad left analog stick to simulate the 'twist' action of emulated neGcon Controllers . 'linear': Analog stick displacement is mapped linearly to negCon rotation angle. Recommended when using racing wheel peripherals. 'quadratic': Analog stick displacement is mapped quadratically to negCon rotation angle. This allows for greater precision when making small movements with the analog stick. Optimal setting for gamepads. 'cubic': Analog stick displacement is mapped cubically to negCon rotation angle. This allows for even greater precision when making small movements with the analog stick, but 'exaggerates' larger movements. Enables precise control but difficult to use. Attention A linear response is not recommended when using standard gamepad devices. The negCon 'twist' mechanism is substantially different from conventional analog sticks; linear mapping over-amplifies small displacements of the stick, impairing fine control. A linear response is only appropriate when using racing wheel peripherals. In most cases, the 'quadratic' option should be selected. This provides effective compensation for the physical differences between real/emulated hardware, enabling smooth/precise analog input. Enable Vibration [pcsx_rearmed_vibration] ( enabled |disabled) Enables Rumble. Look at the Rumble section for more information. Enable Dithering [pcsx_rearmed_dithering] ( enabled |disabled) If Off, disables the dithering pattern the PSX applies to combat color banding. Enable Dithering - On Enable Dithering - Off Frame duping [pcsx_rearmed_duping_enable] ( enabled |disabled) A speedup, redraws/reuses the last frame if there was no new data. Show Bios Bootlogo(Breaks some games) [pcsx_rearmed_show_bios_bootlogo] ( disabled |enabled) Show the BIOS bootlogo. Skip BIOS - Off Sound: Reverb [pcsx_rearmed_spu_reverb] ( enabled |disabled) Enable sound reverb. Sound: Interpolation [pcsx_rearmed_spu_interpolation] ( simple |gaussian|cubic|off) Modify sound interpolation. Parasite Eve 2/Vandal Hearts \u00bd Fix [pcsx_rearmed_pe2_fix] ( disabled |enabled) Enable this to fit Parasite Eve 2 and Vandal Hearts \u00bd InuYasha Sengoku Battle Fix [pcsx_rearmed_inuyasha_fix] ( disabled |enabled) Enable this to fix InuYasha. Additional core options for DynaRec (Dynamic recompiler) builds: Dynamic recompiler [pcsx_rearmed_drc] ( enabled |disabled) Enables core to use dynamic recompiler or interpreter (slower) cpu instructions. PSX cpu clock [pcsx_rearmed_psxclock] (30 - 100, default 57 ) Overclock or underclock the PSX, default is 57. Lower value = less work for the emu, may be faster in some cases. Causes compatibility issues, so modify only for games that needs it, leave at default for most games. Additional core options for devices using NEON-compatible CPU: Enable interlacing mode(s) [pcsx_rearmed_neon_interlace_enable] ( disabled |enabled) Enables fake scanlines effect. Enhanced resolution (slow) [pcsx_rearmed_neon_enhancement_enable] ( disabled |enabled) Renders in double resolution at the cost of lower performance Not available for high resolution games. Enhanced resolution speed hack [pcsx_rearmed_neon_enhancement_no_main] ( disabled |enabled) Speed hack for above option. Causes game glitches. Rumble \u00b6 Rumble only works in the PCSX ReARMed core when The content being ran has rumble support. The frontend being used has rumble support. The joypad device being used has rumble support. The 'Enable Vibration' core option is set to On The corresponding user's Pad Type is set to analog Multitap \u00b6 Activating multitap support in compatible games can be configured by the 'Multitap 1' and 'Multitap 2' core options . Joypad \u00b6 RetroPad Inputs User 1 - 8 input descriptors standard analog negcon Cross Cross Cross Analog Button I Square Square Square Analog Button II Select Select Select Start Start Start Start D-Pad Up D-Pad Up D-Pad Up D-Pad Up D-Pad Down D-Pad Down D-Pad Down D-Pad Down D-Pad Left D-Pad Left D-Pad Left D-Pad Left D-Pad Right D-Pad Right D-Pad Right D-Pad Right Circle Circle Circle A Triangle Triangle Triangle B L1 L1 L1 Left Shoulder Button (analog) R1 R1 R1 Right Shoulder Button (digital) L2 L2 L2 Analog Button II R2 R2 R2 Analog Button I L3 L3 R3 R3 X Left Analog X Left Analog X Twist Y Left Analog Y Left Analog Y X Right Analog X Right Analog X Y Right Analog Y Right Analog Y Up: Analog Button I / Down: Analog Button II Compatibility \u00b6 Game Issue Jumping Flash 2 Graphics glitches. Geometry issues. Tobal 2 Graphics glitch. Garbled Dream Factory intro sequence. External Links \u00b6 Official PCSX ReARMed Website Official PCSX ReARMed Github Repository Libretro PCSX ReARMed Core info file Libretro PCSX ReARMed Github Repository Report Libretro PCSX ReARMed Core Issues Here PSX \u00b6 Sony - PlayStation (Beetle PSX) Sony - PlayStation (Beetle PSX HW)","title":"Sony - PlayStation (PCSX ReARMed)"},{"location":"library/pcsx_rearmed/#sony-playstation-pcsx-rearmed","text":"","title":"Sony - PlayStation (PCSX ReARMed)"},{"location":"library/pcsx_rearmed/#background","text":"PCSX ReARMed is a fork of PCSX Reloaded. It differs from the latter in that it has special optimizations for systems that have an ARM architecture-based CPU. The PCSX ReARMed core has been authored by PCSX Team notaz Exophase The PCSX ReARMed core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Background"},{"location":"library/pcsx_rearmed/#bios","text":"Required or optional firmware files go in the frontend's system directory. Attention In case the PCSX ReARMed core can find no BIOS files named like this in RetroArch's system directory, it will default to a High-Level Emulation BIOS. This decreases the level of compatibility of the emulator, so it is recommended that you always supply valid BIOS images inside the system directory. Filename Description md5sum scph101.bin Version 4.4 03/24/00 A 6E3735FF4C7DC899EE98981385F6F3D0 scph7001.bin Version 4.1 12/16/97 A 1e68c231d0896b7eadcad1d7d8e76129 scph5501.bin Version 3.0 11/18/96 A 490f666e1afb15b7362b406ed1cea246 scph1001.bin Version 2.0 05/07/95 A dc2b9bf8da62ec93e868cfd29f0d067d In the event that none of the above is found, PCSX_ReARMed will search for filenames starting with \"scph\" and use that instead. It doesnt seem to matter whatever bios version is used and from what region as long as its from a retail psx/ps-one. If no compatible bios is found, PCSX_ReARMed will revert to use HLE bios, which can have compatibility issues (e.g. memcard issues in Suikoden games and some games just going into black screens...)","title":"BIOS"},{"location":"library/pcsx_rearmed/#extensions","text":"Content that can be loaded by the PCSX ReARMed core have the following file extensions: .bin .cue .img .mdf .pbp .toc .cbn .m3u .ccd RetroArch database(s) that are associated with the PCSX ReARMed core: Sony - PlayStation","title":"Extensions"},{"location":"library/pcsx_rearmed/#features","text":"Frontend-level settings or features that the PCSX ReARMed core respects. Feature Supported Restart \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2714 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2714 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/pcsx_rearmed/#directories","text":"The PCSX ReARMed core's library name is 'PCSX-ReARMed' The PCSX ReARMed core saves/loads to/from these directories. Frontend's Save directory File Description *.srm Memory card slot 0 pcsx-card2.mcd Memory card slot 1 (if enabled, default to disabled) Frontend's State directory File Description *.state# State","title":"Directories"},{"location":"library/pcsx_rearmed/#geometry-and-timing","text":"The PCSX ReARMed core's core provided FPS is 60 for NTSC games. 50 for PAL games. The PCSX ReARMed core's core provided sample rate is 44100 Hz The PCSX ReARMed core's base width is 320 The PCSX ReARMed core's base height is 240 The PCSX ReARMed core's max width is 1024 The PCSX ReARMed core's max height is 512 The PCSX ReARMed core's core provided aspect ratio is 4/3","title":"Geometry and timing"},{"location":"library/pcsx_rearmed/#loading-content","text":"PCSX ReARMed needs a cue-sheet that points to an image file. A cue sheet, or cue file, is a metadata file which describes how the tracks of a CD or DVD are laid out. If you have e.g. foo.bin , you should create a text file and save it as foo.cue . Most PS1 games are single-track, so the cue file contents should look like this: foobin.cue FILE \"foo.bin\" BINARY TRACK 01 MODE1/2352 INDEX 01 00:00:00 After that, you can load the foo.cue file in RetroArch with the PCSX ReARMed core. Attention Certain PS1 games are multi-track, so their .cue files might be more complicated.","title":"Loading content"},{"location":"library/pcsx_rearmed/#playing-pal-copy-protected-games","text":"PAL copy protected games need a SBI Subchannel file next to the bin/cue files in order to get past the copy protection. Ape Escape (Europe).bin Ape Escape (Europe).cue Ape Escape (Europe).sbi","title":"Playing PAL copy protected games"},{"location":"library/pcsx_rearmed/#multiple-disk-games","text":"If foo is a multiple-disk game, you should have .cue files for each one, e.g. foo (Disc 1).cue , foo (Disc 2).cue , foo (Disc 3).cue . To take advantage of PCSX ReARMed's Disk Control feature for disk swapping, an index file (a m3u file) should be made. Create a text file and save it as foo.m3u . Then enter your game's .cue files on it. The m3u file contents should look something like this: foo.m3u foo (Disc 1).cue foo (Disc 2).cue foo (Disc 3).cue After that, you can load the foo.m3u file in RetroArch with the PCSX ReARMed core. Here's a m3u example done with Valkryie Profile Valkyrie Profile (USA).m3u Valkyrie Profile (USA) (Disc 1).cue Valkyrie Profile (USA) (Disc 2).cue Attention Adding multi-track games to a RetroArch playlist is recommended. (Manually add an entry a playlist that points to foo.m3u )","title":"Multiple-disk games"},{"location":"library/pcsx_rearmed/#swapping-disks","text":"Swapping disks follows this procedure Open tray (Disk Cycle Tray Status) Change the Disk Index to the disk you want to swap to. Close tray (Disk Cycle Tray Status) Return to the game and wait a few seconds to let it take effect","title":"Swapping disks"},{"location":"library/pcsx_rearmed/#pbp","text":"Alternatively to using cue sheets with .bin/.iso files, you can convert your games to .pbp (Playstation Portable update file). A recommended .pbp convert tool is PSX2PSP. If converting a multiple-disk game, all disks should be added to the same .pbp file, rather than making a .m3u file for them. Most conversion tools will want a single .bin file for each disk. If your game uses multiple .bin files (tracks) per disk, you will have to mount the cue sheet to a virtual drive and re-burn the images onto a single track before conversion. Attention RetroArch does not currently have .pbp database due to variability in users' conversion methods. All .pbp games will have to be added to playlists manually.","title":"PBP"},{"location":"library/pcsx_rearmed/#saves","text":"For game savedata storage, the PSX console used memory cards. The PSX console had two slots for memory cards. The PCSX ReARMed core defaults to only support the first memory card slot. Second memory card slot can be enabled via the pcsx_rearmed_memcard2 option. In this doc, the first memory card slot will be referred to as 'Memcard slot 0'. The second memory card slot will be referred to as 'Memcard slot 1'. For memory card functionality and usage, the PCSX ReARMed core will the Libretro savedata format. Libretro savedata format gamename.srm pcsx-card2.mcd By default , the filename of the Memcard slot 0 savedata will match the loaded cue or m3u or pbp filename, like this: By default , the filename of the Memcard slot 1 savedata (if enabled) will be pcsx-card2.mcd . This basically means that all games in the same folder share the same nemory card in slot 1. Loaded content: Breath of Fire III (USA).cue Memcard slot 0: Breath of Fire III (USA).srm or Loaded content: Final Fantasy VII (USA).m3u Memcard slot 0: Final Fantasy VII (USA).srm or Loaded content: Wild Arms 2 (USA).pbp Memcard slot 0: `Wild Arms 2 (USA).srm Attention To import your old memory cards from other emulators, you need to rename them to the Libretro savedata format. Warning Keep in mind that save states also include the state of the memory card; carelessly loading an old save state will OVEWRITE the memory card, potentially resulting in lost saved games. You can set the 'Don't overwrite SaveRAM on loading savestate' option in RetroArch's Saving settings to On to prevent this.","title":"Saves"},{"location":"library/pcsx_rearmed/#core-options","text":"The PCSX ReARMed core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Frameskip [pcsx_rearmed_frameskip] ( 0 |1|2|3) Choose how much frames should be skipped to improve performance at the expense of visual smoothness. Use BIOS [pcsx_rearmed_bios] ( auto |HLE) Allows you to use real bios file (if available) or emulated bios (HLE). HLE - Forces core to use built-in bios emulation auto - Tries to search for compatible bios file, falls back to use HLE if none is found. Region [pcsx_rearmed_region] ( auto |NTSC|PAL) Choose what region the system is from. Enable second memory card [pcsx_rearmed_memcard2] ( disabled |enabled) Enables or disabled second memory card (Memcard 2 slot). When enabled, Memcard 2 slot's save data will be loaded and saved as pcsx-card2.mcd file in the saves directory. All games will share the same second memory card. Pad 1 Type [pcsx_rearmed_pad1type] ( standard |analog|dualshock|negcon|none) Choose the Pad Type for User 1. With the none setting, input is disabled. With the standard setting, a standard PlayStation Controller is emulated. With the analog setting, a PlayStation Analog Joystick or Dual Analog Controller with the green led on is emulated. With the dualshock setting, a Dual Analog Controller with the red led on or DualShock is emulated. With the negcon setting, a neGcon Controller is emulated. Pad 2 Type [pcsx_rearmed_pad2type] ( standard |analog|dualshock|negcon|none) Choose the Pad Type for User 2. With the none setting, input is disabled. With the standard setting, a standard PlayStation Controller is emulated. With the analog setting, a PlayStation Analog Joystick or Dual Analog Controller with the green led on is emulated. With the dualshock setting, a Dual Analog Controller with the red led on or DualShock is emulated. With the negcon setting, a neGcon Controller is emulated. Pad 3 Type [pcsx_rearmed_pad3type] ( none |standard|analog|dualshock|negcon) Choose the Pad Type for User 3. With the none setting, input is disabled. With the standard setting, a standard PlayStation Controller is emulated. With the analog setting, a PlayStation Analog Joystick or Dual Analog Controller with the green led on is emulated. With the dualshock setting, a Dual Analog Controller with the red led on or DualShock is emulated. With the negcon setting, a neGcon Controller is emulated. Pad 4 Type [pcsx_rearmed_pad4type] ( none |standard|analog|dualshock|negcon) Choose the Pad Type for User 4. With the none setting, input is disabled. With the standard setting, a standard PlayStation Controller is emulated. With the analog setting, a PlayStation Analog Joystick or Dual Analog Controller with the green led on is emulated. With the dualshock setting, a Dual Analog Controller with the red led on or DualShock is emulated. With the negcon setting, a neGcon Controller is emulated. Pad 5 Type [pcsx_rearmed_pad5type] ( none |standard|analog|dualshock|negcon) Choose the Pad Type for User 5. With the none setting, input is disabled. With the standard setting, a standard PlayStation Controller is emulated. With the analog setting, a PlayStation Analog Joystick or Dual Analog Controller with the green led on is emulated. With the dualshock setting, a Dual Analog Controller with the red led on or DualShock is emulated. With the negcon setting, a neGcon Controller is emulated. Pad 6 Type [pcsx_rearmed_pad6type] ( none |standard|analog|dualshock|negcon) Choose the Pad Type for User 6. With the none setting, input is disabled. With the standard setting, a standard PlayStation Controller is emulated. With the analog setting, a PlayStation Analog Joystick or Dual Analog Controller with the green led on is emulated. With the dualshock setting, a Dual Analog Controller with the red led on or DualShock is emulated. With the negcon setting, a neGcon Controller is emulated. Pad 7 Type [pcsx_rearmed_pad7type] ( none |standard|analog|dualshock|negcon) Choose the Pad Type for User 7. With the none setting, input is disabled. With the standard setting, a standard PlayStation Controller is emulated. With the analog setting, a PlayStation Analog Joystick or Dual Analog Controller with the green led on is emulated. With the dualshock setting, a Dual Analog Controller with the red led on or DualShock is emulated. With the negcon setting, a neGcon Controller is emulated. Pad 8 Type [pcsx_rearmed_pad8type] ( none |standard|analog|dualshock|negcon) Choose the Pad Type for User 8. With the none setting, input is disabled. With the standard setting, a standard PlayStation Controller is emulated. With the analog setting, a PlayStation Analog Joystick or Dual Analog Controller with the green led on is emulated. With the dualshock setting, a Dual Analog Controller with the red led on or DualShock is emulated. With the negcon setting, a neGcon Controller is emulated. Multitap 1 [pcsx_rearmed_multitap1] ( auto |disabled|enabled) Enables/Disables multitap functionality on port 1, allowing 3-8 player support in games that permit it. auto - Enables multitap 1 when Pad 3-8 is not set to none. enabled/disabled - Forces multitap 1 to be enabled or disabled regardless if pads 3-8 is used. Multitap 2 [pcsx_rearmed_multitap2] ( auto |disabled|enabled) Enables/Disables multitap functionality on port 2, allowing 3-8 player support in games that permit it. auto - Enables multitap 2 when Pad 5-8 is not set to none. enabled/disabled - Forces multitap 2 to be enabled or disabled regardless if pads 5-8 is used. NegCon Twist Deadzone (percent) [pcsx_rearmed_negcon_deadzone] ( 0 |5|10|15|20|25|30) Sets the deadzone of the RetroPad left analog stick when simulating the 'twist' action of emulated neGcon Controllers . Used to eliminate drift/unwanted input. Attention Most (all?) negCon compatible titles provide in-game options for setting a 'twist' deadzone value. To avoid loss of precision, the in-game deadzone should always be set to zero. Any analog stick drift should instead be accounted for by configuring the 'NegCon Twist Deadzone' core option. This is particularly important when 'NegCon Twist Response' is set to 'quadratic' or 'cubic'. Xbox gamepads typically require a deadzone of 15-20%. Many Android-compatible bluetooth gamepads have an internal 'hardware' deadzone, allowing the deadzone value here to be set to 0%. For convenience, it is recommended to make use of the 'Options \u2192 Analog Setting 1P' menu of Gran Turismo when calibrating the 'NegCon Twist Deadzone'. This provides a clear and precise representation of 'real' controller input values. NegCon Twist Response [pcsx_rearmed_negcon_response] ( linear |quadratic|cubic) Specifies the analog response when using a RetroPad left analog stick to simulate the 'twist' action of emulated neGcon Controllers . 'linear': Analog stick displacement is mapped linearly to negCon rotation angle. Recommended when using racing wheel peripherals. 'quadratic': Analog stick displacement is mapped quadratically to negCon rotation angle. This allows for greater precision when making small movements with the analog stick. Optimal setting for gamepads. 'cubic': Analog stick displacement is mapped cubically to negCon rotation angle. This allows for even greater precision when making small movements with the analog stick, but 'exaggerates' larger movements. Enables precise control but difficult to use. Attention A linear response is not recommended when using standard gamepad devices. The negCon 'twist' mechanism is substantially different from conventional analog sticks; linear mapping over-amplifies small displacements of the stick, impairing fine control. A linear response is only appropriate when using racing wheel peripherals. In most cases, the 'quadratic' option should be selected. This provides effective compensation for the physical differences between real/emulated hardware, enabling smooth/precise analog input. Enable Vibration [pcsx_rearmed_vibration] ( enabled |disabled) Enables Rumble. Look at the Rumble section for more information. Enable Dithering [pcsx_rearmed_dithering] ( enabled |disabled) If Off, disables the dithering pattern the PSX applies to combat color banding. Enable Dithering - On Enable Dithering - Off Frame duping [pcsx_rearmed_duping_enable] ( enabled |disabled) A speedup, redraws/reuses the last frame if there was no new data. Show Bios Bootlogo(Breaks some games) [pcsx_rearmed_show_bios_bootlogo] ( disabled |enabled) Show the BIOS bootlogo. Skip BIOS - Off Sound: Reverb [pcsx_rearmed_spu_reverb] ( enabled |disabled) Enable sound reverb. Sound: Interpolation [pcsx_rearmed_spu_interpolation] ( simple |gaussian|cubic|off) Modify sound interpolation. Parasite Eve 2/Vandal Hearts \u00bd Fix [pcsx_rearmed_pe2_fix] ( disabled |enabled) Enable this to fit Parasite Eve 2 and Vandal Hearts \u00bd InuYasha Sengoku Battle Fix [pcsx_rearmed_inuyasha_fix] ( disabled |enabled) Enable this to fix InuYasha. Additional core options for DynaRec (Dynamic recompiler) builds: Dynamic recompiler [pcsx_rearmed_drc] ( enabled |disabled) Enables core to use dynamic recompiler or interpreter (slower) cpu instructions. PSX cpu clock [pcsx_rearmed_psxclock] (30 - 100, default 57 ) Overclock or underclock the PSX, default is 57. Lower value = less work for the emu, may be faster in some cases. Causes compatibility issues, so modify only for games that needs it, leave at default for most games. Additional core options for devices using NEON-compatible CPU: Enable interlacing mode(s) [pcsx_rearmed_neon_interlace_enable] ( disabled |enabled) Enables fake scanlines effect. Enhanced resolution (slow) [pcsx_rearmed_neon_enhancement_enable] ( disabled |enabled) Renders in double resolution at the cost of lower performance Not available for high resolution games. Enhanced resolution speed hack [pcsx_rearmed_neon_enhancement_no_main] ( disabled |enabled) Speed hack for above option. Causes game glitches.","title":"Core options"},{"location":"library/pcsx_rearmed/#rumble","text":"Rumble only works in the PCSX ReARMed core when The content being ran has rumble support. The frontend being used has rumble support. The joypad device being used has rumble support. The 'Enable Vibration' core option is set to On The corresponding user's Pad Type is set to analog","title":"Rumble"},{"location":"library/pcsx_rearmed/#multitap","text":"Activating multitap support in compatible games can be configured by the 'Multitap 1' and 'Multitap 2' core options .","title":"Multitap"},{"location":"library/pcsx_rearmed/#joypad","text":"RetroPad Inputs User 1 - 8 input descriptors standard analog negcon Cross Cross Cross Analog Button I Square Square Square Analog Button II Select Select Select Start Start Start Start D-Pad Up D-Pad Up D-Pad Up D-Pad Up D-Pad Down D-Pad Down D-Pad Down D-Pad Down D-Pad Left D-Pad Left D-Pad Left D-Pad Left D-Pad Right D-Pad Right D-Pad Right D-Pad Right Circle Circle Circle A Triangle Triangle Triangle B L1 L1 L1 Left Shoulder Button (analog) R1 R1 R1 Right Shoulder Button (digital) L2 L2 L2 Analog Button II R2 R2 R2 Analog Button I L3 L3 R3 R3 X Left Analog X Left Analog X Twist Y Left Analog Y Left Analog Y X Right Analog X Right Analog X Y Right Analog Y Right Analog Y Up: Analog Button I / Down: Analog Button II","title":"Joypad"},{"location":"library/pcsx_rearmed/#compatibility","text":"Game Issue Jumping Flash 2 Graphics glitches. Geometry issues. Tobal 2 Graphics glitch. Garbled Dream Factory intro sequence.","title":"Compatibility"},{"location":"library/pcsx_rearmed/#external-links","text":"Official PCSX ReARMed Website Official PCSX ReARMed Github Repository Libretro PCSX ReARMed Core info file Libretro PCSX ReARMed Github Repository Report Libretro PCSX ReARMed Core Issues Here","title":"External Links"},{"location":"library/pcsx_rearmed/#psx","text":"Sony - PlayStation (Beetle PSX) Sony - PlayStation (Beetle PSX HW)","title":"PSX"},{"location":"library/picodrive/","text":"Sega - MS/MD/CD/32X (PicoDrive) \u00b6 Background \u00b6 PicoDrive is an open-source Sega 8/16 bit and 32X emulator which was written having ARM-based handheld devices in mind. Features \u00b6 Supports 32x emulation. Designed to run on weak devices. The PicoDrive core has been authored by notaz fdave The PicoDrive core is licensed under Non-commercial A summary of the licenses behind RetroArch and its cores can be found here . BIOS \u00b6 Required or optional firmware files go in the frontend's system directory. Filename Description md5sum bios_CD_E.bin MegaCD EU BIOS - Required e66fa1dc5820d254611fdcdba0662372 bios_CD_U.bin SegaCD US BIOS - Required 2efd74e3232ff260e371b99f84024f7f bios_CD_J.bin MegaCD JP BIOS - Required 278a9397d192149e84e820ac621a8edd Extensions \u00b6 Content that can be loaded by the PicoDrive core have the following file extensions: .bin .gen .smd .md .32x .cue .iso .sms .68k RetroArch database(s) that are associated with the PicoDrive core: Sega - Master System - Mark III Sega - Mega-CD - Sega CD Sega - Mega Drive - Genesis Sega - PICO Sega - 32X Features \u00b6 Frontend-level settings or features that the PicoDrive core respects. Feature Supported Restart \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2714 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The PicoDrive core's library name is 'PicoDrive' The PicoDrive core saves/loads to/from these directories. Frontend's Save directory File Description *.srm Cartridge backup save Frontend's State directory File Description *.state# State Geometry and timing \u00b6 The PicoDrive core's core provided FPS is 60 for NTSC games and 50 for PAL games. The PicoDrive core's core provided sample rate is 44100 Hz The PicoDrive core's base width is 320 The PicoDrive core's base height is 224 The PicoDrive core's max width is 320 The PicoDrive core's max height is 240 The PicoDrive core's core provided aspect ratio is 10/7 when the 'Core-provided aspect ratio' core option is set to PAR The PicoDrive core's core provided aspect ratio is 4/3 when the 'Core-provided aspect ratio' core option is set to 4/3 The PicoDrive core's core provided aspect ratio is 5/4 when the 'Core-provided aspect ratio' core option is set to CRT Loading Sega CD games \u00b6 When loading Sega CD games, PicoDrive needs a cue-sheet that points to an image file. A cue sheet, or cue file, is a metadata file which describes how the tracks of a CD or DVD are laid out. If you have e.g. foo.bin , you should create a text file and save it as foo.cue . If the Sega CD game is single-track, the cue file contents should look like this: FILE \"foo.bin\" BINARY TRACK 01 MODE1/2352 INDEX 01 00:00:00 After that, you can load the foo.cue file in RetroArch with the PicoDrive core. Certain Sega CD games are multi-track, so their .cue files might be more complicated. Here's a cue file example done with Lunar - Eternal Blue (USA) Core options \u00b6 The PicoDrive core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Input device 1 [picodrive_input1] ( 3 button pad /6 button pad/None) Choose which kind of controller is plugged in slot 1. \"Input device 2 [picodrive_input2] ( 3 button pad /6 button pad/None) Choose which kind of controller is plugged in slot 2. No sprite limit [picodrive_sprlim] ( disabled /enabled) Enable this to remove the sprite limit. MegaCD RAM cart [picodrive_ramcart] ( disabled /enabled) Emulate a MegaCD RAM cart . Region [picodrive_region] ( Auto /Japan NTSC/Japan PAL/US/Europe) Force a specific region. Core-provided aspect ratio [picodrive_aspect] ( PAR /4/3/CRT) Choose the core-provided aspect ratio. RetroArch's aspect ratio must be set to Core provided in the Video settings. Core-provided aspect ratio - PAR Core-provided aspect ratio - 4/3 Core-provided aspect ratio - CRT Show Overscan [picodrive_overscan] ( disabled /enabled) Crop out the potentially random glitchy video output that would have been hidden by the bezel around the edge of a standard-definition television screen. Show Overscan - Off Show Overscan - On 68k overclock [picodrive_overclk68k] ( disabled /+25%/+50%/+75%/+100%/+200%/+400%) Overclock the emulated 68k chip Dynamic recompilers [picodrive_drc] ( enabled /disabled) Enable dynamic recompilers which help to improve performance. This core option is not available on all hardware. Audio filter [picodrive_audio_filter] ( disabled |low-pass) Enable a low pass audio filter to better simulate the characteristic sound of a Model 1 Genesis. Attention This option is ignored when running Master System and PICO titles. Only the Genesis and its add-on hardware (Sega CD, 32X) employed a physical low pass filter. Low-pass filter % [picodrive_lowpass_range] ( 60 |65|70|75|80|85|90|95|5|10|15|20|25|30|35|40|45|50|55) Specify the cut-off frequency of the audio low pass filter. A higher value increases the perceived 'strength' of the filter, since a wider range of the high frequency spectrum is attenuated. User 1 - 2 device types \u00b6 The PicoDrive core supports the following device type(s). None - Input is disabled - Can be switched to using the Input device core options. 3 button pad - Joypad - Can be switched to using the Input device core options. 6 button pad - Joypad - Can be switched to using the Input device core options. SMS pad - Joypad - Is automatically switched to when a Sega Master System game is loaded. Joypad \u00b6 RetroPad Inputs User 1 - 2 input descriptors 3 button pad 6 button pad B B B A A A Mode Mode Start Start Start D-Pad Up D-Pad Up D-Pad Up D-Pad Down D-Pad Down D-Pad Down D-Pad Left D-Pad Left D-Pad Left D-Pad Right D-Pad Right D-Pad Right C C C Y Y X X Z Z RetroPad Inputs User 1 - 2 input descriptors SMS pad Button 1 Start Button 1 Start Button Pause Button Pause D-Pad Up D-Pad Up D-Pad Down D-Pad Down D-Pad Left D-Pad Left D-Pad Right D-Pad Right Button 2 Button 2 Compatibility \u00b6 32x games Issue Brutal Unleashed \u2013 Above the Claw Softlocks after the first fight. FIFA Soccer \u201996 Glitched main menu text. Knuckles\u2019 Chaotix Glitched graphics on the Player Select screen. NBA Jam Tournament Edition Framerate issues. NFL Quarterback Club Some menu graphics are missing. Virtua Racing Deluxe Blinking line during the SEGA logo screen. World Series Baseball Starring Deion Sanders Crashes when starting a match. WWF Raw Various graphics are missing. External Links \u00b6 Official PicoDrive Website Official PicoDrive Github Repository Libretro PicoDrive Core info file Libretro PicoDrive Github Repository Report Libretro PicoDrive Core Issues Here Sega 16-bit \u00b6 Sega - Master System (Emux SMS) Sega - MS/GG/MD/CD (Genesis Plus GX) Sega - MS/GG/SG-1000 (Gearsystem) MSX/SVI/ColecoVision/SG-1000 (blueMSX)","title":"Sega - MS/MD/CD/32X (PicoDrive)"},{"location":"library/picodrive/#sega-msmdcd32x-picodrive","text":"","title":"Sega - MS/MD/CD/32X (PicoDrive)"},{"location":"library/picodrive/#background","text":"PicoDrive is an open-source Sega 8/16 bit and 32X emulator which was written having ARM-based handheld devices in mind.","title":"Background"},{"location":"library/picodrive/#features","text":"Supports 32x emulation. Designed to run on weak devices. The PicoDrive core has been authored by notaz fdave The PicoDrive core is licensed under Non-commercial A summary of the licenses behind RetroArch and its cores can be found here .","title":"Features"},{"location":"library/picodrive/#bios","text":"Required or optional firmware files go in the frontend's system directory. Filename Description md5sum bios_CD_E.bin MegaCD EU BIOS - Required e66fa1dc5820d254611fdcdba0662372 bios_CD_U.bin SegaCD US BIOS - Required 2efd74e3232ff260e371b99f84024f7f bios_CD_J.bin MegaCD JP BIOS - Required 278a9397d192149e84e820ac621a8edd","title":"BIOS"},{"location":"library/picodrive/#extensions","text":"Content that can be loaded by the PicoDrive core have the following file extensions: .bin .gen .smd .md .32x .cue .iso .sms .68k RetroArch database(s) that are associated with the PicoDrive core: Sega - Master System - Mark III Sega - Mega-CD - Sega CD Sega - Mega Drive - Genesis Sega - PICO Sega - 32X","title":"Extensions"},{"location":"library/picodrive/#features_1","text":"Frontend-level settings or features that the PicoDrive core respects. Feature Supported Restart \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2714 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/picodrive/#directories","text":"The PicoDrive core's library name is 'PicoDrive' The PicoDrive core saves/loads to/from these directories. Frontend's Save directory File Description *.srm Cartridge backup save Frontend's State directory File Description *.state# State","title":"Directories"},{"location":"library/picodrive/#geometry-and-timing","text":"The PicoDrive core's core provided FPS is 60 for NTSC games and 50 for PAL games. The PicoDrive core's core provided sample rate is 44100 Hz The PicoDrive core's base width is 320 The PicoDrive core's base height is 224 The PicoDrive core's max width is 320 The PicoDrive core's max height is 240 The PicoDrive core's core provided aspect ratio is 10/7 when the 'Core-provided aspect ratio' core option is set to PAR The PicoDrive core's core provided aspect ratio is 4/3 when the 'Core-provided aspect ratio' core option is set to 4/3 The PicoDrive core's core provided aspect ratio is 5/4 when the 'Core-provided aspect ratio' core option is set to CRT","title":"Geometry and timing"},{"location":"library/picodrive/#loading-sega-cd-games","text":"When loading Sega CD games, PicoDrive needs a cue-sheet that points to an image file. A cue sheet, or cue file, is a metadata file which describes how the tracks of a CD or DVD are laid out. If you have e.g. foo.bin , you should create a text file and save it as foo.cue . If the Sega CD game is single-track, the cue file contents should look like this: FILE \"foo.bin\" BINARY TRACK 01 MODE1/2352 INDEX 01 00:00:00 After that, you can load the foo.cue file in RetroArch with the PicoDrive core. Certain Sega CD games are multi-track, so their .cue files might be more complicated. Here's a cue file example done with Lunar - Eternal Blue (USA)","title":"Loading Sega CD games"},{"location":"library/picodrive/#core-options","text":"The PicoDrive core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Input device 1 [picodrive_input1] ( 3 button pad /6 button pad/None) Choose which kind of controller is plugged in slot 1. \"Input device 2 [picodrive_input2] ( 3 button pad /6 button pad/None) Choose which kind of controller is plugged in slot 2. No sprite limit [picodrive_sprlim] ( disabled /enabled) Enable this to remove the sprite limit. MegaCD RAM cart [picodrive_ramcart] ( disabled /enabled) Emulate a MegaCD RAM cart . Region [picodrive_region] ( Auto /Japan NTSC/Japan PAL/US/Europe) Force a specific region. Core-provided aspect ratio [picodrive_aspect] ( PAR /4/3/CRT) Choose the core-provided aspect ratio. RetroArch's aspect ratio must be set to Core provided in the Video settings. Core-provided aspect ratio - PAR Core-provided aspect ratio - 4/3 Core-provided aspect ratio - CRT Show Overscan [picodrive_overscan] ( disabled /enabled) Crop out the potentially random glitchy video output that would have been hidden by the bezel around the edge of a standard-definition television screen. Show Overscan - Off Show Overscan - On 68k overclock [picodrive_overclk68k] ( disabled /+25%/+50%/+75%/+100%/+200%/+400%) Overclock the emulated 68k chip Dynamic recompilers [picodrive_drc] ( enabled /disabled) Enable dynamic recompilers which help to improve performance. This core option is not available on all hardware. Audio filter [picodrive_audio_filter] ( disabled |low-pass) Enable a low pass audio filter to better simulate the characteristic sound of a Model 1 Genesis. Attention This option is ignored when running Master System and PICO titles. Only the Genesis and its add-on hardware (Sega CD, 32X) employed a physical low pass filter. Low-pass filter % [picodrive_lowpass_range] ( 60 |65|70|75|80|85|90|95|5|10|15|20|25|30|35|40|45|50|55) Specify the cut-off frequency of the audio low pass filter. A higher value increases the perceived 'strength' of the filter, since a wider range of the high frequency spectrum is attenuated.","title":"Core options"},{"location":"library/picodrive/#user-1-2-device-types","text":"The PicoDrive core supports the following device type(s). None - Input is disabled - Can be switched to using the Input device core options. 3 button pad - Joypad - Can be switched to using the Input device core options. 6 button pad - Joypad - Can be switched to using the Input device core options. SMS pad - Joypad - Is automatically switched to when a Sega Master System game is loaded.","title":"User 1 - 2 device types"},{"location":"library/picodrive/#joypad","text":"RetroPad Inputs User 1 - 2 input descriptors 3 button pad 6 button pad B B B A A A Mode Mode Start Start Start D-Pad Up D-Pad Up D-Pad Up D-Pad Down D-Pad Down D-Pad Down D-Pad Left D-Pad Left D-Pad Left D-Pad Right D-Pad Right D-Pad Right C C C Y Y X X Z Z RetroPad Inputs User 1 - 2 input descriptors SMS pad Button 1 Start Button 1 Start Button Pause Button Pause D-Pad Up D-Pad Up D-Pad Down D-Pad Down D-Pad Left D-Pad Left D-Pad Right D-Pad Right Button 2 Button 2","title":"Joypad"},{"location":"library/picodrive/#compatibility","text":"32x games Issue Brutal Unleashed \u2013 Above the Claw Softlocks after the first fight. FIFA Soccer \u201996 Glitched main menu text. Knuckles\u2019 Chaotix Glitched graphics on the Player Select screen. NBA Jam Tournament Edition Framerate issues. NFL Quarterback Club Some menu graphics are missing. Virtua Racing Deluxe Blinking line during the SEGA logo screen. World Series Baseball Starring Deion Sanders Crashes when starting a match. WWF Raw Various graphics are missing.","title":"Compatibility"},{"location":"library/picodrive/#external-links","text":"Official PicoDrive Website Official PicoDrive Github Repository Libretro PicoDrive Core info file Libretro PicoDrive Github Repository Report Libretro PicoDrive Core Issues Here","title":"External Links"},{"location":"library/picodrive/#sega-16-bit","text":"Sega - Master System (Emux SMS) Sega - MS/GG/MD/CD (Genesis Plus GX) Sega - MS/GG/SG-1000 (Gearsystem) MSX/SVI/ColecoVision/SG-1000 (blueMSX)","title":"Sega 16-bit"},{"location":"library/pocketcdg/","text":"PocketCDG \u00b6 Background \u00b6 A MP3 karaoke music player. Author/License \u00b6 The PocketCDG core has been authored by RedBug The PocketCDG core is licensed under MIT A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the PocketCDG core have the following file extensions: .cdg Features \u00b6 Frontend-level settings or features that the PocketCDG core respects. Feature Supported Restart \u2715 Screenshots \u2714 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The PocketCDG core's internal core name is 'pocketcdg' Geometry and timing \u00b6 The PocketCDG core's core provided FPS is 50 The PocketCDG core's core provided sample rate is 44100 Hz The PocketCDG core's core provided aspect ratio is 1 Usage \u00b6 The PocketCDG core can load any MP3+CDG file combination. It will then show the lyrics onscreen and on-cue like a true karaoke player, and it will also highlight the text which should be currently sung. Core options \u00b6 The PocketCDG core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Controllers \u00b6 The PocketCDG core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 device types \u00b6 None - Doesn't disable input. There's no reason to switch to this. RetroPad - Joypad - Stay on this. RetroKeyboard - Keyboard - Has keymapper support but isn't hooked up to any core inputs. There's no reason to switch to this. Controller tables \u00b6 Joypad \u00b6 User 1 Remap descriptors RetroPad Inputs Pause Start Up Down Left Right Shutdown External Links \u00b6 Libretro PocketCDG Core info file Libretro PocketCDG Github Repository Report Libretro PocketCDG Core Issues Here See also \u00b6 Media \u00b6 FFmpeg Game Music Emu Imageviewer mpv","title":"PocketCDG"},{"location":"library/pocketcdg/#pocketcdg","text":"","title":"PocketCDG"},{"location":"library/pocketcdg/#background","text":"A MP3 karaoke music player.","title":"Background"},{"location":"library/pocketcdg/#authorlicense","text":"The PocketCDG core has been authored by RedBug The PocketCDG core is licensed under MIT A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/pocketcdg/#extensions","text":"Content that can be loaded by the PocketCDG core have the following file extensions: .cdg","title":"Extensions"},{"location":"library/pocketcdg/#features","text":"Frontend-level settings or features that the PocketCDG core respects. Feature Supported Restart \u2715 Screenshots \u2714 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/pocketcdg/#directories","text":"The PocketCDG core's internal core name is 'pocketcdg'","title":"Directories"},{"location":"library/pocketcdg/#geometry-and-timing","text":"The PocketCDG core's core provided FPS is 50 The PocketCDG core's core provided sample rate is 44100 Hz The PocketCDG core's core provided aspect ratio is 1","title":"Geometry and timing"},{"location":"library/pocketcdg/#usage","text":"The PocketCDG core can load any MP3+CDG file combination. It will then show the lyrics onscreen and on-cue like a true karaoke player, and it will also highlight the text which should be currently sung.","title":"Usage"},{"location":"library/pocketcdg/#core-options","text":"The PocketCDG core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.","title":"Core options"},{"location":"library/pocketcdg/#controllers","text":"The PocketCDG core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/pocketcdg/#user-1-device-types","text":"None - Doesn't disable input. There's no reason to switch to this. RetroPad - Joypad - Stay on this. RetroKeyboard - Keyboard - Has keymapper support but isn't hooked up to any core inputs. There's no reason to switch to this.","title":"User 1 device types"},{"location":"library/pocketcdg/#controller-tables","text":"","title":"Controller tables"},{"location":"library/pocketcdg/#joypad","text":"User 1 Remap descriptors RetroPad Inputs Pause Start Up Down Left Right Shutdown","title":"Joypad"},{"location":"library/pocketcdg/#external-links","text":"Libretro PocketCDG Core info file Libretro PocketCDG Github Repository Report Libretro PocketCDG Core Issues Here","title":"External Links"},{"location":"library/pocketcdg/#see-also","text":"","title":"See also"},{"location":"library/pocketcdg/#media","text":"FFmpeg Game Music Emu Imageviewer mpv","title":"Media"},{"location":"library/pokemini/","text":"Nintendo - Pok\u00e9mon Mini (PokeMini) \u00b6 Background \u00b6 PokeMini is an emulator for the Pok\u00e9mon Mini handheld console. The PokeMini core has been authored by JustBurn The PokeMini core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here . BIOS \u00b6 Required or optional firmware files go in the frontend's system directory. Filename Description md5sum bios.min Pok\u00e9mon Mini BIOS - Optional 1e4fb124a3a886865acb574f388c803d Extensions \u00b6 Content that can be loaded by the PokeMini core have the following file extensions: .min RetroArch database(s) that are associated with the PokeMini core: Nintendo - Pokemon Mini Features \u00b6 Frontend-level settings or features that the PokeMini core respects. Feature Supported Restart \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2714 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The PokeMini core's library name is 'PokeMini' The PokeMini core saves/loads to/from these directories. Frontend's Save directory File Description *.eep EEPROM save Frontend's State directory File Description *.state# State Geometry and timing \u00b6 The PokeMini core's core provided FPS is 72 The PokeMini core's core provided sample rate is 44100 Hz The PokeMini core's base width is 96 The PokeMini core's base height is 64 The PokeMini core's max width is 576 The PokeMini core's max height is 384 The PokeMini core's core provided aspect ratio is 3/2 Core options \u00b6 The PokeMini core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Video Scale (Restart) [pokemini_video_scale] ( 4x |5x|6x|1x|2x|3x) Sets internal video scale factor. Increasing the scale factor improves the appearance of the internal 'dotmatrix' LCD filter. Scale should normally be set to '1x' for correct operation when using an external GPU shader. 'dotmatrix' LCD filter - Video Scale - 2x 'dotmatrix' LCD filter - Video Scale - 4x 'dotmatrix' LCD filter - Video Scale - 6x LCD Filter [pokemini_lcdfilter] ( dotmatrix |scanline|none) Specifies which internal screen filter should be applied to the display. 'dotmatrix' produces a clean LCD effect, and is the recommended option. LCD filters are disabled when 'Video Scale' is set to '1x'. LCD Filter - dotmatrix LCD Filter - scanline LCD Filter - none LCD Mode [pokemini_lcdmode] ( analog |3shades|2shades) Specifies the greyscale 'colour' reproduction characteristics of the emulated liquid crystal display. 'analog' attempts to simulate the Pok\u00e9mon Mini hardware by allowing smooth time-dependent transitions between 'colour' values. This option is recommended since most games exploited the analog nature of the Pok\u00e9mon Mini screen to show different shades of 'colour' on a nominally monochrome display. '3shades' reduces the analog greyscale levels to three specific shades and removes all ghosting effects. It is adequate for most games. '2shades' causes the screen to behave as a purely digital monochrome display, either full light or full dark. WARNING: This will cause severe flickering in most games. LCD Contrast [pokemini_lcdcontrast] ( 64 |0|16|32|48|80|96) Sets contrast level of emulated liquid crystal display. LCD Brightness [pokemini_lcdbright] ( 0 |-80|-60|-40|-20|20|40|60|80) Sets brightness offset of emulated liquid crystal display. Palette [pokemini_palette] ( Default |Old|Monochrome|Green|Green Vector|Red|Red Vector|Blue LCD|LEDBacklight|Girl Power|Blue|Blue Vector|Sepia|Monochrome Vector) Specifies palette used to 'colourise' the emulated liquid crystal display. 'Default' provides a close approximation of the natural screen tint of the original Pok\u00e9mon Mini hardware. Palettes with a 'Vector' suffix correspond to inverted colours. Palette - Default Palette - Old Palette - Monochrome Palette - Green Palette - Green Vector Palette - Red Palette - Red Vector Palette - Blue LCD Palette - LEDBacklight Palette - Girl Power Palette - Blue Palette - Blue Vector Palette - Sepia Palette - Monochrome Vector Piezo Filter [pokemini_piezofilter] ( ON |OFF) Enables an audio filter to more accurately simulate the characteristics of the Pok\u00e9mon Mini's piezoelectric speaker. Rumble Level (Screen + Controller) [pokemini_rumblelvl] ( 3 |2|1|0) Specifies the magnitude of the force feedback effect, both virtual ('screen shake') and physical ('controller rumble'). Controller Rumble [pokemini_controller_rumble] ( ON |OFF) Enables physical force feedback effect via controller rumble. Screen Shake [pokemini_screen_shake] ( ON |OFF) Enables virtual force feedback effect by 'shaking' the screen. This is helpful when using a controller without physical rumble support, since a number of games rely on force feedback to prompt user action. Rumble \u00b6 Rumble only works in the PokeMini core when The content being ran has rumble support. The frontend being used has rumble support. The joypad device being used has rumble support. The core option 'Rumble Level' is set to any value other than '0'. The core option 'Controller Rumble' is set to 'ON'. Attention If physical rumble is not supported, it is recommended to set the core option 'Screen Shake' to 'ON'. Joypad \u00b6 RetroPad Inputs User 1 input descriptors B Power D-Pad Up D-Pad Down D-Pad Left D-Pad Right A Shake C Compatibility \u00b6 Game Issue Pokemon Pinball Mini EEPROM saves do not function correctly - use save states instead Pokemon Race Mini EEPROM saves do not function correctly - use save states instead External Links \u00b6 Official PokeMini SourceForge Repository Libretro PokeMini Core info file Libretro PokeMini Github Repository Report Libretro PokeMini Core Issues Here","title":"Nintendo - Pok\u00e9mon Mini (PokeMini)"},{"location":"library/pokemini/#nintendo-pokemon-mini-pokemini","text":"","title":"Nintendo - Pok\u00e9mon Mini (PokeMini)"},{"location":"library/pokemini/#background","text":"PokeMini is an emulator for the Pok\u00e9mon Mini handheld console. The PokeMini core has been authored by JustBurn The PokeMini core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Background"},{"location":"library/pokemini/#bios","text":"Required or optional firmware files go in the frontend's system directory. Filename Description md5sum bios.min Pok\u00e9mon Mini BIOS - Optional 1e4fb124a3a886865acb574f388c803d","title":"BIOS"},{"location":"library/pokemini/#extensions","text":"Content that can be loaded by the PokeMini core have the following file extensions: .min RetroArch database(s) that are associated with the PokeMini core: Nintendo - Pokemon Mini","title":"Extensions"},{"location":"library/pokemini/#features","text":"Frontend-level settings or features that the PokeMini core respects. Feature Supported Restart \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2714 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/pokemini/#directories","text":"The PokeMini core's library name is 'PokeMini' The PokeMini core saves/loads to/from these directories. Frontend's Save directory File Description *.eep EEPROM save Frontend's State directory File Description *.state# State","title":"Directories"},{"location":"library/pokemini/#geometry-and-timing","text":"The PokeMini core's core provided FPS is 72 The PokeMini core's core provided sample rate is 44100 Hz The PokeMini core's base width is 96 The PokeMini core's base height is 64 The PokeMini core's max width is 576 The PokeMini core's max height is 384 The PokeMini core's core provided aspect ratio is 3/2","title":"Geometry and timing"},{"location":"library/pokemini/#core-options","text":"The PokeMini core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Video Scale (Restart) [pokemini_video_scale] ( 4x |5x|6x|1x|2x|3x) Sets internal video scale factor. Increasing the scale factor improves the appearance of the internal 'dotmatrix' LCD filter. Scale should normally be set to '1x' for correct operation when using an external GPU shader. 'dotmatrix' LCD filter - Video Scale - 2x 'dotmatrix' LCD filter - Video Scale - 4x 'dotmatrix' LCD filter - Video Scale - 6x LCD Filter [pokemini_lcdfilter] ( dotmatrix |scanline|none) Specifies which internal screen filter should be applied to the display. 'dotmatrix' produces a clean LCD effect, and is the recommended option. LCD filters are disabled when 'Video Scale' is set to '1x'. LCD Filter - dotmatrix LCD Filter - scanline LCD Filter - none LCD Mode [pokemini_lcdmode] ( analog |3shades|2shades) Specifies the greyscale 'colour' reproduction characteristics of the emulated liquid crystal display. 'analog' attempts to simulate the Pok\u00e9mon Mini hardware by allowing smooth time-dependent transitions between 'colour' values. This option is recommended since most games exploited the analog nature of the Pok\u00e9mon Mini screen to show different shades of 'colour' on a nominally monochrome display. '3shades' reduces the analog greyscale levels to three specific shades and removes all ghosting effects. It is adequate for most games. '2shades' causes the screen to behave as a purely digital monochrome display, either full light or full dark. WARNING: This will cause severe flickering in most games. LCD Contrast [pokemini_lcdcontrast] ( 64 |0|16|32|48|80|96) Sets contrast level of emulated liquid crystal display. LCD Brightness [pokemini_lcdbright] ( 0 |-80|-60|-40|-20|20|40|60|80) Sets brightness offset of emulated liquid crystal display. Palette [pokemini_palette] ( Default |Old|Monochrome|Green|Green Vector|Red|Red Vector|Blue LCD|LEDBacklight|Girl Power|Blue|Blue Vector|Sepia|Monochrome Vector) Specifies palette used to 'colourise' the emulated liquid crystal display. 'Default' provides a close approximation of the natural screen tint of the original Pok\u00e9mon Mini hardware. Palettes with a 'Vector' suffix correspond to inverted colours. Palette - Default Palette - Old Palette - Monochrome Palette - Green Palette - Green Vector Palette - Red Palette - Red Vector Palette - Blue LCD Palette - LEDBacklight Palette - Girl Power Palette - Blue Palette - Blue Vector Palette - Sepia Palette - Monochrome Vector Piezo Filter [pokemini_piezofilter] ( ON |OFF) Enables an audio filter to more accurately simulate the characteristics of the Pok\u00e9mon Mini's piezoelectric speaker. Rumble Level (Screen + Controller) [pokemini_rumblelvl] ( 3 |2|1|0) Specifies the magnitude of the force feedback effect, both virtual ('screen shake') and physical ('controller rumble'). Controller Rumble [pokemini_controller_rumble] ( ON |OFF) Enables physical force feedback effect via controller rumble. Screen Shake [pokemini_screen_shake] ( ON |OFF) Enables virtual force feedback effect by 'shaking' the screen. This is helpful when using a controller without physical rumble support, since a number of games rely on force feedback to prompt user action.","title":"Core options"},{"location":"library/pokemini/#rumble","text":"Rumble only works in the PokeMini core when The content being ran has rumble support. The frontend being used has rumble support. The joypad device being used has rumble support. The core option 'Rumble Level' is set to any value other than '0'. The core option 'Controller Rumble' is set to 'ON'. Attention If physical rumble is not supported, it is recommended to set the core option 'Screen Shake' to 'ON'.","title":"Rumble"},{"location":"library/pokemini/#joypad","text":"RetroPad Inputs User 1 input descriptors B Power D-Pad Up D-Pad Down D-Pad Left D-Pad Right A Shake C","title":"Joypad"},{"location":"library/pokemini/#compatibility","text":"Game Issue Pokemon Pinball Mini EEPROM saves do not function correctly - use save states instead Pokemon Race Mini EEPROM saves do not function correctly - use save states instead","title":"Compatibility"},{"location":"library/pokemini/#external-links","text":"Official PokeMini SourceForge Repository Libretro PokeMini Core info file Libretro PokeMini Github Repository Report Libretro PokeMini Core Issues Here","title":"External Links"},{"location":"library/ppsspp/","text":"Sony - PlayStation Portable (PPSSPP) \u00b6 Background \u00b6 A PSP emulator for Android, Windows, Mac and Linux, written in C++. The PPSSPP core supports OpenGL , Vulkan , and Direct3D 11 rendering. The PPSSPP core has been authored by Henrik Hrydgard The PPSSPP core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here . Requirements \u00b6 OpenGL/Open GL ES 2.0 or higher for the OpenGL renderer. Vulkan for the Vulkan renderer. Direct3D 11 for the Direct3D 11 renderer. BIOS \u00b6 The PPSSPP core requires assets files to be fully functional. Assets such as fonts and backgrounds that are required for memory card screens. In order to acquire PPSSPP's assets files and install them succcessfully, follow these steps. 1 . Create a directory named PPSSPP in RetroArch's System directory. RetroArch/ \u2514\u2500\u2500 system/ \u2514\u2500\u2500 PPSSPP/ Here's an example of what it should look like. 2 . Visit https://github.com/hrydgard/ppsspp and download the repository. 3 . Extract ppsspp-master.zip 4 . Copy the contents of ppsspp-master/assets into 'system/PPSSPP' The end result should look like this. Attention Don't like PPSSPP's replacement fonts? You can place the original PSP fonts in 'system/PPSSPP/flash0/font' Extensions \u00b6 Content that can be loaded by the PPSSPP core have the following file extensions: .elf .iso .cso .prx .pbp RetroArch database(s) that are associated with the PPSSPP core: Sony - PlayStation Portable Features \u00b6 Frontend-level settings or features that the PPSSPP core respects. Feature Supported Restart \u2714 Saves \u2714 States \u2714 Rewind \u2715 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2714 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2714 Language \u2714 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The PPSSPP core's library name is 'PPSSPP' The PPSSPP core saves/loads to/from these directories. Frontend's Save directory . \u2514\u2500\u2500 PSP/ \u251c\u2500\u2500 PPSSPP_STATE/ (Used to be the state directory, no longer used) \u251c\u2500\u2500 SAVEDATA/ (In-game saves) \u251c\u2500\u2500 flash0/ (Font override for real fonts dumped from PSP system) \u251c\u2500\u2500 Cheats/ (Internal Cheats directory, disabled by default) \u251c\u2500\u2500 GAME/ (DLC directory) \u2514\u2500\u2500 SYSTEM/ \u2514\u2500\u2500 CACHE/ (Shader cache) Frontend's State directory File Description *.state# State Geometry and timing \u00b6 The PPSSPP core's core provided FPS is 60 The PPSSPP core's core provided sample rate is 44100 Hz The PPSSPP core's base width is dependent on the 'Internal Resolution' core option The PPSSPP core's base height is dependent on the 'Internal Resolution' core option The PPSSPP core's max width is dependent on the 'Internal Resolution' core option The PPSSPP core's max height is dependent on the 'Internal Resolution' core option The PPSSPP core's core provided aspect ratio is 16/9 Language \u00b6 When the 'Language' core option is set to automatic, the default PPSSPP language setting will be pulled from RetroArch's Language setting. Nickname \u00b6 PPSSPP's default nickname setting is pulled from RetroArch's nickname setting. Internal Cheats \u00b6 Disabled by default. To enable and allow the use of ini cheat files in save\\PSP\\Cheats, set the 'Internal Cheats Support' core option to enabled. Cheats can be used to unlock 60fps in several 30fps games. Each code can be activated or disabled in the ini directly with _C1 in place of _C0 on the title line. PPSSPP forums thread DLC \u00b6 DLCs need to be installed in the GAME directory. Create the GAME directory in the PSP directory and it should look like this. RetroArch\\saves\\PPSSPP\\PSP\\GAME\\ OpenGL \u00b6 PPSSPP's OpenGL renderer can be used by setting RetroArch's video driver to gl. The common option for all operating systems is OpenGL, requiring hardware that supports OpenGL/Open GL ES 2.0 or higher. It is an older, pre-Vulkan API, slower than Vulkan but with better compatibility. If you encounter problems with other APIs, try this one. Vulkan \u00b6 PPSSPP's Vulkan renderer can be used by setting RetroArch's video driver to vulkan. This is the latest and fastest API currently. It is most recommended for demanding less of your CPU, thus being the fastest. D3D11 \u00b6 PPSSPP's Direct3D 11 renderer can be used by setting RetroArch's video driver to d3d11. In some cases Direct3D 11 may offer better performance than OpenGL, especially on integrated Intel graphics. Core options \u00b6 The PPSSPP core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. CPU Core [ppsspp_cpu_core] ( jit |IR jit|interpreter) The jit setting enables the Dynamic Recomplier (Dynarec) for CPU emulation. The Dynarec is much faster than the interpreter setting and is the default, recommended mode for supported architectures. The interpreter setting enables the Interpreter for CPU emulation. The Interpreter is a very slow type of emulation and mostly useful for debug, but should work anywhere. The IR jit setting might be worth trying against games which are broken in the other two settings. Locked CPU Speed [ppsspp_locked_cpu_speed] ( off |222MHz|266MHz|333MHz) Allows you to lock the internal CPU clock of the emulator (of the emulated CPU). Larger clocks can ensure a more stable performance in certain games that present problems even on a real PSP, but it requires more powerful hardware. Lower clocks can help weak hardware have more comfortable gameplay, limiting FPS to a lower rate. Changing this option opens the door to several bugs that may compromise some games. In case of doubt, keep this on off. Language [ppsspp_language] ( automatic |english|japanese|french|spanish|german|italian|dutch|portuguese|russian|korean|chinese_traditional|chinese_simplified) Configure the PPSSPP's system language. When set to automatic, the default PPSSPP language setting will be pulled from RetroArch's Language setting. Rendering Mode [ppsspp_rendering_mode] ( buffered |nonbuffered) Buffered mode renders graphics close to what is in the actual PSP, with all the effects and with the least possible bugs. Nonbuffered mode skips most heavier graphics effects like blur, bloom, reflections, shadows, and more. It can be used as a speed hack if it is underperforming because of a weak GPU. True Color Depth [ppsspp_true_color] ( enabled |disabled) Enhance the colors compared to the older models of PSPs which have lower quality screens. It's best to keep this enabled. Auto Frameskip [ppsspp_auto_frameskip] ( disabled |enabled) This option only selects the optimal number of frames to skip to not to compromise both gameplay. The max frames to be skipped can be limited in the Frameskip option. Frameskip [ppsspp_frameskip] ( 0 |1|2|3|4|5|6|7|8|9) This option skips image frames to increase the emulation speed. They can be skipped between 1 and 8 frames every second. Using this option can give the impression of the game running faster but with stuttering, and this increases the amount of frames to be skipped you select. This option is only effective when your processor is powerful enough. Force Max FPS [ppsspp_force_max_fps] ( disabled |enabled) Prevents FPS form exceeding 60. This option was created in order to help God of War games that used to have a performance problem because the FPS were higher than normal. This option locks the FPS to 60 to avoid this problem. Audio latency [ppsspp_audio_latency] ( low |medium|high) Configure the audio latency. Internal Resolution [ppsspp_internal_resolution] ( 480x272 |960x544|1440x816|1920x1088|2400x1360|2880x1632|3360x1904|3840x2176|4320x2448|4800x2720) The 'Rendering Mode' core option must be set to buffered for this to have any effect. Controls the internal resolution of the graphics, significant performance impact if your GPU is not powerful enough for certain resolutions. Confirmation Button [ppsspp_button_preference] ( cross |circle) Select whether the cross input or the circle input is the confirmation button. Fast Memory (Speedhack) [ppsspp_fast_memory] ( enabled |disabled) This option avoids some memory accesses by caching information, however a few games may have problems when this option is enabled, most run with no problem. Block Transfer GPU [ppsspp_block_transfer_gpu] ( enabled |disabled) This option simulates support for rendering effects not supported by current hardware, but supported by PSP hardware. Fixes multiple graphics problems in a number of games, but decreases performance on weaker GPUs (on smartphones). Disabling can greatly impact performance, and can be a great help in games that do not need this option enabled. Texture Scaling Level [ppsspp_texture_scaling_level] ( 1 |2|3|4|5|0) With this option, you can make modifications to the texture scale level, which improves the visual at high resolutions. All the scaling is made by CPU and results in a great performance impact. Use carefully. Texture Scaling Type [ppsspp_texture_scaling_type] ( xbrz |hybrid|bicubic|hybrid_bicubic) Choose the Texture Upscale Type. xBRZ is overall the best option while Hybrid is a slower version of xBRZ and doesn't offers much difference, Hybrid + Bicubic is the slowest one using two effects. Texture Filtering [ppsspp_texture_filtering] ( auto |nearest|linear|linear(FMV)) Apply texture filtering. Stick to auto in case of doubt. Anisotropic Filtering [ppsspp_texture_anisotropic_filtering] ( off |1x|2x|4x|8x|16x) Modify the Anisotropic Filtering, which fixs the textures on the horizon that are drawn at angles resulting in a better look. Texture Deposterize [ppsspp_texture_deposterize] ( disabled |enabled) Deposterize fixes small in-texture glitches that may happen when the texture is upscaled. GPU Hardware T&L [ppsspp_gpu_hardware_transform] ( enabled |disabled) Uses the hardware to generate lighting and shading effects. With this option disabled performance may drop a lot on weak GPUs. Bugs are rare, but if found, can be disabled for testing. Vertex Cache (Speedhack) [ppsspp_vertex_cache] ( enabled |disabled) Uses vertex cache to improve performance in few games, in rare cases can cause glitches in geometry. Some games have reduced performance with this option enabled. This option mostly benefits OpenGL API, doesn't need to be enabled to other backends. IO Threading [ppsspp_separate_io_thread] ( disabled |enabled) Uses separate CPU thread for input/output of files (read data). Unsafe FuncReplacements [ppsspp_unsafe_func_replacements] ( enabled |disabled) Enable unsafe CPU function replacements. May make games playable. Sound Speedhack [ppsspp_sound_speedhack] ( disabled |enabled) It helps in some games, like Dead or Alive, with problems in sound speed. Internal Cheats Support [ppsspp_cheats] ( disabled |enabled) Enables internal cheats. Look at the Internal Cheats section for more information. Joypad \u00b6 RetroPad Inputs User 1 input descriptors Cross Square Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right Circle Triangle L R X Analog X Y Analog Y Compatibility \u00b6 PPSSPP Compatibility List Video Tutorial \u00b6 External Links \u00b6 Official PPSSPP Website Official PPSSPP Github Repository Libretro PPSSPP Core info file Report Libretro PPSSPP Core Issues Here","title":"Sony - PlayStation Portable (PPSSPP)"},{"location":"library/ppsspp/#sony-playstation-portable-ppsspp","text":"","title":"Sony - PlayStation Portable (PPSSPP)"},{"location":"library/ppsspp/#background","text":"A PSP emulator for Android, Windows, Mac and Linux, written in C++. The PPSSPP core supports OpenGL , Vulkan , and Direct3D 11 rendering. The PPSSPP core has been authored by Henrik Hrydgard The PPSSPP core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Background"},{"location":"library/ppsspp/#requirements","text":"OpenGL/Open GL ES 2.0 or higher for the OpenGL renderer. Vulkan for the Vulkan renderer. Direct3D 11 for the Direct3D 11 renderer.","title":"Requirements"},{"location":"library/ppsspp/#bios","text":"The PPSSPP core requires assets files to be fully functional. Assets such as fonts and backgrounds that are required for memory card screens. In order to acquire PPSSPP's assets files and install them succcessfully, follow these steps. 1 . Create a directory named PPSSPP in RetroArch's System directory. RetroArch/ \u2514\u2500\u2500 system/ \u2514\u2500\u2500 PPSSPP/ Here's an example of what it should look like. 2 . Visit https://github.com/hrydgard/ppsspp and download the repository. 3 . Extract ppsspp-master.zip 4 . Copy the contents of ppsspp-master/assets into 'system/PPSSPP' The end result should look like this. Attention Don't like PPSSPP's replacement fonts? You can place the original PSP fonts in 'system/PPSSPP/flash0/font'","title":"BIOS"},{"location":"library/ppsspp/#extensions","text":"Content that can be loaded by the PPSSPP core have the following file extensions: .elf .iso .cso .prx .pbp RetroArch database(s) that are associated with the PPSSPP core: Sony - PlayStation Portable","title":"Extensions"},{"location":"library/ppsspp/#features","text":"Frontend-level settings or features that the PPSSPP core respects. Feature Supported Restart \u2714 Saves \u2714 States \u2714 Rewind \u2715 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2714 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2714 Language \u2714 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/ppsspp/#directories","text":"The PPSSPP core's library name is 'PPSSPP' The PPSSPP core saves/loads to/from these directories. Frontend's Save directory . \u2514\u2500\u2500 PSP/ \u251c\u2500\u2500 PPSSPP_STATE/ (Used to be the state directory, no longer used) \u251c\u2500\u2500 SAVEDATA/ (In-game saves) \u251c\u2500\u2500 flash0/ (Font override for real fonts dumped from PSP system) \u251c\u2500\u2500 Cheats/ (Internal Cheats directory, disabled by default) \u251c\u2500\u2500 GAME/ (DLC directory) \u2514\u2500\u2500 SYSTEM/ \u2514\u2500\u2500 CACHE/ (Shader cache) Frontend's State directory File Description *.state# State","title":"Directories"},{"location":"library/ppsspp/#geometry-and-timing","text":"The PPSSPP core's core provided FPS is 60 The PPSSPP core's core provided sample rate is 44100 Hz The PPSSPP core's base width is dependent on the 'Internal Resolution' core option The PPSSPP core's base height is dependent on the 'Internal Resolution' core option The PPSSPP core's max width is dependent on the 'Internal Resolution' core option The PPSSPP core's max height is dependent on the 'Internal Resolution' core option The PPSSPP core's core provided aspect ratio is 16/9","title":"Geometry and timing"},{"location":"library/ppsspp/#language","text":"When the 'Language' core option is set to automatic, the default PPSSPP language setting will be pulled from RetroArch's Language setting.","title":"Language"},{"location":"library/ppsspp/#nickname","text":"PPSSPP's default nickname setting is pulled from RetroArch's nickname setting.","title":"Nickname"},{"location":"library/ppsspp/#internal-cheats","text":"Disabled by default. To enable and allow the use of ini cheat files in save\\PSP\\Cheats, set the 'Internal Cheats Support' core option to enabled. Cheats can be used to unlock 60fps in several 30fps games. Each code can be activated or disabled in the ini directly with _C1 in place of _C0 on the title line. PPSSPP forums thread","title":"Internal Cheats"},{"location":"library/ppsspp/#dlc","text":"DLCs need to be installed in the GAME directory. Create the GAME directory in the PSP directory and it should look like this. RetroArch\\saves\\PPSSPP\\PSP\\GAME\\","title":"DLC"},{"location":"library/ppsspp/#opengl","text":"PPSSPP's OpenGL renderer can be used by setting RetroArch's video driver to gl. The common option for all operating systems is OpenGL, requiring hardware that supports OpenGL/Open GL ES 2.0 or higher. It is an older, pre-Vulkan API, slower than Vulkan but with better compatibility. If you encounter problems with other APIs, try this one.","title":"OpenGL"},{"location":"library/ppsspp/#vulkan","text":"PPSSPP's Vulkan renderer can be used by setting RetroArch's video driver to vulkan. This is the latest and fastest API currently. It is most recommended for demanding less of your CPU, thus being the fastest.","title":"Vulkan"},{"location":"library/ppsspp/#d3d11","text":"PPSSPP's Direct3D 11 renderer can be used by setting RetroArch's video driver to d3d11. In some cases Direct3D 11 may offer better performance than OpenGL, especially on integrated Intel graphics.","title":"D3D11"},{"location":"library/ppsspp/#core-options","text":"The PPSSPP core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. CPU Core [ppsspp_cpu_core] ( jit |IR jit|interpreter) The jit setting enables the Dynamic Recomplier (Dynarec) for CPU emulation. The Dynarec is much faster than the interpreter setting and is the default, recommended mode for supported architectures. The interpreter setting enables the Interpreter for CPU emulation. The Interpreter is a very slow type of emulation and mostly useful for debug, but should work anywhere. The IR jit setting might be worth trying against games which are broken in the other two settings. Locked CPU Speed [ppsspp_locked_cpu_speed] ( off |222MHz|266MHz|333MHz) Allows you to lock the internal CPU clock of the emulator (of the emulated CPU). Larger clocks can ensure a more stable performance in certain games that present problems even on a real PSP, but it requires more powerful hardware. Lower clocks can help weak hardware have more comfortable gameplay, limiting FPS to a lower rate. Changing this option opens the door to several bugs that may compromise some games. In case of doubt, keep this on off. Language [ppsspp_language] ( automatic |english|japanese|french|spanish|german|italian|dutch|portuguese|russian|korean|chinese_traditional|chinese_simplified) Configure the PPSSPP's system language. When set to automatic, the default PPSSPP language setting will be pulled from RetroArch's Language setting. Rendering Mode [ppsspp_rendering_mode] ( buffered |nonbuffered) Buffered mode renders graphics close to what is in the actual PSP, with all the effects and with the least possible bugs. Nonbuffered mode skips most heavier graphics effects like blur, bloom, reflections, shadows, and more. It can be used as a speed hack if it is underperforming because of a weak GPU. True Color Depth [ppsspp_true_color] ( enabled |disabled) Enhance the colors compared to the older models of PSPs which have lower quality screens. It's best to keep this enabled. Auto Frameskip [ppsspp_auto_frameskip] ( disabled |enabled) This option only selects the optimal number of frames to skip to not to compromise both gameplay. The max frames to be skipped can be limited in the Frameskip option. Frameskip [ppsspp_frameskip] ( 0 |1|2|3|4|5|6|7|8|9) This option skips image frames to increase the emulation speed. They can be skipped between 1 and 8 frames every second. Using this option can give the impression of the game running faster but with stuttering, and this increases the amount of frames to be skipped you select. This option is only effective when your processor is powerful enough. Force Max FPS [ppsspp_force_max_fps] ( disabled |enabled) Prevents FPS form exceeding 60. This option was created in order to help God of War games that used to have a performance problem because the FPS were higher than normal. This option locks the FPS to 60 to avoid this problem. Audio latency [ppsspp_audio_latency] ( low |medium|high) Configure the audio latency. Internal Resolution [ppsspp_internal_resolution] ( 480x272 |960x544|1440x816|1920x1088|2400x1360|2880x1632|3360x1904|3840x2176|4320x2448|4800x2720) The 'Rendering Mode' core option must be set to buffered for this to have any effect. Controls the internal resolution of the graphics, significant performance impact if your GPU is not powerful enough for certain resolutions. Confirmation Button [ppsspp_button_preference] ( cross |circle) Select whether the cross input or the circle input is the confirmation button. Fast Memory (Speedhack) [ppsspp_fast_memory] ( enabled |disabled) This option avoids some memory accesses by caching information, however a few games may have problems when this option is enabled, most run with no problem. Block Transfer GPU [ppsspp_block_transfer_gpu] ( enabled |disabled) This option simulates support for rendering effects not supported by current hardware, but supported by PSP hardware. Fixes multiple graphics problems in a number of games, but decreases performance on weaker GPUs (on smartphones). Disabling can greatly impact performance, and can be a great help in games that do not need this option enabled. Texture Scaling Level [ppsspp_texture_scaling_level] ( 1 |2|3|4|5|0) With this option, you can make modifications to the texture scale level, which improves the visual at high resolutions. All the scaling is made by CPU and results in a great performance impact. Use carefully. Texture Scaling Type [ppsspp_texture_scaling_type] ( xbrz |hybrid|bicubic|hybrid_bicubic) Choose the Texture Upscale Type. xBRZ is overall the best option while Hybrid is a slower version of xBRZ and doesn't offers much difference, Hybrid + Bicubic is the slowest one using two effects. Texture Filtering [ppsspp_texture_filtering] ( auto |nearest|linear|linear(FMV)) Apply texture filtering. Stick to auto in case of doubt. Anisotropic Filtering [ppsspp_texture_anisotropic_filtering] ( off |1x|2x|4x|8x|16x) Modify the Anisotropic Filtering, which fixs the textures on the horizon that are drawn at angles resulting in a better look. Texture Deposterize [ppsspp_texture_deposterize] ( disabled |enabled) Deposterize fixes small in-texture glitches that may happen when the texture is upscaled. GPU Hardware T&L [ppsspp_gpu_hardware_transform] ( enabled |disabled) Uses the hardware to generate lighting and shading effects. With this option disabled performance may drop a lot on weak GPUs. Bugs are rare, but if found, can be disabled for testing. Vertex Cache (Speedhack) [ppsspp_vertex_cache] ( enabled |disabled) Uses vertex cache to improve performance in few games, in rare cases can cause glitches in geometry. Some games have reduced performance with this option enabled. This option mostly benefits OpenGL API, doesn't need to be enabled to other backends. IO Threading [ppsspp_separate_io_thread] ( disabled |enabled) Uses separate CPU thread for input/output of files (read data). Unsafe FuncReplacements [ppsspp_unsafe_func_replacements] ( enabled |disabled) Enable unsafe CPU function replacements. May make games playable. Sound Speedhack [ppsspp_sound_speedhack] ( disabled |enabled) It helps in some games, like Dead or Alive, with problems in sound speed. Internal Cheats Support [ppsspp_cheats] ( disabled |enabled) Enables internal cheats. Look at the Internal Cheats section for more information.","title":"Core options"},{"location":"library/ppsspp/#joypad","text":"RetroPad Inputs User 1 input descriptors Cross Square Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right Circle Triangle L R X Analog X Y Analog Y","title":"Joypad"},{"location":"library/ppsspp/#compatibility","text":"PPSSPP Compatibility List","title":"Compatibility"},{"location":"library/ppsspp/#video-tutorial","text":"","title":"Video Tutorial"},{"location":"library/ppsspp/#external-links","text":"Official PPSSPP Website Official PPSSPP Github Repository Libretro PPSSPP Core info file Report Libretro PPSSPP Core Issues Here","title":"External Links"},{"location":"library/prboom/","text":"Doom (PrBoom) \u00b6 Background \u00b6 Port of prboom to libretro - plays Doom, Doom II, Final Doom and other Doom IWAD mods. The PrBoom core has been authored by Florian Schulze The PrBoom core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here . BIOS \u00b6 Required or optional firmware files go in the frontend's system directory. Filename Description prboom.wad PrBoom requires data ROM 'prboom.wad' inside the ROM directory. Extensions \u00b6 Content that can be loaded by the PrBoom core have the following file extensions: .wad .iwad .pwad RetroArch database(s) that are associated with the PrBoom core: DOOM Features \u00b6 Frontend-level settings or features that the PrBoom core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2714 Native Cheats \u2714 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The PrBoom core's library name is 'PrBoom' The PrBoom core saves/loads to/from these directories. Frontend's Save directory File Description (content name)/*.dsg Save (content name)/prboom.cfg DOOM Config Geometry and timing \u00b6 The PrBoom core's core provided FPS (by default) is 60 The PrBoom core's core provided sample rate is 44100 Hz The PrBoom core's base width is dependent on the Internal resolution core option. The PrBoom core's base height is dependent on the Internal resolution core option. The PrBoom core's max width is dependent on the Internal resolution core option. The PrBoom core's max height is dependent on the Internal resolution core option. The PrBoom core's core provided aspect ratio is 4/3 Loading DOOM \u00b6 PrBoom can load wad, iwad, and pwad files. The PrBoom core requires data ROM 'prboom.wad' inside the loaded content's directory. You must use a separate folder for each wad to be able to have all Dooms use their correct music An example folder structure would be like so: \u2514\u2500\u2500 roms/ \u2514\u2500\u2500 ports/ \u251c\u2500\u2500 doom/ \u2502 \u251c\u2500\u2500 doom.wad \u2502 \u251c\u2500\u2500 prboom.wad \u2502 \u2514\u2500\u2500 doommusic.mp3 \u2514\u2500\u2500 doom2/ \u251c\u2500\u2500 doom2.wad \u251c\u2500\u2500 prboom.wad \u2514\u2500\u2500 doom2music.mp3 Game saves and internal configuration files will be created in the frontend-defined save directory, organised in folders matching the filenames of loaded content - for example: \u2514\u2500\u2500 saves/ \u2514\u2500\u2500 PrBoom/ \u251c\u2500\u2500 doom/ \u2502 \u251c\u2500\u2500 prbmsav0.dsg \u2502 \u251c\u2500\u2500 prbmsav1.dsg \u2502 \u2514\u2500\u2500 prboom.cfg \u2514\u2500\u2500 doom2/ \u251c\u2500\u2500 prbmsav0.dsg \u251c\u2500\u2500 prbmsav1.dsg \u2514\u2500\u2500 prboom.cfg Game saves are numbered from 'prbmsav0.dsg' to 'prbmsav7.dsg'. Music \u00b6 The PrBoom core is not able to play the music files inside the wad files (they are in a proprietary midi format). To enable music in your Doom game(s) you need to copy MP3s with specific names into the same folder as your ROMs are located. You can find a list of names here : They follow the scheme e1m1.mp3, e1m2.mp3, ..., e2m1.mp, e2m2.mp3, ... . Tracks are freely available - find them by searching for \"PSX Doom Music\". If you are having trouble with the audio not playing after you have renamed all the MP3s, try clearing all the ID3 tag information for each of the MP3s. Below are the corresponding tracks if the MP3s are named: File Name mp3 mus_e1m1 \"level 01 (hangar).mp3\" mus_e1m2 \"level 02 (plant).mp3\" mus_e1m3 \"level 03 (toxin refinery).mp3\" mus_e1m4 \"level 04 (command control).mp3\" mus_e1m5 \"level 05 (phobos lab).mp3\" mus_e1m6 \"level 06 (central processing).mp3\" mus_e1m7 \"level 07 (computer station).mp3\" mus_e1m8 \"level 08 (phobos anomaly).mp3\" mus_e1m9 \"level 06 (fistula).mp3\" mus_e2m1 \"level 09 (deimos anomaly).mp3\" mus_e2m2 \"level 10 (containment area).mp3\" mus_e2m3 \"level 11 (refinery).mp3\" mus_e2m4 \"level 12 (deimos lab).mp3\" mus_e2m5 \"level 13 (command center).mp3\" mus_e2m6 \"level 02 (plant).mp3\" mus_e2m7 \"level 01 (hangar).mp3\" mus_e2m8 \"level 03 (toxin refinery).mp3\" mus_e2m9 \"level 02 (virgil).mp3\" mus_e3m1 \"level 17 (hell keep).mp3\" mus_e3m2 \"level 03 (canyon).mp3\" mus_e3m3 \"level 18 (pandemonium).mp3\" mus_e3m4 \"level 06 (central processing).mp3\" mus_e3m5 \"level 20 (unholy cathedral).mp3\" mus_e3m6 \"level 21 (mt erebus).mp3\" mus_e3m7 \"level 22 (limbo).mp3\" mus_e3m8 \"level 09 (nessus).mp3\" mus_e3m9 \"level 10 (paradox).mp3\" mus_inter \"e2m3.mp3\" mus_intro \"track 02 title screen.mp3\" mus_bunny \"track 03 main menu.mp3\" mus_victor \"track 09 endgame.mp3\" mus_introa \"track 02 title screen.mp3\" mus_runnin \"level 01 (hangar).mp3\" mus_stalks \"level 10 (containment area).mp3\" mus_countd \"level 22 (limbo).mp3\" mus_betwee \"level 16 (hell gate).mp3\" mus_doom \"level 08 (phobos anomaly).mp3\" mus_the_da \"level 21 (mt erebus).mp3\" mus_shawn \"level 20 (unholy cathedral).mp3\" mus_ddtblu \"level 24 (hell beneath).mp3\" mus_in_cit \"level 11 (refinery).mp3\" mus_dead \"level 13 (command center).mp3\" mus_stlks2 \"level 09 (deimos anomaly).mp3\" mus_theda2 \"level 17 (hell keep).mp3\" mus_doom2 \"level 08 (minos).mp3\" mus_ddtbl2 \"level 16 (hell gate).mp3\" mus_runni2 \"level 04 (combine).mp3\" mus_dead2 \"level 18 (pandemonium).mp3\" mus_stlks3 \"level 06 (central processing).mp3\" mus_romero \"level 05 (phobos lab).mp3\" mus_shawn2 \"level 10 (containment area).mp3\" mus_messag \"level 01 (attack).mp3\" mus_count2 \"level 02 (plant).mp3\" mus_ddtbl3 \"level 03 (toxin refinery).mp3\" mus_ampie \"level 01 (hangar).mp3\" mus_theda3 \"level 06 (fistula).mp3\" mus_adrian \"level 07 (computer station).mp3\" mus_messg2 \"level 08 (phobos anomaly).mp3\" mus_romer2 \"level 11 (refinery).mp3\" mus_tense \"level 07 (geryon).mp3\" mus_shawn3 \"level 05 (catwalk).mp3\" mus_openin \"level 04 (command control).mp3\" mus_evil \"level 16 (hell gate).mp3\" mus_ultima \"level 03 (toxin refinery).mp3\" mus_read_m \"track 03 main menu.mp3\" mus_dm2ttl \"track 02 title screen.mp3\" mus_dm2int \"track 05 stats screen.mp3\" Config \u00b6 PrBoom's internal game settings can be found in the 'prboom.cfg' file inside each game's save directory. Many of these settings may be changed from the in-game menu. A few notable options are as follows: Options \u2192 General (page 1) \u2192 Framerate (35fps|40fps|50fps| 60fps |70fps|72fps|75fps|90fps|100fps| 119fps|120fps|140fps|144fps|240fps|244fps) Vanilla Doom has a native framerate of 35fps. This should be considered the 'correct' value, but it can lead to an irregular 'stuttering' effect on 60Hz LCD displays. All framerates should maintain the proper game speed. Options \u2192 General (page 1) \u2192 Gamma Correction ( Off |Lv. 1|Lv. 2|Lv. 3|Lv. 4) Sets display brightness. Options \u2192 Screen Size ( Low |High) When set to 'Low', the HUD is shown at the bottom of the screen. When set to 'High', the gameplay area fills the screen and no HUD is shown. Options \u2192 Mouse Sensitivity The 'horizontal' slider sets the movement speed when looking left/right with either the mouse or the gamepad right analog stick. Core options \u00b6 The PrBoom core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Internal resolution (restart) [prboom-resolution] ( 320x200 |640x400|960x600|1280x800|1600x1000|1920x1200) Configure the resolution. Requires a restart. Internal resolution - 320x200 Internal resolution - 1920x1200 Mouse active when using Gamepad [prboom-mouse_on] ( disabled |enabled) Allows you to use mouse inputs even when User 1's device type isn't set to 'RetroKeyboard/Mouse'. Look on parent folders for IWADs [prboom-find_recursive_on] ( enabled |disabled) Scans parent folders for IWADs. NOTE: You need to disable this if you want to run SIGIL. Analog Deadzone (percent) [prboom-analog_deadzone] ( 15 |20|25|30|0|5|10) Sets the deadzone of the Gamepad analog sticks when the input device type is set to 'Gamepad Modern'. User 1 device types \u00b6 The PrBoom core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): None - Input disabled. Gamepad Classic - Joypad Gamepad Modern - Joypad RetroKeyboard/Mouse - Keyboard and Mouse - Switch to this for keyboard and mouse input. Has keymapper support. Joypad \u00b6 User 1 input descriptors for 'Gamepad Classic' device type RetroPad Inputs PrBoom inputs Use Use Run Run Show/Hide Map Show/Hide Map Show/Hide Menu Show/Hide Menu D-Pad Up D-Pad Up D-Pad Down D-Pad Down D-Pad Left D-Pad Left D-Pad Right D-Pad Right Fire Fire Strafe Strafe Strafe Left Strafe Left Strafe Right Strafe Right Previous Weapon Previous Weapon Next Weapon Next Weapon User 1 input descriptors for 'Gamepad Modern' device type RetroPad Inputs PrBoom inputs Menu Cancel Menu Cancel Quick Save Quick Save Show/Hide Map Show/Hide Map Show/Hide Menu Show/Hide Menu D-Pad Up D-Pad Up D-Pad Down D-Pad Down D-Pad Left D-Pad Left D-Pad Right D-Pad Right Menu Select Menu Select Quick Load Quick Load Previous Weapon Previous Weapon Next Weapon Next Weapon Use Use Fire Fire Toggle Run Toggle Run 180 Turn 180 Turn X Strafe Left/Right Y Move Forwards/Backwards X Look Left/Right Keyboard and Mouse \u00b6 RetroKeyboard/Mouse inputs Weapons Keyboard 1 Fist Keyboard 2 Pistol Keyboard 3 Shotgun Keyboard 4 Chaingun Keyboard 5 Rocket Keyboard 8 Chainsaw Keyboard 0 Best Keyboard Left Control Fire Keyboard Right Control Fire Wheel Up Next Weapon Wheel Down Previous Weapon Mouse 1 Fire RetroKeyboard/Mouse inputs Movement Keyboard Up Forward Keyboard Down Backward Keyboard Left Turn Left Keyboard Right Turn Right Keyboard Left Shift Run Keyboard Right Shift Run Keyboard Less than < Strafe Left Keyboard Greater than > Strafe Right Keyboard Left Alt Strafe Keyboard Right Alt Strafe Keyboard Caps Lock Autorun Keyboard Slash / 180 Turn Keyboard Space Use Mouse Cursor Turn Left/Right Mouse 2 Strafe Mouse 3 Use Mouse 3 Forward RetroKeyboard/Mouse inputs Game Keyboard F2 Save Keyboard F3 Load Keyboard F6 Quicksave Keyboard F7 Endgame Keyboard F9 Quickload Keyboard F10 Quit RetroKeyboard/Mouse inputs Screen Keyboard F1 Help Keyboard Escape Menu Keyboard Home Setup Keyboard Pause Pause Keyboard Tab Automap Keyboard F4 Sound Volume Keyboard F5 HUD Keyboard F8 Messages Keyboard F11 Gamma Fix Keyboard F12 Spy Keyboard Minus - Smaller View Keyboard Plus + Larger View RetroKeyboard/Mouse inputs Automap Keyboard f Follow Mode Keyboard Minus - Zoom in Keyboard Plus + Zoom out Keyboard m Mark Place Keyboard c Clear Marks Keyboard o Full/Zoom Keyboard g Grid External Links \u00b6 Official PrBoom Website Official PrBoom SourceForge Repository Libretro PrBoom Core info file Libretro PrBoom Github Repository Report Libretro PrBoom Core Issues Here id Software \u00b6 Quake 1 (TyrQuake)","title":"Doom (PrBoom)"},{"location":"library/prboom/#doom-prboom","text":"","title":"Doom (PrBoom)"},{"location":"library/prboom/#background","text":"Port of prboom to libretro - plays Doom, Doom II, Final Doom and other Doom IWAD mods. The PrBoom core has been authored by Florian Schulze The PrBoom core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Background"},{"location":"library/prboom/#bios","text":"Required or optional firmware files go in the frontend's system directory. Filename Description prboom.wad PrBoom requires data ROM 'prboom.wad' inside the ROM directory.","title":"BIOS"},{"location":"library/prboom/#extensions","text":"Content that can be loaded by the PrBoom core have the following file extensions: .wad .iwad .pwad RetroArch database(s) that are associated with the PrBoom core: DOOM","title":"Extensions"},{"location":"library/prboom/#features","text":"Frontend-level settings or features that the PrBoom core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2714 Native Cheats \u2714 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/prboom/#directories","text":"The PrBoom core's library name is 'PrBoom' The PrBoom core saves/loads to/from these directories. Frontend's Save directory File Description (content name)/*.dsg Save (content name)/prboom.cfg DOOM Config","title":"Directories"},{"location":"library/prboom/#geometry-and-timing","text":"The PrBoom core's core provided FPS (by default) is 60 The PrBoom core's core provided sample rate is 44100 Hz The PrBoom core's base width is dependent on the Internal resolution core option. The PrBoom core's base height is dependent on the Internal resolution core option. The PrBoom core's max width is dependent on the Internal resolution core option. The PrBoom core's max height is dependent on the Internal resolution core option. The PrBoom core's core provided aspect ratio is 4/3","title":"Geometry and timing"},{"location":"library/prboom/#loading-doom","text":"PrBoom can load wad, iwad, and pwad files. The PrBoom core requires data ROM 'prboom.wad' inside the loaded content's directory. You must use a separate folder for each wad to be able to have all Dooms use their correct music An example folder structure would be like so: \u2514\u2500\u2500 roms/ \u2514\u2500\u2500 ports/ \u251c\u2500\u2500 doom/ \u2502 \u251c\u2500\u2500 doom.wad \u2502 \u251c\u2500\u2500 prboom.wad \u2502 \u2514\u2500\u2500 doommusic.mp3 \u2514\u2500\u2500 doom2/ \u251c\u2500\u2500 doom2.wad \u251c\u2500\u2500 prboom.wad \u2514\u2500\u2500 doom2music.mp3 Game saves and internal configuration files will be created in the frontend-defined save directory, organised in folders matching the filenames of loaded content - for example: \u2514\u2500\u2500 saves/ \u2514\u2500\u2500 PrBoom/ \u251c\u2500\u2500 doom/ \u2502 \u251c\u2500\u2500 prbmsav0.dsg \u2502 \u251c\u2500\u2500 prbmsav1.dsg \u2502 \u2514\u2500\u2500 prboom.cfg \u2514\u2500\u2500 doom2/ \u251c\u2500\u2500 prbmsav0.dsg \u251c\u2500\u2500 prbmsav1.dsg \u2514\u2500\u2500 prboom.cfg Game saves are numbered from 'prbmsav0.dsg' to 'prbmsav7.dsg'.","title":"Loading DOOM"},{"location":"library/prboom/#music","text":"The PrBoom core is not able to play the music files inside the wad files (they are in a proprietary midi format). To enable music in your Doom game(s) you need to copy MP3s with specific names into the same folder as your ROMs are located. You can find a list of names here : They follow the scheme e1m1.mp3, e1m2.mp3, ..., e2m1.mp, e2m2.mp3, ... . Tracks are freely available - find them by searching for \"PSX Doom Music\". If you are having trouble with the audio not playing after you have renamed all the MP3s, try clearing all the ID3 tag information for each of the MP3s. Below are the corresponding tracks if the MP3s are named: File Name mp3 mus_e1m1 \"level 01 (hangar).mp3\" mus_e1m2 \"level 02 (plant).mp3\" mus_e1m3 \"level 03 (toxin refinery).mp3\" mus_e1m4 \"level 04 (command control).mp3\" mus_e1m5 \"level 05 (phobos lab).mp3\" mus_e1m6 \"level 06 (central processing).mp3\" mus_e1m7 \"level 07 (computer station).mp3\" mus_e1m8 \"level 08 (phobos anomaly).mp3\" mus_e1m9 \"level 06 (fistula).mp3\" mus_e2m1 \"level 09 (deimos anomaly).mp3\" mus_e2m2 \"level 10 (containment area).mp3\" mus_e2m3 \"level 11 (refinery).mp3\" mus_e2m4 \"level 12 (deimos lab).mp3\" mus_e2m5 \"level 13 (command center).mp3\" mus_e2m6 \"level 02 (plant).mp3\" mus_e2m7 \"level 01 (hangar).mp3\" mus_e2m8 \"level 03 (toxin refinery).mp3\" mus_e2m9 \"level 02 (virgil).mp3\" mus_e3m1 \"level 17 (hell keep).mp3\" mus_e3m2 \"level 03 (canyon).mp3\" mus_e3m3 \"level 18 (pandemonium).mp3\" mus_e3m4 \"level 06 (central processing).mp3\" mus_e3m5 \"level 20 (unholy cathedral).mp3\" mus_e3m6 \"level 21 (mt erebus).mp3\" mus_e3m7 \"level 22 (limbo).mp3\" mus_e3m8 \"level 09 (nessus).mp3\" mus_e3m9 \"level 10 (paradox).mp3\" mus_inter \"e2m3.mp3\" mus_intro \"track 02 title screen.mp3\" mus_bunny \"track 03 main menu.mp3\" mus_victor \"track 09 endgame.mp3\" mus_introa \"track 02 title screen.mp3\" mus_runnin \"level 01 (hangar).mp3\" mus_stalks \"level 10 (containment area).mp3\" mus_countd \"level 22 (limbo).mp3\" mus_betwee \"level 16 (hell gate).mp3\" mus_doom \"level 08 (phobos anomaly).mp3\" mus_the_da \"level 21 (mt erebus).mp3\" mus_shawn \"level 20 (unholy cathedral).mp3\" mus_ddtblu \"level 24 (hell beneath).mp3\" mus_in_cit \"level 11 (refinery).mp3\" mus_dead \"level 13 (command center).mp3\" mus_stlks2 \"level 09 (deimos anomaly).mp3\" mus_theda2 \"level 17 (hell keep).mp3\" mus_doom2 \"level 08 (minos).mp3\" mus_ddtbl2 \"level 16 (hell gate).mp3\" mus_runni2 \"level 04 (combine).mp3\" mus_dead2 \"level 18 (pandemonium).mp3\" mus_stlks3 \"level 06 (central processing).mp3\" mus_romero \"level 05 (phobos lab).mp3\" mus_shawn2 \"level 10 (containment area).mp3\" mus_messag \"level 01 (attack).mp3\" mus_count2 \"level 02 (plant).mp3\" mus_ddtbl3 \"level 03 (toxin refinery).mp3\" mus_ampie \"level 01 (hangar).mp3\" mus_theda3 \"level 06 (fistula).mp3\" mus_adrian \"level 07 (computer station).mp3\" mus_messg2 \"level 08 (phobos anomaly).mp3\" mus_romer2 \"level 11 (refinery).mp3\" mus_tense \"level 07 (geryon).mp3\" mus_shawn3 \"level 05 (catwalk).mp3\" mus_openin \"level 04 (command control).mp3\" mus_evil \"level 16 (hell gate).mp3\" mus_ultima \"level 03 (toxin refinery).mp3\" mus_read_m \"track 03 main menu.mp3\" mus_dm2ttl \"track 02 title screen.mp3\" mus_dm2int \"track 05 stats screen.mp3\"","title":"Music"},{"location":"library/prboom/#config","text":"PrBoom's internal game settings can be found in the 'prboom.cfg' file inside each game's save directory. Many of these settings may be changed from the in-game menu. A few notable options are as follows: Options \u2192 General (page 1) \u2192 Framerate (35fps|40fps|50fps| 60fps |70fps|72fps|75fps|90fps|100fps| 119fps|120fps|140fps|144fps|240fps|244fps) Vanilla Doom has a native framerate of 35fps. This should be considered the 'correct' value, but it can lead to an irregular 'stuttering' effect on 60Hz LCD displays. All framerates should maintain the proper game speed. Options \u2192 General (page 1) \u2192 Gamma Correction ( Off |Lv. 1|Lv. 2|Lv. 3|Lv. 4) Sets display brightness. Options \u2192 Screen Size ( Low |High) When set to 'Low', the HUD is shown at the bottom of the screen. When set to 'High', the gameplay area fills the screen and no HUD is shown. Options \u2192 Mouse Sensitivity The 'horizontal' slider sets the movement speed when looking left/right with either the mouse or the gamepad right analog stick.","title":"Config"},{"location":"library/prboom/#core-options","text":"The PrBoom core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Internal resolution (restart) [prboom-resolution] ( 320x200 |640x400|960x600|1280x800|1600x1000|1920x1200) Configure the resolution. Requires a restart. Internal resolution - 320x200 Internal resolution - 1920x1200 Mouse active when using Gamepad [prboom-mouse_on] ( disabled |enabled) Allows you to use mouse inputs even when User 1's device type isn't set to 'RetroKeyboard/Mouse'. Look on parent folders for IWADs [prboom-find_recursive_on] ( enabled |disabled) Scans parent folders for IWADs. NOTE: You need to disable this if you want to run SIGIL. Analog Deadzone (percent) [prboom-analog_deadzone] ( 15 |20|25|30|0|5|10) Sets the deadzone of the Gamepad analog sticks when the input device type is set to 'Gamepad Modern'.","title":"Core options"},{"location":"library/prboom/#user-1-device-types","text":"The PrBoom core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): None - Input disabled. Gamepad Classic - Joypad Gamepad Modern - Joypad RetroKeyboard/Mouse - Keyboard and Mouse - Switch to this for keyboard and mouse input. Has keymapper support.","title":"User 1 device types"},{"location":"library/prboom/#joypad","text":"User 1 input descriptors for 'Gamepad Classic' device type RetroPad Inputs PrBoom inputs Use Use Run Run Show/Hide Map Show/Hide Map Show/Hide Menu Show/Hide Menu D-Pad Up D-Pad Up D-Pad Down D-Pad Down D-Pad Left D-Pad Left D-Pad Right D-Pad Right Fire Fire Strafe Strafe Strafe Left Strafe Left Strafe Right Strafe Right Previous Weapon Previous Weapon Next Weapon Next Weapon User 1 input descriptors for 'Gamepad Modern' device type RetroPad Inputs PrBoom inputs Menu Cancel Menu Cancel Quick Save Quick Save Show/Hide Map Show/Hide Map Show/Hide Menu Show/Hide Menu D-Pad Up D-Pad Up D-Pad Down D-Pad Down D-Pad Left D-Pad Left D-Pad Right D-Pad Right Menu Select Menu Select Quick Load Quick Load Previous Weapon Previous Weapon Next Weapon Next Weapon Use Use Fire Fire Toggle Run Toggle Run 180 Turn 180 Turn X Strafe Left/Right Y Move Forwards/Backwards X Look Left/Right","title":"Joypad"},{"location":"library/prboom/#keyboard-and-mouse","text":"RetroKeyboard/Mouse inputs Weapons Keyboard 1 Fist Keyboard 2 Pistol Keyboard 3 Shotgun Keyboard 4 Chaingun Keyboard 5 Rocket Keyboard 8 Chainsaw Keyboard 0 Best Keyboard Left Control Fire Keyboard Right Control Fire Wheel Up Next Weapon Wheel Down Previous Weapon Mouse 1 Fire RetroKeyboard/Mouse inputs Movement Keyboard Up Forward Keyboard Down Backward Keyboard Left Turn Left Keyboard Right Turn Right Keyboard Left Shift Run Keyboard Right Shift Run Keyboard Less than < Strafe Left Keyboard Greater than > Strafe Right Keyboard Left Alt Strafe Keyboard Right Alt Strafe Keyboard Caps Lock Autorun Keyboard Slash / 180 Turn Keyboard Space Use Mouse Cursor Turn Left/Right Mouse 2 Strafe Mouse 3 Use Mouse 3 Forward RetroKeyboard/Mouse inputs Game Keyboard F2 Save Keyboard F3 Load Keyboard F6 Quicksave Keyboard F7 Endgame Keyboard F9 Quickload Keyboard F10 Quit RetroKeyboard/Mouse inputs Screen Keyboard F1 Help Keyboard Escape Menu Keyboard Home Setup Keyboard Pause Pause Keyboard Tab Automap Keyboard F4 Sound Volume Keyboard F5 HUD Keyboard F8 Messages Keyboard F11 Gamma Fix Keyboard F12 Spy Keyboard Minus - Smaller View Keyboard Plus + Larger View RetroKeyboard/Mouse inputs Automap Keyboard f Follow Mode Keyboard Minus - Zoom in Keyboard Plus + Zoom out Keyboard m Mark Place Keyboard c Clear Marks Keyboard o Full/Zoom Keyboard g Grid","title":"Keyboard and Mouse"},{"location":"library/prboom/#external-links","text":"Official PrBoom Website Official PrBoom SourceForge Repository Libretro PrBoom Core info file Libretro PrBoom Github Repository Report Libretro PrBoom Core Issues Here","title":"External Links"},{"location":"library/prboom/#id-software","text":"Quake 1 (TyrQuake)","title":"id Software"},{"location":"library/prosystem/","text":"Atari - 7800 (ProSystem) \u00b6 Background \u00b6 ProSystem is an Atari 7800 emulator. Author/License \u00b6 The ProSystem core has been authored by Greg Stanton Brian Berlin Leonis Greg DeMent The ProSystem core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the ProSystem core have the following file extensions: .a78 .bin Databases \u00b6 RetroArch database(s) that are associated with the ProSystem core: Atari - 7800 BIOS \u00b6 Required or optional firmware files go in the frontend's system directory. Filename Description md5sum 7800 BIOS (U).rom 7800 BIOS - Optional 0763f1ffb006ddbe32e52d497ee848ae Features \u00b6 Frontend-level settings or features that the ProSystem core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2715 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2715 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The ProSystem core's internal core name is 'ProSystem' The ProSystem core saves/loads to/from these directories. Frontend's State directory 'content-name'.state# (State) Geometry and timing \u00b6 The ProSystem core's core provided FPS is 60 for NTSC games and 50 for PAL games. The ProSystem core's core provided sample rate is 48000 Hz The ProSystem core's core provided aspect ratio is 4/3 Controllers \u00b6 The ProSystem core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 - 2 device types \u00b6 None - Doesn't disable input. There's no reason to switch to this. RetroPad - Joypad - Stay on this. RetroPad w/Analog - Joypad - Same as RetroPad. There's no reaosn to switch to this. Controller tables \u00b6 Joypad \u00b6 User 1 Remap descriptors RetroPad Inputs B Console Select Console Pause Up Down Left Right 2 Console Reset Left Difficulty Right Difficulty User 2 Remap descriptors RetroPad Inputs 1 Up Down Left Right 2 External Links \u00b6 Official ProSystem Website Official ProSystem Github Repository Libretro ProSystem Core info file Libretro ProSystem Github Repository Report Libretro ProSystem Core Issues Here","title":"Atari - 7800 (ProSystem)"},{"location":"library/prosystem/#atari-7800-prosystem","text":"","title":"Atari - 7800 (ProSystem)"},{"location":"library/prosystem/#background","text":"ProSystem is an Atari 7800 emulator.","title":"Background"},{"location":"library/prosystem/#authorlicense","text":"The ProSystem core has been authored by Greg Stanton Brian Berlin Leonis Greg DeMent The ProSystem core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/prosystem/#extensions","text":"Content that can be loaded by the ProSystem core have the following file extensions: .a78 .bin","title":"Extensions"},{"location":"library/prosystem/#databases","text":"RetroArch database(s) that are associated with the ProSystem core: Atari - 7800","title":"Databases"},{"location":"library/prosystem/#bios","text":"Required or optional firmware files go in the frontend's system directory. Filename Description md5sum 7800 BIOS (U).rom 7800 BIOS - Optional 0763f1ffb006ddbe32e52d497ee848ae","title":"BIOS"},{"location":"library/prosystem/#features","text":"Frontend-level settings or features that the ProSystem core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2715 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2715 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/prosystem/#directories","text":"The ProSystem core's internal core name is 'ProSystem' The ProSystem core saves/loads to/from these directories. Frontend's State directory 'content-name'.state# (State)","title":"Directories"},{"location":"library/prosystem/#geometry-and-timing","text":"The ProSystem core's core provided FPS is 60 for NTSC games and 50 for PAL games. The ProSystem core's core provided sample rate is 48000 Hz The ProSystem core's core provided aspect ratio is 4/3","title":"Geometry and timing"},{"location":"library/prosystem/#controllers","text":"The ProSystem core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/prosystem/#user-1-2-device-types","text":"None - Doesn't disable input. There's no reason to switch to this. RetroPad - Joypad - Stay on this. RetroPad w/Analog - Joypad - Same as RetroPad. There's no reaosn to switch to this.","title":"User 1 - 2 device types"},{"location":"library/prosystem/#controller-tables","text":"","title":"Controller tables"},{"location":"library/prosystem/#joypad","text":"User 1 Remap descriptors RetroPad Inputs B Console Select Console Pause Up Down Left Right 2 Console Reset Left Difficulty Right Difficulty User 2 Remap descriptors RetroPad Inputs 1 Up Down Left Right 2","title":"Joypad"},{"location":"library/prosystem/#external-links","text":"Official ProSystem Website Official ProSystem Github Repository Libretro ProSystem Core info file Libretro ProSystem Github Repository Report Libretro ProSystem Core Issues Here","title":"External Links"},{"location":"library/px68k/","text":"Sharp - X68000 (PX68k) \u00b6 Background \u00b6 Portable SHARP X68000 Emulator for PSP, Android and other platforms. Author/License \u00b6 The PX68k core has been authored by hissorii The PX68k core is licensed under kero_src.txt A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the PX68k core have the following file extensions: .dim .zip .img .d88 .88d .hdm .dup .2hd .xdf .hdf .cmd .m3u Databases \u00b6 RetroArch database(s) that are associated with the PX68k core: Sharp - X68000 BIOS \u00b6 Required or optional firmware files go in the frontend's system directory. Attention The firmware files need to be in a directory named 'keropi' in RetroArch's system directory. Filename Description md5sum keropi/iplrom.dat X68000 BIOS - Required keropi/cgrom.dat Font file - Required keropi/iplrom30.dat X68000 BIOS 2 - Optional keropi/iplromco.dat X68000 BIOS 3 - Optional keropi/iplromxv.dat X68000 BIOS 4 - Optional Features \u00b6 Frontend-level settings or features that the PX68k core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2714 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The PX68k core's library name is 'PX68K' The PX68k core saves/loads to/from these directories. Frontend's System directory File Description keropi/config Config keropi/sram.dat SRAM NOTE: If your game suddenly does not boot up, try deleting keropi/sram.dat. Geometry and timing \u00b6 The PX68k core's core provided FPS is 55.45 or 59.94. The PX68k core's core provided sample rate is 44100 Hz The PX68k core's base width is 800 The PX68k core's base height is 600 The PX68k core's max width is 800 The PX68k core's max height is 600 The PX68k core's core provided aspect ratio is 4/3 Usage \u00b6 You can launch px68k to launch a supported game. You can also use px68k without any content by using Load Core and then Run Core. This will directly bring you to the px68k menu. L2 button or F12 key brings up the original px68k menu where you can change the inserted disks. They have to be unzipped to be accessible from this menu but can be zipped/archived when launching directly from RetroArch. After the first boot a \u201cconfig\u201d file will be generated in the \u201ckeropi\u201d folder. You can enter your rom folder into the \u201cStartDir\u201d line to make it accessible from the PX68k-libretro core\u2019s in-game menu. Define your disks path in system/keropi/config StartDir line. You can launch content with: retroarch -L px68k_libretro.so ./content.hdf retroarch -L px68k_libretro.so ./content.xdf retroarch -L px68k_libretro.so ./content.cmd (cmdfile is a text file contening cmd like \"px68k /somewhere/software/x68000/content1.dim /somewhere/software/x68000/content2.dim\") retroarch -L sdlpx68k_libretro.so \"px68k /somewhere/software/x68000/content1.dim /somewhere/software/x68000/content2.dim\" retroarch -L px68k_libretro.so ./content.m3u (m3u files are useful for launching multi-disk games, see section below for more details on the format) load retroarch , then load core and content from RA menu. Multiple-disk games \u00b6 If foo is a multiple-disk game, you should have .dim files for each one, e.g. foo (Disk 1).dim, foo (Disk 2).dim, foo (Disk 3).dim. PX68k has a few methods to support loading and swapping multi-disk games. Loading multiple disks at startup \u00b6 Use an M3U playlist file Create a text file and save it as foo.m3u. Then enter your game's .dim files on it, one per line. The m3u file contents should look something like this: foo.m3u foo (Disk 1).dim foo (Disk 2).dim foo (Disk 3).dim After that, you can load the foo.m3u file in RetroArch with the PX68k core either using the frontend or from the command line. The first 2 disks listed in this file are loaded into disk drives FDD0 and FDD1 on the core, respectively. To swap disks for games that use more than 2 disks, use the disk swapping option either from within RetroArch's menu or using the native PX68k menu explained below. Use a CMD file This method is similar to the m3u playlist and allows loading up to 2 disks at launch. Create a text file and save it as foo.cmd. The format of this file should have all the games on one line and begins with px68k as in the example below. \"px68k /somewhere/software/x68000/content1.dim /somewhere/software/x68000/content2.dim\" To swap disks for games that use more than 2 disks, use the native PX68k menu explained below. From the command line As shown in the usage section, you can use the following format to launch multi-disk games directly from the command line: retroarch -L sdlpx68k_libretro.so \"px68k /somewhere/software/x68000/content1.dim /somewhere/software/x68000/content2.dim\" To swap disks for games that use more than 2 disks, use the native PX68k menu explained below. Swapping Disks \u00b6 Games that have more than 2 disks will often require swapping disks at some point during gameplay. There are 2 supported methods to swap disks in this core. Use the disk swapping option from RetroArch GUI. Open the RetroArch gui, select Quick Menu ->Disk Control to access the disk controls. Eject the disk using the Disk Cycle Tray Status command, then set the new disk index and load the new disk by selecting Disk Cycle Tray Status again. The default disk drive that is swapped is FDD1. If you need to swap the disk loaded in FDD0, change the Core Option \"Swap Disks on Drive\" first before loading the new disk in this menu. Use the native PX68k menu Press L2 on the controller or F12 on the keyboard to access the PX68k menu, then select the disk slot and choose the file from here. The starting directory for loading disks is determined by the setting StartDir in the system/keropi/config file. Core options \u00b6 The PX68k core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. CPU Speed [px68k_cpuspeed] ( 10Mhz |16Mhz|25Mhz|33Mhz (OC)|66Mhz (OC)|100Mhz (OC)|150Mhz (OC)|200Mhz (OC)) Configure the CPU speed. Can be used to slow down games that run too fast or to speed up floppy loading times. RAM Size (Restart) [px68k_ramsize] ( 2MB |3MB|4MB|5MB|6MB|7MB|8MB|9MB|10MB|11MB|12MB|1MB) Amount of RAM used. Use Analog [px68k_analog] ( OFF |ON) Awaiting description. P1 Joypad Type [px68k_joytype1] ( Default (2 Buttons) |CPSF-MD (8 Buttons)|CPSF-SFC (8 Buttons)) Awaiting description. P2 Joypad Type [px68k_joytype2] ( Default (2 Buttons) |CPSF-MD (8 Buttons)|CPSF-SFC (8 Buttons)) Awaiting description. ADPCM Volume [px68k_adpcm_vol] ( 15 |0|1|2|3|4|5|6|7|8|9|10|11|12|13|14) Awaiting description. OPM Volume [px68k_opm_vol] ( 12 |13|14|15|0|1|2|3|4|5|6|7|8|9|10|11) Awaiting description. Swap Disks on Drive [px68k_disk_drive] ( FDD1 |FDD0) By default using the native Disk Swap interface within RetroArch's menu will swap the disk in drive FDD1. Change this option to swap disks in drive FDD0. Save Disk Paths [px68k_disk_path] (disabled| enabled ) When enabled, saves the paths of the last loaded disks in drives and auto-loads them on startup. When disabled, FDD and HDD starts empty. Joy/Mouse [px68k_joy_mouse] ( Mouse |Joystick) Select Mouse or Joypad to controls in-game virtual pointer. VBtn Swap [px68k_vbtn_swap] ( TRIG1 TRIG2 |TRIG2 TRIG1) When set to enabled, swaps TRIG1 and TRIG2 buttons when a 2-button gamepad is used. No Wait Mode [px68k_no_wait_mode] ( disabled |enabled) When set to enabled, core runs as fast as possible. Can cause audio dysnc but useful if using fast-forward. Leaving it disabled is recommended . Frame Skip [px68k_frameskip] ( Full Frame |\u00bd Frame|\u2153 Frame|\u00bc Frame|\u2155 Frame|\u2159 Frame|\u215b Frame1/16 Frame|1/32 Frame|1/60 Frame|Auto Frame Skip) Choose how much frames should be skipped to improve performance at the expense of visual smoothness. Controllers \u00b6 The PX68k core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 device types \u00b6 None - Input disabled. RetroPad - Joypad RetroKeyboard - Keyboard - Keyboard inputs are always active. Has keymapper support. User 2 device types \u00b6 None - Input disabled. RetroPad - Joypad RetroKeyboard - Keyboard - Keyboard inputs are always active. Other controllers \u00b6 Mouse - The PX68k core can emulate mouse inputs but this is done automatically and cannot be manually selected as a device type. Controller tables \u00b6 Joypad \u00b6 User 1 - 2 Remap descriptors RetroPad Inputs 2 Button CPSF-MD (8 Buttons) CPSF-SFC (8 Buttons) B JOY_TRG2 JOY_TRG2 JOY_TRG1 Y JOY_TRG1 JOY_TRG3 JOY_TRG4 Select JOY_LEFT JOY_TRG7 JOY_TRG7 Start JOY_RIGHT JOY_TRG6 JOY_TRG6 Up JOY_UP JOY_UP JOY_UP Down JOY_DOWN JOY_DOWN JOY_DOWN Left JOY_LEFT JOY_LEFT JOY_LEFT Right JOY_RIGHT JOY_RIGHT JOY_RIGHT A JOY_TRG1 JOY_TRG1 JOY_TRG2 X JOY_TRG2 JOY_TRG4 JOY_TRG3 L JOY_TRG1 JOY_TRG5 JOY_TRG8 R JOY_TRG2 JOY_TRG8 JOY_TRG5 L2 - Menu Menu Menu Menu R2 L3 R3 X Y X Y Keyboard \u00b6 RetroKeyboard Inputs PX68k inputs Keyboard Backspace - Keyboard Tab - Keyboard Clear - Keyboard Return - Keyboard Pause - Keyboard Escape - Keyboard Space - Keyboard Exclaim ! - Keyboard Double Quote \" - Keyboard Hash # - Keyboard Dollar $ - Keyboard Ampersand & - Keyboard Quote ' - Keyboard Left Parenthesis ( - Keyboard Right Parenthesis ) - Keyboard Asterisk * - Keyboard Plus + - Keyboard Comma , - Keyboard Minus - - Keyboard Period . - Keyboard Slash / - Keyboard 0 - Keyboard 1 - Keyboard 2 - Keyboard 3 - Keyboard 4 - Keyboard 5 - Keyboard 6 - Keyboard 7 - Keyboard 8 - Keyboard 9 - Keyboard Colon : - Keyboard Semicolon ; - Keyboard Less than < - Keyboard Equals = - Keyboard Greater than > - Keyboard Question ? - Keyboard At @ - Keyboard Left Bracket [ - Keyboard Backslash \\ - Keyboard Right Bracket ] - Keyboard Caret ^ - Keyboard Underscore _ - Keyboard Backquote ` - Keyboard a - Keyboard b - Keyboard c - Keyboard d - Keyboard e - Keyboard f - Keyboard g - Keyboard h - Keyboard i - Keyboard j - Keyboard k - Keyboard l - Keyboard m - Keyboard n - Keyboard o - Keyboard p - Keyboard q - Keyboard r - Keyboard s - Keyboard t - Keyboard u - Keyboard v - Keyboard w - Keyboard x - Keyboard y - Keyboard z - Keyboard Delete - Keyboard Keypad 0 - Keyboard Keypad 1 - Keyboard Keypad 2 - Keyboard Keypad 3 - Keyboard Keypad 4 - Keyboard Keypad 5 - Keyboard Keypad 6 - Keyboard Keypad 7 - Keyboard Keypad 8 - Keyboard Keypad 9 - Keyboard Keypad Period . - Keyboard Keypad Divide / - Keyboard Keypad Multiply * - Keyboard Keypad Minus - - Keyboard Keypad Plus + - Keyboard Keypad Enter - Keyboard Keypad Equals = - Keyboard Up - Keyboard Down - Keyboard Right - Keyboard Left - Keyboard Insert - Keyboard Home - Keyboard End - Keyboard Page Up - Keyboard Page Down - Keyboard F1 - Keyboard F2 - Keyboard F3 - Keyboard F4 - Keyboard F5 - Keyboard F6 - Keyboard F7 - Keyboard F8 - Keyboard F9 - Keyboard F10 - Keyboard F11 - Keyboard F12 - Keyboard F13 - Keyboard F14 - Keyboard F15 - Keyboard Num Lock - Keyboard Caps Lock - Keyboard Scroll Lock - Keyboard Right Shift - Keyboard Left Shift - Keyboard Right Control - Keyboard Left Control - Keyboard Right Alt - Keyboard Left Alt - Keyboard Right Meta - Keyboard Left Meta - Keyboard Right Super - Keyboard Left Super - Keyboard Mode - Keyboard Compose - Keyboard Help - Keyboard Print - Keyboard Sys Req - Keyboard Break - Keyboard Menu - Keyboard Power - Keyboard \u20ac - Keyboard Undo - Keyboard Unmapped - Keyboard Unknown - Mouse \u00b6 RetroMouse Inputs PX68k inputs Mouse Cursor Mouse Cursor Mouse 1 Mouse Left Button Mouse 2 mouse Right Button External Links \u00b6 Game-Notes---Video-Audio-modes-and-extra-functionality Official PX68k Website Official PX68k Github Repository Libretro PX68k Core info file Libretro PX68k Github Repository Report Libretro PX68k Core Issues Here","title":"Sharp - X68000 (PX68k)"},{"location":"library/px68k/#sharp-x68000-px68k","text":"","title":"Sharp - X68000 (PX68k)"},{"location":"library/px68k/#background","text":"Portable SHARP X68000 Emulator for PSP, Android and other platforms.","title":"Background"},{"location":"library/px68k/#authorlicense","text":"The PX68k core has been authored by hissorii The PX68k core is licensed under kero_src.txt A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/px68k/#extensions","text":"Content that can be loaded by the PX68k core have the following file extensions: .dim .zip .img .d88 .88d .hdm .dup .2hd .xdf .hdf .cmd .m3u","title":"Extensions"},{"location":"library/px68k/#databases","text":"RetroArch database(s) that are associated with the PX68k core: Sharp - X68000","title":"Databases"},{"location":"library/px68k/#bios","text":"Required or optional firmware files go in the frontend's system directory. Attention The firmware files need to be in a directory named 'keropi' in RetroArch's system directory. Filename Description md5sum keropi/iplrom.dat X68000 BIOS - Required keropi/cgrom.dat Font file - Required keropi/iplrom30.dat X68000 BIOS 2 - Optional keropi/iplromco.dat X68000 BIOS 3 - Optional keropi/iplromxv.dat X68000 BIOS 4 - Optional","title":"BIOS"},{"location":"library/px68k/#features","text":"Frontend-level settings or features that the PX68k core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2714 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/px68k/#directories","text":"The PX68k core's library name is 'PX68K' The PX68k core saves/loads to/from these directories. Frontend's System directory File Description keropi/config Config keropi/sram.dat SRAM NOTE: If your game suddenly does not boot up, try deleting keropi/sram.dat.","title":"Directories"},{"location":"library/px68k/#geometry-and-timing","text":"The PX68k core's core provided FPS is 55.45 or 59.94. The PX68k core's core provided sample rate is 44100 Hz The PX68k core's base width is 800 The PX68k core's base height is 600 The PX68k core's max width is 800 The PX68k core's max height is 600 The PX68k core's core provided aspect ratio is 4/3","title":"Geometry and timing"},{"location":"library/px68k/#usage","text":"You can launch px68k to launch a supported game. You can also use px68k without any content by using Load Core and then Run Core. This will directly bring you to the px68k menu. L2 button or F12 key brings up the original px68k menu where you can change the inserted disks. They have to be unzipped to be accessible from this menu but can be zipped/archived when launching directly from RetroArch. After the first boot a \u201cconfig\u201d file will be generated in the \u201ckeropi\u201d folder. You can enter your rom folder into the \u201cStartDir\u201d line to make it accessible from the PX68k-libretro core\u2019s in-game menu. Define your disks path in system/keropi/config StartDir line. You can launch content with: retroarch -L px68k_libretro.so ./content.hdf retroarch -L px68k_libretro.so ./content.xdf retroarch -L px68k_libretro.so ./content.cmd (cmdfile is a text file contening cmd like \"px68k /somewhere/software/x68000/content1.dim /somewhere/software/x68000/content2.dim\") retroarch -L sdlpx68k_libretro.so \"px68k /somewhere/software/x68000/content1.dim /somewhere/software/x68000/content2.dim\" retroarch -L px68k_libretro.so ./content.m3u (m3u files are useful for launching multi-disk games, see section below for more details on the format) load retroarch , then load core and content from RA menu.","title":"Usage"},{"location":"library/px68k/#multiple-disk-games","text":"If foo is a multiple-disk game, you should have .dim files for each one, e.g. foo (Disk 1).dim, foo (Disk 2).dim, foo (Disk 3).dim. PX68k has a few methods to support loading and swapping multi-disk games.","title":"Multiple-disk games"},{"location":"library/px68k/#loading-multiple-disks-at-startup","text":"Use an M3U playlist file Create a text file and save it as foo.m3u. Then enter your game's .dim files on it, one per line. The m3u file contents should look something like this: foo.m3u foo (Disk 1).dim foo (Disk 2).dim foo (Disk 3).dim After that, you can load the foo.m3u file in RetroArch with the PX68k core either using the frontend or from the command line. The first 2 disks listed in this file are loaded into disk drives FDD0 and FDD1 on the core, respectively. To swap disks for games that use more than 2 disks, use the disk swapping option either from within RetroArch's menu or using the native PX68k menu explained below. Use a CMD file This method is similar to the m3u playlist and allows loading up to 2 disks at launch. Create a text file and save it as foo.cmd. The format of this file should have all the games on one line and begins with px68k as in the example below. \"px68k /somewhere/software/x68000/content1.dim /somewhere/software/x68000/content2.dim\" To swap disks for games that use more than 2 disks, use the native PX68k menu explained below. From the command line As shown in the usage section, you can use the following format to launch multi-disk games directly from the command line: retroarch -L sdlpx68k_libretro.so \"px68k /somewhere/software/x68000/content1.dim /somewhere/software/x68000/content2.dim\" To swap disks for games that use more than 2 disks, use the native PX68k menu explained below.","title":"Loading multiple disks at startup"},{"location":"library/px68k/#swapping-disks","text":"Games that have more than 2 disks will often require swapping disks at some point during gameplay. There are 2 supported methods to swap disks in this core. Use the disk swapping option from RetroArch GUI. Open the RetroArch gui, select Quick Menu ->Disk Control to access the disk controls. Eject the disk using the Disk Cycle Tray Status command, then set the new disk index and load the new disk by selecting Disk Cycle Tray Status again. The default disk drive that is swapped is FDD1. If you need to swap the disk loaded in FDD0, change the Core Option \"Swap Disks on Drive\" first before loading the new disk in this menu. Use the native PX68k menu Press L2 on the controller or F12 on the keyboard to access the PX68k menu, then select the disk slot and choose the file from here. The starting directory for loading disks is determined by the setting StartDir in the system/keropi/config file.","title":"Swapping Disks"},{"location":"library/px68k/#core-options","text":"The PX68k core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. CPU Speed [px68k_cpuspeed] ( 10Mhz |16Mhz|25Mhz|33Mhz (OC)|66Mhz (OC)|100Mhz (OC)|150Mhz (OC)|200Mhz (OC)) Configure the CPU speed. Can be used to slow down games that run too fast or to speed up floppy loading times. RAM Size (Restart) [px68k_ramsize] ( 2MB |3MB|4MB|5MB|6MB|7MB|8MB|9MB|10MB|11MB|12MB|1MB) Amount of RAM used. Use Analog [px68k_analog] ( OFF |ON) Awaiting description. P1 Joypad Type [px68k_joytype1] ( Default (2 Buttons) |CPSF-MD (8 Buttons)|CPSF-SFC (8 Buttons)) Awaiting description. P2 Joypad Type [px68k_joytype2] ( Default (2 Buttons) |CPSF-MD (8 Buttons)|CPSF-SFC (8 Buttons)) Awaiting description. ADPCM Volume [px68k_adpcm_vol] ( 15 |0|1|2|3|4|5|6|7|8|9|10|11|12|13|14) Awaiting description. OPM Volume [px68k_opm_vol] ( 12 |13|14|15|0|1|2|3|4|5|6|7|8|9|10|11) Awaiting description. Swap Disks on Drive [px68k_disk_drive] ( FDD1 |FDD0) By default using the native Disk Swap interface within RetroArch's menu will swap the disk in drive FDD1. Change this option to swap disks in drive FDD0. Save Disk Paths [px68k_disk_path] (disabled| enabled ) When enabled, saves the paths of the last loaded disks in drives and auto-loads them on startup. When disabled, FDD and HDD starts empty. Joy/Mouse [px68k_joy_mouse] ( Mouse |Joystick) Select Mouse or Joypad to controls in-game virtual pointer. VBtn Swap [px68k_vbtn_swap] ( TRIG1 TRIG2 |TRIG2 TRIG1) When set to enabled, swaps TRIG1 and TRIG2 buttons when a 2-button gamepad is used. No Wait Mode [px68k_no_wait_mode] ( disabled |enabled) When set to enabled, core runs as fast as possible. Can cause audio dysnc but useful if using fast-forward. Leaving it disabled is recommended . Frame Skip [px68k_frameskip] ( Full Frame |\u00bd Frame|\u2153 Frame|\u00bc Frame|\u2155 Frame|\u2159 Frame|\u215b Frame1/16 Frame|1/32 Frame|1/60 Frame|Auto Frame Skip) Choose how much frames should be skipped to improve performance at the expense of visual smoothness.","title":"Core options"},{"location":"library/px68k/#controllers","text":"The PX68k core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/px68k/#user-1-device-types","text":"None - Input disabled. RetroPad - Joypad RetroKeyboard - Keyboard - Keyboard inputs are always active. Has keymapper support.","title":"User 1 device types"},{"location":"library/px68k/#user-2-device-types","text":"None - Input disabled. RetroPad - Joypad RetroKeyboard - Keyboard - Keyboard inputs are always active.","title":"User 2 device types"},{"location":"library/px68k/#other-controllers","text":"Mouse - The PX68k core can emulate mouse inputs but this is done automatically and cannot be manually selected as a device type.","title":"Other controllers"},{"location":"library/px68k/#controller-tables","text":"","title":"Controller tables"},{"location":"library/px68k/#joypad","text":"User 1 - 2 Remap descriptors RetroPad Inputs 2 Button CPSF-MD (8 Buttons) CPSF-SFC (8 Buttons) B JOY_TRG2 JOY_TRG2 JOY_TRG1 Y JOY_TRG1 JOY_TRG3 JOY_TRG4 Select JOY_LEFT JOY_TRG7 JOY_TRG7 Start JOY_RIGHT JOY_TRG6 JOY_TRG6 Up JOY_UP JOY_UP JOY_UP Down JOY_DOWN JOY_DOWN JOY_DOWN Left JOY_LEFT JOY_LEFT JOY_LEFT Right JOY_RIGHT JOY_RIGHT JOY_RIGHT A JOY_TRG1 JOY_TRG1 JOY_TRG2 X JOY_TRG2 JOY_TRG4 JOY_TRG3 L JOY_TRG1 JOY_TRG5 JOY_TRG8 R JOY_TRG2 JOY_TRG8 JOY_TRG5 L2 - Menu Menu Menu Menu R2 L3 R3 X Y X Y","title":"Joypad"},{"location":"library/px68k/#keyboard","text":"RetroKeyboard Inputs PX68k inputs Keyboard Backspace - Keyboard Tab - Keyboard Clear - Keyboard Return - Keyboard Pause - Keyboard Escape - Keyboard Space - Keyboard Exclaim ! - Keyboard Double Quote \" - Keyboard Hash # - Keyboard Dollar $ - Keyboard Ampersand & - Keyboard Quote ' - Keyboard Left Parenthesis ( - Keyboard Right Parenthesis ) - Keyboard Asterisk * - Keyboard Plus + - Keyboard Comma , - Keyboard Minus - - Keyboard Period . - Keyboard Slash / - Keyboard 0 - Keyboard 1 - Keyboard 2 - Keyboard 3 - Keyboard 4 - Keyboard 5 - Keyboard 6 - Keyboard 7 - Keyboard 8 - Keyboard 9 - Keyboard Colon : - Keyboard Semicolon ; - Keyboard Less than < - Keyboard Equals = - Keyboard Greater than > - Keyboard Question ? - Keyboard At @ - Keyboard Left Bracket [ - Keyboard Backslash \\ - Keyboard Right Bracket ] - Keyboard Caret ^ - Keyboard Underscore _ - Keyboard Backquote ` - Keyboard a - Keyboard b - Keyboard c - Keyboard d - Keyboard e - Keyboard f - Keyboard g - Keyboard h - Keyboard i - Keyboard j - Keyboard k - Keyboard l - Keyboard m - Keyboard n - Keyboard o - Keyboard p - Keyboard q - Keyboard r - Keyboard s - Keyboard t - Keyboard u - Keyboard v - Keyboard w - Keyboard x - Keyboard y - Keyboard z - Keyboard Delete - Keyboard Keypad 0 - Keyboard Keypad 1 - Keyboard Keypad 2 - Keyboard Keypad 3 - Keyboard Keypad 4 - Keyboard Keypad 5 - Keyboard Keypad 6 - Keyboard Keypad 7 - Keyboard Keypad 8 - Keyboard Keypad 9 - Keyboard Keypad Period . - Keyboard Keypad Divide / - Keyboard Keypad Multiply * - Keyboard Keypad Minus - - Keyboard Keypad Plus + - Keyboard Keypad Enter - Keyboard Keypad Equals = - Keyboard Up - Keyboard Down - Keyboard Right - Keyboard Left - Keyboard Insert - Keyboard Home - Keyboard End - Keyboard Page Up - Keyboard Page Down - Keyboard F1 - Keyboard F2 - Keyboard F3 - Keyboard F4 - Keyboard F5 - Keyboard F6 - Keyboard F7 - Keyboard F8 - Keyboard F9 - Keyboard F10 - Keyboard F11 - Keyboard F12 - Keyboard F13 - Keyboard F14 - Keyboard F15 - Keyboard Num Lock - Keyboard Caps Lock - Keyboard Scroll Lock - Keyboard Right Shift - Keyboard Left Shift - Keyboard Right Control - Keyboard Left Control - Keyboard Right Alt - Keyboard Left Alt - Keyboard Right Meta - Keyboard Left Meta - Keyboard Right Super - Keyboard Left Super - Keyboard Mode - Keyboard Compose - Keyboard Help - Keyboard Print - Keyboard Sys Req - Keyboard Break - Keyboard Menu - Keyboard Power - Keyboard \u20ac - Keyboard Undo - Keyboard Unmapped - Keyboard Unknown -","title":"Keyboard"},{"location":"library/px68k/#mouse","text":"RetroMouse Inputs PX68k inputs Mouse Cursor Mouse Cursor Mouse 1 Mouse Left Button Mouse 2 mouse Right Button","title":"Mouse"},{"location":"library/px68k/#external-links","text":"Game-Notes---Video-Audio-modes-and-extra-functionality Official PX68k Website Official PX68k Github Repository Libretro PX68k Core info file Libretro PX68k Github Repository Report Libretro PX68k Core Issues Here","title":"External Links"},{"location":"library/quasi88/","text":"NEC PC-8000 / PC-8800 series (QUASI88) \u00b6 Background \u00b6 QUASI88 is an emulator by Showzoh Fukunaga licensed under the BSD 3-Clause license. This libretro port is distributed in the same way. The sound processing portion of QUASI88 uses source code from MAME and XMAME. The copyright to this source code belongs to its corresponding authors. The sound processing portion of QUASI88 also uses source code from the FM audio generator \"fmgen\". The copyright to this source code belongs to cisc. The QUASI88 core is licensed under BSD 3-Clause A summary of the licenses behind RetroArch and its cores can be found here . BIOS \u00b6 Real BIOS (recommended) \u00b6 Required or optional firmware files go in the frontend's system directory. They can also be placed in a \"quasi88\" subfolder. Filename Description md5sum n88.rom Required. 4f984e04a99d56c4cfe36115415d6eb8 n88n.rom Required for PC-8000 series emulation. (N BASIC mode) 2ff07b8769367321128e03924af668a0 disk.rom Required for loading disk images. 793f86784e5608352a5d7f03f03e0858 n88knj1.rom Required for viewing kanji. d81c6d5d7ad1a4bbbd6ae22a01257603 n88_0.rom Required. d675a2ca186c6efcd6277b835de4c7e5 n88_1.rom e844534dfe5744b381444dbe61ef1b66 n88_2.rom 6548fa45061274dee1ea8ae1e9e93910 n88_3.rom fc4b76a402ba501e6ba6de4b3e8b4273 Pseudo BIOS \u00b6 The core will fall back on pseudo BIOS if required files are missing. In this mode, only PC-8800 series software will be playable and there may be compatibility issues, so providing real BIOS is recommended. Font \u00b6 The files font.rom , font2.rom , and font3.rom can also be loaded from the system directory to specify a font. If these are not found, the core will fall back on a built-in recreation. Loading Content \u00b6 QUASI88 can start using between 0 and 6 disks as content. To start software that requires only one disk, you can load content in any fashion. No disks \u00b6 First, load the QUASI88 core. The option \"Start Core\" will appear on the main menu, which you can use to start the core with no disks inserted. Multiple disks (subsystem interface) \u00b6 First, load the QUASI88 core. Options for starting software with between 2 to 6 disks will appear on the main menu. Choose the appropriate option and then select the disks you wish to load. Once all the disks have been selected, choose the option labelled \"Start X-Disk Game\" Multiple disks (M3U playlist) \u00b6 You can create an M3U playlist to easily start the core with multiple disks preloaded instead of using the subsystem interface. Create a text file with the extension \".m3u\" and write the filename of each disk on a new line like in the example below. # Ys II (Falcom) Ys II (Program disk).d88 Ys II (Disk A).d88 Ys II (Disk B).d88 Ys II (User disk).d88 Cycling between disks \u00b6 If you've loaded multiple disks, you can hold one of the trigger buttons and use the D-Pad to change the disk that's loaded in each drive. Use L for Drive 1 and R for Drive 2. When the shoulder button is released, the chosen disk will be inserted. Extensions \u00b6 Content that can be loaded by the QUASI88 core have the following file extensions: .d88 (PC-8000 / PC-8800 series disk image) .u88 (User disk, same functionality as .d88) .m3u (Playlist file) Features \u00b6 Frontend-level settings or features that the QUASI88 core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2714 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2714 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The QUASI88 core's library name is 'QUASI88' The QUASI88 core saves/loads to/from these directories. Frontend's Save directory File Description *.srm Differential of changes to loaded disc image (by default, see Core Options below) Frontend's State directory File Description *.state# State Geometry and timing \u00b6 The QUASI88 core's core provided FPS is 60. The QUASI88 core's core provided sample rate is 44100 Hz. The QUASI88 core's base width is 640. The QUASI88 core's base height is 400. The QUASI88 core's max width is 640. The QUASI88 core's max height is 400. The QUASI88 core's core provided aspect ratio is 8/5. Core Options \u00b6 The QUASI88 core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Basic mode [q88_basic_mode] ( N88 V2 |N88 V1H|N88 V1S|N) This option selects the PC model being emulated. Some games may refuse to boot or behave incorrectly if an inappropriate model is chosen (missing colors, fast game speed). Using N BASIC mode for PC-8000 series software requires the n88n.rom BIOS. CPU clock [q88_cpu_clock] ( 4 MHz |8 MHz|16 MHz (overclock)|32 MHz (overclock)|64 MHz (overclock)|1 MHz (underclock)|2 MHz (underclock)) This option sets the CPU clock speed of the emulated PC. Overclocking options will make most software run faster than normal, though some will instead load faster and exhibit less slowdown (Ys series). Sound board [q88_sound_board] ( OPN |OPNA) This option changes the Yamaha sound board on the emulated PC. OPN is the default option. OPNA sound supports more FM channels and PCM samples. Use FDC-Wait [q88_use_fdc_wait] ( enabled |disabled) This option enables more accurate IO timing for the floppy disk controller. Some software will not work properly with this disabled. Use PCG-8100 [q88_pcg-8100] ( disabled |enabled) This option selects whether or not to emulate the PCG-8100. This option may be required for some PC-8000 series software. Save to disk image [q88_save_to_disk_image] ( disabled |enabled) This option changes the core's saving behavior. By default, if a disk is rewritten to, the differences will be stored to a \".srm\" file in the frontend save directory. If this option is enabled, the changes will be written directly to the loaded disk and flushed on exit. Rumble on disk access [q88_rumble] ( enabled |disabled) This option allows the controller's rumble feature to imitate the read sounds on the floppy disk controller. Joypad \u00b6 The default RetroPad inputs are based on the keys often used for simple games playable via QUASI88. For full remapping, change the input type from \"Retro Joypad\" to \"Retro Keyboard.\" When using software that requires full keyboard input, it's recommended to use game focus mode as well. Player 1 \u00b6 User 1 input descriptors RetroPad Inputs Z Key Space Key I Key Return Key Keypad 8 (Up) Keypad 2 (Down) Keypad 4 (Left) Keypad 6 (Right) X Key Change loaded disk in drive 1 Change loaded disk in drive 2 Player 2 \u00b6 User 2 input descriptors RetroPad Inputs Q Key R Key F Key D Key G Key Tab Key External Links \u00b6 Libretro core Github Repository Pseudo BIOS, provided by cisc","title":"NEC - PC-8000 / PC-8800 series (QUASI88)"},{"location":"library/quasi88/#nec-pc-8000-pc-8800-series-quasi88","text":"","title":"NEC PC-8000 / PC-8800 series (QUASI88)"},{"location":"library/quasi88/#background","text":"QUASI88 is an emulator by Showzoh Fukunaga licensed under the BSD 3-Clause license. This libretro port is distributed in the same way. The sound processing portion of QUASI88 uses source code from MAME and XMAME. The copyright to this source code belongs to its corresponding authors. The sound processing portion of QUASI88 also uses source code from the FM audio generator \"fmgen\". The copyright to this source code belongs to cisc. The QUASI88 core is licensed under BSD 3-Clause A summary of the licenses behind RetroArch and its cores can be found here .","title":"Background"},{"location":"library/quasi88/#bios","text":"","title":"BIOS"},{"location":"library/quasi88/#real-bios-recommended","text":"Required or optional firmware files go in the frontend's system directory. They can also be placed in a \"quasi88\" subfolder. Filename Description md5sum n88.rom Required. 4f984e04a99d56c4cfe36115415d6eb8 n88n.rom Required for PC-8000 series emulation. (N BASIC mode) 2ff07b8769367321128e03924af668a0 disk.rom Required for loading disk images. 793f86784e5608352a5d7f03f03e0858 n88knj1.rom Required for viewing kanji. d81c6d5d7ad1a4bbbd6ae22a01257603 n88_0.rom Required. d675a2ca186c6efcd6277b835de4c7e5 n88_1.rom e844534dfe5744b381444dbe61ef1b66 n88_2.rom 6548fa45061274dee1ea8ae1e9e93910 n88_3.rom fc4b76a402ba501e6ba6de4b3e8b4273","title":"Real BIOS (recommended)"},{"location":"library/quasi88/#pseudo-bios","text":"The core will fall back on pseudo BIOS if required files are missing. In this mode, only PC-8800 series software will be playable and there may be compatibility issues, so providing real BIOS is recommended.","title":"Pseudo BIOS"},{"location":"library/quasi88/#font","text":"The files font.rom , font2.rom , and font3.rom can also be loaded from the system directory to specify a font. If these are not found, the core will fall back on a built-in recreation.","title":"Font"},{"location":"library/quasi88/#loading-content","text":"QUASI88 can start using between 0 and 6 disks as content. To start software that requires only one disk, you can load content in any fashion.","title":"Loading Content"},{"location":"library/quasi88/#no-disks","text":"First, load the QUASI88 core. The option \"Start Core\" will appear on the main menu, which you can use to start the core with no disks inserted.","title":"No disks"},{"location":"library/quasi88/#multiple-disks-subsystem-interface","text":"First, load the QUASI88 core. Options for starting software with between 2 to 6 disks will appear on the main menu. Choose the appropriate option and then select the disks you wish to load. Once all the disks have been selected, choose the option labelled \"Start X-Disk Game\"","title":"Multiple disks (subsystem interface)"},{"location":"library/quasi88/#multiple-disks-m3u-playlist","text":"You can create an M3U playlist to easily start the core with multiple disks preloaded instead of using the subsystem interface. Create a text file with the extension \".m3u\" and write the filename of each disk on a new line like in the example below. # Ys II (Falcom) Ys II (Program disk).d88 Ys II (Disk A).d88 Ys II (Disk B).d88 Ys II (User disk).d88","title":"Multiple disks (M3U playlist)"},{"location":"library/quasi88/#cycling-between-disks","text":"If you've loaded multiple disks, you can hold one of the trigger buttons and use the D-Pad to change the disk that's loaded in each drive. Use L for Drive 1 and R for Drive 2. When the shoulder button is released, the chosen disk will be inserted.","title":"Cycling between disks"},{"location":"library/quasi88/#extensions","text":"Content that can be loaded by the QUASI88 core have the following file extensions: .d88 (PC-8000 / PC-8800 series disk image) .u88 (User disk, same functionality as .d88) .m3u (Playlist file)","title":"Extensions"},{"location":"library/quasi88/#features","text":"Frontend-level settings or features that the QUASI88 core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2714 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2714 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/quasi88/#directories","text":"The QUASI88 core's library name is 'QUASI88' The QUASI88 core saves/loads to/from these directories. Frontend's Save directory File Description *.srm Differential of changes to loaded disc image (by default, see Core Options below) Frontend's State directory File Description *.state# State","title":"Directories"},{"location":"library/quasi88/#geometry-and-timing","text":"The QUASI88 core's core provided FPS is 60. The QUASI88 core's core provided sample rate is 44100 Hz. The QUASI88 core's base width is 640. The QUASI88 core's base height is 400. The QUASI88 core's max width is 640. The QUASI88 core's max height is 400. The QUASI88 core's core provided aspect ratio is 8/5.","title":"Geometry and timing"},{"location":"library/quasi88/#core-options","text":"The QUASI88 core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Basic mode [q88_basic_mode] ( N88 V2 |N88 V1H|N88 V1S|N) This option selects the PC model being emulated. Some games may refuse to boot or behave incorrectly if an inappropriate model is chosen (missing colors, fast game speed). Using N BASIC mode for PC-8000 series software requires the n88n.rom BIOS. CPU clock [q88_cpu_clock] ( 4 MHz |8 MHz|16 MHz (overclock)|32 MHz (overclock)|64 MHz (overclock)|1 MHz (underclock)|2 MHz (underclock)) This option sets the CPU clock speed of the emulated PC. Overclocking options will make most software run faster than normal, though some will instead load faster and exhibit less slowdown (Ys series). Sound board [q88_sound_board] ( OPN |OPNA) This option changes the Yamaha sound board on the emulated PC. OPN is the default option. OPNA sound supports more FM channels and PCM samples. Use FDC-Wait [q88_use_fdc_wait] ( enabled |disabled) This option enables more accurate IO timing for the floppy disk controller. Some software will not work properly with this disabled. Use PCG-8100 [q88_pcg-8100] ( disabled |enabled) This option selects whether or not to emulate the PCG-8100. This option may be required for some PC-8000 series software. Save to disk image [q88_save_to_disk_image] ( disabled |enabled) This option changes the core's saving behavior. By default, if a disk is rewritten to, the differences will be stored to a \".srm\" file in the frontend save directory. If this option is enabled, the changes will be written directly to the loaded disk and flushed on exit. Rumble on disk access [q88_rumble] ( enabled |disabled) This option allows the controller's rumble feature to imitate the read sounds on the floppy disk controller.","title":"Core Options"},{"location":"library/quasi88/#joypad","text":"The default RetroPad inputs are based on the keys often used for simple games playable via QUASI88. For full remapping, change the input type from \"Retro Joypad\" to \"Retro Keyboard.\" When using software that requires full keyboard input, it's recommended to use game focus mode as well.","title":"Joypad"},{"location":"library/quasi88/#player-1","text":"User 1 input descriptors RetroPad Inputs Z Key Space Key I Key Return Key Keypad 8 (Up) Keypad 2 (Down) Keypad 4 (Left) Keypad 6 (Right) X Key Change loaded disk in drive 1 Change loaded disk in drive 2","title":"Player 1"},{"location":"library/quasi88/#player-2","text":"User 2 input descriptors RetroPad Inputs Q Key R Key F Key D Key G Key Tab Key","title":"Player 2"},{"location":"library/quasi88/#external-links","text":"Libretro core Github Repository Pseudo BIOS, provided by cisc","title":"External Links"},{"location":"library/quicknes/","text":"Nintendo - NES / Famicom (QuickNES) \u00b6 Background \u00b6 Nes_Emu, the core NES emulator library used by QuickNES, began as a very simple NES emulator sometime in 2004. It was based on the 6502 CPU core and APU sound core used in the Game_Music_Emu sound engine. The QuickNES core has been authored by blargg kode54 The QuickNES core is licensed under LGPLv2.1+ A summary of the licenses behind RetroArch and its cores can be found here . Compatibility \u00b6 Game Issue Burai Fighter Softlocks when entering a level. Confirmed issue. MMC3 incompatible. Family Circuit '91 Crashes on start. Unsupported Mapper 210. Huge Insect No enemies spawn. Mapper 3 confirmed issue. Unemulated bus conflict handling. Skull & Crossbones Crashes on start. Unsupported Mapper. Extensions \u00b6 Content that can be loaded by the QuickNES core have the following file extensions: .nes RetroArch database(s) that are associated with the QuickNES core: Nintendo - Nintendo Entertainment System Features \u00b6 Frontend-level settings or features that the QuickNES core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The QuickNES core's library name is 'QuickNES' The QuickNES core saves/loads to/from these directories. Frontend's Save directory File Description *.srm Cartridge battery save Frontend's State directory File Description *.state# State Geometry and timing \u00b6 The QuickNES core's core provided FPS is 60 The QuickNES core's core provided sample rate is 44100 Hz The QuickNES core's base width is 256 The QuickNES core's base height is 240 The QuickNES core's max width is 256 The QuickNES core's max height is 240 The QuickNES core's core provided aspect ratio is 4/3 when the 'Aspect Ratio' core option is set to 4/3 The QuickNES core's core provided aspect ratio is 8/7 when the 'Aspect Ratio' core option is set to 8/7 Core options \u00b6 The QuickNES core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Allow Opposing Directions [quicknes_up_down_allowed] ( disabled |enabled) Enabling this will allow pressing / quickly alternating / holding both left and right (or up and down in some games) directions at the same time. This may cause movement based glitches to occur in certain games. It's best to keep this core option disabled. Aspect ratio [quicknes_aspect_ratio_par] ( PAR |4:3) Configure QuickNES's core provided aspect ratio. Show horizontal overscan [quicknes_use_overscan_h] ( enabled |disabled) Set this to disabled to crop out (horizontally) the potentially random glitchy video output that would have been hidden by the bezel around the edge of a standard-definition television screen. Show vertical overscan [quicknes_use_overscan_v] ( disabled |enabled) Set this to disabled to crop out (vertically) the potentially random glitchy video output that would have been hidden by the bezel around the edge of a standard-definition television screen. No sprite limit [quicknes_no_sprite_limit] ( enabled |disabled) 1 Removes the 8-per-scanline hardware limit. This reduces sprite flickering but can cause some games to glitch since some use this for effects. Audio mode [quicknes_audio_nonlinear] ( nonlinear |linear|stereo panning) Configure audio mode. Stereo panning simulates stereo by using a panning method and some reverb effects to add some depth. Audio equalizer preset [quicknes_audio_eq] ( default |famicom|tv|flat|crisp|tinny) Applies a preset to the audio equalizer. Color Palette [quicknes_palette] ( default |asqrealc|nintendo-vc|rgb|yuv-v3|unsaturated-final|sony-cxa2025as-us|pal|bmf-final2|bmf-final3|smooth-fbx|composite-direct-fbx|pvm-style-d93-fbx|ntsc-hardware-fbx|nes-classic-fbx-fs|nescap|wavebeam) Specifies which color palette to use when decoding the NTSC video signal output by the NES. Color Palette: default Color Palette: asqrealc Color Palette: nintendo-vc Color Palette: rgb Color Palette: yuv-v3 Color Palette: unsaturated-final Color Palette: sony-cxa2025as-us Color Palette: pal Color Palette: bmf-final2 Color Palette: bmf-final3 Color Palette: smooth-fbx Color Palette: composite-direct-fbx Color Palette: pvm-style-d93-fbx Color Palette: ntsc-hardware-fbx Color Palette: nes-classic-fbx-fs Color Palette: nescap Color Palette: wavebeam Turbo enable [quicknes_turbo_enable] ( none |player 1|player 2|both) Enables the use of the Turbo A and Turbo B buttons . Turbo pulse width (in frames) [quicknes_turbo_pulse_width] ( 3 |5|10|15|30|60|1|2) Specifies both the width and spacing (in frames) of input 'pulses' when the Turbo A and Turbo B buttons are held down. For example, the default setting of '3' corresponds to a (60/(3+3)) = 10 Hz turbo frequency (10 presses per second). Joypad \u00b6 User 1 - 2 input descriptors RetroPad Inputs B Turbo B Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A Turbo A External Links \u00b6 Official QuickNES Github Repository Libretro QuickNES Core info file Libretro QuickNES Github Repository Report Libretro QuickNES Core Issues Here Nintendo - Nintendo Entertainment System \u00b6 Nintendo - NES / Famicom (bnes) Nintendo - NES / Famicom (Emux NES) Nintendo - NES / Famicom (FCEUmm) Nintendo - NES / Famicom (Mesen) Nintendo - NES / Famicom (Nestopia UE)","title":"Nintendo - NES / Famicom (QuickNES)"},{"location":"library/quicknes/#nintendo-nes-famicom-quicknes","text":"","title":"Nintendo - NES / Famicom (QuickNES)"},{"location":"library/quicknes/#background","text":"Nes_Emu, the core NES emulator library used by QuickNES, began as a very simple NES emulator sometime in 2004. It was based on the 6502 CPU core and APU sound core used in the Game_Music_Emu sound engine. The QuickNES core has been authored by blargg kode54 The QuickNES core is licensed under LGPLv2.1+ A summary of the licenses behind RetroArch and its cores can be found here .","title":"Background"},{"location":"library/quicknes/#compatibility","text":"Game Issue Burai Fighter Softlocks when entering a level. Confirmed issue. MMC3 incompatible. Family Circuit '91 Crashes on start. Unsupported Mapper 210. Huge Insect No enemies spawn. Mapper 3 confirmed issue. Unemulated bus conflict handling. Skull & Crossbones Crashes on start. Unsupported Mapper.","title":"Compatibility"},{"location":"library/quicknes/#extensions","text":"Content that can be loaded by the QuickNES core have the following file extensions: .nes RetroArch database(s) that are associated with the QuickNES core: Nintendo - Nintendo Entertainment System","title":"Extensions"},{"location":"library/quicknes/#features","text":"Frontend-level settings or features that the QuickNES core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/quicknes/#directories","text":"The QuickNES core's library name is 'QuickNES' The QuickNES core saves/loads to/from these directories. Frontend's Save directory File Description *.srm Cartridge battery save Frontend's State directory File Description *.state# State","title":"Directories"},{"location":"library/quicknes/#geometry-and-timing","text":"The QuickNES core's core provided FPS is 60 The QuickNES core's core provided sample rate is 44100 Hz The QuickNES core's base width is 256 The QuickNES core's base height is 240 The QuickNES core's max width is 256 The QuickNES core's max height is 240 The QuickNES core's core provided aspect ratio is 4/3 when the 'Aspect Ratio' core option is set to 4/3 The QuickNES core's core provided aspect ratio is 8/7 when the 'Aspect Ratio' core option is set to 8/7","title":"Geometry and timing"},{"location":"library/quicknes/#core-options","text":"The QuickNES core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Allow Opposing Directions [quicknes_up_down_allowed] ( disabled |enabled) Enabling this will allow pressing / quickly alternating / holding both left and right (or up and down in some games) directions at the same time. This may cause movement based glitches to occur in certain games. It's best to keep this core option disabled. Aspect ratio [quicknes_aspect_ratio_par] ( PAR |4:3) Configure QuickNES's core provided aspect ratio. Show horizontal overscan [quicknes_use_overscan_h] ( enabled |disabled) Set this to disabled to crop out (horizontally) the potentially random glitchy video output that would have been hidden by the bezel around the edge of a standard-definition television screen. Show vertical overscan [quicknes_use_overscan_v] ( disabled |enabled) Set this to disabled to crop out (vertically) the potentially random glitchy video output that would have been hidden by the bezel around the edge of a standard-definition television screen. No sprite limit [quicknes_no_sprite_limit] ( enabled |disabled) 1 Removes the 8-per-scanline hardware limit. This reduces sprite flickering but can cause some games to glitch since some use this for effects. Audio mode [quicknes_audio_nonlinear] ( nonlinear |linear|stereo panning) Configure audio mode. Stereo panning simulates stereo by using a panning method and some reverb effects to add some depth. Audio equalizer preset [quicknes_audio_eq] ( default |famicom|tv|flat|crisp|tinny) Applies a preset to the audio equalizer. Color Palette [quicknes_palette] ( default |asqrealc|nintendo-vc|rgb|yuv-v3|unsaturated-final|sony-cxa2025as-us|pal|bmf-final2|bmf-final3|smooth-fbx|composite-direct-fbx|pvm-style-d93-fbx|ntsc-hardware-fbx|nes-classic-fbx-fs|nescap|wavebeam) Specifies which color palette to use when decoding the NTSC video signal output by the NES. Color Palette: default Color Palette: asqrealc Color Palette: nintendo-vc Color Palette: rgb Color Palette: yuv-v3 Color Palette: unsaturated-final Color Palette: sony-cxa2025as-us Color Palette: pal Color Palette: bmf-final2 Color Palette: bmf-final3 Color Palette: smooth-fbx Color Palette: composite-direct-fbx Color Palette: pvm-style-d93-fbx Color Palette: ntsc-hardware-fbx Color Palette: nes-classic-fbx-fs Color Palette: nescap Color Palette: wavebeam Turbo enable [quicknes_turbo_enable] ( none |player 1|player 2|both) Enables the use of the Turbo A and Turbo B buttons . Turbo pulse width (in frames) [quicknes_turbo_pulse_width] ( 3 |5|10|15|30|60|1|2) Specifies both the width and spacing (in frames) of input 'pulses' when the Turbo A and Turbo B buttons are held down. For example, the default setting of '3' corresponds to a (60/(3+3)) = 10 Hz turbo frequency (10 presses per second).","title":"Core options"},{"location":"library/quicknes/#joypad","text":"User 1 - 2 input descriptors RetroPad Inputs B Turbo B Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A Turbo A","title":"Joypad"},{"location":"library/quicknes/#external-links","text":"Official QuickNES Github Repository Libretro QuickNES Core info file Libretro QuickNES Github Repository Report Libretro QuickNES Core Issues Here","title":"External Links"},{"location":"library/quicknes/#nintendo-nintendo-entertainment-system","text":"Nintendo - NES / Famicom (bnes) Nintendo - NES / Famicom (Emux NES) Nintendo - NES / Famicom (FCEUmm) Nintendo - NES / Famicom (Mesen) Nintendo - NES / Famicom (Nestopia UE)","title":"Nintendo - Nintendo Entertainment System"},{"location":"library/race/","text":"SNK - Neo Geo Pocket / Color (RACE) \u00b6 Background \u00b6 RACE is a Neo Geo Pocket (NGP) and Neo Geo Pocket Color (NGPC) emulator for multiple platforms. Author/License \u00b6 The RACE core has been authored by Judge_ Flavor Akop Karapetyan theelf frangarcj negativeExponent The RACE core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the RACE core have the following file extensions: .ngp .ngc Databases \u00b6 RetroArch database(s) that are associated with the RACE core: SNK - Neo Geo Pocket SNK - Neo Geo Pocket Color Features \u00b6 Frontend-level settings or features that the RACE! core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 (not link-cable emulation) Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The RACE core's internal core name is 'RACE' The RACE core saves/loads to/from these directories. Frontend's Save directory 'content-name'.ngf (Cartrtidge battery save) Frontend's State directory 'content-name'.state# (State) Geometry and timing \u00b6 The RACE core's core provided FPS is 60 The RACE core's core provided sample rate is 44100 Hz The RACE core's core provided aspect ratio is 20/19 Core options \u00b6 The RACE core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Language (restart) [race_language] ( english /japanese) Choose the system language of the BIOS. Controllers \u00b6 The RACE core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 device types \u00b6 None - Doesn't disable input. RetroPad - Joypad RetroPad w/Analog - Joypad - There's no reason to switch to this. Controller tables \u00b6 Joypad \u00b6 User 1 Remap descriptors RetroPad Inputs A Option D-Pad Up D-Pad Down D-Pad Left D-Pad Right B External Links \u00b6 Libretro RACE Core info file Libretro RACE Github Repository Report Libretro RACE Core Issues Here","title":"SNK - Neo Geo Pocket / Color (RACE)"},{"location":"library/race/#snk-neo-geo-pocket-color-race","text":"","title":"SNK - Neo Geo Pocket / Color (RACE)"},{"location":"library/race/#background","text":"RACE is a Neo Geo Pocket (NGP) and Neo Geo Pocket Color (NGPC) emulator for multiple platforms.","title":"Background"},{"location":"library/race/#authorlicense","text":"The RACE core has been authored by Judge_ Flavor Akop Karapetyan theelf frangarcj negativeExponent The RACE core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/race/#extensions","text":"Content that can be loaded by the RACE core have the following file extensions: .ngp .ngc","title":"Extensions"},{"location":"library/race/#databases","text":"RetroArch database(s) that are associated with the RACE core: SNK - Neo Geo Pocket SNK - Neo Geo Pocket Color","title":"Databases"},{"location":"library/race/#features","text":"Frontend-level settings or features that the RACE! core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 (not link-cable emulation) Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/race/#directories","text":"The RACE core's internal core name is 'RACE' The RACE core saves/loads to/from these directories. Frontend's Save directory 'content-name'.ngf (Cartrtidge battery save) Frontend's State directory 'content-name'.state# (State)","title":"Directories"},{"location":"library/race/#geometry-and-timing","text":"The RACE core's core provided FPS is 60 The RACE core's core provided sample rate is 44100 Hz The RACE core's core provided aspect ratio is 20/19","title":"Geometry and timing"},{"location":"library/race/#core-options","text":"The RACE core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Language (restart) [race_language] ( english /japanese) Choose the system language of the BIOS.","title":"Core options"},{"location":"library/race/#controllers","text":"The RACE core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/race/#user-1-device-types","text":"None - Doesn't disable input. RetroPad - Joypad RetroPad w/Analog - Joypad - There's no reason to switch to this.","title":"User 1 device types"},{"location":"library/race/#controller-tables","text":"","title":"Controller tables"},{"location":"library/race/#joypad","text":"User 1 Remap descriptors RetroPad Inputs A Option D-Pad Up D-Pad Down D-Pad Left D-Pad Right B","title":"Joypad"},{"location":"library/race/#external-links","text":"Libretro RACE Core info file Libretro RACE Github Repository Report Libretro RACE Core Issues Here","title":"External Links"},{"location":"library/redream/","text":"Sega - Dreamcast (Redream) \u00b6 Background \u00b6 Redream is a work-in-progress SEGA Dreamcast emulator written in C for Mac, Linux and Windows. The Redream core has been authored by inolen The Redream core (libretro fork only) is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here . Requirements \u00b6 This core requires OpenGL 3.3 or higher in order to work. RetroArch's video driver must be set to OpenGL. Go to Settings -> Driver. If the \u2018video driver\u2019 is set to something else or than 'gl', switch to \u2018gl\u2019, and then restart. Attention There is currently no \u2018working\u2019 macOS version available. This is because this core requires OpenGL core 3.3 context, and RetroArch on macOS currently does not support this. BIOS \u00b6 Attention The firmware files need to be in a directory named 'dc' in RetroArch's system directory. Filename Description md5sum dc/boot.bin boot.bin (Dreamcast BIOS) - Required e10c53c2f8b90bab96ead2d368858623 dc/flash.bin flash.bin (Date/Time/Language) - Required 0a93f7940c455905bea6e392dfde92a4 Extensions \u00b6 Content that can be loaded by the Redream core have the following file extensions: .gdi .chd .cdi RetroArch database(s) that are associated with the Redream core: Sega - Dreamcast Features \u00b6 Frontend-level settings or features that the Redream core respects. Feature Supported Restart \u2715 Screenshots \u2714 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2715 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The Redream core's library name is 'redream' The Redream core saves/loads to/from these directories. Frontend's Save directory File Description vmu0.bin VMU Slot 1 Save vmu1.bin VMU Slot 2 Save vmu2.bin VMU Slot 3 Save vmu3.bin VMU Slot 4 Save Geometry and timing \u00b6 The Redream core's core provided FPS is 60 The Redream core's core provided sample rate is 44100 Hz The Redream core's base width is 640 The Redream core's base height is 480 The Redream core's max width is 640 The Redream core's max height is 480 The Redream core's core provided aspect ratio is 4/3 Joypad \u00b6 User 1 - 4 input descriptors RetroPad Inputs A X Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right B Y L R Analog X Analog Y X Compatibility \u00b6 Since Redream is a work-in-progress Dreamcast emulator, expect sound issues, general compatibility issues, and a general rough experience. External Links \u00b6 Official Redream Website Libretro Redream Core info file Libretro Redream Github Repository Report Libretro Redream Core Issues Here Sega - Dreamcast \u00b6 Sega - Dreamcast (Flycast)","title":"Sega - Dreamcast (Redream)"},{"location":"library/redream/#sega-dreamcast-redream","text":"","title":"Sega - Dreamcast (Redream)"},{"location":"library/redream/#background","text":"Redream is a work-in-progress SEGA Dreamcast emulator written in C for Mac, Linux and Windows. The Redream core has been authored by inolen The Redream core (libretro fork only) is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Background"},{"location":"library/redream/#requirements","text":"This core requires OpenGL 3.3 or higher in order to work. RetroArch's video driver must be set to OpenGL. Go to Settings -> Driver. If the \u2018video driver\u2019 is set to something else or than 'gl', switch to \u2018gl\u2019, and then restart. Attention There is currently no \u2018working\u2019 macOS version available. This is because this core requires OpenGL core 3.3 context, and RetroArch on macOS currently does not support this.","title":"Requirements"},{"location":"library/redream/#bios","text":"Attention The firmware files need to be in a directory named 'dc' in RetroArch's system directory. Filename Description md5sum dc/boot.bin boot.bin (Dreamcast BIOS) - Required e10c53c2f8b90bab96ead2d368858623 dc/flash.bin flash.bin (Date/Time/Language) - Required 0a93f7940c455905bea6e392dfde92a4","title":"BIOS"},{"location":"library/redream/#extensions","text":"Content that can be loaded by the Redream core have the following file extensions: .gdi .chd .cdi RetroArch database(s) that are associated with the Redream core: Sega - Dreamcast","title":"Extensions"},{"location":"library/redream/#features","text":"Frontend-level settings or features that the Redream core respects. Feature Supported Restart \u2715 Screenshots \u2714 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2715 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/redream/#directories","text":"The Redream core's library name is 'redream' The Redream core saves/loads to/from these directories. Frontend's Save directory File Description vmu0.bin VMU Slot 1 Save vmu1.bin VMU Slot 2 Save vmu2.bin VMU Slot 3 Save vmu3.bin VMU Slot 4 Save","title":"Directories"},{"location":"library/redream/#geometry-and-timing","text":"The Redream core's core provided FPS is 60 The Redream core's core provided sample rate is 44100 Hz The Redream core's base width is 640 The Redream core's base height is 480 The Redream core's max width is 640 The Redream core's max height is 480 The Redream core's core provided aspect ratio is 4/3","title":"Geometry and timing"},{"location":"library/redream/#joypad","text":"User 1 - 4 input descriptors RetroPad Inputs A X Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right B Y L R Analog X Analog Y X","title":"Joypad"},{"location":"library/redream/#compatibility","text":"Since Redream is a work-in-progress Dreamcast emulator, expect sound issues, general compatibility issues, and a general rough experience.","title":"Compatibility"},{"location":"library/redream/#external-links","text":"Official Redream Website Libretro Redream Core info file Libretro Redream Github Repository Report Libretro Redream Core Issues Here","title":"External Links"},{"location":"library/redream/#sega-dreamcast","text":"Sega - Dreamcast (Flycast)","title":"Sega - Dreamcast"},{"location":"library/reminiscence/","text":"Flashback (REminiscence) \u00b6 Background \u00b6 Stuart Carnie has ported REminiscence ,Gregory Montoir\u2019s Flashback emulator, over to libretro! REminiscence is a game engine recreation of the 1992/1993 action adventure game Flashback. It is the spiritual successor of Another World/Out Of This World and it distinguishes itself with rotoscoped graphics, polygonal cutscenes, and a Prince of Persia-style gameplay system. This port is still a work in progress, however it is in a working state. Currently, it jumps directly into the game, skipping the main menu. We have also added modplug support to the core for improved music playback. The REminiscence core has been authored by Gregory Montoir Stuart Carnie The REminiscence core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here . How to start the REminiscence core: \u00b6 A visual demonstration of loading content with the REminiscence core can be found here . Extensions \u00b6 Content that can be loaded by the REminiscence core have the following file extensions: .map (DOS Map Data) .aba (DOS (Demo) Map Data) .seq (DOS CD Map Data) .lev (Amiga Map Data) RetroArch database(s) that are associated with the REminiscence core: Flashback Features \u00b6 Frontend-level settings or features that the REminiscence core respects. Feature Supported Restart \u2715 Saves - States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2715 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats - Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Geometry and timing \u00b6 The REminiscence core's core provided FPS is 50.0 The REminiscence core's core provided sample rate is 44100 Hz The REminiscence core's base width is 256 The REminiscence core's base height is 224 The REminiscence core's max width is 1024 The REminiscence core's max height is 768 The REminiscence core's core provided aspect ratio is 8/7 Joypad \u00b6 RetroPad Inputs User 1 input descriptors Draw / Holster Inventory / Skip Up Down Left Right Use Action External Links \u00b6 Official REminiscence Website Libretro REminiscence Core info file Libretro REminiscence Github Repository Report Libretro REminiscence Core Issues Here You can buy a copy of Flashback that works with the REminiscence core here","title":"Flashback (REminiscence)"},{"location":"library/reminiscence/#flashback-reminiscence","text":"","title":"Flashback (REminiscence)"},{"location":"library/reminiscence/#background","text":"Stuart Carnie has ported REminiscence ,Gregory Montoir\u2019s Flashback emulator, over to libretro! REminiscence is a game engine recreation of the 1992/1993 action adventure game Flashback. It is the spiritual successor of Another World/Out Of This World and it distinguishes itself with rotoscoped graphics, polygonal cutscenes, and a Prince of Persia-style gameplay system. This port is still a work in progress, however it is in a working state. Currently, it jumps directly into the game, skipping the main menu. We have also added modplug support to the core for improved music playback. The REminiscence core has been authored by Gregory Montoir Stuart Carnie The REminiscence core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Background"},{"location":"library/reminiscence/#how-to-start-the-reminiscence-core","text":"A visual demonstration of loading content with the REminiscence core can be found here .","title":"How to start the REminiscence core:"},{"location":"library/reminiscence/#extensions","text":"Content that can be loaded by the REminiscence core have the following file extensions: .map (DOS Map Data) .aba (DOS (Demo) Map Data) .seq (DOS CD Map Data) .lev (Amiga Map Data) RetroArch database(s) that are associated with the REminiscence core: Flashback","title":"Extensions"},{"location":"library/reminiscence/#features","text":"Frontend-level settings or features that the REminiscence core respects. Feature Supported Restart \u2715 Saves - States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2715 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats - Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/reminiscence/#geometry-and-timing","text":"The REminiscence core's core provided FPS is 50.0 The REminiscence core's core provided sample rate is 44100 Hz The REminiscence core's base width is 256 The REminiscence core's base height is 224 The REminiscence core's max width is 1024 The REminiscence core's max height is 768 The REminiscence core's core provided aspect ratio is 8/7","title":"Geometry and timing"},{"location":"library/reminiscence/#joypad","text":"RetroPad Inputs User 1 input descriptors Draw / Holster Inventory / Skip Up Down Left Right Use Action","title":"Joypad"},{"location":"library/reminiscence/#external-links","text":"Official REminiscence Website Libretro REminiscence Core info file Libretro REminiscence Github Repository Report Libretro REminiscence Core Issues Here You can buy a copy of Flashback that works with the REminiscence core here","title":"External Links"},{"location":"library/remote_retropad/","text":"Remote RetroPad \u00b6 Background \u00b6 Awaiting description. How to start the Remote RetroPad core: \u00b6 To start the Remote RetroPad core, go to RetroArch's main menu screen. Select 'Load Core', then 'Remote RetroPad'. The content should now start running! Author/License \u00b6 The Remote RetroPad core has been authored by The RetroArch Team The Remote RetroPad core is licensed under MIT A summary of the licenses behind RetroArch and its cores can be found here . Features \u00b6 Frontend-level settings or features that the Remote RetroPad core respects. Feature Supported Restart \u2715 Screenshots \u2714 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The Remote RetroPad core's internal core name is 'RetroPad Remote' Geometry and timing \u00b6 The Remote RetroPad core's core provided FPS is 60.0 The Remote RetroPad core's core provided sample rate is 30000.0 Hz The Remote RetroPad core's core provided aspect ratio is 4.0 / 3.0 Usage \u00b6 Awaiting description. Core options \u00b6 The Remote RetroPad core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Port [net_retropad_port] (55400 to 55420 in increments of 1. 55400 is default. ) Awaiting description. IP address part 1 [net_retropad_ip_octet1] (0 to 255 in increments of 1. 0 is default. ) Awaiting description. IP address part 2 [net_retropad_ip_octet2] (0 to 255 in increments of 1. 0 is default. ) Awaiting description. IP address part 3 [net_retropad_ip_octet3] (0 to 255 in increments of 1. 0 is default. ) Awaiting description. IP address part 4 [net_retropad_ip_octet4] (0 to 255 in increments of 1. 0 is default. ) Awaiting description. Controllers \u00b6 The Remote RetroPad core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 device types \u00b6 None - Doesn't disable input. RetroPad - Joypad - Stay on this. RetroPad w/Analog - Joypad - There's no reason to switch to this. Controller tables \u00b6 Joypad \u00b6 User 1 Remap descriptors RetroPad Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R L2 R2 L3 R3 External Links \u00b6 Libretro Remote RetroPad Github Repository Report Libretro Remote RetroPad Core Issues Here","title":"Remote RetroPad"},{"location":"library/remote_retropad/#remote-retropad","text":"","title":"Remote RetroPad"},{"location":"library/remote_retropad/#background","text":"Awaiting description.","title":"Background"},{"location":"library/remote_retropad/#how-to-start-the-remote-retropad-core","text":"To start the Remote RetroPad core, go to RetroArch's main menu screen. Select 'Load Core', then 'Remote RetroPad'. The content should now start running!","title":"How to start the Remote RetroPad core:"},{"location":"library/remote_retropad/#authorlicense","text":"The Remote RetroPad core has been authored by The RetroArch Team The Remote RetroPad core is licensed under MIT A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/remote_retropad/#features","text":"Frontend-level settings or features that the Remote RetroPad core respects. Feature Supported Restart \u2715 Screenshots \u2714 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/remote_retropad/#directories","text":"The Remote RetroPad core's internal core name is 'RetroPad Remote'","title":"Directories"},{"location":"library/remote_retropad/#geometry-and-timing","text":"The Remote RetroPad core's core provided FPS is 60.0 The Remote RetroPad core's core provided sample rate is 30000.0 Hz The Remote RetroPad core's core provided aspect ratio is 4.0 / 3.0","title":"Geometry and timing"},{"location":"library/remote_retropad/#usage","text":"Awaiting description.","title":"Usage"},{"location":"library/remote_retropad/#core-options","text":"The Remote RetroPad core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Port [net_retropad_port] (55400 to 55420 in increments of 1. 55400 is default. ) Awaiting description. IP address part 1 [net_retropad_ip_octet1] (0 to 255 in increments of 1. 0 is default. ) Awaiting description. IP address part 2 [net_retropad_ip_octet2] (0 to 255 in increments of 1. 0 is default. ) Awaiting description. IP address part 3 [net_retropad_ip_octet3] (0 to 255 in increments of 1. 0 is default. ) Awaiting description. IP address part 4 [net_retropad_ip_octet4] (0 to 255 in increments of 1. 0 is default. ) Awaiting description.","title":"Core options"},{"location":"library/remote_retropad/#controllers","text":"The Remote RetroPad core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/remote_retropad/#user-1-device-types","text":"None - Doesn't disable input. RetroPad - Joypad - Stay on this. RetroPad w/Analog - Joypad - There's no reason to switch to this.","title":"User 1 device types"},{"location":"library/remote_retropad/#controller-tables","text":"","title":"Controller tables"},{"location":"library/remote_retropad/#joypad","text":"User 1 Remap descriptors RetroPad Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R L2 R2 L3 R3","title":"Joypad"},{"location":"library/remote_retropad/#external-links","text":"Libretro Remote RetroPad Github Repository Report Libretro Remote RetroPad Core Issues Here","title":"External Links"},{"location":"library/sameboy/","text":"Nintendo - Game Boy / Color (SameBoy) \u00b6 Background \u00b6 SameBoy is an extremely accurate open source Gameboy (DMG) and Gameboy Color (CGB) emulator, written in portable C. Supports GameBoy (DMG) and GameBoy Color (CGB) emulation Battery save support Save states Includes open source DMG and CGB boot ROMs Real time clock emulation Extremely high accuracy Link-cable emulation Author/License \u00b6 The SameBoy core has been authored by LIJI32 The SameBoy core is licensed under MIT A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the SameBoy core have the following file extensions: .gb .gbc Databases \u00b6 RetroArch database(s) that are associated with the SameBoy core: Nintendo - Game Boy Nintendo - Game Boy Color BIOS \u00b6 Required or optional firmware files go in the frontend's system directory. Attention The SameBoy core has reverse engineered Game Boy/Game Boy Color boot ROMs baked into the core itself so real BIOS files aren't required. If you\u2019d like to override this, you can place the following BIOS files in RetroArch's system directory. Filename Description md5sum dmg_boot.bin Game Boy boot ROM - Optional 32fbbd84168d3482956eb3c5051637f5 cgb_boot.bin Game Boy Color boot ROM - Optional dbfce9db9deaa2567f6a84fde55f9680 Features \u00b6 Frontend-level settings or features that the SameBoy core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2714 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2714 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The SameBoy core's internal core name is 'SameBoy' The SameBoy core saves/loads to/from these directories. Frontend's Save directory 'content-name'.srm (Cartridge backup save) 'content-name'.rtc (Real time clock save) Frontend's State directory 'content-name'.state# (State) Geometry and timing \u00b6 The SameBoy core's core provided FPS is 59.7275 FPS The SameBoy core's core provided sample rate is 48000 Hz The SameBoy core's core provided aspect ratio is 10:9 in single mode, varies in dual mode Link \u00b6 Link cable emulation is supported in single-cart mode and in dual-cart mode. To use it in single-cart mode enable the Single cart dual mode option under options and reload the content Note The savefile for the second slot in this mode will be named 'gamename.srm.2' To use it in dual-cart mode you have to load content via the Subsystem API which you can achieve via the GUI or via CLI Load content via Subsystem API from GUI First, we load the first GameBoy ROM through '2 Player Game Boy Link' in RetroArch's Main Menu. Next, we load our Super GameBoy ROM through 'Load Super GameBoy' in RetroArch's Menu Menu. Then, we start the content by selecting 'Start GameBoy' In RetroArch's Menu Menu. Warning You have to load any game in the core for the '2 Player Game Boy Link' entries to show up, this is a RetroArch limitation, not a core limitation !!! warning While loading the same game in this mode should work some users reported issues while linking them, you should use single cart mode for that scenario Load Content via Subsystem API from CLI retroarch -L {path to sameboy core} {path to first GameBoy ROM} --subsystem gb_link_2p {path to second GameBoy ROM} Core options \u00b6 The SameBoy core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Regular Options \u00b6 Single cart dual mode (reload) [sameboy_dual] ( disabled |enabled) Emulate two Game Boy games at the same time. Color correction [sameboy_color_correction_mode] ( off |correct curves|emulate hardware|preserve brightness) Only for Gameboy Color games. Select color correction. Color Correction - off Color Correction - correct curves Color Correction - emulate hardware Color Correction - preserve brightness High-pass filter [sameboy_high_pass_filter_mode] ( off |accurate|remove dc offset) Awaiting description. Emulated model [sameboy_model] ( Game Boy Color |Game Boy Advance|Auto|Game Boy) Select what console/model the content is being ran on. May activate special in-game content. Dual Mode Options \u00b6 Single cart dual mode (reload) [sameboy_dual] ( disabled |enabled) Emulate two Game Boy games at the same time. This core option is enabled by default and is hidden from view when the 2 Player Game Boy Link Subsystem API is used. Link cable emulation [sameboy_link] ( enabled |disabled) Enable in-game Game Boy link cable functions. Screen layout [sameboy_screen_layout] ( top-down |left-right) Configure the layout of the two emulated Game Boys. Audio output [sameboy_audio_output] ( Game Boy #1 |Game Boy #2 ) Select which Game Boy will output audio. Emulated model for Game Boy #1 [sameboy_model_1] ( Game Boy Color |Game Boy Advance|Auto|Game Boy) Select what console/model the content is being ran on for Game Boy #1 . May activate special in-game content. Emulated model for Game Boy #2 [sameboy_model_2] ( Game Boy Color |Game Boy Advance|Auto|Game Boy) Select what console/model the content is being ran on for Game Boy #2 . May activate special in-game content. Color correction for Game Boy #1 [sameboy_color_correction_mode_1] ( off |correct curves|emulate hardware|preserve brightness) Only for Gameboy Color games. Select color correction for Game Boy #1 . Color correction for Game Boy #2 [sameboy_color_correction_mode_2] ( off |correct curves|emulate hardware|preserve brightness) Only for Gameboy Color games. Select color correction for Game Boy #2 . High-pass filter for Game Boy #1 [sameboy_high_pass_filter_mode_1] ( off |accurate|remove dc offset) Awaiting description. High-pass filter for Game Boy #2 [sameboy_high_pass_filter_mode_2] ( off |accurate|remove dc offset) Awaiting description. Controllers \u00b6 The SameBoy core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 - 2 device types \u00b6 None - Doesn't disable input. There's no reason to switch to this. RetroPad - Joypad - Stay on this. Nintendo Game Boy - Joypad - Same as RetroPad. There's no reason to switch to this. Rumble support \u00b6 Rumble only works in the SameBoy core when The content being ran has rumble support. The frontend being used has rumble support. The joypad device being used has rumble support. Controller tables \u00b6 Joypad \u00b6 User 1 - 2 Remap descriptors RetroPad Inputs B Select Start Up Down Left Right A Compatibility \u00b6 SameBoy automation results External Links \u00b6 Official SameBoy Website Official SameBoy Github Repository Libretro SameBoy Core info file Libretro SameBoy Github Repository Report Libretro SameBoy Core Issues Here See also \u00b6 Nintendo - Game Boy (+ Color) \u00b6 Nintendo - Game Boy / Color (Emux GB) Nintendo - Game Boy / Color (Gambatte) Nintendo - Game Boy / Color (Gearboy) Nintendo - Game Boy / Color (TGB Dual) Nintendo - Game Boy Advance (mGBA) Nintendo - Game Boy Advance (VBA-M) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (nSide Balanced) Nintendo - SNES / Famicom (Mesen-S)","title":"Nintendo - Game Boy / Color (SameBoy)"},{"location":"library/sameboy/#nintendo-game-boy-color-sameboy","text":"","title":"Nintendo - Game Boy / Color (SameBoy)"},{"location":"library/sameboy/#background","text":"SameBoy is an extremely accurate open source Gameboy (DMG) and Gameboy Color (CGB) emulator, written in portable C. Supports GameBoy (DMG) and GameBoy Color (CGB) emulation Battery save support Save states Includes open source DMG and CGB boot ROMs Real time clock emulation Extremely high accuracy Link-cable emulation","title":"Background"},{"location":"library/sameboy/#authorlicense","text":"The SameBoy core has been authored by LIJI32 The SameBoy core is licensed under MIT A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/sameboy/#extensions","text":"Content that can be loaded by the SameBoy core have the following file extensions: .gb .gbc","title":"Extensions"},{"location":"library/sameboy/#databases","text":"RetroArch database(s) that are associated with the SameBoy core: Nintendo - Game Boy Nintendo - Game Boy Color","title":"Databases"},{"location":"library/sameboy/#bios","text":"Required or optional firmware files go in the frontend's system directory. Attention The SameBoy core has reverse engineered Game Boy/Game Boy Color boot ROMs baked into the core itself so real BIOS files aren't required. If you\u2019d like to override this, you can place the following BIOS files in RetroArch's system directory. Filename Description md5sum dmg_boot.bin Game Boy boot ROM - Optional 32fbbd84168d3482956eb3c5051637f5 cgb_boot.bin Game Boy Color boot ROM - Optional dbfce9db9deaa2567f6a84fde55f9680","title":"BIOS"},{"location":"library/sameboy/#features","text":"Frontend-level settings or features that the SameBoy core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2714 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2714 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/sameboy/#directories","text":"The SameBoy core's internal core name is 'SameBoy' The SameBoy core saves/loads to/from these directories. Frontend's Save directory 'content-name'.srm (Cartridge backup save) 'content-name'.rtc (Real time clock save) Frontend's State directory 'content-name'.state# (State)","title":"Directories"},{"location":"library/sameboy/#geometry-and-timing","text":"The SameBoy core's core provided FPS is 59.7275 FPS The SameBoy core's core provided sample rate is 48000 Hz The SameBoy core's core provided aspect ratio is 10:9 in single mode, varies in dual mode","title":"Geometry and timing"},{"location":"library/sameboy/#link","text":"Link cable emulation is supported in single-cart mode and in dual-cart mode. To use it in single-cart mode enable the Single cart dual mode option under options and reload the content Note The savefile for the second slot in this mode will be named 'gamename.srm.2' To use it in dual-cart mode you have to load content via the Subsystem API which you can achieve via the GUI or via CLI Load content via Subsystem API from GUI First, we load the first GameBoy ROM through '2 Player Game Boy Link' in RetroArch's Main Menu. Next, we load our Super GameBoy ROM through 'Load Super GameBoy' in RetroArch's Menu Menu. Then, we start the content by selecting 'Start GameBoy' In RetroArch's Menu Menu. Warning You have to load any game in the core for the '2 Player Game Boy Link' entries to show up, this is a RetroArch limitation, not a core limitation !!! warning While loading the same game in this mode should work some users reported issues while linking them, you should use single cart mode for that scenario Load Content via Subsystem API from CLI retroarch -L {path to sameboy core} {path to first GameBoy ROM} --subsystem gb_link_2p {path to second GameBoy ROM}","title":"Link"},{"location":"library/sameboy/#core-options","text":"The SameBoy core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.","title":"Core options"},{"location":"library/sameboy/#regular-options","text":"Single cart dual mode (reload) [sameboy_dual] ( disabled |enabled) Emulate two Game Boy games at the same time. Color correction [sameboy_color_correction_mode] ( off |correct curves|emulate hardware|preserve brightness) Only for Gameboy Color games. Select color correction. Color Correction - off Color Correction - correct curves Color Correction - emulate hardware Color Correction - preserve brightness High-pass filter [sameboy_high_pass_filter_mode] ( off |accurate|remove dc offset) Awaiting description. Emulated model [sameboy_model] ( Game Boy Color |Game Boy Advance|Auto|Game Boy) Select what console/model the content is being ran on. May activate special in-game content.","title":"Regular Options"},{"location":"library/sameboy/#dual-mode-options","text":"Single cart dual mode (reload) [sameboy_dual] ( disabled |enabled) Emulate two Game Boy games at the same time. This core option is enabled by default and is hidden from view when the 2 Player Game Boy Link Subsystem API is used. Link cable emulation [sameboy_link] ( enabled |disabled) Enable in-game Game Boy link cable functions. Screen layout [sameboy_screen_layout] ( top-down |left-right) Configure the layout of the two emulated Game Boys. Audio output [sameboy_audio_output] ( Game Boy #1 |Game Boy #2 ) Select which Game Boy will output audio. Emulated model for Game Boy #1 [sameboy_model_1] ( Game Boy Color |Game Boy Advance|Auto|Game Boy) Select what console/model the content is being ran on for Game Boy #1 . May activate special in-game content. Emulated model for Game Boy #2 [sameboy_model_2] ( Game Boy Color |Game Boy Advance|Auto|Game Boy) Select what console/model the content is being ran on for Game Boy #2 . May activate special in-game content. Color correction for Game Boy #1 [sameboy_color_correction_mode_1] ( off |correct curves|emulate hardware|preserve brightness) Only for Gameboy Color games. Select color correction for Game Boy #1 . Color correction for Game Boy #2 [sameboy_color_correction_mode_2] ( off |correct curves|emulate hardware|preserve brightness) Only for Gameboy Color games. Select color correction for Game Boy #2 . High-pass filter for Game Boy #1 [sameboy_high_pass_filter_mode_1] ( off |accurate|remove dc offset) Awaiting description. High-pass filter for Game Boy #2 [sameboy_high_pass_filter_mode_2] ( off |accurate|remove dc offset) Awaiting description.","title":"Dual Mode Options"},{"location":"library/sameboy/#controllers","text":"The SameBoy core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/sameboy/#user-1-2-device-types","text":"None - Doesn't disable input. There's no reason to switch to this. RetroPad - Joypad - Stay on this. Nintendo Game Boy - Joypad - Same as RetroPad. There's no reason to switch to this.","title":"User 1 - 2 device types"},{"location":"library/sameboy/#rumble-support","text":"Rumble only works in the SameBoy core when The content being ran has rumble support. The frontend being used has rumble support. The joypad device being used has rumble support.","title":"Rumble support"},{"location":"library/sameboy/#controller-tables","text":"","title":"Controller tables"},{"location":"library/sameboy/#joypad","text":"User 1 - 2 Remap descriptors RetroPad Inputs B Select Start Up Down Left Right A","title":"Joypad"},{"location":"library/sameboy/#compatibility","text":"SameBoy automation results","title":"Compatibility"},{"location":"library/sameboy/#external-links","text":"Official SameBoy Website Official SameBoy Github Repository Libretro SameBoy Core info file Libretro SameBoy Github Repository Report Libretro SameBoy Core Issues Here","title":"External Links"},{"location":"library/sameboy/#see-also","text":"","title":"See also"},{"location":"library/sameboy/#nintendo-game-boy-color","text":"Nintendo - Game Boy / Color (Emux GB) Nintendo - Game Boy / Color (Gambatte) Nintendo - Game Boy / Color (Gearboy) Nintendo - Game Boy / Color (TGB Dual) Nintendo - Game Boy Advance (mGBA) Nintendo - Game Boy Advance (VBA-M) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (nSide Balanced) Nintendo - SNES / Famicom (Mesen-S)","title":"Nintendo - Game Boy (+ Color)"},{"location":"library/scummvm/","text":"ScummVM \u00b6 Background \u00b6 ScummVM is an interpreter program which allows you to run certain classic graphical point-and-click adventure games, provided you already have their data files. The clever part about this: ScummVM just replaces the executables shipped with the games, allowing you to play them on systems for which they were never designed The ScummVM core has been authored by ScummVM Team The ScummVM core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the ScummVM core have the following file extensions: .scummvm RetroArch database(s) that are associated with the ScummVM core: ScummVM Features \u00b6 Frontend-level settings or features that the ScummVM core respects. Feature Supported Restart \u2714 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The ScummVM core's library name is 'scummvm' The ScummVM core saves/loads to/from these directories. Frontend's Save directory Game saves Frontend's System directory File Description scummvm.ini ScummVM Config File Geometry and timing \u00b6 The ScummVM core's core provided FPS is 60 The ScummVM core's core provided sample rate is 44100 Hz The ScummVM core's base width is 640 The ScummVM core's base height is 480 The ScummVM core's max width is 640 The ScummVM core's max height is 480. The ScummVM core's core provided aspect ratio is 4/3 Usage \u00b6 Initial Configuration \u00b6 Before attempting to run a game with the ScummVM core, certain preparations are required to ensure correct operation: Download and extract the file scummvm.zip . Place the resultant scummvm folder inside the RetroArch system directory. Run the ScummVM core without content: Go to RetroArch's main menu screen. Select 'Load Core', then 'ScummVM'. Select 'Start Core'. The main ScummVM user interface will open: Press the 'Options...' button, then select the 'Paths' tab. Press the 'Theme Path:' button and navigate to the RetroArch system directory. Enter the scummvm/theme/ folder and press the 'Choose' button. Press the 'Extra Path:' button and navigate to the RetroArch system directory. Enter the scummvm/extra/ folder and press the 'Choose' button. Press the 'Apply' button. Select the 'Misc' tab, then press the 'Theme:' button. Select 'ScummVM Modern Theme' and press the 'Choose' button. Press the 'Apply' button, then continue to the 'Enable Enhanced MIDI Emulation' section below. Enable Enhanced MIDI Emulation \u00b6 Some games only contain music in the form of MIDI data. By default, ScummVM will emulate MIDI mode using AdLib. Higher quality audio may be achieved for MIDI-enabled games by using FluidSynth MIDI emulation with an appropriate soundfont. This is the recommended mode of operation under RetroArch. Select the 'MIDI' tab, then under 'GM Device:' select 'FluidSynth'. Press the 'SoundFont:' button and navigate to the RetroArch system directory. Enter the scummvm/extra/ folder. (NB: If the steps of this guide have been followed in order, the scummvm/extra/ folder will be selected automatically upon pressing the 'SoundFont:' button) Select the file Roland_SC-55.sf2 and press the 'Choose' button. Tick the 'Mixed AdLib/MIDI mode' checkbox. Press the 'Apply' button, then continue to the 'Enable MT-32 Emulation' section below. Many games benefit greatly from FluidSynth MIDI emulation. Some particularly notable examples are: Sam & Max Hit the Road Day of the Tentacle Discworld Attention FluidSynth MIDI emulation slightly increases the CPU requirements of the ScummVM core. On the vast majority of platforms this should not be an issue. If crackling sound is observed on very low power devices, FluidSynth MIDI emulation should be disabled by setting 'GM Device:' to the default \"Don't use General MIDI music\" option. Enable MT-32 Emulation (Optional) \u00b6 Some games which contain MIDI music data also have improved tracks designed for the MT-32 sound module. ScummVM can emulate this device, vastly increasing the audio quality of these games. Enabling MT-32 emulation is therefore highly recommended, but should be considered optional since it requires original MT-32 ROMs which must be provided by the user. The names and checksums of the two required ROM files are: Filename md5sum MT32_PCM.ROM 89e42e386e82e0cacb4a2704a03706ca MT32_CONTROL.ROM 5626206284b22c2734f3e9efefcd2675 These files must be placed inside the scummvm/extra/ folder within the RetroArch system directory. MT-32 emulation may then be enabled via the main ScummVM user interface as follows: Select the 'MT-32' tab. Under 'MT-32 Device:' select 'MT-32 Emulator'. Press the 'Apply' button, then the 'OK' button to close the options menu. Some notable examples of games that sound exquisite with MT-32 emulation are: Monkey Island 2: LeChuck's Revenge Indiana Jones and the Fate of Atlantis Simon the Sorcerer Experiencing Monkey Island 2 without MT-32 emulation is like listening to Beethoven played on a kazoo. Attention MT-32 emulation substantially increases the CPU requirements of the ScummVM core, and this can vary on a per-game basis. On most desktop systems this should not be an issue, but some devices may struggle to maintain full speed with all games. For example, 'Monkey Island 2' and 'Indiana Jones and the Fate of Atlantis' will run on very low power Android chipsets, but 'Simon the Sorcerer' will overwhelm mid-to-high-end mobile CPUs. If crackling sound is observed, the user should either (a) disable MT-32 emulation by setting 'MT-32 Device:' to the default \"Don't use Roland MT-32 music\" or (b) force the use of the 'FluidSynth' audio device via an internal ScummVM game settings override (this is described in a following section). This concludes 'Initial Configuration'. The core may be shut down either by pressing the 'Quit' button, or via 'Close Content' from the Quick Menu. Game Management \u00b6 Before a game can be run via the ScummVM core, it should first be added to the internal launcher. Failure to do so will prevent game-specific configuration options from being saved (e.g. volume levels, subtitle speed, internal game settings overrides). Adding a Game to the ScummVM Launcher \u00b6 The data files for each game must be copied to a uniquely-named directory on local storage (i.e. one directory per game). A list of the specific files required for any particular game may be found on the ScummVM Datafiles page. A suggested directory layout for 'Flight of the Amazon Queen' is presented as the simplest possible example: \u2514\u2500\u2500 ROMs/ \u2514\u2500\u2500 ScummVM/ \u2514\u2500\u2500 Flight of the Amazon Queen (CD DOS)/ \u2514\u2500\u2500 queen.1 Once all files are in place, each game may be added as follows: Run the ScummVM core without content: Go to RetroArch's main menu screen. Select 'Load Core', then 'ScummVM'. Select 'Start Core'. In the main ScummVM user interface, press the 'Add Game...' button. Navigate to the game directory. Double click the game directory itself to enter it, then press the 'Choose' button. If the game is detected correctly (i.e. if the data files are correct), a settings dialog box will open. In general, the automatically generated configuration settings can be accepted... However: For simplicity, and compatibility with existing .scummvm files (discussed in the following section), the 'ID:' entry should be set to the so-called 'short name' of the game. All 'short names' are listed on the ScummVM Compatibility Page . In most cases, the automatically generated 'ID:' is equal to the 'short name'. In some cases, the automatically generated 'ID:' will be the 'short name' with an additional identifying suffix. This suffix should be deleted. If using a gamepad, this may be achieved by clicking at the end of the 'ID:' entry line and using the 'L2' button/trigger to delete unwanted characters. Once the 'ID:' has been adjusted (if required), press the 'OK' button to 'register' the game. Attention Once a game has been registered, it may be run by selecting it in the ScummVM Launcher game list and pressing the 'Start' button. However: Employing the ScummVM Launcher in this manner is not recommended, since it prevents the use of RetroArch per-game configuration overrides, input remaps and shader overrides. The ScummVM Launcher should only be used to add games and change settings. Running a Game \u00b6 Running a ScummVM game via the RetroArch frontend requires the addition of an appropriately configured .scummvm file to the game directory. For each game listed in the ScummVM Launcher, the following procedure should be followed: Note the specific game 'ID:' that was submitted when adding the game to the ScummVM Launcher. If this guide has been followed, the game ID will be equal to the 'short name' found on the ScummVM Compatibility Page . Enter the directory containing the game data. Create a new text file named after the game, with a .scummvm extension. (The name of the .scummvm file will be used to select which RetroArch configuration/remap override should be loaded when a game is launched. The chosen name does not have to be the same as the game directory name or the ScummVM 'short name', although either would be appropriate. The only requirement is that each .scummvm file should have a unique name.) Open the .scummvm file in a text editor and enter the game ID on a single line. Save and close the file. Again, 'Flight of the Amazon Queen' is presented as a simple example: \u2514\u2500\u2500 ROMs/ \u2514\u2500\u2500 ScummVM/ \u2514\u2500\u2500 Flight of the Amazon Queen (CD DOS)/ \u251c\u2500\u2500 Flight of the Amazon Queen.scummvm \u2514\u2500\u2500 queen.1 ...where Flight of the Amazon Queen.scummvm has the following content: 1 queen Games can then be launched as follows: Go to RetroArch's main menu screen. Select 'Load Content'. Navigate to the game directory. Select the .scummvm file. The game will load. For users who do not wish to create their own .scummvm files, a pre-prepared collection is available in the libretro-database-scummvm repository. Simply download the appropriate file for a particular game and copy it to the game directory. Attention When using third-party .scummvm files, it is important to verify that the file contents matches the specific game ID that was submitted when adding the game to the ScummVM Launcher. Do not assume that third-party .scummvm files are automagically 'correct'. Playlist/Scanning Support \u00b6 To launch games efficiently via the RetroArch frontend, it is recommended to add them to a playlist. Provided that a .scummvm file is present inside each game directory, RetroArch supports automated scanning/playlist generation for ScummVM content: From RetroArch's main menu screen, navigate to the 'Import content' tab. Select 'Scan Directory'. Navigate to the folder containing the ScummVM game directories. Select <Scan This Directory> . All recognised games will be added to a ScummVM.lpl file in the RetroArch playlist directory, and be made available via a new 'ScummVM' tab in the frontend menu. (Alternatively, each game directory may be scanned in turn - useful if game directories are present in multiple locations) An example playlist entry for 'Flight of the Amazon Queen' is as follows: /storage/ROMs/ScummVM/Flight of the Amazon Queen (CD DOS)/Flight of the Amazon Queen.scummvm Flight of the Amazon Queen DETECT DETECT 19C1B1B5|crc ScummVM.lpl Attention Not all games/configurations are present in the current database. If a particular game is not detected, an entry in the ScummVM.lpl playlist file can be added by hand. It should have the format: /path/to/game_directory/game_name.scummvm game_name DETECT DETECT 0|crc ScummVM.lpl Additional Configuration Notes \u00b6 Both ScummVM and RetroArch itself allow a vast number of options to be configured on a per-game basis. Here we present three additional configuration topics that will likely be of relevance for typical users: Volume Levels \u00b6 ScummVM games exhibit a spectacular variance in audio volume levels. For comfort, it is almost mandatory to adjust specific volumes on a per-game basis. Fortunately this is trivial: While a game is running, press the RetroPad 'start' button to open the ScummVM GUI. Using the cursor, press the 'Options' button. Adjust the 'Music volume:', 'SFX volume:' and 'Speech volume:' sliders to the desired levels. Press the 'OK' button, then the 'Resume' button. Provided that the game has been correctly added to the ScummVM Launcher, the adjusted levels will be preserved between play sessions. Attention If the game has not been added to the ScummVM Launcher, or if the game ID in the .scummvm file does not match the ScummVM Launcher ID, all settings will be lost when the game is closed. Manual Music Device Selection \u00b6 By default, ScummVM will automatically select the most appropriate music playback option for each game (i.e. MT-32 emulation, FluidSynth MIDI emulation or AdLib emulation). In the majority of cases this will yield the best possible sound quality, and no user intervention is required. There are, however, circumstances and games where a manual override is beneficial. This is something that should be determined by the user on a per-game basis, but here are some practical examples: Simon the Sorcerer sounds best with the default selection of MT-32 emulation, but this is too CPU-intensive for most Android devices. An acceptable compromise between performance and sound quality can be achieved by forcing the game to use FluidSynth MIDI emulation. Simon the Sorcerer 2 will use FluidSynth MIDI emulation by default. Far better quality music can be achieved by forcing the game to use MT-32 emulation. (And since this game has even higher CPU requirements than the first in the series, smooth playback on Android devices generally requires the use of AdLib emulation) Beneath a Steel Sky defaults to MT-32 emulation, which should be best... but forcing the use of FluidSynth MIDI emulation tends to produce 'richer' sounding music, which some users may prefer. Flight of the Amazon Queen is another game that defaults to MT-32 emulation but which (arguably) sounds far better with FluidSynth MIDI emulation. A per-game music device override may be set as follows: Run the ScummVM core without content: Go to RetroArch's main menu screen. Select 'Load Core', then 'ScummVM'. Select 'Start Core'. In the main ScummVM user interface, select the appropriate entry in the Launcher game list and press the 'Edit Game...' button. In the dialog that opens, select the 'Audio' tab. Tick the 'Override global audio settings' checkbox. Under 'Music Device:', select the desired option (i.e. 'FluidSynth', 'MT-32 Emulator' or 'AdLib Emulator'). Press the 'OK' button. Aspect Ratio Correction \u00b6 ScummVM's core provided aspect ratio is 4:3. For most games this is correct, particularly for newer games, and those that targeted the PC as their primary platform. It is widely known that DOS games typically ran at 320x200, with non-square pixels stretched to fill a 4:3 display. It is not so widely known that a number of popular games targeted the European Amiga market, where (due to various PAL/NTSC considerations) 320x200 content was often shown in a letterboxed rectangle at a display resolution of 320x256. It is sometimes difficult to determine the original intent of the artists, but many of these games were actually made in a quasi-widescreen format. Some notable examples are: Beneath a Steel Sky Flight of the Amazon Queen Simon the Sorcerer 1 + 2 (The full list of affected games should be determined at the user's discretion) The actual 'correct' aspect ratio in these cases is somewhat fuzzy, but good results are achieved by using the pixel aspect ratio of 16:10. To demonstrate the issue, here is an example screenshot from Beneath a Steel Sky at the default 4:3 ratio: Note the distorted fan vents. Here is the same image at a 16:10 ratio: The fan vents are the correct shape, and the character proportions are more natural. To automate correct aspect ratio selection for games such as these, a RetroArch configuration override should be used. This can be set up as follows: Enter the RetroArch config directory. Create a new directory called scummvm (if it does not already exist). Create a new text file with the exact same name as the .scummvm file for the game to be overridden, but with a .cfg extension. An example layout for 'Flight of the Amazon Queen' is shown: \u2514\u2500\u2500 config/ \u2514\u2500\u2500 scummvm/ \u2514\u2500\u2500 Flight of the Amazon Queen.cfg Open the .cfg file in a text editor and paste the following on a single line: aspect_ratio_index = \"2\" Save and close the file. Now whenever the game is launched, it will be displayed at the 'correct' 16:10 ratio. This will not affect any other game. Core options \u00b6 The ScummVM core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Gamepad Cursor Speed [scummvm_gamepad_cursor_speed] ( 1.0 |1.5|2.0|2.5|3.0|0.25|0.5|0.75) Sets the mouse cursor speed multiplier when moving the cursor with the RetroPad left analog stick or D-Pad. Attention The default value of '1.0' is optimised for games that have a native resolution of '320x200' or '320x240'. When running 'high definition' games with a native resolution of '640x400' or '640x480', it is recommended to set the Gamepad Cursor Speed to '2.0'. Analog Cursor Response [scummvm_analog_response] ( linear |cubic) Determines how the speed of the cursor varies when tilting the RetroPad left analog stick. 'linear': Cursor speed increases linearly with analog stick movement. This is standard behaviour with which most users will be familiar. 'cubic': Cursor speed increases quadratically with analog stick movement. This allows for greater precision when making small movements with the analog stick, without sacrificing maximum speed at full analog stick range. This mode may require practice for effective use. Analog Deadzone (percent) [scummvm_analog_deadzone] ( 15 |20|25|30|0|5|10) Sets the deadzone of the RetroPad analog sticks. Used to eliminate cursor drift/unwanted input. Attention The deadzone setting can have a significant effect on the 'feel' of analog cursor movement. The value should be set as low as possible for best results - i.e. reduce the value until cursor drift is evident, then increment to the next highest setting. Xbox gamepads typically require a deadzone of 15-20%. Many Android-compatible bluetooth gamepads have an internal 'hardware' deadzone, allowing the deadzone value here to be set to 0%. Mouse Speed [scummvm_mouse_speed] ( 1.0 |1.25|1.5|1.75|2.0|2.5|3.0|0.05|0.1|0.15|0.2|0.25|0.3|0.35|0.4|0.45|0.5|0.6|0.7|0.8|0.9) Sets the mouse cursor speed multiplier when moving the cursor with the RetroMouse. Speed Hack (Restart) [scummvm_speed_hack] ( disabled |enabled) Enables an optional speed hack that significantly reduces the CPU requirements of the core by allowing subtle timing inaccuracies. Attention This hack is considered 'safe' - games should run correctly when it is enabled, and most inaccuracies are imperceptible other than in a few edge cases. It remains a hack, though, and it is strongly recommended that users of desktop class machines keep it disabled. However: For users of low power hardware (Android devices, single board computers), this hack is essentially mandatory for full speed operation of the core. For Android users in particular, the guides in the 'Usage' section of this document assume that the speed hack is enabled. Joypad \u00b6 RetroPad Inputs User 1 input descriptors ScummVM Inputs Right Mouse Button Right Mouse Button . . (period) F1 F1 ScummVM GUI ScummVM GUI Mouse Cursor Up Mouse Cursor Up Mouse Cursor Down Mouse Cursor Down Mouse Cursor Left Mouse Cursor Left Mouse Cursor Right Mouse Cursor Right Left Mouse Button Left Mouse Button Esc Esc Enter Enter Numpad 5 Numpad 5 Backspace Backspace Cursor Fine Control Cursor Fine Control F10 F10 Numpad 0 Numpad 0 X Mouse Cursor Left/Right Y Mouse Cursor Up/Down Virtual Numpad Additional Notes: Depressing the 'Cursor Fine Control' button reduces cursor speed to \u2153 of the value set by the 'Gamepad Cursor Speed' core option. The RetroPad right analog stick is mapped to an 8-way 'Virtual Numpad' with the following layout: [7][8][9] [4] [6] [1][2][3] Additional 'ScummVM Input' Descriptions: Esc: Skips cutscenes. Opens/closes menus in some games. Virtual Numpad + Numpad 5 + Numpad 0: Enables control during fight sequences in the 'Indiana Jones' series of games. Enables bypass of Monkey Island 2 copy protection. Enables saving in games that require text entry when naming a save slot. Enables menu navigation in some games (Numpad 8 == up, Numpad 2 == down). Enter + Backspace: Enables saving in games that require text entry when naming a save slot. 'Enter' may be used to attack in 'Full Throttle' fight sequences. 'Enter' enables menu item selection in some games. . (period): Skips lines of dialogue in SCUMM engine games. F1: Shows in-game menu in some games. Enables saving in some games. F10: Shows hotspots in Simon the Sorcerer 1 + 2. Mouse \u00b6 RetroMouse Inputs ScummVM Inputs Mouse Cursor Mouse Cursor Mouse 1 Left Mouse Button Mouse 2 Right Mouse Button Attention To ensure correct operation when using a RetroMouse, it is recommended that the RetroArch 'Grab Mouse' option be enabled while running content with the ScummVM core. By default, 'Grab Mouse' may be toggled on/off by pressing F11 on the keyboard. The 'Grab Mouse' option is not required when using a RetroPad to move the cursor. Pointer \u00b6 The Wii U build of the ScummVM core uses the libretro pointer API for mouse emulation. RetroPointer Inputs ScummVM Inputs or Pointer Position Mouse Cursor or Pointer Pressed Left Mouse Button Compatibility \u00b6 Compatibility listings for the standalone version of ScummVM may be found on the official ScummVM Compatibility Page . The Libretro ScummVM core currently has issues with a handful of games that function correctly when using the standalone version. An evolving RetroArch-specific compatibility list is being maintained in this Google Spreadsheet . External Links \u00b6 Official ScummVM Website Official ScummVM Github Repository Libretro ScummVM Core info file Libretro ScummVM Github Repository Report Libretro ScummVM Core Issues Here","title":"ScummVM"},{"location":"library/scummvm/#scummvm","text":"","title":"ScummVM"},{"location":"library/scummvm/#background","text":"ScummVM is an interpreter program which allows you to run certain classic graphical point-and-click adventure games, provided you already have their data files. The clever part about this: ScummVM just replaces the executables shipped with the games, allowing you to play them on systems for which they were never designed The ScummVM core has been authored by ScummVM Team The ScummVM core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Background"},{"location":"library/scummvm/#extensions","text":"Content that can be loaded by the ScummVM core have the following file extensions: .scummvm RetroArch database(s) that are associated with the ScummVM core: ScummVM","title":"Extensions"},{"location":"library/scummvm/#features","text":"Frontend-level settings or features that the ScummVM core respects. Feature Supported Restart \u2714 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/scummvm/#directories","text":"The ScummVM core's library name is 'scummvm' The ScummVM core saves/loads to/from these directories. Frontend's Save directory Game saves Frontend's System directory File Description scummvm.ini ScummVM Config File","title":"Directories"},{"location":"library/scummvm/#geometry-and-timing","text":"The ScummVM core's core provided FPS is 60 The ScummVM core's core provided sample rate is 44100 Hz The ScummVM core's base width is 640 The ScummVM core's base height is 480 The ScummVM core's max width is 640 The ScummVM core's max height is 480. The ScummVM core's core provided aspect ratio is 4/3","title":"Geometry and timing"},{"location":"library/scummvm/#usage","text":"","title":"Usage"},{"location":"library/scummvm/#initial-configuration","text":"Before attempting to run a game with the ScummVM core, certain preparations are required to ensure correct operation: Download and extract the file scummvm.zip . Place the resultant scummvm folder inside the RetroArch system directory. Run the ScummVM core without content: Go to RetroArch's main menu screen. Select 'Load Core', then 'ScummVM'. Select 'Start Core'. The main ScummVM user interface will open: Press the 'Options...' button, then select the 'Paths' tab. Press the 'Theme Path:' button and navigate to the RetroArch system directory. Enter the scummvm/theme/ folder and press the 'Choose' button. Press the 'Extra Path:' button and navigate to the RetroArch system directory. Enter the scummvm/extra/ folder and press the 'Choose' button. Press the 'Apply' button. Select the 'Misc' tab, then press the 'Theme:' button. Select 'ScummVM Modern Theme' and press the 'Choose' button. Press the 'Apply' button, then continue to the 'Enable Enhanced MIDI Emulation' section below.","title":"Initial Configuration"},{"location":"library/scummvm/#enable-enhanced-midi-emulation","text":"Some games only contain music in the form of MIDI data. By default, ScummVM will emulate MIDI mode using AdLib. Higher quality audio may be achieved for MIDI-enabled games by using FluidSynth MIDI emulation with an appropriate soundfont. This is the recommended mode of operation under RetroArch. Select the 'MIDI' tab, then under 'GM Device:' select 'FluidSynth'. Press the 'SoundFont:' button and navigate to the RetroArch system directory. Enter the scummvm/extra/ folder. (NB: If the steps of this guide have been followed in order, the scummvm/extra/ folder will be selected automatically upon pressing the 'SoundFont:' button) Select the file Roland_SC-55.sf2 and press the 'Choose' button. Tick the 'Mixed AdLib/MIDI mode' checkbox. Press the 'Apply' button, then continue to the 'Enable MT-32 Emulation' section below. Many games benefit greatly from FluidSynth MIDI emulation. Some particularly notable examples are: Sam & Max Hit the Road Day of the Tentacle Discworld Attention FluidSynth MIDI emulation slightly increases the CPU requirements of the ScummVM core. On the vast majority of platforms this should not be an issue. If crackling sound is observed on very low power devices, FluidSynth MIDI emulation should be disabled by setting 'GM Device:' to the default \"Don't use General MIDI music\" option.","title":"Enable Enhanced MIDI Emulation"},{"location":"library/scummvm/#enable-mt-32-emulation-optional","text":"Some games which contain MIDI music data also have improved tracks designed for the MT-32 sound module. ScummVM can emulate this device, vastly increasing the audio quality of these games. Enabling MT-32 emulation is therefore highly recommended, but should be considered optional since it requires original MT-32 ROMs which must be provided by the user. The names and checksums of the two required ROM files are: Filename md5sum MT32_PCM.ROM 89e42e386e82e0cacb4a2704a03706ca MT32_CONTROL.ROM 5626206284b22c2734f3e9efefcd2675 These files must be placed inside the scummvm/extra/ folder within the RetroArch system directory. MT-32 emulation may then be enabled via the main ScummVM user interface as follows: Select the 'MT-32' tab. Under 'MT-32 Device:' select 'MT-32 Emulator'. Press the 'Apply' button, then the 'OK' button to close the options menu. Some notable examples of games that sound exquisite with MT-32 emulation are: Monkey Island 2: LeChuck's Revenge Indiana Jones and the Fate of Atlantis Simon the Sorcerer Experiencing Monkey Island 2 without MT-32 emulation is like listening to Beethoven played on a kazoo. Attention MT-32 emulation substantially increases the CPU requirements of the ScummVM core, and this can vary on a per-game basis. On most desktop systems this should not be an issue, but some devices may struggle to maintain full speed with all games. For example, 'Monkey Island 2' and 'Indiana Jones and the Fate of Atlantis' will run on very low power Android chipsets, but 'Simon the Sorcerer' will overwhelm mid-to-high-end mobile CPUs. If crackling sound is observed, the user should either (a) disable MT-32 emulation by setting 'MT-32 Device:' to the default \"Don't use Roland MT-32 music\" or (b) force the use of the 'FluidSynth' audio device via an internal ScummVM game settings override (this is described in a following section). This concludes 'Initial Configuration'. The core may be shut down either by pressing the 'Quit' button, or via 'Close Content' from the Quick Menu.","title":"Enable MT-32 Emulation (Optional)"},{"location":"library/scummvm/#game-management","text":"Before a game can be run via the ScummVM core, it should first be added to the internal launcher. Failure to do so will prevent game-specific configuration options from being saved (e.g. volume levels, subtitle speed, internal game settings overrides).","title":"Game Management"},{"location":"library/scummvm/#adding-a-game-to-the-scummvm-launcher","text":"The data files for each game must be copied to a uniquely-named directory on local storage (i.e. one directory per game). A list of the specific files required for any particular game may be found on the ScummVM Datafiles page. A suggested directory layout for 'Flight of the Amazon Queen' is presented as the simplest possible example: \u2514\u2500\u2500 ROMs/ \u2514\u2500\u2500 ScummVM/ \u2514\u2500\u2500 Flight of the Amazon Queen (CD DOS)/ \u2514\u2500\u2500 queen.1 Once all files are in place, each game may be added as follows: Run the ScummVM core without content: Go to RetroArch's main menu screen. Select 'Load Core', then 'ScummVM'. Select 'Start Core'. In the main ScummVM user interface, press the 'Add Game...' button. Navigate to the game directory. Double click the game directory itself to enter it, then press the 'Choose' button. If the game is detected correctly (i.e. if the data files are correct), a settings dialog box will open. In general, the automatically generated configuration settings can be accepted... However: For simplicity, and compatibility with existing .scummvm files (discussed in the following section), the 'ID:' entry should be set to the so-called 'short name' of the game. All 'short names' are listed on the ScummVM Compatibility Page . In most cases, the automatically generated 'ID:' is equal to the 'short name'. In some cases, the automatically generated 'ID:' will be the 'short name' with an additional identifying suffix. This suffix should be deleted. If using a gamepad, this may be achieved by clicking at the end of the 'ID:' entry line and using the 'L2' button/trigger to delete unwanted characters. Once the 'ID:' has been adjusted (if required), press the 'OK' button to 'register' the game. Attention Once a game has been registered, it may be run by selecting it in the ScummVM Launcher game list and pressing the 'Start' button. However: Employing the ScummVM Launcher in this manner is not recommended, since it prevents the use of RetroArch per-game configuration overrides, input remaps and shader overrides. The ScummVM Launcher should only be used to add games and change settings.","title":"Adding a Game to the ScummVM Launcher"},{"location":"library/scummvm/#running-a-game","text":"Running a ScummVM game via the RetroArch frontend requires the addition of an appropriately configured .scummvm file to the game directory. For each game listed in the ScummVM Launcher, the following procedure should be followed: Note the specific game 'ID:' that was submitted when adding the game to the ScummVM Launcher. If this guide has been followed, the game ID will be equal to the 'short name' found on the ScummVM Compatibility Page . Enter the directory containing the game data. Create a new text file named after the game, with a .scummvm extension. (The name of the .scummvm file will be used to select which RetroArch configuration/remap override should be loaded when a game is launched. The chosen name does not have to be the same as the game directory name or the ScummVM 'short name', although either would be appropriate. The only requirement is that each .scummvm file should have a unique name.) Open the .scummvm file in a text editor and enter the game ID on a single line. Save and close the file. Again, 'Flight of the Amazon Queen' is presented as a simple example: \u2514\u2500\u2500 ROMs/ \u2514\u2500\u2500 ScummVM/ \u2514\u2500\u2500 Flight of the Amazon Queen (CD DOS)/ \u251c\u2500\u2500 Flight of the Amazon Queen.scummvm \u2514\u2500\u2500 queen.1 ...where Flight of the Amazon Queen.scummvm has the following content: 1 queen Games can then be launched as follows: Go to RetroArch's main menu screen. Select 'Load Content'. Navigate to the game directory. Select the .scummvm file. The game will load. For users who do not wish to create their own .scummvm files, a pre-prepared collection is available in the libretro-database-scummvm repository. Simply download the appropriate file for a particular game and copy it to the game directory. Attention When using third-party .scummvm files, it is important to verify that the file contents matches the specific game ID that was submitted when adding the game to the ScummVM Launcher. Do not assume that third-party .scummvm files are automagically 'correct'.","title":"Running a Game"},{"location":"library/scummvm/#playlistscanning-support","text":"To launch games efficiently via the RetroArch frontend, it is recommended to add them to a playlist. Provided that a .scummvm file is present inside each game directory, RetroArch supports automated scanning/playlist generation for ScummVM content: From RetroArch's main menu screen, navigate to the 'Import content' tab. Select 'Scan Directory'. Navigate to the folder containing the ScummVM game directories. Select <Scan This Directory> . All recognised games will be added to a ScummVM.lpl file in the RetroArch playlist directory, and be made available via a new 'ScummVM' tab in the frontend menu. (Alternatively, each game directory may be scanned in turn - useful if game directories are present in multiple locations) An example playlist entry for 'Flight of the Amazon Queen' is as follows: /storage/ROMs/ScummVM/Flight of the Amazon Queen (CD DOS)/Flight of the Amazon Queen.scummvm Flight of the Amazon Queen DETECT DETECT 19C1B1B5|crc ScummVM.lpl Attention Not all games/configurations are present in the current database. If a particular game is not detected, an entry in the ScummVM.lpl playlist file can be added by hand. It should have the format: /path/to/game_directory/game_name.scummvm game_name DETECT DETECT 0|crc ScummVM.lpl","title":"Playlist/Scanning Support"},{"location":"library/scummvm/#additional-configuration-notes","text":"Both ScummVM and RetroArch itself allow a vast number of options to be configured on a per-game basis. Here we present three additional configuration topics that will likely be of relevance for typical users:","title":"Additional Configuration Notes"},{"location":"library/scummvm/#volume-levels","text":"ScummVM games exhibit a spectacular variance in audio volume levels. For comfort, it is almost mandatory to adjust specific volumes on a per-game basis. Fortunately this is trivial: While a game is running, press the RetroPad 'start' button to open the ScummVM GUI. Using the cursor, press the 'Options' button. Adjust the 'Music volume:', 'SFX volume:' and 'Speech volume:' sliders to the desired levels. Press the 'OK' button, then the 'Resume' button. Provided that the game has been correctly added to the ScummVM Launcher, the adjusted levels will be preserved between play sessions. Attention If the game has not been added to the ScummVM Launcher, or if the game ID in the .scummvm file does not match the ScummVM Launcher ID, all settings will be lost when the game is closed.","title":"Volume Levels"},{"location":"library/scummvm/#manual-music-device-selection","text":"By default, ScummVM will automatically select the most appropriate music playback option for each game (i.e. MT-32 emulation, FluidSynth MIDI emulation or AdLib emulation). In the majority of cases this will yield the best possible sound quality, and no user intervention is required. There are, however, circumstances and games where a manual override is beneficial. This is something that should be determined by the user on a per-game basis, but here are some practical examples: Simon the Sorcerer sounds best with the default selection of MT-32 emulation, but this is too CPU-intensive for most Android devices. An acceptable compromise between performance and sound quality can be achieved by forcing the game to use FluidSynth MIDI emulation. Simon the Sorcerer 2 will use FluidSynth MIDI emulation by default. Far better quality music can be achieved by forcing the game to use MT-32 emulation. (And since this game has even higher CPU requirements than the first in the series, smooth playback on Android devices generally requires the use of AdLib emulation) Beneath a Steel Sky defaults to MT-32 emulation, which should be best... but forcing the use of FluidSynth MIDI emulation tends to produce 'richer' sounding music, which some users may prefer. Flight of the Amazon Queen is another game that defaults to MT-32 emulation but which (arguably) sounds far better with FluidSynth MIDI emulation. A per-game music device override may be set as follows: Run the ScummVM core without content: Go to RetroArch's main menu screen. Select 'Load Core', then 'ScummVM'. Select 'Start Core'. In the main ScummVM user interface, select the appropriate entry in the Launcher game list and press the 'Edit Game...' button. In the dialog that opens, select the 'Audio' tab. Tick the 'Override global audio settings' checkbox. Under 'Music Device:', select the desired option (i.e. 'FluidSynth', 'MT-32 Emulator' or 'AdLib Emulator'). Press the 'OK' button.","title":"Manual Music Device Selection"},{"location":"library/scummvm/#aspect-ratio-correction","text":"ScummVM's core provided aspect ratio is 4:3. For most games this is correct, particularly for newer games, and those that targeted the PC as their primary platform. It is widely known that DOS games typically ran at 320x200, with non-square pixels stretched to fill a 4:3 display. It is not so widely known that a number of popular games targeted the European Amiga market, where (due to various PAL/NTSC considerations) 320x200 content was often shown in a letterboxed rectangle at a display resolution of 320x256. It is sometimes difficult to determine the original intent of the artists, but many of these games were actually made in a quasi-widescreen format. Some notable examples are: Beneath a Steel Sky Flight of the Amazon Queen Simon the Sorcerer 1 + 2 (The full list of affected games should be determined at the user's discretion) The actual 'correct' aspect ratio in these cases is somewhat fuzzy, but good results are achieved by using the pixel aspect ratio of 16:10. To demonstrate the issue, here is an example screenshot from Beneath a Steel Sky at the default 4:3 ratio: Note the distorted fan vents. Here is the same image at a 16:10 ratio: The fan vents are the correct shape, and the character proportions are more natural. To automate correct aspect ratio selection for games such as these, a RetroArch configuration override should be used. This can be set up as follows: Enter the RetroArch config directory. Create a new directory called scummvm (if it does not already exist). Create a new text file with the exact same name as the .scummvm file for the game to be overridden, but with a .cfg extension. An example layout for 'Flight of the Amazon Queen' is shown: \u2514\u2500\u2500 config/ \u2514\u2500\u2500 scummvm/ \u2514\u2500\u2500 Flight of the Amazon Queen.cfg Open the .cfg file in a text editor and paste the following on a single line: aspect_ratio_index = \"2\" Save and close the file. Now whenever the game is launched, it will be displayed at the 'correct' 16:10 ratio. This will not affect any other game.","title":"Aspect Ratio Correction"},{"location":"library/scummvm/#core-options","text":"The ScummVM core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Gamepad Cursor Speed [scummvm_gamepad_cursor_speed] ( 1.0 |1.5|2.0|2.5|3.0|0.25|0.5|0.75) Sets the mouse cursor speed multiplier when moving the cursor with the RetroPad left analog stick or D-Pad. Attention The default value of '1.0' is optimised for games that have a native resolution of '320x200' or '320x240'. When running 'high definition' games with a native resolution of '640x400' or '640x480', it is recommended to set the Gamepad Cursor Speed to '2.0'. Analog Cursor Response [scummvm_analog_response] ( linear |cubic) Determines how the speed of the cursor varies when tilting the RetroPad left analog stick. 'linear': Cursor speed increases linearly with analog stick movement. This is standard behaviour with which most users will be familiar. 'cubic': Cursor speed increases quadratically with analog stick movement. This allows for greater precision when making small movements with the analog stick, without sacrificing maximum speed at full analog stick range. This mode may require practice for effective use. Analog Deadzone (percent) [scummvm_analog_deadzone] ( 15 |20|25|30|0|5|10) Sets the deadzone of the RetroPad analog sticks. Used to eliminate cursor drift/unwanted input. Attention The deadzone setting can have a significant effect on the 'feel' of analog cursor movement. The value should be set as low as possible for best results - i.e. reduce the value until cursor drift is evident, then increment to the next highest setting. Xbox gamepads typically require a deadzone of 15-20%. Many Android-compatible bluetooth gamepads have an internal 'hardware' deadzone, allowing the deadzone value here to be set to 0%. Mouse Speed [scummvm_mouse_speed] ( 1.0 |1.25|1.5|1.75|2.0|2.5|3.0|0.05|0.1|0.15|0.2|0.25|0.3|0.35|0.4|0.45|0.5|0.6|0.7|0.8|0.9) Sets the mouse cursor speed multiplier when moving the cursor with the RetroMouse. Speed Hack (Restart) [scummvm_speed_hack] ( disabled |enabled) Enables an optional speed hack that significantly reduces the CPU requirements of the core by allowing subtle timing inaccuracies. Attention This hack is considered 'safe' - games should run correctly when it is enabled, and most inaccuracies are imperceptible other than in a few edge cases. It remains a hack, though, and it is strongly recommended that users of desktop class machines keep it disabled. However: For users of low power hardware (Android devices, single board computers), this hack is essentially mandatory for full speed operation of the core. For Android users in particular, the guides in the 'Usage' section of this document assume that the speed hack is enabled.","title":"Core options"},{"location":"library/scummvm/#joypad","text":"RetroPad Inputs User 1 input descriptors ScummVM Inputs Right Mouse Button Right Mouse Button . . (period) F1 F1 ScummVM GUI ScummVM GUI Mouse Cursor Up Mouse Cursor Up Mouse Cursor Down Mouse Cursor Down Mouse Cursor Left Mouse Cursor Left Mouse Cursor Right Mouse Cursor Right Left Mouse Button Left Mouse Button Esc Esc Enter Enter Numpad 5 Numpad 5 Backspace Backspace Cursor Fine Control Cursor Fine Control F10 F10 Numpad 0 Numpad 0 X Mouse Cursor Left/Right Y Mouse Cursor Up/Down Virtual Numpad Additional Notes: Depressing the 'Cursor Fine Control' button reduces cursor speed to \u2153 of the value set by the 'Gamepad Cursor Speed' core option. The RetroPad right analog stick is mapped to an 8-way 'Virtual Numpad' with the following layout: [7][8][9] [4] [6] [1][2][3] Additional 'ScummVM Input' Descriptions: Esc: Skips cutscenes. Opens/closes menus in some games. Virtual Numpad + Numpad 5 + Numpad 0: Enables control during fight sequences in the 'Indiana Jones' series of games. Enables bypass of Monkey Island 2 copy protection. Enables saving in games that require text entry when naming a save slot. Enables menu navigation in some games (Numpad 8 == up, Numpad 2 == down). Enter + Backspace: Enables saving in games that require text entry when naming a save slot. 'Enter' may be used to attack in 'Full Throttle' fight sequences. 'Enter' enables menu item selection in some games. . (period): Skips lines of dialogue in SCUMM engine games. F1: Shows in-game menu in some games. Enables saving in some games. F10: Shows hotspots in Simon the Sorcerer 1 + 2.","title":"Joypad"},{"location":"library/scummvm/#mouse","text":"RetroMouse Inputs ScummVM Inputs Mouse Cursor Mouse Cursor Mouse 1 Left Mouse Button Mouse 2 Right Mouse Button Attention To ensure correct operation when using a RetroMouse, it is recommended that the RetroArch 'Grab Mouse' option be enabled while running content with the ScummVM core. By default, 'Grab Mouse' may be toggled on/off by pressing F11 on the keyboard. The 'Grab Mouse' option is not required when using a RetroPad to move the cursor.","title":"Mouse"},{"location":"library/scummvm/#pointer","text":"The Wii U build of the ScummVM core uses the libretro pointer API for mouse emulation. RetroPointer Inputs ScummVM Inputs or Pointer Position Mouse Cursor or Pointer Pressed Left Mouse Button","title":"Pointer"},{"location":"library/scummvm/#compatibility","text":"Compatibility listings for the standalone version of ScummVM may be found on the official ScummVM Compatibility Page . The Libretro ScummVM core currently has issues with a handful of games that function correctly when using the standalone version. An evolving RetroArch-specific compatibility list is being maintained in this Google Spreadsheet .","title":"Compatibility"},{"location":"library/scummvm/#external-links","text":"Official ScummVM Website Official ScummVM Github Repository Libretro ScummVM Core info file Libretro ScummVM Github Repository Report Libretro ScummVM Core Issues Here","title":"External Links"},{"location":"library/smsplus/","text":"Sega - MS/GG (SMS Plus GX) \u00b6 Background \u00b6 SMS Plus is an open-source Sega Master System and Game Gear emulator written by Charles MacDonald. SMS Plus GX is an enhanced version which includes improved accuracy, bug fixes with most games and others. Added support for coleco system (experimental). \u00b6 Author/License \u00b6 The SMS Plus GX core has been authored by Charles Mcdonald Eke-Eke (GX) The SMS Plus GX core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the SMS Plus GX core have the following file extensions: .sms .bin .rom .gg .col Databases \u00b6 RetroArch database(s) that are associated with the SMS Plus GX core: Sega - Game Gear Sega - Master System - Mark III Coleco - ColecoVision BIOS \u00b6 Required or optional firmware files go in the frontend's system directory. Filename Description md5sum bios.sms Master System BIOS - Optional 840481177270d5642a14ca71ee72844c BIOS.col Coleco BIOS - Required 2c66f5911e5b42b8ebe113403548eee7 Features \u00b6 Frontend-level settings or features that the SMS Plus GX core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The SMS Plus GX core's internal core name is 'SMS Plus GX' Frontend's Save directory File Description *.srm Cartridge battery save Frontend's State directory File Description *.state# State Geometry and timing \u00b6 The SMS Plus GX core's core provided FPS is 60 for NTSC games and 50 for PAL games The SMS Plus GX core's core provided sample rate is 44100 Hz The SMS Plus GX core's base width is dependent on loaded content and when using ntsc filter The SMS Plus GX core's base height can be 192/224/240 for Master System/Coleco and 144 for Game Gear games The SMS Plus GX core's max width is 602 The SMS Plus GX core's max height is 240 The SMS Plus GX core's core provided aspect ratio is 4:3 Core options \u00b6 The SMS Plus GX core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Hardware (Restart) [smsplus_hardware] ( auto /master system/master system II/game gear/game gear (sms compatibility)/coleco) Emulates which system hardware to use. Region (Restart) [smsplus_region] ( auto /ntsc-u/pal/ntsc-j) Runs console at a specific video timing based on region Remove Border [smsplus_remove_left_border] ( disabled /enabled) Removes the black border on the left of some games. (SMS Only) Blargg NTSC Filter [smsplus_ntsc_filter] ( disabled /monochrome/composite/svideo/rgb) Replicates the analog signal effects such as color bleeding and pixel artifacts to match the images a TV would show. Controllers \u00b6 The SMS Plus GX core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 device types \u00b6 None - Doesn't diable input. There's no reason to switch to this. RetroPad - Joypad - Stay on this. RetroPad w/Analog - Joypad - There's no reason to switch to this. Controller tables \u00b6 Joypad \u00b6 RetroPad Inputs SMS Plus GX core Inputs 1 Pause D-Pad Up D-Pad Down D-Pad Left D-Pad Right 2 Keyboard \u00b6 RetroKeyboard Inputs RetroKeyboard Keyboard 1 1 Keyboard 2 2 Keyboard 3 3 Keyboard 4 4 Keyboard 5 5 Keyboard 6 6 Keyboard 7 7 Keyboard 8 8 Keyboard 9 9 Keyboard Dollar $ Keyboard Asterisk * External Links \u00b6 Libretro SMS Plus GX Github Repository Libretro SMS Plus GX Core info file Report Libretro SMS Plus GX Core Issues Here See also \u00b6 Sega - Master System (Emux SMS) Sega - MS/GG/MD/CD (Genesis Plus GX) Sega - MS/MD/CD/32X (PicoDrive) Sega - MS/GG/SG-1000 (Gearsystem) MSX/SVI/ColecoVision/SG-1000 (blueMSX)","title":"Sega - MS/GG (SMS Plus GX)"},{"location":"library/smsplus/#sega-msgg-sms-plus-gx","text":"","title":"Sega - MS/GG (SMS Plus GX)"},{"location":"library/smsplus/#background","text":"SMS Plus is an open-source Sega Master System and Game Gear emulator written by Charles MacDonald. SMS Plus GX is an enhanced version which includes improved accuracy, bug fixes with most games and others.","title":"Background"},{"location":"library/smsplus/#added-support-for-coleco-system-experimental","text":"","title":"Added support for coleco system (experimental)."},{"location":"library/smsplus/#authorlicense","text":"The SMS Plus GX core has been authored by Charles Mcdonald Eke-Eke (GX) The SMS Plus GX core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/smsplus/#extensions","text":"Content that can be loaded by the SMS Plus GX core have the following file extensions: .sms .bin .rom .gg .col","title":"Extensions"},{"location":"library/smsplus/#databases","text":"RetroArch database(s) that are associated with the SMS Plus GX core: Sega - Game Gear Sega - Master System - Mark III Coleco - ColecoVision","title":"Databases"},{"location":"library/smsplus/#bios","text":"Required or optional firmware files go in the frontend's system directory. Filename Description md5sum bios.sms Master System BIOS - Optional 840481177270d5642a14ca71ee72844c BIOS.col Coleco BIOS - Required 2c66f5911e5b42b8ebe113403548eee7","title":"BIOS"},{"location":"library/smsplus/#features","text":"Frontend-level settings or features that the SMS Plus GX core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/smsplus/#directories","text":"The SMS Plus GX core's internal core name is 'SMS Plus GX' Frontend's Save directory File Description *.srm Cartridge battery save Frontend's State directory File Description *.state# State","title":"Directories"},{"location":"library/smsplus/#geometry-and-timing","text":"The SMS Plus GX core's core provided FPS is 60 for NTSC games and 50 for PAL games The SMS Plus GX core's core provided sample rate is 44100 Hz The SMS Plus GX core's base width is dependent on loaded content and when using ntsc filter The SMS Plus GX core's base height can be 192/224/240 for Master System/Coleco and 144 for Game Gear games The SMS Plus GX core's max width is 602 The SMS Plus GX core's max height is 240 The SMS Plus GX core's core provided aspect ratio is 4:3","title":"Geometry and timing"},{"location":"library/smsplus/#core-options","text":"The SMS Plus GX core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Hardware (Restart) [smsplus_hardware] ( auto /master system/master system II/game gear/game gear (sms compatibility)/coleco) Emulates which system hardware to use. Region (Restart) [smsplus_region] ( auto /ntsc-u/pal/ntsc-j) Runs console at a specific video timing based on region Remove Border [smsplus_remove_left_border] ( disabled /enabled) Removes the black border on the left of some games. (SMS Only) Blargg NTSC Filter [smsplus_ntsc_filter] ( disabled /monochrome/composite/svideo/rgb) Replicates the analog signal effects such as color bleeding and pixel artifacts to match the images a TV would show.","title":"Core options"},{"location":"library/smsplus/#controllers","text":"The SMS Plus GX core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/smsplus/#user-1-device-types","text":"None - Doesn't diable input. There's no reason to switch to this. RetroPad - Joypad - Stay on this. RetroPad w/Analog - Joypad - There's no reason to switch to this.","title":"User 1 device types"},{"location":"library/smsplus/#controller-tables","text":"","title":"Controller tables"},{"location":"library/smsplus/#joypad","text":"RetroPad Inputs SMS Plus GX core Inputs 1 Pause D-Pad Up D-Pad Down D-Pad Left D-Pad Right 2","title":"Joypad"},{"location":"library/smsplus/#keyboard","text":"RetroKeyboard Inputs RetroKeyboard Keyboard 1 1 Keyboard 2 2 Keyboard 3 3 Keyboard 4 4 Keyboard 5 5 Keyboard 6 6 Keyboard 7 7 Keyboard 8 8 Keyboard 9 9 Keyboard Dollar $ Keyboard Asterisk *","title":"Keyboard"},{"location":"library/smsplus/#external-links","text":"Libretro SMS Plus GX Github Repository Libretro SMS Plus GX Core info file Report Libretro SMS Plus GX Core Issues Here","title":"External Links"},{"location":"library/smsplus/#see-also","text":"Sega - Master System (Emux SMS) Sega - MS/GG/MD/CD (Genesis Plus GX) Sega - MS/MD/CD/32X (PicoDrive) Sega - MS/GG/SG-1000 (Gearsystem) MSX/SVI/ColecoVision/SG-1000 (blueMSX)","title":"See also"},{"location":"library/snes9x/","text":"Nintendo - SNES / Famicom (Snes9x) \u00b6 Background \u00b6 Port of upstream mainline up-to-date Snes9x, a portable Super Nintendo Entertainment System emulator to libretro. The Snes9x core has been authored by Snes9x Team The Snes9x core is licensed under Non-commercial A summary of the licenses behind RetroArch and its cores can be found here . Features \u00b6 Most up-to-date libretro Snes9x core available. Highly accurate SNES emulation. Simplified and easily accessible MSU-1 expansion chip support. Recommended for netplay BIOS \u00b6 Required or optional firmware files go in the frontend's system directory. Filename Description md5sum BS-X.bin BS-X - Sore wa Namae o Nusumareta Machi no Monogatari (Japan) (Rev 1) - Optional fed4d8242cfbed61343d53d48432aced STBIOS.bin Sufami Turbo (Japan) - Optional d3a44ba7d42a74d3ac58cb9c14c6a5ca Extensions \u00b6 Content that can be loaded by the Snes9x core have the following file extensions: .smc .sfc .swc .fig .bs RetroArch database(s) that are associated with the Snes9x core: Nintendo - Super Nintendo Entertainment System Nintendo - Sufami Turbo Nintendo - Satellaview Features \u00b6 Frontend-level settings or features that the Snes9x core respects. Feature Supported Restart \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2714 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2714 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The Snes9x core's library name is 'Snes9x' The Snes9x core saves/loads to/from these directories. Frontend's Save directory File Description *.srm Cartridge battery save Frontend's State directory File Description *.state# State Geometry and timing \u00b6 The Snes9x core's core provided FPS is 60.0988118623 for NTSC games and 50.0069789082 for PAL games. The Snes9x core's core provided sample rate is 32040 Hz The Snes9x core's base width is 256 The Snes9x core's base height is 224 when the Crop Overscan core option is set to enabled. 239 when it's set to disabled. The Snes9x core's max width is 512 The Snes9x core's max height is 478 The Snes9x core's core provided aspect ratio is dependent on the 'Preferred aspect ratio' core option . MSU-1 support \u00b6 MSU-1 support in the Snes9x core follows the SD2SNES.mdSnes9x naming format, i.e. gamename.sfc gamename.msu gamename-#.pcm Loading a manifest.bml file or having a xml file isn't necessary. Just load gamename.sfc. Here's an example of a working MSU-1 setup done with Secret of Mana MSU-1 . Please note that som_msu1.sfc is being softpatched in this example. BS-X and Sufami Turbo \u00b6 In order to load BS-X and Sufami Turbo games, you'll need BS-X.bin and STBIOS.bin in the frontend's system directory. To load multi-cart games specifically, a more complex procedure needs to be followed. First, load the base game first by using the \"Load Content\" option in RetroArch's Main Menu. Second, go back to RetroArch's Main Menu and select the \"Load Multi-Cart Link\" option. Third, load the base game while in the \"Load Multi-Cart Link\" screen. Fourth, go back to RetroArch's Main Menu and select the \"Load Multi-Cart Link\" option. Fifth, load the add-on game while in the \"Load Multi-Cart Link\" screen. Sixth, go back to RetroArch's Main Menu for the final time and select the \"Start Multi-Cart Link\" option. Please note that for multi-cart Sufami Turbo games, you must first run each game individually to create sram files for them. Then the multi-link will function correctly. Core options \u00b6 The Snes9x core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Allow Opposing Directions [snes9x_up_down_allowed] ( disabled |enabled) Enabling this will allow pressing / quickly alternating / holding both left and right (or up and down in some games) directions at the same time. This may cause movement based glitches to occur in certain games. It's best to keep this core option disabled. SuperFX Frequency [snes9x_overclock] (50% to 500%. 100% is default. ) Overclock the SuperFX chip . Example video here Reduce Slowdown (Hack, Unsafe) [snes9x_overclock_cycles] ( disabled |light|compatible|max) Many games for the SNES suffered from slowdown due to the weak main CPU. This option helps allievate that at the cost of possible bugs. Example video here light: Slightly reduces slowdown, more compatible than the \"compatible\" option. compatible: Reduce slowdown but keep as much game compatibility as much as possible. max: Reduce slowdown as much as possible but will break more games. Reduce Flickering (Hack, Unsafe) [snes9x_reduce_sprite_flicker] ( disabled |enabled) Raises sprite limit to reduce flickering in games. Randomize Memory (Unsafe) [snes9x_randomize_memory] ( disabled |enabled) Randomizes the system RAM upon startup. Some games such as Super Off Road use system RAM as a random number generator for item placement and AI behavior to make gameplay more unpredictable. It's best to keep this core option disabled. Hires Blending [snes9x_hires_blend] ( disabled |merge|blur) Awaiting description. Audio Interpolation [snes9x_audio_interpolation] ( gaussian |cubic|sinc|none|linear) Awaiting description. Blargg NTSC filter [snes9x_blargg] ( disabled |monochrome|rf|composite|s-video|rgb) Self-explanatory. Show layer 1 [snes9x_layer_1] ( enabled |disabled) Show graphical layer 1. It's best to keep this core option enabled. Show layer 2 [snes9x_layer_2] ( enabled |disabled) Show graphical layer 2. It's best to keep this core option enabled. Show layer 3 [snes9x_layer_3] ( enabled |disabled) Show graphical layer 3. It's best to keep this core option enabled. Show layer 4 [snes9x_layer_4] ( enabled |disabled) Show graphical layer 4. It's best to keep this core option enabled. Show sprite layer [snes9x_layer_5] ( enabled |disabled) Show sprite layer. It's best to keep this core option enabled. Enable graphic clip windows [snes9x_gfx_clip] ( enabled |disabled) Show graphic clip windows. It's best to keep this core option enabled. Enable transparency effects [snes9x_gfx_transp] ( enabled |disabled) Show transparency effects. It's best to keep this core option enabled. Enable hires mode [snes9x_gfx_hires] ( enabled |disabled) Enable hires mode. It's best to keep this core option enabled. Enable sound channel 1 [snes9x_sndchan_1] ( enabled |disabled) Enabled sound channel 1. It's best to keep this core option enabled. Enable sound channel 2 [snes9x_sndchan_2] ( enabled |disabled) Enabled sound channel 2. It's best to keep this core option enabled. Enable sound channel 3 [snes9x_sndchan_3] ( enabled |disabled) Enabled sound channel 3. It's best to keep this core option enabled. Enable sound channel 4 [snes9x_sndchan_4] ( enabled |disabled) Enabled sound channel 4. It's best to keep this core option enabled. Enable sound channel 5 [snes9x_sndchan_5] ( enabled |disabled) Enabled sound channel 5. It's best to keep this core option enabled. Enable sound channel 6 [snes9x_sndchan_6] ( enabled |disabled) Enabled sound channel 6. It's best to keep this core option enabled. Enable sound channel 7 [snes9x_sndchan_7] ( enabled |disabled) Enabled sound channel 7. It's best to keep this core option enabled. Enable sound channel 8 [snes9x_sndchan_8] ( enabled |disabled) Enabled sound channel 8. It's best to keep this core option enabled. Crop overscan [snes9x_overscan] ( enabled |disabled|auto) Crop out the potentially random glitchy video output that would have been hidden by the bezel around the edge of a standard-definition television screen. Crop overscan - On Crop overscan - Off Preferred aspect ratio [snes9x_aspect] ( 4:3 |uncorrected|auto|ntsc|pal) Choose the preferred aspect ratio. RetroArch's aspect ratio must be set to Core provided in the Video seetings. Preferred aspect ratio - ntsc Preferred aspect ratio - pal Preferred aspect ratio - 4:3 Console region (Reload core) [snes9x_region] ( auto |ntsc|pal) Select what region the system is from. Super Scope crosshair [snes9x_superscope_crosshair] (0 to 16 in increments of 1. 2 is default .) Configure the crosshair size for the \"SuperScope\" device type. Super Scope color [snes9x_superscope_color] ( White |White (blend)|Red|Red (blend)|Orange|Orange (blend)|Yellow|Yellow (blend)|Green|Green (blend)|Cyan|Cyan (blend)|Sky|Sky (blend)|Blue|Blue (blend)|Violet|Violet (blend)|Pink|Pink (blend)|Purple|Purple (blend)|Black|Black (blend)|25% Grey|25% Grey (blend)|50% Grey|50% Grey (blend)|75% Grey|75% Grey (blend)) Configure the crosshair color for the \"SuperScope\" device type. Justifier 1 crosshair [snes9x_justifier1_crosshair] (0 to 16 in increments of 1. 4 is default .) Configure the crosshair size for the \"Justifier\" device type. Justifier 1 color [snes9x_justifier1_color] ( Blue |Blue (blend)|Violet|Violet (blend)|Pink|Pink (blend)|Purple|Purple (blend)|Black|Black (blend)|25% Grey|25% Grey (blend)|50% Grey|50% Grey (blend)|75% Grey|75% Grey (blend)|White|White (blend)|Red|Red (blend)|Orange|Orange (blend)|Yellow|Yellow (blend)|Green|Green (blend)|Cyan|Cyan (blend)|Sky|Sky (blend)) Configure the crosshair color for the \"Justifier\" device type. Justifier 2 crosshair [snes9x_justifier2_crosshair] (0 to 16 in increments of 1. 4 is default .) Configure the crosshair size for the \"Justifier (2P)\" device type. Justifier 2 color [snes9x_justifier2_color] ( Pink |Pink (blend)|Purple|Purple (blend)|Black|Black (blend)|25% Grey|25% Grey (blend)|50% Grey|50% Grey (blend)|75% Grey|75% Grey (blend)|White|White (blend)|Red|Red (blend)|Orange|Orange (blend)|Yellow|Yellow (blend)|Green|Green (blend)|Cyan|Cyan (blend)|Sky|Sky (blend)|Blue|Blue (blend)|Violet|Violet (blend)) Configure the crosshair color for the \"Justifier (2P)\" device type. M.A.C.S. rifle crosshair [snes9x_rifle_crosshair] (0 to 16 in increments of 1. 2 is default .) Configure the crosshair size for the \"M.A.C.S. Rifle\" device type. M.A.C.S. rifle color [snes9x_rifle_color] ( White |White (blend)|Red|Red (blend)|Orange|Orange (blend)|Yellow|Yellow (blend)|Green|Green (blend)|Cyan|Cyan (blend)|Sky|Sky (blend)|Blue|Blue (blend)|Violet|Violet (blend)|Pink|Pink (blend)|Purple|Purple (blend)|Black|Black (blend)|25% Grey|25% Grey (blend)|50% Grey|50% Grey (blend)|75% Grey|75% Grey (blend)) Configure the crosshair color for the \"M.A.C.S. Rifle\" device type. Block Invalid VRAM Access [snes9x_block_invalid_vram_access] ( enabled |disabled) Awaiting description. Echo Buffer Hack (Unsafe, only enable for old addmusic hacks) [snes9x_echo_buffer_hack] ( disabled |enabled) Awaiting description. User 1 device types \u00b6 The Snes9x core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): None - Doesn't disable input. SNES Joypad - Joypad SNES Mouse - Mouse Multitap - Joypad - Allows for up to five players to play together in multitap games. User 2 device types \u00b6 None - Doesn't disable input. SNES Joypad - Joypad SNES Mouse - Mouse Multitap - Joypad - Allows for up to five players to play together in mulitap games. SuperScope - Lightgun Justifier - Lightgun M.A.C.S. Rifle - Lightgun User 3 device types \u00b6 None - Doesn't disable input. SNES Joypad - Joypad Justifier (2P) - Lightgun User 4 - 8 device types \u00b6 None - Doesn't disable input. SNES Joypad - Joypad Multitap \u00b6 Activating multitap support in compatible games can be configured by switching to the 'Multitap' device type for the corresponding users. Joypad \u00b6 RetroPad Inputs User 1 - 5 input descriptors B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R Mouse \u00b6 RetroMouse Inputs SNES Mouse Mouse Cursor SNES Mouse Cursor Mouse 1 SNES Mouse Left Button Mouse 2 SNES Mouse Right Button Lightgun \u00b6 RetroLightgun Inputs SuperScope Justifier M.A.C.S. Rifle Gun Crosshair SuperScope Crosshair Justifier Crosshair M.A.C.S. Rifle Crosshair Gun Trigger SuperScope Trigger Justifier Trigger M.A.C.S. Rifle Trigger Gun Aux A SuperScope Cursor Gun Aux B SuperScope Turbo Justifier Offscreen Gun Start SuperScope Pause Justifier Start Compatibility \u00b6 Game Issue A.S.P. Air Strike Patrol The shadow below the aircraft is missing. Glitched graphics on the briefing screens. BS-Zelda MottZilla Patch Only shows a black screen. Doom Colored dots appear during gameplay. Funaki Masakatsu Hybrid Wrestler \u2013 Tougi Denshou Corrupted graphics on the Pancrase logo screen. Hayazashi Nidan Morita Shougi 2 Matches won\u2019t start. Mecarobot Golf The ground \"wobbles\" during gameplay. Secret of Evermore (PAL versions) Randomly freezes when the background music changes. External Links \u00b6 Official Snes9x Website (no longer updated) Official Snes9x Github Repository Official Upstream Snes9x Downloads Alternate Official Upstream Snes9x Downloads Libretro Snes9x Core info file Libretro Snes9x Github Repository Report Libretro Snes9x Core Issues Here SNES \u00b6 Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (nSide Balanced) Nintendo - SNES / Famicom (Mesen-S) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2005) Nintendo - SNES / Famicom (Snes9x 2010)","title":"Nintendo - SNES / Famicom (Snes9x)"},{"location":"library/snes9x/#nintendo-snes-famicom-snes9x","text":"","title":"Nintendo - SNES / Famicom (Snes9x)"},{"location":"library/snes9x/#background","text":"Port of upstream mainline up-to-date Snes9x, a portable Super Nintendo Entertainment System emulator to libretro. The Snes9x core has been authored by Snes9x Team The Snes9x core is licensed under Non-commercial A summary of the licenses behind RetroArch and its cores can be found here .","title":"Background"},{"location":"library/snes9x/#features","text":"Most up-to-date libretro Snes9x core available. Highly accurate SNES emulation. Simplified and easily accessible MSU-1 expansion chip support. Recommended for netplay","title":"Features"},{"location":"library/snes9x/#bios","text":"Required or optional firmware files go in the frontend's system directory. Filename Description md5sum BS-X.bin BS-X - Sore wa Namae o Nusumareta Machi no Monogatari (Japan) (Rev 1) - Optional fed4d8242cfbed61343d53d48432aced STBIOS.bin Sufami Turbo (Japan) - Optional d3a44ba7d42a74d3ac58cb9c14c6a5ca","title":"BIOS"},{"location":"library/snes9x/#extensions","text":"Content that can be loaded by the Snes9x core have the following file extensions: .smc .sfc .swc .fig .bs RetroArch database(s) that are associated with the Snes9x core: Nintendo - Super Nintendo Entertainment System Nintendo - Sufami Turbo Nintendo - Satellaview","title":"Extensions"},{"location":"library/snes9x/#features_1","text":"Frontend-level settings or features that the Snes9x core respects. Feature Supported Restart \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2714 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2714 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/snes9x/#directories","text":"The Snes9x core's library name is 'Snes9x' The Snes9x core saves/loads to/from these directories. Frontend's Save directory File Description *.srm Cartridge battery save Frontend's State directory File Description *.state# State","title":"Directories"},{"location":"library/snes9x/#geometry-and-timing","text":"The Snes9x core's core provided FPS is 60.0988118623 for NTSC games and 50.0069789082 for PAL games. The Snes9x core's core provided sample rate is 32040 Hz The Snes9x core's base width is 256 The Snes9x core's base height is 224 when the Crop Overscan core option is set to enabled. 239 when it's set to disabled. The Snes9x core's max width is 512 The Snes9x core's max height is 478 The Snes9x core's core provided aspect ratio is dependent on the 'Preferred aspect ratio' core option .","title":"Geometry and timing"},{"location":"library/snes9x/#msu-1-support","text":"MSU-1 support in the Snes9x core follows the SD2SNES.mdSnes9x naming format, i.e. gamename.sfc gamename.msu gamename-#.pcm Loading a manifest.bml file or having a xml file isn't necessary. Just load gamename.sfc. Here's an example of a working MSU-1 setup done with Secret of Mana MSU-1 . Please note that som_msu1.sfc is being softpatched in this example.","title":"MSU-1 support"},{"location":"library/snes9x/#bs-x-and-sufami-turbo","text":"In order to load BS-X and Sufami Turbo games, you'll need BS-X.bin and STBIOS.bin in the frontend's system directory. To load multi-cart games specifically, a more complex procedure needs to be followed. First, load the base game first by using the \"Load Content\" option in RetroArch's Main Menu. Second, go back to RetroArch's Main Menu and select the \"Load Multi-Cart Link\" option. Third, load the base game while in the \"Load Multi-Cart Link\" screen. Fourth, go back to RetroArch's Main Menu and select the \"Load Multi-Cart Link\" option. Fifth, load the add-on game while in the \"Load Multi-Cart Link\" screen. Sixth, go back to RetroArch's Main Menu for the final time and select the \"Start Multi-Cart Link\" option. Please note that for multi-cart Sufami Turbo games, you must first run each game individually to create sram files for them. Then the multi-link will function correctly.","title":"BS-X and Sufami Turbo"},{"location":"library/snes9x/#core-options","text":"The Snes9x core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Allow Opposing Directions [snes9x_up_down_allowed] ( disabled |enabled) Enabling this will allow pressing / quickly alternating / holding both left and right (or up and down in some games) directions at the same time. This may cause movement based glitches to occur in certain games. It's best to keep this core option disabled. SuperFX Frequency [snes9x_overclock] (50% to 500%. 100% is default. ) Overclock the SuperFX chip . Example video here Reduce Slowdown (Hack, Unsafe) [snes9x_overclock_cycles] ( disabled |light|compatible|max) Many games for the SNES suffered from slowdown due to the weak main CPU. This option helps allievate that at the cost of possible bugs. Example video here light: Slightly reduces slowdown, more compatible than the \"compatible\" option. compatible: Reduce slowdown but keep as much game compatibility as much as possible. max: Reduce slowdown as much as possible but will break more games. Reduce Flickering (Hack, Unsafe) [snes9x_reduce_sprite_flicker] ( disabled |enabled) Raises sprite limit to reduce flickering in games. Randomize Memory (Unsafe) [snes9x_randomize_memory] ( disabled |enabled) Randomizes the system RAM upon startup. Some games such as Super Off Road use system RAM as a random number generator for item placement and AI behavior to make gameplay more unpredictable. It's best to keep this core option disabled. Hires Blending [snes9x_hires_blend] ( disabled |merge|blur) Awaiting description. Audio Interpolation [snes9x_audio_interpolation] ( gaussian |cubic|sinc|none|linear) Awaiting description. Blargg NTSC filter [snes9x_blargg] ( disabled |monochrome|rf|composite|s-video|rgb) Self-explanatory. Show layer 1 [snes9x_layer_1] ( enabled |disabled) Show graphical layer 1. It's best to keep this core option enabled. Show layer 2 [snes9x_layer_2] ( enabled |disabled) Show graphical layer 2. It's best to keep this core option enabled. Show layer 3 [snes9x_layer_3] ( enabled |disabled) Show graphical layer 3. It's best to keep this core option enabled. Show layer 4 [snes9x_layer_4] ( enabled |disabled) Show graphical layer 4. It's best to keep this core option enabled. Show sprite layer [snes9x_layer_5] ( enabled |disabled) Show sprite layer. It's best to keep this core option enabled. Enable graphic clip windows [snes9x_gfx_clip] ( enabled |disabled) Show graphic clip windows. It's best to keep this core option enabled. Enable transparency effects [snes9x_gfx_transp] ( enabled |disabled) Show transparency effects. It's best to keep this core option enabled. Enable hires mode [snes9x_gfx_hires] ( enabled |disabled) Enable hires mode. It's best to keep this core option enabled. Enable sound channel 1 [snes9x_sndchan_1] ( enabled |disabled) Enabled sound channel 1. It's best to keep this core option enabled. Enable sound channel 2 [snes9x_sndchan_2] ( enabled |disabled) Enabled sound channel 2. It's best to keep this core option enabled. Enable sound channel 3 [snes9x_sndchan_3] ( enabled |disabled) Enabled sound channel 3. It's best to keep this core option enabled. Enable sound channel 4 [snes9x_sndchan_4] ( enabled |disabled) Enabled sound channel 4. It's best to keep this core option enabled. Enable sound channel 5 [snes9x_sndchan_5] ( enabled |disabled) Enabled sound channel 5. It's best to keep this core option enabled. Enable sound channel 6 [snes9x_sndchan_6] ( enabled |disabled) Enabled sound channel 6. It's best to keep this core option enabled. Enable sound channel 7 [snes9x_sndchan_7] ( enabled |disabled) Enabled sound channel 7. It's best to keep this core option enabled. Enable sound channel 8 [snes9x_sndchan_8] ( enabled |disabled) Enabled sound channel 8. It's best to keep this core option enabled. Crop overscan [snes9x_overscan] ( enabled |disabled|auto) Crop out the potentially random glitchy video output that would have been hidden by the bezel around the edge of a standard-definition television screen. Crop overscan - On Crop overscan - Off Preferred aspect ratio [snes9x_aspect] ( 4:3 |uncorrected|auto|ntsc|pal) Choose the preferred aspect ratio. RetroArch's aspect ratio must be set to Core provided in the Video seetings. Preferred aspect ratio - ntsc Preferred aspect ratio - pal Preferred aspect ratio - 4:3 Console region (Reload core) [snes9x_region] ( auto |ntsc|pal) Select what region the system is from. Super Scope crosshair [snes9x_superscope_crosshair] (0 to 16 in increments of 1. 2 is default .) Configure the crosshair size for the \"SuperScope\" device type. Super Scope color [snes9x_superscope_color] ( White |White (blend)|Red|Red (blend)|Orange|Orange (blend)|Yellow|Yellow (blend)|Green|Green (blend)|Cyan|Cyan (blend)|Sky|Sky (blend)|Blue|Blue (blend)|Violet|Violet (blend)|Pink|Pink (blend)|Purple|Purple (blend)|Black|Black (blend)|25% Grey|25% Grey (blend)|50% Grey|50% Grey (blend)|75% Grey|75% Grey (blend)) Configure the crosshair color for the \"SuperScope\" device type. Justifier 1 crosshair [snes9x_justifier1_crosshair] (0 to 16 in increments of 1. 4 is default .) Configure the crosshair size for the \"Justifier\" device type. Justifier 1 color [snes9x_justifier1_color] ( Blue |Blue (blend)|Violet|Violet (blend)|Pink|Pink (blend)|Purple|Purple (blend)|Black|Black (blend)|25% Grey|25% Grey (blend)|50% Grey|50% Grey (blend)|75% Grey|75% Grey (blend)|White|White (blend)|Red|Red (blend)|Orange|Orange (blend)|Yellow|Yellow (blend)|Green|Green (blend)|Cyan|Cyan (blend)|Sky|Sky (blend)) Configure the crosshair color for the \"Justifier\" device type. Justifier 2 crosshair [snes9x_justifier2_crosshair] (0 to 16 in increments of 1. 4 is default .) Configure the crosshair size for the \"Justifier (2P)\" device type. Justifier 2 color [snes9x_justifier2_color] ( Pink |Pink (blend)|Purple|Purple (blend)|Black|Black (blend)|25% Grey|25% Grey (blend)|50% Grey|50% Grey (blend)|75% Grey|75% Grey (blend)|White|White (blend)|Red|Red (blend)|Orange|Orange (blend)|Yellow|Yellow (blend)|Green|Green (blend)|Cyan|Cyan (blend)|Sky|Sky (blend)|Blue|Blue (blend)|Violet|Violet (blend)) Configure the crosshair color for the \"Justifier (2P)\" device type. M.A.C.S. rifle crosshair [snes9x_rifle_crosshair] (0 to 16 in increments of 1. 2 is default .) Configure the crosshair size for the \"M.A.C.S. Rifle\" device type. M.A.C.S. rifle color [snes9x_rifle_color] ( White |White (blend)|Red|Red (blend)|Orange|Orange (blend)|Yellow|Yellow (blend)|Green|Green (blend)|Cyan|Cyan (blend)|Sky|Sky (blend)|Blue|Blue (blend)|Violet|Violet (blend)|Pink|Pink (blend)|Purple|Purple (blend)|Black|Black (blend)|25% Grey|25% Grey (blend)|50% Grey|50% Grey (blend)|75% Grey|75% Grey (blend)) Configure the crosshair color for the \"M.A.C.S. Rifle\" device type. Block Invalid VRAM Access [snes9x_block_invalid_vram_access] ( enabled |disabled) Awaiting description. Echo Buffer Hack (Unsafe, only enable for old addmusic hacks) [snes9x_echo_buffer_hack] ( disabled |enabled) Awaiting description.","title":"Core options"},{"location":"library/snes9x/#user-1-device-types","text":"The Snes9x core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): None - Doesn't disable input. SNES Joypad - Joypad SNES Mouse - Mouse Multitap - Joypad - Allows for up to five players to play together in multitap games.","title":"User 1 device types"},{"location":"library/snes9x/#user-2-device-types","text":"None - Doesn't disable input. SNES Joypad - Joypad SNES Mouse - Mouse Multitap - Joypad - Allows for up to five players to play together in mulitap games. SuperScope - Lightgun Justifier - Lightgun M.A.C.S. Rifle - Lightgun","title":"User 2 device types"},{"location":"library/snes9x/#user-3-device-types","text":"None - Doesn't disable input. SNES Joypad - Joypad Justifier (2P) - Lightgun","title":"User 3 device types"},{"location":"library/snes9x/#user-4-8-device-types","text":"None - Doesn't disable input. SNES Joypad - Joypad","title":"User 4 - 8 device types"},{"location":"library/snes9x/#multitap","text":"Activating multitap support in compatible games can be configured by switching to the 'Multitap' device type for the corresponding users.","title":"Multitap"},{"location":"library/snes9x/#joypad","text":"RetroPad Inputs User 1 - 5 input descriptors B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R","title":"Joypad"},{"location":"library/snes9x/#mouse","text":"RetroMouse Inputs SNES Mouse Mouse Cursor SNES Mouse Cursor Mouse 1 SNES Mouse Left Button Mouse 2 SNES Mouse Right Button","title":"Mouse"},{"location":"library/snes9x/#lightgun","text":"RetroLightgun Inputs SuperScope Justifier M.A.C.S. Rifle Gun Crosshair SuperScope Crosshair Justifier Crosshair M.A.C.S. Rifle Crosshair Gun Trigger SuperScope Trigger Justifier Trigger M.A.C.S. Rifle Trigger Gun Aux A SuperScope Cursor Gun Aux B SuperScope Turbo Justifier Offscreen Gun Start SuperScope Pause Justifier Start","title":"Lightgun"},{"location":"library/snes9x/#compatibility","text":"Game Issue A.S.P. Air Strike Patrol The shadow below the aircraft is missing. Glitched graphics on the briefing screens. BS-Zelda MottZilla Patch Only shows a black screen. Doom Colored dots appear during gameplay. Funaki Masakatsu Hybrid Wrestler \u2013 Tougi Denshou Corrupted graphics on the Pancrase logo screen. Hayazashi Nidan Morita Shougi 2 Matches won\u2019t start. Mecarobot Golf The ground \"wobbles\" during gameplay. Secret of Evermore (PAL versions) Randomly freezes when the background music changes.","title":"Compatibility"},{"location":"library/snes9x/#external-links","text":"Official Snes9x Website (no longer updated) Official Snes9x Github Repository Official Upstream Snes9x Downloads Alternate Official Upstream Snes9x Downloads Libretro Snes9x Core info file Libretro Snes9x Github Repository Report Libretro Snes9x Core Issues Here","title":"External Links"},{"location":"library/snes9x/#snes","text":"Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (nSide Balanced) Nintendo - SNES / Famicom (Mesen-S) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2005) Nintendo - SNES / Famicom (Snes9x 2010)","title":"SNES"},{"location":"library/snes9x_2002/","text":"Nintendo - SNES / Famicom (Snes9x 2002) \u00b6 Background \u00b6 Port of SNES9x 1.39 for libretro (was previously called PocketSNES). Heavily optimized for ARM. Provides more favorable performance thresholds at the cost of accuracy. DO NOT use this core unless you have underpowered hardware and the mainline Snes9x core and the bsnes/higan/bsnes-mercury cores aren't fast enough This core is part of a group of Snes9x cores that are snapshots from the year their code is based on. (Snes9x 2002, Snes9x 2005, Snes9x 2005 Plus, Snes9x 2010) Author/License \u00b6 The Snes9x 2002 core has been authored by Snes9x Team PocketSNES Team Toadking The Snes9x 2002 core is licensed under Non-commercial A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the Snes9x 2002 core have the following file extensions: .smc .fig .sfc .gd3 .gd7 .dx2 .bsx .swc Databases \u00b6 RetroArch database(s) that are associated with the Snes9x 2002 core: Nintendo - Super Nintendo Entertainment System Nintendo - Super Nintendo Entertainment System Hacks Nintendo - Sufami Turbo Features \u00b6 Frontend-level settings or features that the Snes9x 2002 core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2714 Controls \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2714 LEDs \u2715 Directories \u00b6 The Snes9x 2002 core's internal core name is 'Snes9x 2002' The Snes9x 2002 core saves/loads to/from these directories. Frontend's Save directory 'content-name'.srm (Cartridge battery save) Frontend's State directory 'content-name'.state# (State) Geometry and timing \u00b6 The Snes9x 2002 core's core provided FPS is 60.0988118623 for NTSC games and 50.0069789082 for PAL games. The Snes9x 2002 core's core provided sample rate is 32040.5 Hz The Snes9x 2002 core's core provided aspect ratio is 4/3 Core options \u00b6 The Snes9x 2002 core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Reduce Slowdown (Hack, Unsafe, Restart) [snes9x2002_overclock_cycles] ( disabled |compatible|max) Many games for the SNES suffered from slowdown due to the weak main CPU. This option helps allievate that at the cost of possible bugs. Example video here compatible: Reduce slowdown but keep as much game compatibility as much as possible. max: Reduce slowdown as much as possible but will break more games. Controllers \u00b6 The Snes9x 2002 core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 - 2 device types \u00b6 None - Doesn't disable input. There's no reason to switch to this. **RetroPad - Joypad - Stay on this. RetroPad w/Analog - Joypad - Same as RetroPad. There's no reason to switch to this. Controller tables \u00b6 Joypad \u00b6 RetroPad Inputs Snes9x 2002 core Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R Compatibility \u00b6 Awaiting description. External Links \u00b6 Official Snes9x 2002 Website Libretro Snes9x 2002 Core info file Libretro Snes9x 2002 Github Repository Report Libretro Snes9x 2002 Core Issues Here See also \u00b6 Nintendo - Sufami Turbo \u00b6 Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2005) Nintendo - SNES / Famicom (Snes9x 2010) Nintendo - Super Nintendo Entertainment System (+ Hacks) \u00b6 Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (nSide Balanced) Nintendo - SNES / Famicom (Mesen-S) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2005) Nintendo - SNES / Famicom (Snes9x 2010)","title":"Nintendo - SNES / Famicom (Snes9x 2002)"},{"location":"library/snes9x_2002/#nintendo-snes-famicom-snes9x-2002","text":"","title":"Nintendo - SNES / Famicom (Snes9x 2002)"},{"location":"library/snes9x_2002/#background","text":"Port of SNES9x 1.39 for libretro (was previously called PocketSNES). Heavily optimized for ARM. Provides more favorable performance thresholds at the cost of accuracy. DO NOT use this core unless you have underpowered hardware and the mainline Snes9x core and the bsnes/higan/bsnes-mercury cores aren't fast enough This core is part of a group of Snes9x cores that are snapshots from the year their code is based on. (Snes9x 2002, Snes9x 2005, Snes9x 2005 Plus, Snes9x 2010)","title":"Background"},{"location":"library/snes9x_2002/#authorlicense","text":"The Snes9x 2002 core has been authored by Snes9x Team PocketSNES Team Toadking The Snes9x 2002 core is licensed under Non-commercial A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/snes9x_2002/#extensions","text":"Content that can be loaded by the Snes9x 2002 core have the following file extensions: .smc .fig .sfc .gd3 .gd7 .dx2 .bsx .swc","title":"Extensions"},{"location":"library/snes9x_2002/#databases","text":"RetroArch database(s) that are associated with the Snes9x 2002 core: Nintendo - Super Nintendo Entertainment System Nintendo - Super Nintendo Entertainment System Hacks Nintendo - Sufami Turbo","title":"Databases"},{"location":"library/snes9x_2002/#features","text":"Frontend-level settings or features that the Snes9x 2002 core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2714 Controls \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2714 LEDs \u2715","title":"Features"},{"location":"library/snes9x_2002/#directories","text":"The Snes9x 2002 core's internal core name is 'Snes9x 2002' The Snes9x 2002 core saves/loads to/from these directories. Frontend's Save directory 'content-name'.srm (Cartridge battery save) Frontend's State directory 'content-name'.state# (State)","title":"Directories"},{"location":"library/snes9x_2002/#geometry-and-timing","text":"The Snes9x 2002 core's core provided FPS is 60.0988118623 for NTSC games and 50.0069789082 for PAL games. The Snes9x 2002 core's core provided sample rate is 32040.5 Hz The Snes9x 2002 core's core provided aspect ratio is 4/3","title":"Geometry and timing"},{"location":"library/snes9x_2002/#core-options","text":"The Snes9x 2002 core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Reduce Slowdown (Hack, Unsafe, Restart) [snes9x2002_overclock_cycles] ( disabled |compatible|max) Many games for the SNES suffered from slowdown due to the weak main CPU. This option helps allievate that at the cost of possible bugs. Example video here compatible: Reduce slowdown but keep as much game compatibility as much as possible. max: Reduce slowdown as much as possible but will break more games.","title":"Core options"},{"location":"library/snes9x_2002/#controllers","text":"The Snes9x 2002 core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/snes9x_2002/#user-1-2-device-types","text":"None - Doesn't disable input. There's no reason to switch to this. **RetroPad - Joypad - Stay on this. RetroPad w/Analog - Joypad - Same as RetroPad. There's no reason to switch to this.","title":"User 1 - 2 device types"},{"location":"library/snes9x_2002/#controller-tables","text":"","title":"Controller tables"},{"location":"library/snes9x_2002/#joypad","text":"RetroPad Inputs Snes9x 2002 core Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R","title":"Joypad"},{"location":"library/snes9x_2002/#compatibility","text":"Awaiting description.","title":"Compatibility"},{"location":"library/snes9x_2002/#external-links","text":"Official Snes9x 2002 Website Libretro Snes9x 2002 Core info file Libretro Snes9x 2002 Github Repository Report Libretro Snes9x 2002 Core Issues Here","title":"External Links"},{"location":"library/snes9x_2002/#see-also","text":"","title":"See also"},{"location":"library/snes9x_2002/#nintendo-sufami-turbo","text":"Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2005) Nintendo - SNES / Famicom (Snes9x 2010)","title":"Nintendo - Sufami Turbo"},{"location":"library/snes9x_2002/#nintendo-super-nintendo-entertainment-system-hacks","text":"Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (nSide Balanced) Nintendo - SNES / Famicom (Mesen-S) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2005) Nintendo - SNES / Famicom (Snes9x 2010)","title":"Nintendo - Super Nintendo Entertainment System (+ Hacks)"},{"location":"library/snes9x_2005/","text":"Nintendo - SNES / Famicom (Snes9x 2005) \u00b6 Background \u00b6 Port of SNES9x 1.43 for libretro. It was previously called CAT SFC. Provides more favorable performance thresholds at the cost of accuracy. DO NOT use this core unless you have underpowered hardware and the mainline Snes9x core and the bsnes/higan/bsnes-mercury cores aren't fast enough This core is part of a group of Snes9x cores that are snapshots from the year their code is based on. (Snes9x 2002, Snes9x 2005, Snes9x 2005 Plus, Snes9x 2010) Author/License \u00b6 The Snes9x 2005 core has been authored by Snes9x Team dking BassAceGold ShadauxCat Nebuleon The Snes9x 2005 core is licensed under Non-commercial A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the Snes9x 2005 core have the following file extensions: .smc .fig .sfc .gd3 .gd7 .dx2 .bsx .swc Databases \u00b6 RetroArch database(s) that are associated with the Snes9x 2005 core: Nintendo - Super Nintendo Entertainment System Nintendo - Super Nintendo Entertainment System Hacks Nintendo - Sufami Turbo Features \u00b6 Frontend-level settings or features that the Snes9x 2005 core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The Snes9x 2005 core's internal core name is 'Snes9x 2005' The Snes9x 2005 core saves/loads to/from these directories. Frontend's Save directory 'content-name'.srm (Cartridge battery save) Frontend's State directory 'content-name'.state# (State) Geometry and timing \u00b6 The Snes9x 2005 core's core provided FPS is (FPS) The Snes9x 2005 core's core provided sample rate is (Rate) The Snes9x 2005 core's core provided aspect ratio is 4/3 Core options \u00b6 The Snes9x 2005 core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Video Mode [catsfc_VideoMode] ( auto |NTSC|PAL) Awaiting description. Reduce Slowdown (Hack, Unsafe, Restart) [catsfc_overclock_cycles] ( disabled |compatible|max) Many games for the SNES suffered from slowdown due to the weak main CPU. This option helps allievate that at the cost of possible bugs. Example video here compatible: Reduce slowdown but keep as much game compatibility as much as possible. max: Reduce slowdown as much as possible but will break more games. Reduce Flickering (Hack, Unsafe) [catsfc_reduce_sprite_flicker] ( disabled |enabled) Raises sprite limit to reduce flickering in games. Controllers \u00b6 The Snes9x 2005 core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 - 5 device types \u00b6 None - Doesn't disable input. There's no reason to switch to this. **RetroPad - Joypad - Stay on this. RetroPad w/Analog - Joypad - Same as RetroPad. There's no reason to switch to this. Controller tables \u00b6 Joypad \u00b6 User 1 - 5 Remap descriptors RetroPad Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R Compatibility \u00b6 Game Issue A.S.P. Air Strike Patrol The shadow below the aircraft is missing. Glitched graphics on the briefing screens. Bass Masters Classic - Pro Edition Only shows a black screen. Funaki Masakatsu Hybrid Wrestler \u2013 Tougi Denshou Corrupted graphics on the Pancrase logo screen. Hayazashi Nidan Morita Shougi 2 Matches won\u2019t start. Madden NFL 96 Only shows a black screen. Masters New \u2013 Harukanaru Augusta 3 Black screen after selecting game. Mecarobot Golf The ground \"wobbles\" during gameplay. Mechwarrior 3050 Black screen after the Activision logo. External Links \u00b6 Official Snes9x 2005 Github Repository Libretro Snes9x 2005 Core info file Libretro Snes9x 2005 Github Repository Report Libretro Snes9x 2005 Core Issues Here See also \u00b6 Nintendo - Sufami Turbo \u00b6 Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2010) Nintendo - Super Nintendo Entertainment System (+ Hacks) \u00b6 Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (nSide Balanced) Nintendo - SNES / Famicom (Mesen-S) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2010)","title":"Nintendo - SNES / Famicom (Snes9x 2005)"},{"location":"library/snes9x_2005/#nintendo-snes-famicom-snes9x-2005","text":"","title":"Nintendo - SNES / Famicom (Snes9x 2005)"},{"location":"library/snes9x_2005/#background","text":"Port of SNES9x 1.43 for libretro. It was previously called CAT SFC. Provides more favorable performance thresholds at the cost of accuracy. DO NOT use this core unless you have underpowered hardware and the mainline Snes9x core and the bsnes/higan/bsnes-mercury cores aren't fast enough This core is part of a group of Snes9x cores that are snapshots from the year their code is based on. (Snes9x 2002, Snes9x 2005, Snes9x 2005 Plus, Snes9x 2010)","title":"Background"},{"location":"library/snes9x_2005/#authorlicense","text":"The Snes9x 2005 core has been authored by Snes9x Team dking BassAceGold ShadauxCat Nebuleon The Snes9x 2005 core is licensed under Non-commercial A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/snes9x_2005/#extensions","text":"Content that can be loaded by the Snes9x 2005 core have the following file extensions: .smc .fig .sfc .gd3 .gd7 .dx2 .bsx .swc","title":"Extensions"},{"location":"library/snes9x_2005/#databases","text":"RetroArch database(s) that are associated with the Snes9x 2005 core: Nintendo - Super Nintendo Entertainment System Nintendo - Super Nintendo Entertainment System Hacks Nintendo - Sufami Turbo","title":"Databases"},{"location":"library/snes9x_2005/#features","text":"Frontend-level settings or features that the Snes9x 2005 core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/snes9x_2005/#directories","text":"The Snes9x 2005 core's internal core name is 'Snes9x 2005' The Snes9x 2005 core saves/loads to/from these directories. Frontend's Save directory 'content-name'.srm (Cartridge battery save) Frontend's State directory 'content-name'.state# (State)","title":"Directories"},{"location":"library/snes9x_2005/#geometry-and-timing","text":"The Snes9x 2005 core's core provided FPS is (FPS) The Snes9x 2005 core's core provided sample rate is (Rate) The Snes9x 2005 core's core provided aspect ratio is 4/3","title":"Geometry and timing"},{"location":"library/snes9x_2005/#core-options","text":"The Snes9x 2005 core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Video Mode [catsfc_VideoMode] ( auto |NTSC|PAL) Awaiting description. Reduce Slowdown (Hack, Unsafe, Restart) [catsfc_overclock_cycles] ( disabled |compatible|max) Many games for the SNES suffered from slowdown due to the weak main CPU. This option helps allievate that at the cost of possible bugs. Example video here compatible: Reduce slowdown but keep as much game compatibility as much as possible. max: Reduce slowdown as much as possible but will break more games. Reduce Flickering (Hack, Unsafe) [catsfc_reduce_sprite_flicker] ( disabled |enabled) Raises sprite limit to reduce flickering in games.","title":"Core options"},{"location":"library/snes9x_2005/#controllers","text":"The Snes9x 2005 core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/snes9x_2005/#user-1-5-device-types","text":"None - Doesn't disable input. There's no reason to switch to this. **RetroPad - Joypad - Stay on this. RetroPad w/Analog - Joypad - Same as RetroPad. There's no reason to switch to this.","title":"User 1 - 5 device types"},{"location":"library/snes9x_2005/#controller-tables","text":"","title":"Controller tables"},{"location":"library/snes9x_2005/#joypad","text":"User 1 - 5 Remap descriptors RetroPad Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R","title":"Joypad"},{"location":"library/snes9x_2005/#compatibility","text":"Game Issue A.S.P. Air Strike Patrol The shadow below the aircraft is missing. Glitched graphics on the briefing screens. Bass Masters Classic - Pro Edition Only shows a black screen. Funaki Masakatsu Hybrid Wrestler \u2013 Tougi Denshou Corrupted graphics on the Pancrase logo screen. Hayazashi Nidan Morita Shougi 2 Matches won\u2019t start. Madden NFL 96 Only shows a black screen. Masters New \u2013 Harukanaru Augusta 3 Black screen after selecting game. Mecarobot Golf The ground \"wobbles\" during gameplay. Mechwarrior 3050 Black screen after the Activision logo.","title":"Compatibility"},{"location":"library/snes9x_2005/#external-links","text":"Official Snes9x 2005 Github Repository Libretro Snes9x 2005 Core info file Libretro Snes9x 2005 Github Repository Report Libretro Snes9x 2005 Core Issues Here","title":"External Links"},{"location":"library/snes9x_2005/#see-also","text":"","title":"See also"},{"location":"library/snes9x_2005/#nintendo-sufami-turbo","text":"Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2010)","title":"Nintendo - Sufami Turbo"},{"location":"library/snes9x_2005/#nintendo-super-nintendo-entertainment-system-hacks","text":"Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (nSide Balanced) Nintendo - SNES / Famicom (Mesen-S) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2010)","title":"Nintendo - Super Nintendo Entertainment System (+ Hacks)"},{"location":"library/snes9x_2005_plus/","text":"Nintendo - SNES / Famicom (Snes9x 2005 Plus) \u00b6 Background \u00b6 Port of SNES9x 1.43 for libretro. It was previously called CAT SFC. The Snes9x 2005 Plus core has been compiled with Blargg's APU. An accurate audio processing unit. Provides more favorable performance thresholds at the cost of accuracy. DO NOT use this core unless you have underpowered hardware and the mainline Snes9x core and the bsnes/higan/bsnes-mercury cores aren't fast enough This core is part of a group of Snes9x cores that are snapshots from the year their code is based on. (Snes9x 2002, Snes9x 2005, Snes9x 2005 Plus, Snes9x 2010) Author/License \u00b6 The Snes9x 2005 Plus core has been authored by Snes9x Team dking BassAceGold ShadauxCat Nebuleon The Snes9x 2005 Plus core is licensed under Non-commercial A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the Snes9x 2005 Plus core have the following file extensions: .smc .fig .sfc .gd3 .gd7 .dx2 .bsx .swc Databases \u00b6 RetroArch database(s) that are associated with the Snes9x 2005 Plus core: Nintendo - Super Nintendo Entertainment System Nintendo - Super Nintendo Entertainment System Hacks Nintendo - Sufami Turbo Features \u00b6 Frontend-level settings or features that the Snes9x 2005 Plus core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The Snes9x 2005 Plus core's internal core name is 'Snes9x 2005 Plus' The Snes9x 2005 Plus core saves/loads to/from these directories. Frontend's Save directory 'content-name'.srm (Cartridge battery save) Frontend's State directory 'content-name'.state# (State) Geometry and timing \u00b6 The Snes9x 2005 Plus core's core provided FPS is (FPS) The Snes9x 2005 Plus core's core provided sample rate is (Rate) The Snes9x 2005 Plus core's core provided aspect ratio is 4/3 Core options \u00b6 The Snes9x 2005 Plus core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Video Mode [catsfc_VideoMode] ( auto |NTSC|PAL) Awaiting description. Reduce Slowdown (Hack, Unsafe, Restart) [catsfc_overclock_cycles] ( disabled |compatible|max) Many games for the SNES suffered from slowdown due to the weak main CPU. This option helps allievate that at the cost of possible bugs. Example video here compatible: Reduce slowdown but keep as much game compatibility as much as possible. max: Reduce slowdown as much as possible but will break more games. Reduce Flickering (Hack, Unsafe) [catsfc_reduce_sprite_flicker] ( disabled |enabled) Rises sprite limit to reduce flickering in games. Controllers \u00b6 The Snes9x 2005 Plus core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 - 5 device types \u00b6 None - Doesn't disable input. There's no reason to switch to this. **RetroPad - Joypad - Stay on this. RetroPad w/Analog - Joypad - Same as RetroPad. There's no reason to switch to this. Controller tables \u00b6 Joypad \u00b6 User 1 - 5 Remap descriptors RetroPad Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R Compatibility \u00b6 Game Issue A.S.P. Air Strike Patrol The shadow below the aircraft is missing. Glitched graphics on the briefing screens. Bass Masters Classic - Pro Edition Only shows a black screen. Funaki Masakatsu Hybrid Wrestler \u2013 Tougi Denshou Corrupted graphics on the Pancrase logo screen. Hayazashi Nidan Morita Shougi 2 Matches won\u2019t start. Madden NFL 96 Only shows a black screen. Masters New \u2013 Harukanaru Augusta 3 Black screen after selecting game. Mecarobot Golf The ground \"wobbles\" during gameplay. Mechwarrior 3050 Black screen after the Activision logo. External Links \u00b6 Official Snes9x 2005 Plus Github Repository Libretro Snes9x 2005 Plus Core info file Libretro Snes9x 2005 Plus Github Repository Report Libretro Snes9x 2005 Plus Core Issues Here See also \u00b6 Nintendo - Sufami Turbo \u00b6 Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005) Nintendo - SNES / Famicom (Snes9x 2010) Nintendo - Super Nintendo Entertainment System (+ Hacks) \u00b6 Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (nSide Balanced) Nintendo - SNES / Famicom (Mesen-S) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005) Nintendo - SNES / Famicom (Snes9x 2010)","title":"Nintendo - SNES / Famicom (Snes9x 2005 Plus)"},{"location":"library/snes9x_2005_plus/#nintendo-snes-famicom-snes9x-2005-plus","text":"","title":"Nintendo - SNES / Famicom (Snes9x 2005 Plus)"},{"location":"library/snes9x_2005_plus/#background","text":"Port of SNES9x 1.43 for libretro. It was previously called CAT SFC. The Snes9x 2005 Plus core has been compiled with Blargg's APU. An accurate audio processing unit. Provides more favorable performance thresholds at the cost of accuracy. DO NOT use this core unless you have underpowered hardware and the mainline Snes9x core and the bsnes/higan/bsnes-mercury cores aren't fast enough This core is part of a group of Snes9x cores that are snapshots from the year their code is based on. (Snes9x 2002, Snes9x 2005, Snes9x 2005 Plus, Snes9x 2010)","title":"Background"},{"location":"library/snes9x_2005_plus/#authorlicense","text":"The Snes9x 2005 Plus core has been authored by Snes9x Team dking BassAceGold ShadauxCat Nebuleon The Snes9x 2005 Plus core is licensed under Non-commercial A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/snes9x_2005_plus/#extensions","text":"Content that can be loaded by the Snes9x 2005 Plus core have the following file extensions: .smc .fig .sfc .gd3 .gd7 .dx2 .bsx .swc","title":"Extensions"},{"location":"library/snes9x_2005_plus/#databases","text":"RetroArch database(s) that are associated with the Snes9x 2005 Plus core: Nintendo - Super Nintendo Entertainment System Nintendo - Super Nintendo Entertainment System Hacks Nintendo - Sufami Turbo","title":"Databases"},{"location":"library/snes9x_2005_plus/#features","text":"Frontend-level settings or features that the Snes9x 2005 Plus core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/snes9x_2005_plus/#directories","text":"The Snes9x 2005 Plus core's internal core name is 'Snes9x 2005 Plus' The Snes9x 2005 Plus core saves/loads to/from these directories. Frontend's Save directory 'content-name'.srm (Cartridge battery save) Frontend's State directory 'content-name'.state# (State)","title":"Directories"},{"location":"library/snes9x_2005_plus/#geometry-and-timing","text":"The Snes9x 2005 Plus core's core provided FPS is (FPS) The Snes9x 2005 Plus core's core provided sample rate is (Rate) The Snes9x 2005 Plus core's core provided aspect ratio is 4/3","title":"Geometry and timing"},{"location":"library/snes9x_2005_plus/#core-options","text":"The Snes9x 2005 Plus core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Video Mode [catsfc_VideoMode] ( auto |NTSC|PAL) Awaiting description. Reduce Slowdown (Hack, Unsafe, Restart) [catsfc_overclock_cycles] ( disabled |compatible|max) Many games for the SNES suffered from slowdown due to the weak main CPU. This option helps allievate that at the cost of possible bugs. Example video here compatible: Reduce slowdown but keep as much game compatibility as much as possible. max: Reduce slowdown as much as possible but will break more games. Reduce Flickering (Hack, Unsafe) [catsfc_reduce_sprite_flicker] ( disabled |enabled) Rises sprite limit to reduce flickering in games.","title":"Core options"},{"location":"library/snes9x_2005_plus/#controllers","text":"The Snes9x 2005 Plus core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/snes9x_2005_plus/#user-1-5-device-types","text":"None - Doesn't disable input. There's no reason to switch to this. **RetroPad - Joypad - Stay on this. RetroPad w/Analog - Joypad - Same as RetroPad. There's no reason to switch to this.","title":"User 1 - 5 device types"},{"location":"library/snes9x_2005_plus/#controller-tables","text":"","title":"Controller tables"},{"location":"library/snes9x_2005_plus/#joypad","text":"User 1 - 5 Remap descriptors RetroPad Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R","title":"Joypad"},{"location":"library/snes9x_2005_plus/#compatibility","text":"Game Issue A.S.P. Air Strike Patrol The shadow below the aircraft is missing. Glitched graphics on the briefing screens. Bass Masters Classic - Pro Edition Only shows a black screen. Funaki Masakatsu Hybrid Wrestler \u2013 Tougi Denshou Corrupted graphics on the Pancrase logo screen. Hayazashi Nidan Morita Shougi 2 Matches won\u2019t start. Madden NFL 96 Only shows a black screen. Masters New \u2013 Harukanaru Augusta 3 Black screen after selecting game. Mecarobot Golf The ground \"wobbles\" during gameplay. Mechwarrior 3050 Black screen after the Activision logo.","title":"Compatibility"},{"location":"library/snes9x_2005_plus/#external-links","text":"Official Snes9x 2005 Plus Github Repository Libretro Snes9x 2005 Plus Core info file Libretro Snes9x 2005 Plus Github Repository Report Libretro Snes9x 2005 Plus Core Issues Here","title":"External Links"},{"location":"library/snes9x_2005_plus/#see-also","text":"","title":"See also"},{"location":"library/snes9x_2005_plus/#nintendo-sufami-turbo","text":"Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005) Nintendo - SNES / Famicom (Snes9x 2010)","title":"Nintendo - Sufami Turbo"},{"location":"library/snes9x_2005_plus/#nintendo-super-nintendo-entertainment-system-hacks","text":"Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (nSide Balanced) Nintendo - SNES / Famicom (Mesen-S) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005) Nintendo - SNES / Famicom (Snes9x 2010)","title":"Nintendo - Super Nintendo Entertainment System (+ Hacks)"},{"location":"library/snes9x_2010/","text":"Nintendo - SNES / Famicom (Snes9x 2010) \u00b6 Background \u00b6 Port of Snes9x 1.52+ to Libretro (previously called SNES9x Next). Rewritten in C and several optimizations and speedhacks. Provides more favorable performance thresholds at the cost of accuracy. DO NOT use this core unless you have underpowered hardware and the mainline Snes9x core and the bsnes/higan/bsnes-mercury cores aren't fast enough This core is part of a group of Snes9x cores that are snapshots from the year their code is based on. (Snes9x 2002, Snes9x 2005, Snes9x 2005 Plus, Snes9x 2010) Author/License \u00b6 The Snes9x 2010 core has been authored by Snes9x Team Squarepusher The Snes9x 2010 core is licensed under Non-commercial A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the Snes9x 2010 core have the following file extensions: .smc .fig .sfc .gd3 .gd7 .dx2 .bsx .swc Databases \u00b6 RetroArch database(s) that are associated with the Snes9x 2010 core: Nintendo - Super Nintendo Entertainment System Nintendo - Super Nintendo Entertainment System Hacks Nintendo - Sufami Turbo Features \u00b6 Frontend-level settings or features that the Snes9x 2010 core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse - Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2714 LEDs \u2715 Directories \u00b6 The Snes9x 2010 core's internal core name is 'Snes9x 2010' The Snes9x 2010 core saves/loads to/from these directories. Frontend's Save directory 'content-name'.srm (Cartridge battery save) Frontend's State directory 'content-name'.state# (State) Geometry and timing \u00b6 The Snes9x 2010 core's core provided FPS is 60.0988118623 for NTSC games and 50.0069789082 for PAL games The Snes9x 2010 core's core provided sample rate is 32040.5 Hz The Snes9x 2010 core's core provided aspect ratio is 4/3 Core options \u00b6 The Snes9x 2010 core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. SuperFX Overclock [snes9x_next_overclock] ( Disabled(10MHz) |40MHz|60MHz|80MHz|100MHz|Underclock(5MHz)|Underclock(8MHz)) Overclock or underclock the SuperFX chip . 10Mhz is stock clockspeed. Reduce Slowdown (Hack, Unsafe) [snes9x_next_overclock_cycles] ( disabled |compatible|max) Many games for the SNES suffered from slowdown due to the weak main CPU. This option helps allievate that at the cost of possible bugs. Example video here compatible: Reduce slowdown but keep as much game compatibility as much as possible. max: Reduce slowdown as much as possible but will break more games. Reduce Flickering (Hack, Unsafe) [snes9x_next_reduce_sprite_flicker] ( disabled |enabled) Raises sprite limit to reduce flickering in games. Controllers \u00b6 The Snes9x 2010 core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 device types \u00b6 None - Doesn't disable input. There's no reason to switch to this. SNES Joypad - Joypad SNES Mouse - Mouse User 2 device types \u00b6 None - Doesn't disable input. There's no reason to switch to this. SNES Joypad - Joypad SNES Mouse - Mouse Multitap - Joypad - Allows for up to five players to play together in multitap games. SuperScope - Lightgun Justifier - Lightgun Justifiers - Lightgun - Two Justifiers are plugged in, for two-player Justifier games. Multitap support \u00b6 Activating multitap support in compatible games can be configured by switching to the Multitap device type for User 2. Controller tables \u00b6 Joypad \u00b6 User 1 - 5 Remap descriptors RetroPad Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R Mouse \u00b6 RetroMouse Inputs SNES Mouse Mouse Cursor SNES Mouse Cursor Mouse 1 SNES Mouse Left Button Mouse 2 SNES Mouse Right Button Lightgun \u00b6 RetroLightgun Inputs SuperScope Justifier(s) Gun Crosshair SuperScope Crosshair Justifier Crosshair Gun Trigger SuperScope Trigger Justifier Trigger Gun Aux A SuperScope Cursor Gun Aux B SuperScope Turbo Justifier Offscreen Gun Start SuperScope Pause Justifier Start Compatibility \u00b6 Game Issue A.S.P. Air Strike Patrol The shadow below the aircraft is missing. Glitched graphics on the briefing screens. Bass Masters Classic - Pro Edition Only shows a black screen. Doom Colored dots appear during gameplay. F-1 Grand Prix Glitched HUD display. F1 ROC II \u2013 Race of Champions Crashes when starting a race. Funaki Masakatsu Hybrid Wrestler \u2013 Tougi Denshou Corrupted graphics on the Pancrase logo screen. Hayazashi Nidan Morita Shougi 2 Matches won\u2019t start. Madden NFL 96 Only shows a black screen. Masters New \u2013 Harukanaru Augusta 3 Graphical corruption during gameplay. Mecarobot Golf The ground \"wobbles\" during gameplay. Mechwarrior 3050 Black screen after the Activision logo. Secret of Evermore (PAL) Randomly freezes when the background music changes. Sink or Swim Sometimes the levels are filled with water instantly. Speedy Gonzales: Los Gatos Bandidos Freezes when pressing a switch in the last level. Super Bomberman 3 Freezes after about 20 seconds in the Battle mode menu. Super Bomberman 5 Title screen flickers if the opening cinematic isn\u2019t skipped. External Links \u00b6 Snes9x 2010/Next Web Player Libretro Snes9x 2010 Core info file Libretro Snes9x 2010 Github Repository Report Libretro Snes9x 2010 Core Issues Here See also \u00b6 Nintendo - Sufami Turbo \u00b6 Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2005) Nintendo - Super Nintendo Entertainment System (+ Hacks) \u00b6 Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (nSide Balanced) Nintendo - SNES / Famicom (Mesen-S) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2005)","title":"Nintendo - SNES / Famicom (Snes9x 2010)"},{"location":"library/snes9x_2010/#nintendo-snes-famicom-snes9x-2010","text":"","title":"Nintendo - SNES / Famicom (Snes9x 2010)"},{"location":"library/snes9x_2010/#background","text":"Port of Snes9x 1.52+ to Libretro (previously called SNES9x Next). Rewritten in C and several optimizations and speedhacks. Provides more favorable performance thresholds at the cost of accuracy. DO NOT use this core unless you have underpowered hardware and the mainline Snes9x core and the bsnes/higan/bsnes-mercury cores aren't fast enough This core is part of a group of Snes9x cores that are snapshots from the year their code is based on. (Snes9x 2002, Snes9x 2005, Snes9x 2005 Plus, Snes9x 2010)","title":"Background"},{"location":"library/snes9x_2010/#authorlicense","text":"The Snes9x 2010 core has been authored by Snes9x Team Squarepusher The Snes9x 2010 core is licensed under Non-commercial A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/snes9x_2010/#extensions","text":"Content that can be loaded by the Snes9x 2010 core have the following file extensions: .smc .fig .sfc .gd3 .gd7 .dx2 .bsx .swc","title":"Extensions"},{"location":"library/snes9x_2010/#databases","text":"RetroArch database(s) that are associated with the Snes9x 2010 core: Nintendo - Super Nintendo Entertainment System Nintendo - Super Nintendo Entertainment System Hacks Nintendo - Sufami Turbo","title":"Databases"},{"location":"library/snes9x_2010/#features","text":"Frontend-level settings or features that the Snes9x 2010 core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse - Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2714 LEDs \u2715","title":"Features"},{"location":"library/snes9x_2010/#directories","text":"The Snes9x 2010 core's internal core name is 'Snes9x 2010' The Snes9x 2010 core saves/loads to/from these directories. Frontend's Save directory 'content-name'.srm (Cartridge battery save) Frontend's State directory 'content-name'.state# (State)","title":"Directories"},{"location":"library/snes9x_2010/#geometry-and-timing","text":"The Snes9x 2010 core's core provided FPS is 60.0988118623 for NTSC games and 50.0069789082 for PAL games The Snes9x 2010 core's core provided sample rate is 32040.5 Hz The Snes9x 2010 core's core provided aspect ratio is 4/3","title":"Geometry and timing"},{"location":"library/snes9x_2010/#core-options","text":"The Snes9x 2010 core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. SuperFX Overclock [snes9x_next_overclock] ( Disabled(10MHz) |40MHz|60MHz|80MHz|100MHz|Underclock(5MHz)|Underclock(8MHz)) Overclock or underclock the SuperFX chip . 10Mhz is stock clockspeed. Reduce Slowdown (Hack, Unsafe) [snes9x_next_overclock_cycles] ( disabled |compatible|max) Many games for the SNES suffered from slowdown due to the weak main CPU. This option helps allievate that at the cost of possible bugs. Example video here compatible: Reduce slowdown but keep as much game compatibility as much as possible. max: Reduce slowdown as much as possible but will break more games. Reduce Flickering (Hack, Unsafe) [snes9x_next_reduce_sprite_flicker] ( disabled |enabled) Raises sprite limit to reduce flickering in games.","title":"Core options"},{"location":"library/snes9x_2010/#controllers","text":"The Snes9x 2010 core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/snes9x_2010/#user-1-device-types","text":"None - Doesn't disable input. There's no reason to switch to this. SNES Joypad - Joypad SNES Mouse - Mouse","title":"User 1 device types"},{"location":"library/snes9x_2010/#user-2-device-types","text":"None - Doesn't disable input. There's no reason to switch to this. SNES Joypad - Joypad SNES Mouse - Mouse Multitap - Joypad - Allows for up to five players to play together in multitap games. SuperScope - Lightgun Justifier - Lightgun Justifiers - Lightgun - Two Justifiers are plugged in, for two-player Justifier games.","title":"User 2 device types"},{"location":"library/snes9x_2010/#multitap-support","text":"Activating multitap support in compatible games can be configured by switching to the Multitap device type for User 2.","title":"Multitap support"},{"location":"library/snes9x_2010/#controller-tables","text":"","title":"Controller tables"},{"location":"library/snes9x_2010/#joypad","text":"User 1 - 5 Remap descriptors RetroPad Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R","title":"Joypad"},{"location":"library/snes9x_2010/#mouse","text":"RetroMouse Inputs SNES Mouse Mouse Cursor SNES Mouse Cursor Mouse 1 SNES Mouse Left Button Mouse 2 SNES Mouse Right Button","title":"Mouse"},{"location":"library/snes9x_2010/#lightgun","text":"RetroLightgun Inputs SuperScope Justifier(s) Gun Crosshair SuperScope Crosshair Justifier Crosshair Gun Trigger SuperScope Trigger Justifier Trigger Gun Aux A SuperScope Cursor Gun Aux B SuperScope Turbo Justifier Offscreen Gun Start SuperScope Pause Justifier Start","title":"Lightgun"},{"location":"library/snes9x_2010/#compatibility","text":"Game Issue A.S.P. Air Strike Patrol The shadow below the aircraft is missing. Glitched graphics on the briefing screens. Bass Masters Classic - Pro Edition Only shows a black screen. Doom Colored dots appear during gameplay. F-1 Grand Prix Glitched HUD display. F1 ROC II \u2013 Race of Champions Crashes when starting a race. Funaki Masakatsu Hybrid Wrestler \u2013 Tougi Denshou Corrupted graphics on the Pancrase logo screen. Hayazashi Nidan Morita Shougi 2 Matches won\u2019t start. Madden NFL 96 Only shows a black screen. Masters New \u2013 Harukanaru Augusta 3 Graphical corruption during gameplay. Mecarobot Golf The ground \"wobbles\" during gameplay. Mechwarrior 3050 Black screen after the Activision logo. Secret of Evermore (PAL) Randomly freezes when the background music changes. Sink or Swim Sometimes the levels are filled with water instantly. Speedy Gonzales: Los Gatos Bandidos Freezes when pressing a switch in the last level. Super Bomberman 3 Freezes after about 20 seconds in the Battle mode menu. Super Bomberman 5 Title screen flickers if the opening cinematic isn\u2019t skipped.","title":"Compatibility"},{"location":"library/snes9x_2010/#external-links","text":"Snes9x 2010/Next Web Player Libretro Snes9x 2010 Core info file Libretro Snes9x 2010 Github Repository Report Libretro Snes9x 2010 Core Issues Here","title":"External Links"},{"location":"library/snes9x_2010/#see-also","text":"","title":"See also"},{"location":"library/snes9x_2010/#nintendo-sufami-turbo","text":"Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2005)","title":"Nintendo - Sufami Turbo"},{"location":"library/snes9x_2010/#nintendo-super-nintendo-entertainment-system-hacks","text":"Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (nSide Balanced) Nintendo - SNES / Famicom (Mesen-S) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2005)","title":"Nintendo - Super Nintendo Entertainment System (+ Hacks)"},{"location":"library/stella/","text":"Atari - 2600 (Stella) \u00b6 Background \u00b6 Stella is a multi-platform Atari 2600 VCS emulator. Author/License \u00b6 The Stella core has been authored by Stephen Anthony Bradford Mott Thomas Jentzsch Christian Speckner The Stella core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the Stella core have the following file extensions: .a26 .bin Databases \u00b6 RetroArch database(s) that are associated with the Stella core: Atari - 2600 Features \u00b6 Frontend-level settings or features that the Stella core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2715 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2715 RetroAchievements \u2714 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The Stella core's internal core name is 'Stella' The Stella core saves/loads to/from these directories. Frontend's State directory 'content-name'.state# (State) Geometry and timing \u00b6 The Stella core's core provided FPS is (FPS) The Stella core's core provided sample rate is 31400 Hz The Stella core's core provided aspect ratio is 4/3 Controllers \u00b6 The Stella core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 - 2 device types \u00b6 None - Doesn't disable input. RetroPad - Joypad - Stay on this RetroPad w/Analog - Joypad - There's no reason to switch to this Controller tables \u00b6 Joypad \u00b6 User 1 Remap descriptors RetroPad Inputs Fire Select Reset Up Down Left Right Left Difficulty A Right Difficulty A Left Difficulty B Left Difficulty B Color Black/White User 2 Remap descriptors RetroPad Inputs Fire Up Down Left Right External Links \u00b6 Official Stella Website Official Stella Github Repository Libretro Stella Core info file Libretro Stella Github Repository Report Libretro Stella Core Issues Here","title":"Atari - 2600 (Stella)"},{"location":"library/stella/#atari-2600-stella","text":"","title":"Atari - 2600 (Stella)"},{"location":"library/stella/#background","text":"Stella is a multi-platform Atari 2600 VCS emulator.","title":"Background"},{"location":"library/stella/#authorlicense","text":"The Stella core has been authored by Stephen Anthony Bradford Mott Thomas Jentzsch Christian Speckner The Stella core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/stella/#extensions","text":"Content that can be loaded by the Stella core have the following file extensions: .a26 .bin","title":"Extensions"},{"location":"library/stella/#databases","text":"RetroArch database(s) that are associated with the Stella core: Atari - 2600","title":"Databases"},{"location":"library/stella/#features","text":"Frontend-level settings or features that the Stella core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2715 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2715 RetroAchievements \u2714 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/stella/#directories","text":"The Stella core's internal core name is 'Stella' The Stella core saves/loads to/from these directories. Frontend's State directory 'content-name'.state# (State)","title":"Directories"},{"location":"library/stella/#geometry-and-timing","text":"The Stella core's core provided FPS is (FPS) The Stella core's core provided sample rate is 31400 Hz The Stella core's core provided aspect ratio is 4/3","title":"Geometry and timing"},{"location":"library/stella/#controllers","text":"The Stella core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/stella/#user-1-2-device-types","text":"None - Doesn't disable input. RetroPad - Joypad - Stay on this RetroPad w/Analog - Joypad - There's no reason to switch to this","title":"User 1 - 2 device types"},{"location":"library/stella/#controller-tables","text":"","title":"Controller tables"},{"location":"library/stella/#joypad","text":"User 1 Remap descriptors RetroPad Inputs Fire Select Reset Up Down Left Right Left Difficulty A Right Difficulty A Left Difficulty B Left Difficulty B Color Black/White User 2 Remap descriptors RetroPad Inputs Fire Up Down Left Right","title":"Joypad"},{"location":"library/stella/#external-links","text":"Official Stella Website Official Stella Github Repository Libretro Stella Core info file Libretro Stella Github Repository Report Libretro Stella Core Issues Here","title":"External Links"},{"location":"library/stone_soup/","text":"Dungeon Crawl Stone Soup \u00b6 Background \u00b6 Dungeon Crawl Stone Soup is a free roguelike game of exploration and treasure-hunting in dungeons filled with dangerous and unfriendly monsters in a quest for the mystifyingly fabulous Orb of Zot. The Dungeon Crawl Stone Soup core has been authored by DCSS Team The Dungeon Crawl Stone Soup core is licensed under GPLv2+ A summary of the licenses behind RetroArch and its cores can be found here . How to start the Dungeon Crawl Stone Soup core: \u00b6 Create an empty directory to hold game data. Copy https://github.com/libretro/crawl-ref/tree/master/crawl-ref/source/dat into the root of game directory. Create a file named game.crawlrc in the root of the game directory. Load game.crawlrc with the Dungeon Crawl Stone Soup core. Extensions \u00b6 Content that can be loaded by the Dungeon Crawl Stone Soup core have the following file extensions: .crawlrc Features \u00b6 Frontend-level settings or features that the Dungeon Crawl Stone Soup core respects. Feature Supported Restart \u2715 Screenshots \u2715 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2715 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The Dungeon Crawl Stone Soup core's library name is 'Dungeon Crawl: Stone Soup' The Dungeon Crawl Stone Soup core saves/loads to/from these directories. Loaded content's directory File Description saves/ Dungeon Crawl Stone Soup saves directory Geometry and timing \u00b6 The Dungeon Crawl Stone Soup core's core provided FPS is 60 The Dungeon Crawl Stone Soup core's core provided sample rate is 44100 Hz The Dungeon Crawl Stone Soup core's base width is 1024 The Dungeon Crawl Stone Soup core's base height is 768 The Dungeon Crawl Stone Soup core's max width is 1024 The Dungeon Crawl Stone Soup core's max height is 768 The Dungeon Crawl Stone Soup core's core provided aspect ratio is 0.0 Devices \u00b6 Joypad Pointer Keyboard (Keyboard callback) Joypad \u00b6 User 1 input descriptors RetroPad Inputs Enter Up Down Left Right Pointer \u00b6 RetroPointer Inputs Dungeon Crawl Stone Soup inputs or Pointer Position Cursor or Pointer Pressed Click External Links \u00b6 Official Dungeon Crawl Stone Soup Website Official Dungeon Crawl Stone Soup Github Repository Libretro Dungeon Crawl Stone Soup Core info file Libretro Dungeon Crawl Stone Soup Github Repository Report Libretro Dungeon Crawl Stone Soup Core Issues Here","title":"Dungeon Crawl Stone Soup"},{"location":"library/stone_soup/#dungeon-crawl-stone-soup","text":"","title":"Dungeon Crawl Stone Soup"},{"location":"library/stone_soup/#background","text":"Dungeon Crawl Stone Soup is a free roguelike game of exploration and treasure-hunting in dungeons filled with dangerous and unfriendly monsters in a quest for the mystifyingly fabulous Orb of Zot. The Dungeon Crawl Stone Soup core has been authored by DCSS Team The Dungeon Crawl Stone Soup core is licensed under GPLv2+ A summary of the licenses behind RetroArch and its cores can be found here .","title":"Background"},{"location":"library/stone_soup/#how-to-start-the-dungeon-crawl-stone-soup-core","text":"Create an empty directory to hold game data. Copy https://github.com/libretro/crawl-ref/tree/master/crawl-ref/source/dat into the root of game directory. Create a file named game.crawlrc in the root of the game directory. Load game.crawlrc with the Dungeon Crawl Stone Soup core.","title":"How to start the Dungeon Crawl Stone Soup core:"},{"location":"library/stone_soup/#extensions","text":"Content that can be loaded by the Dungeon Crawl Stone Soup core have the following file extensions: .crawlrc","title":"Extensions"},{"location":"library/stone_soup/#features","text":"Frontend-level settings or features that the Dungeon Crawl Stone Soup core respects. Feature Supported Restart \u2715 Screenshots \u2715 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2715 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/stone_soup/#directories","text":"The Dungeon Crawl Stone Soup core's library name is 'Dungeon Crawl: Stone Soup' The Dungeon Crawl Stone Soup core saves/loads to/from these directories. Loaded content's directory File Description saves/ Dungeon Crawl Stone Soup saves directory","title":"Directories"},{"location":"library/stone_soup/#geometry-and-timing","text":"The Dungeon Crawl Stone Soup core's core provided FPS is 60 The Dungeon Crawl Stone Soup core's core provided sample rate is 44100 Hz The Dungeon Crawl Stone Soup core's base width is 1024 The Dungeon Crawl Stone Soup core's base height is 768 The Dungeon Crawl Stone Soup core's max width is 1024 The Dungeon Crawl Stone Soup core's max height is 768 The Dungeon Crawl Stone Soup core's core provided aspect ratio is 0.0","title":"Geometry and timing"},{"location":"library/stone_soup/#devices","text":"Joypad Pointer Keyboard (Keyboard callback)","title":"Devices"},{"location":"library/stone_soup/#joypad","text":"User 1 input descriptors RetroPad Inputs Enter Up Down Left Right","title":"Joypad"},{"location":"library/stone_soup/#pointer","text":"RetroPointer Inputs Dungeon Crawl Stone Soup inputs or Pointer Position Cursor or Pointer Pressed Click","title":"Pointer"},{"location":"library/stone_soup/#external-links","text":"Official Dungeon Crawl Stone Soup Website Official Dungeon Crawl Stone Soup Github Repository Libretro Dungeon Crawl Stone Soup Core info file Libretro Dungeon Crawl Stone Soup Github Repository Report Libretro Dungeon Crawl Stone Soup Core Issues Here","title":"External Links"},{"location":"library/tgb_dual/","text":"Nintendo - Game Boy / Color (TGB Dual) \u00b6 Background \u00b6 TGB Dual is an open source (GPLv2) GB/GBC emulator with game link cable support. Author/License \u00b6 The TGB Dual core has been authored by GIGO Hii The TGB Dual core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the TGB Dual core have the following file extensions: .gb .gbc .sgb Databases \u00b6 RetroArch database(s) that are associated with the TGB Dual core: Nintendo - Game Boy Nintendo - Game Boy Color Features \u00b6 Frontend-level settings or features that the TGB Dual core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The TGB Dual core's internal core name is 'TGB Dual' The TGB Dual core saves/loads to/from these directories. Frontend's Save directory 'content-name'.srm (Cartridge battery save) 'content-name'.rtc (Real time clock save) Frontend's State directory 'content-name'.state# (State) Geometry and timing \u00b6 The TGB Dual core's core provided FPS is 59.7275005696 The TGB Dual core's core provided sample rate is 44100 Hz The TGB dual core's core provided aspect ratio is (Ratio) Core options \u00b6 The TGB Dual core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. GB Link Enable (restart) [tgbdual_gblink_enable] ( disabled |enabled) Emulates two Game Boy units side by side for multiplayer support. GB Link Enable - Enabled Screen placement [tgbdual_screen_placement] ( horizontal |vertical) Switches the screen layout for multiplayer support. Horizontal Vertical Switch player screens [tgbdual_switch_screens] ( normal |switched) Switches the player screens for multiplayer support. Show player screens [tgbdual_single_screen_mp] ( both players |player 1 only|player 2 only) Displays the selected player screens for multiplayer support. Controllers \u00b6 The TGB Dual core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 - 2 device types \u00b6 None - Doesn't disable input. There's no reason to switch to this. RetroPad - Joypad - Stay on this. RetroPad - Joypad - Same as RetroPad. There's no reason to switch to this. Controller tables \u00b6 Joypad \u00b6 User 1 - 2 Remap descriptors RetroPad Inputs B Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A Next Audio Mode Prev Audio Mode Compatibility \u00b6 Awaiting description. External Links \u00b6 Official TGB Dual Website Official TGB Dual SDL port Website Libretro TGB Dual Core info file Libretro TGB Dual Github Repository Report Libretro TGB Dual Core Issues Here See also \u00b6 Nintendo - Game Boy (+ Color) \u00b6 Nintendo - Game Boy / Color (Emux GB) Nintendo - Game Boy / Color (Gambatte) Nintendo - Game Boy / Color (Gearboy) Nintendo - Game Boy / Color (SameBoy) Nintendo - Game Boy Advance (mGBA) Nintendo - Game Boy Advance (VBA-M) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (nSide Balanced) Nintendo - SNES / Famicom (Mesen-S)","title":"Nintendo - Game Boy / Game Boy Color (TGB Dual)"},{"location":"library/tgb_dual/#nintendo-game-boy-color-tgb-dual","text":"","title":"Nintendo - Game Boy / Color (TGB Dual)"},{"location":"library/tgb_dual/#background","text":"TGB Dual is an open source (GPLv2) GB/GBC emulator with game link cable support.","title":"Background"},{"location":"library/tgb_dual/#authorlicense","text":"The TGB Dual core has been authored by GIGO Hii The TGB Dual core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/tgb_dual/#extensions","text":"Content that can be loaded by the TGB Dual core have the following file extensions: .gb .gbc .sgb","title":"Extensions"},{"location":"library/tgb_dual/#databases","text":"RetroArch database(s) that are associated with the TGB Dual core: Nintendo - Game Boy Nintendo - Game Boy Color","title":"Databases"},{"location":"library/tgb_dual/#features","text":"Frontend-level settings or features that the TGB Dual core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/tgb_dual/#directories","text":"The TGB Dual core's internal core name is 'TGB Dual' The TGB Dual core saves/loads to/from these directories. Frontend's Save directory 'content-name'.srm (Cartridge battery save) 'content-name'.rtc (Real time clock save) Frontend's State directory 'content-name'.state# (State)","title":"Directories"},{"location":"library/tgb_dual/#geometry-and-timing","text":"The TGB Dual core's core provided FPS is 59.7275005696 The TGB Dual core's core provided sample rate is 44100 Hz The TGB dual core's core provided aspect ratio is (Ratio)","title":"Geometry and timing"},{"location":"library/tgb_dual/#core-options","text":"The TGB Dual core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. GB Link Enable (restart) [tgbdual_gblink_enable] ( disabled |enabled) Emulates two Game Boy units side by side for multiplayer support. GB Link Enable - Enabled Screen placement [tgbdual_screen_placement] ( horizontal |vertical) Switches the screen layout for multiplayer support. Horizontal Vertical Switch player screens [tgbdual_switch_screens] ( normal |switched) Switches the player screens for multiplayer support. Show player screens [tgbdual_single_screen_mp] ( both players |player 1 only|player 2 only) Displays the selected player screens for multiplayer support.","title":"Core options"},{"location":"library/tgb_dual/#controllers","text":"The TGB Dual core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/tgb_dual/#user-1-2-device-types","text":"None - Doesn't disable input. There's no reason to switch to this. RetroPad - Joypad - Stay on this. RetroPad - Joypad - Same as RetroPad. There's no reason to switch to this.","title":"User 1 - 2 device types"},{"location":"library/tgb_dual/#controller-tables","text":"","title":"Controller tables"},{"location":"library/tgb_dual/#joypad","text":"User 1 - 2 Remap descriptors RetroPad Inputs B Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A Next Audio Mode Prev Audio Mode","title":"Joypad"},{"location":"library/tgb_dual/#compatibility","text":"Awaiting description.","title":"Compatibility"},{"location":"library/tgb_dual/#external-links","text":"Official TGB Dual Website Official TGB Dual SDL port Website Libretro TGB Dual Core info file Libretro TGB Dual Github Repository Report Libretro TGB Dual Core Issues Here","title":"External Links"},{"location":"library/tgb_dual/#see-also","text":"","title":"See also"},{"location":"library/tgb_dual/#nintendo-game-boy-color","text":"Nintendo - Game Boy / Color (Emux GB) Nintendo - Game Boy / Color (Gambatte) Nintendo - Game Boy / Color (Gearboy) Nintendo - Game Boy / Color (SameBoy) Nintendo - Game Boy Advance (mGBA) Nintendo - Game Boy Advance (VBA-M) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (nSide Balanced) Nintendo - SNES / Famicom (Mesen-S)","title":"Nintendo - Game Boy (+ Color)"},{"location":"library/the_powder_toy/","text":"The Powder Toy \u00b6 Background \u00b6 Based upon the SDL version: https://github.com/ThePowderToy/The-Powder-Toy Have you ever wanted to blow something up? Or maybe you always dreamt of operating an atomic power plant? Do you have a will to develop your own CPU? The Powder Toy lets you to do all of these, and even more! The Powder Toy is a free physics sandbox game, which simulates air pressure and velocity, heat, gravity and a countless number of interactions between different substances! The game provides you with various building materials, liquids, gases and electronic components which can be used to construct complex machines, guns, bombs, realistic terrains and almost anything else. You can then mine them and watch cool explosions, add intricate wirings, play with little stickmen or operate your machine. You can browse and play thousands of different saves made by the community or upload your own - we welcome your creations! There is a Lua API - you can automate your work or even make plugins for the game. The Powder Toy is free and the source code is distributed under the GNU General Public License, so you can modify the game yourself or help with development. TPT-LibRetro is compiled using cmake. Instructions \u00b6 Click on the elements with the mouse and draw in the field, like in MS Paint. The rest of the game is learning what happens next. How to start the The Powder Toy core: \u00b6 To start the The Powder Toy core, go to RetroArch's main menu screen. Select 'Load Core', then 'The Powder Toy'. Now, select 'Start Core'. The content should now start running! Author/License \u00b6 The The Powder Toy core has been authored by jselby Original TPT Contributors The The Powder Toy core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the The Powder Toy core have the following file extensions: .cps Features \u00b6 Frontend-level settings or features that the The Powder Toy core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2715 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The The Powder Toy core's library name is 'The Powder Toy' The The Powder Toy core saves/loads to/from these directories. Frontend's Save directory File Description The Powder Toy/Saves/*.cps Simulations that have been saved to the computer. Frontend's State directory File Description *.state# State Geometry and timing \u00b6 The The Powder Toy core's core provided FPS is 60 The The Powder Toy core's core provided sample rate is 32000 Hz The The Powder Toy core's base width is (Base width) The The Powder Toy core's base height is (Base height) The The Powder Toy core's max width is (Max width) The The Powder Toy core's max height is (Max height) The The Powder Toy core's core provided aspect ratio is (Ratio) Controls \u00b6 Key Action TAB Switch between circle/square/triangle brush Space Pause Q / Esc Quit Z Zoom S Save stamp (+ Ctrl when STK2 is out) L Load last saved stamp K Stamp library 1-9 Set view mode P / F2 Save screenshot to .png E Bring up element search F Pause and go to next frame G Increase grid size Shift + G Decrease grid size H Show/Hide HUD Ctrl + H / F1 Show intro text D / F3 Debug mode (+ Ctrl when STK2 is out) I Invert Pressure and Velocity map W Toggle gravity modes (+ Ctrl when STK2 is out) Y Toggle air modes B Enter decoration editor menu Ctrl + B Toggle decorations on/off N Toggle Newtonian Gravity on/off U Toggle ambient heat on/off Ctrl + I Install powder toy, for loading saves/stamps by double clicking ~ Console = Reset pressure and velocity map Ctrl + = Reset Electricity [ Decrease brush size ] Increase brush size Alt + [ Decrease brush size by 1 Alt + ] Increase brush size by 1 Ctrl + C/V/X Copy/Paste/Cut Ctrl + Z Undo Ctrl + Y Redo Ctrl + Cursor drag Rectangle Shift + Cursor drag Line Middle click Sample element Alt + Left click Sample element Mouse scroll Change brush size Ctrl + Mouse scroll Change vertical brush size Shift + Mouse scroll Change horizontal brush size Shift + R Horizontal mirror for selected area when pasting stamps Ctrl + Shift + R Vertical mirror for selected area when pasting stamps R Rotate selected area counterclockwise when pasting stamps External Links \u00b6 Official The Powder Toy Website Official The Powder Toy Github Repository Libretro The Powder Toy Core info file Libretro The Powder Toy Github Repository Report Libretro The Powder Toy Core Issues Here","title":"The Powder Toy"},{"location":"library/the_powder_toy/#the-powder-toy","text":"","title":"The Powder Toy"},{"location":"library/the_powder_toy/#background","text":"Based upon the SDL version: https://github.com/ThePowderToy/The-Powder-Toy Have you ever wanted to blow something up? Or maybe you always dreamt of operating an atomic power plant? Do you have a will to develop your own CPU? The Powder Toy lets you to do all of these, and even more! The Powder Toy is a free physics sandbox game, which simulates air pressure and velocity, heat, gravity and a countless number of interactions between different substances! The game provides you with various building materials, liquids, gases and electronic components which can be used to construct complex machines, guns, bombs, realistic terrains and almost anything else. You can then mine them and watch cool explosions, add intricate wirings, play with little stickmen or operate your machine. You can browse and play thousands of different saves made by the community or upload your own - we welcome your creations! There is a Lua API - you can automate your work or even make plugins for the game. The Powder Toy is free and the source code is distributed under the GNU General Public License, so you can modify the game yourself or help with development. TPT-LibRetro is compiled using cmake.","title":"Background"},{"location":"library/the_powder_toy/#instructions","text":"Click on the elements with the mouse and draw in the field, like in MS Paint. The rest of the game is learning what happens next.","title":"Instructions"},{"location":"library/the_powder_toy/#how-to-start-the-the-powder-toy-core","text":"To start the The Powder Toy core, go to RetroArch's main menu screen. Select 'Load Core', then 'The Powder Toy'. Now, select 'Start Core'. The content should now start running!","title":"How to start the The Powder Toy core:"},{"location":"library/the_powder_toy/#authorlicense","text":"The The Powder Toy core has been authored by jselby Original TPT Contributors The The Powder Toy core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/the_powder_toy/#extensions","text":"Content that can be loaded by the The Powder Toy core have the following file extensions: .cps","title":"Extensions"},{"location":"library/the_powder_toy/#features","text":"Frontend-level settings or features that the The Powder Toy core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2715 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/the_powder_toy/#directories","text":"The The Powder Toy core's library name is 'The Powder Toy' The The Powder Toy core saves/loads to/from these directories. Frontend's Save directory File Description The Powder Toy/Saves/*.cps Simulations that have been saved to the computer. Frontend's State directory File Description *.state# State","title":"Directories"},{"location":"library/the_powder_toy/#geometry-and-timing","text":"The The Powder Toy core's core provided FPS is 60 The The Powder Toy core's core provided sample rate is 32000 Hz The The Powder Toy core's base width is (Base width) The The Powder Toy core's base height is (Base height) The The Powder Toy core's max width is (Max width) The The Powder Toy core's max height is (Max height) The The Powder Toy core's core provided aspect ratio is (Ratio)","title":"Geometry and timing"},{"location":"library/the_powder_toy/#controls","text":"Key Action TAB Switch between circle/square/triangle brush Space Pause Q / Esc Quit Z Zoom S Save stamp (+ Ctrl when STK2 is out) L Load last saved stamp K Stamp library 1-9 Set view mode P / F2 Save screenshot to .png E Bring up element search F Pause and go to next frame G Increase grid size Shift + G Decrease grid size H Show/Hide HUD Ctrl + H / F1 Show intro text D / F3 Debug mode (+ Ctrl when STK2 is out) I Invert Pressure and Velocity map W Toggle gravity modes (+ Ctrl when STK2 is out) Y Toggle air modes B Enter decoration editor menu Ctrl + B Toggle decorations on/off N Toggle Newtonian Gravity on/off U Toggle ambient heat on/off Ctrl + I Install powder toy, for loading saves/stamps by double clicking ~ Console = Reset pressure and velocity map Ctrl + = Reset Electricity [ Decrease brush size ] Increase brush size Alt + [ Decrease brush size by 1 Alt + ] Increase brush size by 1 Ctrl + C/V/X Copy/Paste/Cut Ctrl + Z Undo Ctrl + Y Redo Ctrl + Cursor drag Rectangle Shift + Cursor drag Line Middle click Sample element Alt + Left click Sample element Mouse scroll Change brush size Ctrl + Mouse scroll Change vertical brush size Shift + Mouse scroll Change horizontal brush size Shift + R Horizontal mirror for selected area when pasting stamps Ctrl + Shift + R Vertical mirror for selected area when pasting stamps R Rotate selected area counterclockwise when pasting stamps","title":"Controls"},{"location":"library/the_powder_toy/#external-links","text":"Official The Powder Toy Website Official The Powder Toy Github Repository Libretro The Powder Toy Core info file Libretro The Powder Toy Github Repository Report Libretro The Powder Toy Core Issues Here","title":"External Links"},{"location":"library/theodore/","text":"Thomson - MO/TO (Theodore) \u00b6 Background \u00b6 Theodore is a Thomson MO/TO system emulator based on Daniel Coulom's DCTO8D/DCTO9P/DCMO5 emulators. Thomson MO/TO is a family of 8-bit home computers produced by French company Thomson SA between 1982 and 1989. Theodore emulates all the main models of the MO/TO family: TO7, TO7/70, TO8, TO8D, TO9, TO9+, MO5 and MO6. It also emulates the Olivetti Prodest PC128 , a rebranded MO6 for the Italian market. The Theodore core has been authored by Thomas Lorblanch\u00e8s The Theodore core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here . Requirements \u00b6 None BIOS \u00b6 The Theodore core does not feature BIOS use. Extensions \u00b6 Content that can be loaded by the Theodore core have the following file extensions: .fd (floppy disk) .sap (floppy disk) .k7 (tape) .rom (cartridge) .m7 (cartridge) .m5 (cartridge) RetroArch database(s) that are associated with the Theodore core: Thomson - MOTO Features \u00b6 Frontend-level settings or features that the Theodore core respects. Feature Supported Restart \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2714 Native Cheats \u2715 Controls - Remapping - Multi-Mouse - Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The Theodore core's internal core name is 'theodore'. Frontend's System directory File Description theodore.cfg Config file Geometry and timing \u00b6 The Theodore core's base width is 672 pixels. The Theodore core's base height is 432 pixels. Usage \u00b6 Once the content and core are loaded the start screen is displayed as shown below. When the \"Thomson model\" core option is set to \"Auto\" (default value), the core tries to autodetect the Thomson model to emulate based on the name of the content file, and fallback to TO8 mode if it cannot. The \"Start\" button of the controller can be used to start the game. The core will then make an \"educated guess\" to start the game (cf. Theodore's README file for more info about it). Core options \u00b6 The Theodore core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Thomson model [theodore_rom] ( Auto |TO8|TO8D|TO9|TO9+|MO5|MO6|PC128|TO7|TO7/70) Auto run game [theodore_autorun] ( disabled |enabled) Virtual keyboard transparency [theodore_vkb_transparency] ( 0% |10%|20%|30%|40%|50%|60%|70%|80%|90%) Floppy write protection [theodore_floppy_write_protect] (disabled| enabled ) Tape write protection [theodore_tape_write_protect] (disabled| enabled ) Dump printer data to file [theodore_printer_emulation] ( disabled |enabled) User 1 device types \u00b6 The Theodore core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): None - Input disabled RetroPad - Joypad RetroPad w/ Analog - Joypad Other devices \u00b6 Light pen - The computer's light pen inputs are mapped to the mouse. Joypad \u00b6 RetroPad Inputs User 1 input descriptors \"Fire\" button / Press key when the virtual keyboard is displayed Virtual keyboard: move up/down Virtual keyboard: show/hide Start program (See: Usage ) When the virtual keyboard is displayed, the D-pad is used to move the selected key and the B button is used to press the selected key. Long press the B button for a sticky key. The virtual keyboard can also be used with a touch screen. The transparency of the virtual keyboard can be set using the core's \"Virtual keyboard transparency\" option. Keyboard \u00b6 RetroKeyboard Inputs Theodore Inputs Keyboard Tab STOP Keyboard Left Control CNT Keyboard Caps Lock CAPSLOCK Keyboard Backspace ACC Keyboard Home HOME Keyboard Up UP Keyboard Down DOWN Keyboard Right RIGHT Keyboard Left LEFT Keyboard Insert INS Keyboard Delete DEL Keyboard Alt RAZ Keyboard F1 F1 Keyboard F2 F2 Keyboard F3 F3 Keyboard F4 F4 Keyboard F5 F5 Keyboard Shift + F1 F6 Keyboard Shift + F2 F7 Keyboard Shift + F3 F8 Keyboard Shift + F4 F9 Keyboard Shift + F5 F10 Keyboard Left Shift Shift or Yellow key (MO5) Keyboard Right Shift Shift or BASIC key (MO5) Mouse \u00b6 RetroMouse Inputs Theodore Inputs Mouse Cursor Light pen cursor Mouse 1 Selection External Links \u00b6 Libretro Theodore Github Repository Report Libretro Theodore Core Issues Here Libretro Theodore Core info file Libretro Thomson Database Libretro Thomson Thumbnails Official DCTO8D/DCTO9P/DCMO5 Website","title":"Thomson - MO/TO (Theodore)"},{"location":"library/theodore/#thomson-moto-theodore","text":"","title":"Thomson - MO/TO (Theodore)"},{"location":"library/theodore/#background","text":"Theodore is a Thomson MO/TO system emulator based on Daniel Coulom's DCTO8D/DCTO9P/DCMO5 emulators. Thomson MO/TO is a family of 8-bit home computers produced by French company Thomson SA between 1982 and 1989. Theodore emulates all the main models of the MO/TO family: TO7, TO7/70, TO8, TO8D, TO9, TO9+, MO5 and MO6. It also emulates the Olivetti Prodest PC128 , a rebranded MO6 for the Italian market. The Theodore core has been authored by Thomas Lorblanch\u00e8s The Theodore core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Background"},{"location":"library/theodore/#requirements","text":"None","title":"Requirements"},{"location":"library/theodore/#bios","text":"The Theodore core does not feature BIOS use.","title":"BIOS"},{"location":"library/theodore/#extensions","text":"Content that can be loaded by the Theodore core have the following file extensions: .fd (floppy disk) .sap (floppy disk) .k7 (tape) .rom (cartridge) .m7 (cartridge) .m5 (cartridge) RetroArch database(s) that are associated with the Theodore core: Thomson - MOTO","title":"Extensions"},{"location":"library/theodore/#features","text":"Frontend-level settings or features that the Theodore core respects. Feature Supported Restart \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2714 Native Cheats \u2715 Controls - Remapping - Multi-Mouse - Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/theodore/#directories","text":"The Theodore core's internal core name is 'theodore'. Frontend's System directory File Description theodore.cfg Config file","title":"Directories"},{"location":"library/theodore/#geometry-and-timing","text":"The Theodore core's base width is 672 pixels. The Theodore core's base height is 432 pixels.","title":"Geometry and timing"},{"location":"library/theodore/#usage","text":"Once the content and core are loaded the start screen is displayed as shown below. When the \"Thomson model\" core option is set to \"Auto\" (default value), the core tries to autodetect the Thomson model to emulate based on the name of the content file, and fallback to TO8 mode if it cannot. The \"Start\" button of the controller can be used to start the game. The core will then make an \"educated guess\" to start the game (cf. Theodore's README file for more info about it).","title":"Usage"},{"location":"library/theodore/#core-options","text":"The Theodore core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Thomson model [theodore_rom] ( Auto |TO8|TO8D|TO9|TO9+|MO5|MO6|PC128|TO7|TO7/70) Auto run game [theodore_autorun] ( disabled |enabled) Virtual keyboard transparency [theodore_vkb_transparency] ( 0% |10%|20%|30%|40%|50%|60%|70%|80%|90%) Floppy write protection [theodore_floppy_write_protect] (disabled| enabled ) Tape write protection [theodore_tape_write_protect] (disabled| enabled ) Dump printer data to file [theodore_printer_emulation] ( disabled |enabled)","title":"Core options"},{"location":"library/theodore/#user-1-device-types","text":"The Theodore core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): None - Input disabled RetroPad - Joypad RetroPad w/ Analog - Joypad","title":"User 1 device types"},{"location":"library/theodore/#other-devices","text":"Light pen - The computer's light pen inputs are mapped to the mouse.","title":"Other devices"},{"location":"library/theodore/#joypad","text":"RetroPad Inputs User 1 input descriptors \"Fire\" button / Press key when the virtual keyboard is displayed Virtual keyboard: move up/down Virtual keyboard: show/hide Start program (See: Usage ) When the virtual keyboard is displayed, the D-pad is used to move the selected key and the B button is used to press the selected key. Long press the B button for a sticky key. The virtual keyboard can also be used with a touch screen. The transparency of the virtual keyboard can be set using the core's \"Virtual keyboard transparency\" option.","title":"Joypad"},{"location":"library/theodore/#keyboard","text":"RetroKeyboard Inputs Theodore Inputs Keyboard Tab STOP Keyboard Left Control CNT Keyboard Caps Lock CAPSLOCK Keyboard Backspace ACC Keyboard Home HOME Keyboard Up UP Keyboard Down DOWN Keyboard Right RIGHT Keyboard Left LEFT Keyboard Insert INS Keyboard Delete DEL Keyboard Alt RAZ Keyboard F1 F1 Keyboard F2 F2 Keyboard F3 F3 Keyboard F4 F4 Keyboard F5 F5 Keyboard Shift + F1 F6 Keyboard Shift + F2 F7 Keyboard Shift + F3 F8 Keyboard Shift + F4 F9 Keyboard Shift + F5 F10 Keyboard Left Shift Shift or Yellow key (MO5) Keyboard Right Shift Shift or BASIC key (MO5)","title":"Keyboard"},{"location":"library/theodore/#mouse","text":"RetroMouse Inputs Theodore Inputs Mouse Cursor Light pen cursor Mouse 1 Selection","title":"Mouse"},{"location":"library/theodore/#external-links","text":"Libretro Theodore Github Repository Report Libretro Theodore Core Issues Here Libretro Theodore Core info file Libretro Thomson Database Libretro Thomson Thumbnails Official DCTO8D/DCTO9P/DCMO5 Website","title":"External Links"},{"location":"library/tic80/","text":"TIC-80 \u00b6 Background \u00b6 TIC-80 is a fantasy computer for making, playing and sharing tiny games. The TIC-80 core has been authored by Rob Loach The TIC-80 core is licensed under MIT A summary of the licenses behind RetroArch and its cores can be found here . Requirements \u00b6 None BIOS \u00b6 The TIC-80 core does not feature BIOS use. Extensions \u00b6 Content that can be loaded by the TIC-80 core have the following file extensions: .tic (TIC-80 cart) RetroArch database(s) that are associated with the TIC-80 core: TIC-80.rdb Features \u00b6 Frontend-level settings or features that the Theodore core respects. Feature Supported Restart \u2714 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2714 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2714 Controls \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The TIC-80 core's internal core name is tic80 . Geometry and timing \u00b6 The TIC-80 core's base width is 240 pixels. The TIC-80 core's base height is 136 pixels. Usage \u00b6 Download a TIC-80 cart Example: TIC-80 Mario Bros? Launch the cart through the TIC-80 core Core options \u00b6 The TIC-80 core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Mouse API instead of Pointer [tic80_mouse] ( disabled |enabled) Mouse Cursor [tic80_mouse_cursor] ( disabled |dot|cross|arrow) Controllers \u00b6 The TIC-80 core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 - 4 device types \u00b6 None - Doesn't disable input. RetroPad - Joypad - Stay on this. RetroPad w/Analog - Joypad - There's no reason to switch to this. Controller tables \u00b6 Joypad \u00b6 Attention What the buttons do are game specific. User 1 - 4 Remap descriptors RetroPad Inputs A X Select D-Pad Down D-Pad Left D-Pad Right B Y L R External Links \u00b6 TIC-80 Github Repository Report Libretro TIC-80 Core Issues Here Libretro TIC-80 Core info file Libretro TIC-80 Database Libretro TIC-80 Thumbnails Libretro TIC-80 Cheats","title":"TIC-80"},{"location":"library/tic80/#tic-80","text":"","title":"TIC-80"},{"location":"library/tic80/#background","text":"TIC-80 is a fantasy computer for making, playing and sharing tiny games. The TIC-80 core has been authored by Rob Loach The TIC-80 core is licensed under MIT A summary of the licenses behind RetroArch and its cores can be found here .","title":"Background"},{"location":"library/tic80/#requirements","text":"None","title":"Requirements"},{"location":"library/tic80/#bios","text":"The TIC-80 core does not feature BIOS use.","title":"BIOS"},{"location":"library/tic80/#extensions","text":"Content that can be loaded by the TIC-80 core have the following file extensions: .tic (TIC-80 cart) RetroArch database(s) that are associated with the TIC-80 core: TIC-80.rdb","title":"Extensions"},{"location":"library/tic80/#features","text":"Frontend-level settings or features that the Theodore core respects. Feature Supported Restart \u2714 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2714 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2714 Controls \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/tic80/#directories","text":"The TIC-80 core's internal core name is tic80 .","title":"Directories"},{"location":"library/tic80/#geometry-and-timing","text":"The TIC-80 core's base width is 240 pixels. The TIC-80 core's base height is 136 pixels.","title":"Geometry and timing"},{"location":"library/tic80/#usage","text":"Download a TIC-80 cart Example: TIC-80 Mario Bros? Launch the cart through the TIC-80 core","title":"Usage"},{"location":"library/tic80/#core-options","text":"The TIC-80 core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Mouse API instead of Pointer [tic80_mouse] ( disabled |enabled) Mouse Cursor [tic80_mouse_cursor] ( disabled |dot|cross|arrow)","title":"Core options"},{"location":"library/tic80/#controllers","text":"The TIC-80 core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/tic80/#user-1-4-device-types","text":"None - Doesn't disable input. RetroPad - Joypad - Stay on this. RetroPad w/Analog - Joypad - There's no reason to switch to this.","title":"User 1 - 4 device types"},{"location":"library/tic80/#controller-tables","text":"","title":"Controller tables"},{"location":"library/tic80/#joypad","text":"Attention What the buttons do are game specific. User 1 - 4 Remap descriptors RetroPad Inputs A X Select D-Pad Down D-Pad Left D-Pad Right B Y L R","title":"Joypad"},{"location":"library/tic80/#external-links","text":"TIC-80 Github Repository Report Libretro TIC-80 Core Issues Here Libretro TIC-80 Core info file Libretro TIC-80 Database Libretro TIC-80 Thumbnails Libretro TIC-80 Cheats","title":"External Links"},{"location":"library/tyrquake/","text":"Quake 1 (TyrQuake) \u00b6 Background \u00b6 Libretro port of Tyrquake (Quake 1 engine). Features Runs at fixed frametimes Software bilinear filtering Software Half-Life/Quake 2-style colored lighting RGBA Chasecam / thirdperson view mode Interpolated animation applied on the keyframe animation for smooth animation The TyrQuake core has been authored by Kevin Shanahan (Tyrann) The TyrQuake core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the TyrQuake core have the following file extensions: .pak RetroArch database(s) that are associated with the TyrQuake core: Quake1 Features \u00b6 Frontend-level settings or features that the TyrQuake core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2714 Native Cheats \u2714 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2714 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2714 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The TyrQuake core's library name is 'TyrQuake' The TyrQuake core saves/loads to/from these directories. Frontend's Save directory File Description (game directory)/config.cfg Config (game directory)/*.sav Save Geometry and timing \u00b6 The TyrQuake core's core provided FPS is 60 The TyrQuake core's core provided sample rate is 44100 Hz The TyrQuake core's base width is dependent on the Resolution core option. The TyrQuake core's base height is dependent on the Resolution core option. The TyrQuake core's max width is dependent on the Resolution core option. The TyrQuake core's max height is dependent on the Resolution core option. The TyrQuake core's core provided aspect ratio is 4/3 Loading Quake and Expansion Paks \u00b6 Follow this directory structure 'id1' for the main game 'hipnotic' for the 1 st mission pack 'rogue' for the 2 nd mission pack 'dopa' for the official \"Episode 5: Dimension of the Past\" expansion Put BGM into a subfolder named music in each of them. id1/ \u251c\u2500\u2500 pak0.pak ## shareware data \u251c\u2500\u2500 pak1.pak ## registered data \u251c\u2500\u2500 music/ \u2502 \u251c\u2500\u2500 track02.ogg \u2502 \u251c\u2500\u2500 ... \u2502 \u2514\u2500\u2500 track11.ogg \u2502 hipnotic/ \u251c\u2500\u2500 pak0.pak \u251c\u2500\u2500 music/ \u2502 \u251c\u2500\u2500 track02.ogg \u2502 \u251c\u2500\u2500 ... \u2502 \u2514\u2500\u2500 track09.ogg \u2502 rogue/ \u251c\u2500\u2500 pak0.pak \u251c\u2500\u2500 music/ \u2502 \u251c\u2500\u2500 track02.ogg \u2502 \u251c\u2500\u2500 ... \u2502 \u2514\u2500\u2500 track09.ogg \u2502 dopa/ \u2514\u2500\u2500 pak0.pak Game saves and internal configuration files will be created in the frontend-defined save directory with a folder layout that mirrors the game data structure: id1/ \u251c\u2500\u2500 config.cfg \u251c\u2500\u2500 s0.sav \u251c\u2500\u2500 s1.sav \u2502 hipnotic/ \u251c\u2500\u2500 config.cfg \u251c\u2500\u2500 s0.sav \u251c\u2500\u2500 s1.sav \u2502 rogue/ \u251c\u2500\u2500 config.cfg \u251c\u2500\u2500 s0.sav \u251c\u2500\u2500 s1.sav \u2502 dopa/ \u251c\u2500\u2500 config.cfg \u251c\u2500\u2500 s0.sav \u2514\u2500\u2500 s1.sav Game saves are numbered from 's0.sav' to 's11.sav'. Soundtrack files \u00b6 TyrQuake supports playback of the original soundtrack from the base game and official mission packs' CDs. CD audio should be ripped into OGG format files, and placed into a subfolder named music of the appropriate folder (id1, hipnotic or rogue). The ripped CD tracks must be named trackXX.ogg, corresponding to the original CD track index for each audio track. Considering that the first CD track in all cases is the data track, the first audio track will always begin with track 02, which should be reflected in the filename of the ripped audio files. Username \u00b6 The TyrQuake core uses RetroArch's username setting for the in-game player name. Config \u00b6 TyrQuake's internal game settings can be found in the 'config.cfg' file inside each game's save directory. Many of these settings may be changed from the in-game menu. Notable options are as follows: VIDEO \u2192 SCREEN SIZE With the slider at the 3 rd position from the right, all HUD information is shown. With the slider at the 2 nd position from the right, the gameplay area is increased while the HUD size is reduced such that only armour, health and current ammo are shown. With the slider at the far right position, the gameplay area fills the screen and no HUD is shown. VIDEO \u2192 GAMMA Sets display brightness VIDEO \u2192 DITHER FILTERING ( OFF |ON) Enables texture smoothing. VIDEO \u2192 SMOOTH ANIMATION ( OFF |ON) Enables linear interpolation of character animation. VIDEO \u2192 SMOOTH MOVEMENT ( OFF |ON) Enables linear interpolation of character movement. GAME \u2192 CROSSHAIR ( OFF |ON) Enables display of targeting reticule. Core options \u00b6 The TyrQuake core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Colored lighting (restart) [tyrquake_colored_lighting] ( disabled |enabled) Enables colored lightning when the loaded content supports it. Requires a restart. Resolution (restart) [tyrquake_resolution] ( 320x200 |640x400|960x600|1280x800|1600x1000|1920x1200|320x240|320x480|360x200|360x240|360x400|360x480|400x224|480x272|512x224|512x240|512x384|512x512|640x224|640x240|640x448|640x480|720x576|800x480|800x600|960x720|1024x768|1280x720|1600x900|1920x1080) Configure the resolution. Requires a restart. Resolution - 320x240 Resolution - 1920x1080 Rumble [tyrquake_rumble] ( disabled |enabled) Enables joypad rumble. Invert Y Axis [tyrquake_invert_y_axis] ( disabled |enabled) Invert the gamepad right analog stick's Y axis. Analog Deadzone (percent) [tyrquake_analog_deadzone] ( 15 |20|25|30|0|5|10) Sets the deadzone of the Gamepad analog sticks when the input device type is set to 'Gamepad Classic' or 'Gamepad Modern'. User 1 device types \u00b6 The TyrQuake core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): None - Input disabled. Gamepad Classic - Joypad Gamepad Classic Alt - Joypad Gamepad Modern - Joypad Keyboard + Mouse - Keyboard and Mouse - Switch to this for keyboard and mouse input. Has keymapper support. Rumble support \u00b6 Rumble only works in the TyrQuake core when The content being ran has rumble support. The frontend being used has rumble support. The joypad device being used has rumble support. The 'Rumble' core option is set to enabled. Joypad \u00b6 User 1 Remap descriptors for 'Gamepad Classic' device type RetroPad Inputs TyrQuake inputs Jump Jump Fire Fire Toggle Run Mode Toggle Run Mode Menu Menu D-Pad Up D-Pad Up D-Pad Down D-Pad Down D-Pad Left D-Pad Left D-Pad Right D-Pad Right Cycle Weapon Cycle Weapon Freelook Freelook Strafe Left Strafe Left Strafe Right Strafe Right Look Up Look Up Look Down Look Down Move Down Move Down Swim Up Swim Up X Strafe Left/Right Y D-Pad Up/Down X D-Pad Left/Right Y Look Up/Down User 1 Remap descriptors for 'Gamepad Classic Alt' device type RetroPad Inputs TyrQuake inputs Look Down Look Down Look Left Look Left Toggle Run Mode Toggle Run Mode Menu Menu D-Pad Up D-Pad Up D-Pad Down D-Pad Down D-Pad Left D-Pad Left D-Pad Right D-Pad Right Look Right Look Right Look Up Look Up Jump Jump Fire Fire Run Run Next Weapon Next Weapon Swim Down Swim Down Previous Weapon Previous Weapon X Strafe Left/Right Y D-Pad Up/Down X D-Pad Left/Right Y Look Up/Down User 1 Remap descriptors for 'Gamepad Modern' device type RetroPad Inputs TyrQuake inputs Swim Down Swim Down Swim Up Swim Up Show Scores Show Scores Menu Menu D-Pad Up D-Pad Up D-Pad Down D-Pad Down D-Pad Left D-Pad Left D-Pad Right D-Pad Right Strafe Right Strafe Right Strafe Left Strafe Left Previous weapon Previous weapon Next weapon Next weapon Jump Jump Fire Fire Move Down Swim Up X Strafe Left/Right Y D-Pad Up/Down X Look Left/Right Y Look Up/Down In-game menu controls: Menu Function RetroPad Inputs Navigate Up Navigate Down Adjust Value Adjust Value Select Current Option Return To Previous Level/Close Menu Keyboard \u00b6 Keyboard binds are in config.cfg Mouse \u00b6 Mouse binds are in config.cfg External Links \u00b6 Official TyrQuake Website Official TyrQuake Git Repository Libretro TyrQuake Core info file Libretro TyrQuake Github Repository Report Libretro TyrQuake Core Issues Here id Software \u00b6 Doom (PrBoom)","title":"Quake 1 (TyrQuake)"},{"location":"library/tyrquake/#quake-1-tyrquake","text":"","title":"Quake 1 (TyrQuake)"},{"location":"library/tyrquake/#background","text":"Libretro port of Tyrquake (Quake 1 engine). Features Runs at fixed frametimes Software bilinear filtering Software Half-Life/Quake 2-style colored lighting RGBA Chasecam / thirdperson view mode Interpolated animation applied on the keyframe animation for smooth animation The TyrQuake core has been authored by Kevin Shanahan (Tyrann) The TyrQuake core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Background"},{"location":"library/tyrquake/#extensions","text":"Content that can be loaded by the TyrQuake core have the following file extensions: .pak RetroArch database(s) that are associated with the TyrQuake core: Quake1","title":"Extensions"},{"location":"library/tyrquake/#features","text":"Frontend-level settings or features that the TyrQuake core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2714 Native Cheats \u2714 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2714 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2714 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/tyrquake/#directories","text":"The TyrQuake core's library name is 'TyrQuake' The TyrQuake core saves/loads to/from these directories. Frontend's Save directory File Description (game directory)/config.cfg Config (game directory)/*.sav Save","title":"Directories"},{"location":"library/tyrquake/#geometry-and-timing","text":"The TyrQuake core's core provided FPS is 60 The TyrQuake core's core provided sample rate is 44100 Hz The TyrQuake core's base width is dependent on the Resolution core option. The TyrQuake core's base height is dependent on the Resolution core option. The TyrQuake core's max width is dependent on the Resolution core option. The TyrQuake core's max height is dependent on the Resolution core option. The TyrQuake core's core provided aspect ratio is 4/3","title":"Geometry and timing"},{"location":"library/tyrquake/#loading-quake-and-expansion-paks","text":"Follow this directory structure 'id1' for the main game 'hipnotic' for the 1 st mission pack 'rogue' for the 2 nd mission pack 'dopa' for the official \"Episode 5: Dimension of the Past\" expansion Put BGM into a subfolder named music in each of them. id1/ \u251c\u2500\u2500 pak0.pak ## shareware data \u251c\u2500\u2500 pak1.pak ## registered data \u251c\u2500\u2500 music/ \u2502 \u251c\u2500\u2500 track02.ogg \u2502 \u251c\u2500\u2500 ... \u2502 \u2514\u2500\u2500 track11.ogg \u2502 hipnotic/ \u251c\u2500\u2500 pak0.pak \u251c\u2500\u2500 music/ \u2502 \u251c\u2500\u2500 track02.ogg \u2502 \u251c\u2500\u2500 ... \u2502 \u2514\u2500\u2500 track09.ogg \u2502 rogue/ \u251c\u2500\u2500 pak0.pak \u251c\u2500\u2500 music/ \u2502 \u251c\u2500\u2500 track02.ogg \u2502 \u251c\u2500\u2500 ... \u2502 \u2514\u2500\u2500 track09.ogg \u2502 dopa/ \u2514\u2500\u2500 pak0.pak Game saves and internal configuration files will be created in the frontend-defined save directory with a folder layout that mirrors the game data structure: id1/ \u251c\u2500\u2500 config.cfg \u251c\u2500\u2500 s0.sav \u251c\u2500\u2500 s1.sav \u2502 hipnotic/ \u251c\u2500\u2500 config.cfg \u251c\u2500\u2500 s0.sav \u251c\u2500\u2500 s1.sav \u2502 rogue/ \u251c\u2500\u2500 config.cfg \u251c\u2500\u2500 s0.sav \u251c\u2500\u2500 s1.sav \u2502 dopa/ \u251c\u2500\u2500 config.cfg \u251c\u2500\u2500 s0.sav \u2514\u2500\u2500 s1.sav Game saves are numbered from 's0.sav' to 's11.sav'.","title":"Loading Quake and Expansion Paks"},{"location":"library/tyrquake/#soundtrack-files","text":"TyrQuake supports playback of the original soundtrack from the base game and official mission packs' CDs. CD audio should be ripped into OGG format files, and placed into a subfolder named music of the appropriate folder (id1, hipnotic or rogue). The ripped CD tracks must be named trackXX.ogg, corresponding to the original CD track index for each audio track. Considering that the first CD track in all cases is the data track, the first audio track will always begin with track 02, which should be reflected in the filename of the ripped audio files.","title":"Soundtrack files"},{"location":"library/tyrquake/#username","text":"The TyrQuake core uses RetroArch's username setting for the in-game player name.","title":"Username"},{"location":"library/tyrquake/#config","text":"TyrQuake's internal game settings can be found in the 'config.cfg' file inside each game's save directory. Many of these settings may be changed from the in-game menu. Notable options are as follows: VIDEO \u2192 SCREEN SIZE With the slider at the 3 rd position from the right, all HUD information is shown. With the slider at the 2 nd position from the right, the gameplay area is increased while the HUD size is reduced such that only armour, health and current ammo are shown. With the slider at the far right position, the gameplay area fills the screen and no HUD is shown. VIDEO \u2192 GAMMA Sets display brightness VIDEO \u2192 DITHER FILTERING ( OFF |ON) Enables texture smoothing. VIDEO \u2192 SMOOTH ANIMATION ( OFF |ON) Enables linear interpolation of character animation. VIDEO \u2192 SMOOTH MOVEMENT ( OFF |ON) Enables linear interpolation of character movement. GAME \u2192 CROSSHAIR ( OFF |ON) Enables display of targeting reticule.","title":"Config"},{"location":"library/tyrquake/#core-options","text":"The TyrQuake core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Colored lighting (restart) [tyrquake_colored_lighting] ( disabled |enabled) Enables colored lightning when the loaded content supports it. Requires a restart. Resolution (restart) [tyrquake_resolution] ( 320x200 |640x400|960x600|1280x800|1600x1000|1920x1200|320x240|320x480|360x200|360x240|360x400|360x480|400x224|480x272|512x224|512x240|512x384|512x512|640x224|640x240|640x448|640x480|720x576|800x480|800x600|960x720|1024x768|1280x720|1600x900|1920x1080) Configure the resolution. Requires a restart. Resolution - 320x240 Resolution - 1920x1080 Rumble [tyrquake_rumble] ( disabled |enabled) Enables joypad rumble. Invert Y Axis [tyrquake_invert_y_axis] ( disabled |enabled) Invert the gamepad right analog stick's Y axis. Analog Deadzone (percent) [tyrquake_analog_deadzone] ( 15 |20|25|30|0|5|10) Sets the deadzone of the Gamepad analog sticks when the input device type is set to 'Gamepad Classic' or 'Gamepad Modern'.","title":"Core options"},{"location":"library/tyrquake/#user-1-device-types","text":"The TyrQuake core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): None - Input disabled. Gamepad Classic - Joypad Gamepad Classic Alt - Joypad Gamepad Modern - Joypad Keyboard + Mouse - Keyboard and Mouse - Switch to this for keyboard and mouse input. Has keymapper support.","title":"User 1 device types"},{"location":"library/tyrquake/#rumble-support","text":"Rumble only works in the TyrQuake core when The content being ran has rumble support. The frontend being used has rumble support. The joypad device being used has rumble support. The 'Rumble' core option is set to enabled.","title":"Rumble support"},{"location":"library/tyrquake/#joypad","text":"User 1 Remap descriptors for 'Gamepad Classic' device type RetroPad Inputs TyrQuake inputs Jump Jump Fire Fire Toggle Run Mode Toggle Run Mode Menu Menu D-Pad Up D-Pad Up D-Pad Down D-Pad Down D-Pad Left D-Pad Left D-Pad Right D-Pad Right Cycle Weapon Cycle Weapon Freelook Freelook Strafe Left Strafe Left Strafe Right Strafe Right Look Up Look Up Look Down Look Down Move Down Move Down Swim Up Swim Up X Strafe Left/Right Y D-Pad Up/Down X D-Pad Left/Right Y Look Up/Down User 1 Remap descriptors for 'Gamepad Classic Alt' device type RetroPad Inputs TyrQuake inputs Look Down Look Down Look Left Look Left Toggle Run Mode Toggle Run Mode Menu Menu D-Pad Up D-Pad Up D-Pad Down D-Pad Down D-Pad Left D-Pad Left D-Pad Right D-Pad Right Look Right Look Right Look Up Look Up Jump Jump Fire Fire Run Run Next Weapon Next Weapon Swim Down Swim Down Previous Weapon Previous Weapon X Strafe Left/Right Y D-Pad Up/Down X D-Pad Left/Right Y Look Up/Down User 1 Remap descriptors for 'Gamepad Modern' device type RetroPad Inputs TyrQuake inputs Swim Down Swim Down Swim Up Swim Up Show Scores Show Scores Menu Menu D-Pad Up D-Pad Up D-Pad Down D-Pad Down D-Pad Left D-Pad Left D-Pad Right D-Pad Right Strafe Right Strafe Right Strafe Left Strafe Left Previous weapon Previous weapon Next weapon Next weapon Jump Jump Fire Fire Move Down Swim Up X Strafe Left/Right Y D-Pad Up/Down X Look Left/Right Y Look Up/Down In-game menu controls: Menu Function RetroPad Inputs Navigate Up Navigate Down Adjust Value Adjust Value Select Current Option Return To Previous Level/Close Menu","title":"Joypad"},{"location":"library/tyrquake/#keyboard","text":"Keyboard binds are in config.cfg","title":"Keyboard"},{"location":"library/tyrquake/#mouse","text":"Mouse binds are in config.cfg","title":"Mouse"},{"location":"library/tyrquake/#external-links","text":"Official TyrQuake Website Official TyrQuake Git Repository Libretro TyrQuake Core info file Libretro TyrQuake Github Repository Report Libretro TyrQuake Core Issues Here","title":"External Links"},{"location":"library/tyrquake/#id-software","text":"Doom (PrBoom)","title":"id Software"},{"location":"library/uzem/","text":"Uzebox (Uzem) \u00b6 This core currently doesn't start so this documentation will remain incomplete until it is fixed. This core currently doesn't start so this documentation will remain incomplete until it is fixed. This core currently doesn't start so this documentation will remain incomplete until it is fixed. Contribute to this documentation \u00b6 In order to propose improvements to this document, visit its corresponding source page on github . Changes are proposed using \"Pull Requests.\" There is a To-Do list for libretro/docs here You can submit suggestions or issues regarding documentation at the libretro/docs issue tracker or in our forum thread . Background \u00b6 Uzem is the official emulator for the Uzebox (A retro-minimalist 8-bit open source game console). The Uzebox is a minimal system based on a AVR ATmega644 microcontroller. Why use this core? \u00b6 Awaiting description. How to start (after installation): \u00b6 Go back to RetroArch's main menu screen. Select 'Load Content'. Browse to the folder that contains the content you want to run. Select the content that you want to run. If you are asked which core to select, choose 'Uzebox (Uzem)'. The content should now start running! Authors \u00b6 Awaiting description. License \u00b6 A summary of the licenses behind RetroArch and its cores can be found here . The Uzem core is licensed under GPLv3 Extensions \u00b6 Content that can be loaded by the Uzem core have the following file extensions: uze Databases \u00b6 RetroArch database(s) that are associated with the Uzem core: Uzebox Features \u00b6 Awaiting description. Directories \u00b6 Awaiting description. Geometry and timing \u00b6 Awaiting description. Usage \u00b6 Awaiting description. Core options \u00b6 Awaiting description. Controllers \u00b6 Awaiting description. Compatibility \u00b6 Awaiting description. External Links \u00b6 Libretro Uzem Core info file Libretro Uzem Github Repository Report Libretro Uzem Core Issues Here Official Uzem Website Official Uzem Github Repository","title":"Uzebox (Uzem)"},{"location":"library/uzem/#uzebox-uzem","text":"This core currently doesn't start so this documentation will remain incomplete until it is fixed. This core currently doesn't start so this documentation will remain incomplete until it is fixed. This core currently doesn't start so this documentation will remain incomplete until it is fixed.","title":"Uzebox (Uzem)"},{"location":"library/uzem/#contribute-to-this-documentation","text":"In order to propose improvements to this document, visit its corresponding source page on github . Changes are proposed using \"Pull Requests.\" There is a To-Do list for libretro/docs here You can submit suggestions or issues regarding documentation at the libretro/docs issue tracker or in our forum thread .","title":"Contribute to this documentation"},{"location":"library/uzem/#background","text":"Uzem is the official emulator for the Uzebox (A retro-minimalist 8-bit open source game console). The Uzebox is a minimal system based on a AVR ATmega644 microcontroller.","title":"Background"},{"location":"library/uzem/#why-use-this-core","text":"Awaiting description.","title":"Why use this core?"},{"location":"library/uzem/#how-to-start-after-installation","text":"Go back to RetroArch's main menu screen. Select 'Load Content'. Browse to the folder that contains the content you want to run. Select the content that you want to run. If you are asked which core to select, choose 'Uzebox (Uzem)'. The content should now start running!","title":"How to start (after installation):"},{"location":"library/uzem/#authors","text":"Awaiting description.","title":"Authors"},{"location":"library/uzem/#license","text":"A summary of the licenses behind RetroArch and its cores can be found here . The Uzem core is licensed under GPLv3","title":"License"},{"location":"library/uzem/#extensions","text":"Content that can be loaded by the Uzem core have the following file extensions: uze","title":"Extensions"},{"location":"library/uzem/#databases","text":"RetroArch database(s) that are associated with the Uzem core: Uzebox","title":"Databases"},{"location":"library/uzem/#features","text":"Awaiting description.","title":"Features"},{"location":"library/uzem/#directories","text":"Awaiting description.","title":"Directories"},{"location":"library/uzem/#geometry-and-timing","text":"Awaiting description.","title":"Geometry and timing"},{"location":"library/uzem/#usage","text":"Awaiting description.","title":"Usage"},{"location":"library/uzem/#core-options","text":"Awaiting description.","title":"Core options"},{"location":"library/uzem/#controllers","text":"Awaiting description.","title":"Controllers"},{"location":"library/uzem/#compatibility","text":"Awaiting description.","title":"Compatibility"},{"location":"library/uzem/#external-links","text":"Libretro Uzem Core info file Libretro Uzem Github Repository Report Libretro Uzem Core Issues Here Official Uzem Website Official Uzem Github Repository","title":"External Links"},{"location":"library/vba_m/","text":"Nintendo - Game Boy Advance (VBA-M) \u00b6 Background \u00b6 VBA-M is a Game Boy Advance emulator with the goal to improve upon VisualBoyAdvance by integrating the best features from the various builds floating around. It also supports Game Boy, Game Boy Color and Super Game Boy (borders, palette). Author/License \u00b6 The VBA-M core has been authored by Forgotten VBA-M Team The VBA-M core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here . BIOS \u00b6 Required or optional firmware files go in the frontend's system directory. Warning In order for the BIOS to be used, the 'Use BIOS file if found' core option must be set to On. Filename Description md5sum gba_bios.bin Game Boy Advance BIOS - Optional a860e8c0b6d573d191e4ec7db1b1e4f6 gb_bios.bin Game Boy BIOS - Optional 32fbbd84168d3482956eb3c5051637f5 gbc_bios.bin Game Boy Color BIOS - Optional dbfce9db9deaa2567f6a84fde55f9680 Extensions \u00b6 Content that can be loaded by the VBA-M core have the following file extensions: .gb .gbc .gba Databases \u00b6 RetroArch database(s) that are associated with the VBA-M core: Nintendo - Game Boy Nintendo - Game Boy Color Nintendo - Game Boy Advance Features \u00b6 Frontend-level settings or features that the VBA-M core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2714 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2714 Sensors \u2714 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The VBA-M core's directory name is 'VBA-M' The VBA-M core saves/loads to/from these directories. Frontend's Save directory File Description *.srm Cartridge battery save Frontend's State directory File Description *.state# State Geometry and timing \u00b6 The VBA-M core's core provided FPS is 59.72 The VBA-M core's core provided sample rate is 32768 Hz The VBA-M core's base width is GBA: 240, GB: 160 (256 with border/SGB mode) The VBA-M core's base height is GBA: 160, GB: 144 (224 with border/SGB mode) The VBA-M core's max width is 256 The VBA-M core's max height is 224 The VBA-M core's core provided aspect ratio is GBA: 3:2, GB: 10:9 (8:7 with border/SGB) Core options \u00b6 The VBA-M core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Solar sensor level [vbam_solarsensor] ( 0 |1|2|3|4|5|6|7|8|9|10) For use with Boktai games (solar cartridge games). Manually adjust ingame's solar sensor meter. Use BIOS file if found [vbam_usebios] (Off/ On ) Uses BIOS present in RetroArch's system directory. Force enable RTC [vbam_forceRTCenable] ( Off /On) Forces the internal real-time clock to be enabled regardless of rom. Usuable for rom patches that requires clock to be enabled (aka Pokemon). Sound Interpolation [vbam_soundinterpolation] (Off/ On ) Enable or disable sound filtering. Sound Filtering [vbam_soundfiltering] (0|1|2|3|4| 5 |6|7|8|9|10) Sets the cutoff-frequency for the interpolation filter. Higher value reduces more high frequencies. (GB) Color Palette [vbam_palettes] ( black and white |blue sea|dark knight|green forest|hot desert|pink dreams|weird colors|original gameboy|gba sp) Set Game Boy palettes to use. (GB) Color Palette - black and white (GB) Color Palette - blue sea (GB) Color Palette - dark knight (GB) Color Palette - green forest (GB) Color Palette - hot desert (GB) Color Palette - pink dreams (GB) Color Palette - weird colors (GB) Color Palette - original gameboy (GB) Color Palette - gba sp (GB) Emulated Hardware (Requires Restart) [vbam_gbHardware] (Automatic| Game Boy Color |Super Game Boy|Game Boy|Game Boy Advance|Super Game Boy) Selects the type of game boy handheld to emulate. Automatic will select the most appropriate model for the current game. (GB) Enable Colorizer Hack (Needs Restart) [vbam_allowcolorizerhack] ( Off /On) Allows some Colorizer/DX patched gb roms to run correctly. NOT RECOMMENDED for non-colorized patched games since this hack relies on inaccurate vram and palette access. See: https://github.com/libretro/vbam-libretro/issues/58 (GB) Show Borders [vbam_showborders] (auto| Off |On) Shows a solid-colored border around the normal window. If current game is SGB capable, an appropriate border from the cartridge will be loaded and shown instead. Show Borders - Off Show Borders - On (GB) Color Correction [vbam_gbcoloroption] ( Off /On) Applies color correction to palette. (GB) Color Correction - Off (GB) Color Correction - On Enable Turbo Buttons [vbam_turboenable] ( Off /On) Enable or disable gamepad turbo buttons. Turbo Delay (in frames) [vbam_turbodelay] (1|2| 3 |4|5|6|7...|15) Repeat rate of turbo triggers in frames. Lower value triggers more buttons per second. Analog Deadzone (%) [vbam_astick_deadzone] (5|10| 15 |20|25|30) The minimum absolute value of the analog joystick axis to move the gyro/tilt controller axis value. Sensor Sensitivity (Gyroscope) (%) [vbam_gyro_sensitivity] (10|15|20|25|30|35|40|45|50|55|60|65|70|75|80|85|90|95| 100 |105|110|115|120) Used to adjust sensitivity level for gyro-enabled games. Default bind is left analog. Sensor Sensitivity (Tilt) (%) [vbam_tilt_sensitivity] (10|15|20|25|30|35|40|45|50|55|60|65|70|75|80|85|90|95| 100 |105|110|115|120) Used to adjust sensitivity level for gyro-enabled games. Default bind is right analog. Swap Left/Right Analog [vbam_swap_astick] ( Off /On) Swaps left and right analog stick function for gyro and tilt Sound channel 1 [vbam_sound_1] (Off/ On ) Self-explanatory. Sound channel 2 [vbam_sound_2] (Off/ On ) Self-explanatory. Sound channel 3 [vbam_sound_3] (Off/ On ) Self-explanatory. Sound channel 4 [vbam_sound_4] (Off/ On ) Self-explanatory. Sound DMA channel A [vbam_sound_5] (Off/ On ) Self-explanatory. Sound DMA channel B [vbam_sound_6] (Off/ On ) Self-explanatory. Show layer 1 [vbam_layer_1] (Off/ On ) Self-explanatory. Show layer 2 [vbam_layer_2] (Off/ On ) Self-explanatory. Show layer 3 [vbam_layer_3] (Off/ On ) Self-explanatory. Show layer 4 [vbam_layer_4] (Off/ On ) Self-explanatory. Show sprite layer [vbam_layer_5] (Off/ On ) Self-explanatory. Show window layer 1 [vbam_layer_6] (Off/ On ) Self-explanatory. Show window layer 2 [vbam_layer_7] (Off/ On ) Self-explanatory. Show sprite window layer [vbam_layer_8] (Off/ On ) Self-explanatory. Controllers \u00b6 The VBA-M core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 device types \u00b6 None - Input disabled. GBA Joypad - Joypad Controller tables \u00b6 Joypad \u00b6 User 1 Remap descriptors RetroPad Inputs B Turbo B Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A Turbo A L R Solar Sensor (Darker) Solar Sensor (Lighter) Tilt X-Axis Tilt X-Yxis Gyro Compatibility \u00b6 Game Issue External Links \u00b6 Official VBA-M Website Official VBA-M Github Repository Libretro VBA-M Core info file Libretro VBA-M Github Repository Report Libretro VBA-M Core Issues Here See also \u00b6 Nintendo - Game Boy Advance \u00b6 Nintendo - Game Boy Advance (Beetle GBA) Nintendo - Game Boy Advance (gpSP) Nintendo - Game Boy Advance (Meteor) Nintendo - Game Boy Advance (mGBA) Nintendo - Game Boy Advance (TempGBA) Nintendo - Game Boy Advance (VBA Next) Nintendo - Game Boy (+ Color) \u00b6 Nintendo - Game Boy / Color (Emux GB) Nintendo - Game Boy / Color (Gambatte) Nintendo - Game Boy / Color (Gearboy) Nintendo - Game Boy / Color (SameBoy) Nintendo - Game Boy / Color (TGB Dual) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (nSide Balanced) Nintendo - SNES / Famicom (Mesen-S)","title":"Nintendo - Game Boy Advance (VBA-M)"},{"location":"library/vba_m/#nintendo-game-boy-advance-vba-m","text":"","title":"Nintendo - Game Boy Advance (VBA-M)"},{"location":"library/vba_m/#background","text":"VBA-M is a Game Boy Advance emulator with the goal to improve upon VisualBoyAdvance by integrating the best features from the various builds floating around. It also supports Game Boy, Game Boy Color and Super Game Boy (borders, palette).","title":"Background"},{"location":"library/vba_m/#authorlicense","text":"The VBA-M core has been authored by Forgotten VBA-M Team The VBA-M core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/vba_m/#bios","text":"Required or optional firmware files go in the frontend's system directory. Warning In order for the BIOS to be used, the 'Use BIOS file if found' core option must be set to On. Filename Description md5sum gba_bios.bin Game Boy Advance BIOS - Optional a860e8c0b6d573d191e4ec7db1b1e4f6 gb_bios.bin Game Boy BIOS - Optional 32fbbd84168d3482956eb3c5051637f5 gbc_bios.bin Game Boy Color BIOS - Optional dbfce9db9deaa2567f6a84fde55f9680","title":"BIOS"},{"location":"library/vba_m/#extensions","text":"Content that can be loaded by the VBA-M core have the following file extensions: .gb .gbc .gba","title":"Extensions"},{"location":"library/vba_m/#databases","text":"RetroArch database(s) that are associated with the VBA-M core: Nintendo - Game Boy Nintendo - Game Boy Color Nintendo - Game Boy Advance","title":"Databases"},{"location":"library/vba_m/#features","text":"Frontend-level settings or features that the VBA-M core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2714 Native Cheats \u2714 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2714 Sensors \u2714 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/vba_m/#directories","text":"The VBA-M core's directory name is 'VBA-M' The VBA-M core saves/loads to/from these directories. Frontend's Save directory File Description *.srm Cartridge battery save Frontend's State directory File Description *.state# State","title":"Directories"},{"location":"library/vba_m/#geometry-and-timing","text":"The VBA-M core's core provided FPS is 59.72 The VBA-M core's core provided sample rate is 32768 Hz The VBA-M core's base width is GBA: 240, GB: 160 (256 with border/SGB mode) The VBA-M core's base height is GBA: 160, GB: 144 (224 with border/SGB mode) The VBA-M core's max width is 256 The VBA-M core's max height is 224 The VBA-M core's core provided aspect ratio is GBA: 3:2, GB: 10:9 (8:7 with border/SGB)","title":"Geometry and timing"},{"location":"library/vba_m/#core-options","text":"The VBA-M core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Solar sensor level [vbam_solarsensor] ( 0 |1|2|3|4|5|6|7|8|9|10) For use with Boktai games (solar cartridge games). Manually adjust ingame's solar sensor meter. Use BIOS file if found [vbam_usebios] (Off/ On ) Uses BIOS present in RetroArch's system directory. Force enable RTC [vbam_forceRTCenable] ( Off /On) Forces the internal real-time clock to be enabled regardless of rom. Usuable for rom patches that requires clock to be enabled (aka Pokemon). Sound Interpolation [vbam_soundinterpolation] (Off/ On ) Enable or disable sound filtering. Sound Filtering [vbam_soundfiltering] (0|1|2|3|4| 5 |6|7|8|9|10) Sets the cutoff-frequency for the interpolation filter. Higher value reduces more high frequencies. (GB) Color Palette [vbam_palettes] ( black and white |blue sea|dark knight|green forest|hot desert|pink dreams|weird colors|original gameboy|gba sp) Set Game Boy palettes to use. (GB) Color Palette - black and white (GB) Color Palette - blue sea (GB) Color Palette - dark knight (GB) Color Palette - green forest (GB) Color Palette - hot desert (GB) Color Palette - pink dreams (GB) Color Palette - weird colors (GB) Color Palette - original gameboy (GB) Color Palette - gba sp (GB) Emulated Hardware (Requires Restart) [vbam_gbHardware] (Automatic| Game Boy Color |Super Game Boy|Game Boy|Game Boy Advance|Super Game Boy) Selects the type of game boy handheld to emulate. Automatic will select the most appropriate model for the current game. (GB) Enable Colorizer Hack (Needs Restart) [vbam_allowcolorizerhack] ( Off /On) Allows some Colorizer/DX patched gb roms to run correctly. NOT RECOMMENDED for non-colorized patched games since this hack relies on inaccurate vram and palette access. See: https://github.com/libretro/vbam-libretro/issues/58 (GB) Show Borders [vbam_showborders] (auto| Off |On) Shows a solid-colored border around the normal window. If current game is SGB capable, an appropriate border from the cartridge will be loaded and shown instead. Show Borders - Off Show Borders - On (GB) Color Correction [vbam_gbcoloroption] ( Off /On) Applies color correction to palette. (GB) Color Correction - Off (GB) Color Correction - On Enable Turbo Buttons [vbam_turboenable] ( Off /On) Enable or disable gamepad turbo buttons. Turbo Delay (in frames) [vbam_turbodelay] (1|2| 3 |4|5|6|7...|15) Repeat rate of turbo triggers in frames. Lower value triggers more buttons per second. Analog Deadzone (%) [vbam_astick_deadzone] (5|10| 15 |20|25|30) The minimum absolute value of the analog joystick axis to move the gyro/tilt controller axis value. Sensor Sensitivity (Gyroscope) (%) [vbam_gyro_sensitivity] (10|15|20|25|30|35|40|45|50|55|60|65|70|75|80|85|90|95| 100 |105|110|115|120) Used to adjust sensitivity level for gyro-enabled games. Default bind is left analog. Sensor Sensitivity (Tilt) (%) [vbam_tilt_sensitivity] (10|15|20|25|30|35|40|45|50|55|60|65|70|75|80|85|90|95| 100 |105|110|115|120) Used to adjust sensitivity level for gyro-enabled games. Default bind is right analog. Swap Left/Right Analog [vbam_swap_astick] ( Off /On) Swaps left and right analog stick function for gyro and tilt Sound channel 1 [vbam_sound_1] (Off/ On ) Self-explanatory. Sound channel 2 [vbam_sound_2] (Off/ On ) Self-explanatory. Sound channel 3 [vbam_sound_3] (Off/ On ) Self-explanatory. Sound channel 4 [vbam_sound_4] (Off/ On ) Self-explanatory. Sound DMA channel A [vbam_sound_5] (Off/ On ) Self-explanatory. Sound DMA channel B [vbam_sound_6] (Off/ On ) Self-explanatory. Show layer 1 [vbam_layer_1] (Off/ On ) Self-explanatory. Show layer 2 [vbam_layer_2] (Off/ On ) Self-explanatory. Show layer 3 [vbam_layer_3] (Off/ On ) Self-explanatory. Show layer 4 [vbam_layer_4] (Off/ On ) Self-explanatory. Show sprite layer [vbam_layer_5] (Off/ On ) Self-explanatory. Show window layer 1 [vbam_layer_6] (Off/ On ) Self-explanatory. Show window layer 2 [vbam_layer_7] (Off/ On ) Self-explanatory. Show sprite window layer [vbam_layer_8] (Off/ On ) Self-explanatory.","title":"Core options"},{"location":"library/vba_m/#controllers","text":"The VBA-M core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/vba_m/#user-1-device-types","text":"None - Input disabled. GBA Joypad - Joypad","title":"User 1 device types"},{"location":"library/vba_m/#controller-tables","text":"","title":"Controller tables"},{"location":"library/vba_m/#joypad","text":"User 1 Remap descriptors RetroPad Inputs B Turbo B Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A Turbo A L R Solar Sensor (Darker) Solar Sensor (Lighter) Tilt X-Axis Tilt X-Yxis Gyro","title":"Joypad"},{"location":"library/vba_m/#compatibility","text":"Game Issue","title":"Compatibility"},{"location":"library/vba_m/#external-links","text":"Official VBA-M Website Official VBA-M Github Repository Libretro VBA-M Core info file Libretro VBA-M Github Repository Report Libretro VBA-M Core Issues Here","title":"External Links"},{"location":"library/vba_m/#see-also","text":"","title":"See also"},{"location":"library/vba_m/#nintendo-game-boy-advance","text":"Nintendo - Game Boy Advance (Beetle GBA) Nintendo - Game Boy Advance (gpSP) Nintendo - Game Boy Advance (Meteor) Nintendo - Game Boy Advance (mGBA) Nintendo - Game Boy Advance (TempGBA) Nintendo - Game Boy Advance (VBA Next)","title":"Nintendo - Game Boy Advance"},{"location":"library/vba_m/#nintendo-game-boy-color","text":"Nintendo - Game Boy / Color (Emux GB) Nintendo - Game Boy / Color (Gambatte) Nintendo - Game Boy / Color (Gearboy) Nintendo - Game Boy / Color (SameBoy) Nintendo - Game Boy / Color (TGB Dual) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (nSide Balanced) Nintendo - SNES / Famicom (Mesen-S)","title":"Nintendo - Game Boy (+ Color)"},{"location":"library/vba_next/","text":"Nintendo - Game Boy Advance (VBA Next) \u00b6 Background \u00b6 VBA Next is a Game Boy Advance emulator based on VBA-M 2011 with backported patches for performance and compatibility improvements. Author/License \u00b6 The VBA Next core has been authored by Forgotten VBA-M Team Squarepusher The VBA Next core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the VBA Next core have the following file extensions: .gba Databases \u00b6 RetroArch database(s) that are associated with the VBA Next core: Nintendo - Game Boy Advance BIOS \u00b6 Required or optional firmware files go in the frontend's system directory. Warning In order for the Game Boy Advance BIOS to be used, the 'Use bios if available' core option must be set to On. Filename Description md5sum gba_bios.bin Game Boy Advance Image - Optional a860e8c0b6d573d191e4ec7db1b1e4f6 Features \u00b6 Frontend-level settings or features that the VBA Next core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The VBA Next core's directory name is 'VBA Next' The VBA Next core saves/loads to/from these directories. Frontend's Save directory 'content-name'.srm (Cartridge battery save) Frontend's State directory 'content-name'.state# (State) Geometry and timing \u00b6 The VBA Next core's core provided FPS is 59.727 The VBA Next core's core provided sample rate is 32000 Hz The VBA Next core's core provided aspect ratio is 3/2 Core options \u00b6 The VBA Next core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Use bios if available (Restart) [vbanext_bios] (Off/ On ) Uses BIOS present in RetroArch's system directory. Look at the BIOS section for more information. Use bios if available - On Controllers \u00b6 The VBA Next core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 device types \u00b6 None - Doesn't disable input RetroPad - Joypad RetroPad w/Analog - Joypad - There's no reason to switch to this. Controller tables \u00b6 Joypad \u00b6 User 1 Remap descriptors RetroPad Inputs B Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A L R Compatibility \u00b6 Game Issue Boktai Trilogy The solar sensor is not emulated. Croket! 2 \u2013 Yami no Bank to Banqueen Heavy slowdown when approaching the snowman in the beginning. Digimon Racing (Europe) Freezes during the intro. This can be avoided by enabling linking in the standalone VBA-M release. Drome Racers Only shows a black screen after the THQ logo. Hamtaro: Ham-Ham Games Locks up if the opening cinematics aren\u2019t skipped. Hot Wheels - Stunt Track Challenge Resets itself when trying to go in-game. Jurassic Park III: Park Builder Unreadable glitched text. Koro Koro Puzzle Happy Panechu! The tilt sensor is not emulated. Moto GP Black screen, loud screeching noise. Phantasy Star Collection Digital Eclipse logo sound effect is missing. Phantasy Star 1 flickers. SSX 3 Graphics glitches. Seems pitch-related. (1) Super Mario Advance 2: Super Mario World (Europe) The program crashes during the final fight, when Bowser approaches (zoom mode 7) WarioWare: Twisted! The tilt sensor is not emulated. Yoshi\u2019s Universal Gravitation The tilt sensor is not emulated. 1 External Links \u00b6 Libretro VBA Next Core info file Libretro VBA Next Github Repository Report Libretro VBA Next Core Issues Here See also \u00b6 Nintendo - Game Boy Advance \u00b6 Nintendo - Game Boy Advance (Beetle GBA) Nintendo - Game Boy Advance (gpSP) Nintendo - Game Boy Advance (Meteor) Nintendo - Game Boy Advance (mGBA) Nintendo - Game Boy Advance (TempGBA) Nintendo - Game Boy Advance (VBA-M)","title":"Nintendo - Game Boy Advance (VBA Next)"},{"location":"library/vba_next/#nintendo-game-boy-advance-vba-next","text":"","title":"Nintendo - Game Boy Advance (VBA Next)"},{"location":"library/vba_next/#background","text":"VBA Next is a Game Boy Advance emulator based on VBA-M 2011 with backported patches for performance and compatibility improvements.","title":"Background"},{"location":"library/vba_next/#authorlicense","text":"The VBA Next core has been authored by Forgotten VBA-M Team Squarepusher The VBA Next core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/vba_next/#extensions","text":"Content that can be loaded by the VBA Next core have the following file extensions: .gba","title":"Extensions"},{"location":"library/vba_next/#databases","text":"RetroArch database(s) that are associated with the VBA Next core: Nintendo - Game Boy Advance","title":"Databases"},{"location":"library/vba_next/#bios","text":"Required or optional firmware files go in the frontend's system directory. Warning In order for the Game Boy Advance BIOS to be used, the 'Use bios if available' core option must be set to On. Filename Description md5sum gba_bios.bin Game Boy Advance Image - Optional a860e8c0b6d573d191e4ec7db1b1e4f6","title":"BIOS"},{"location":"library/vba_next/#features","text":"Frontend-level settings or features that the VBA Next core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 RetroAchievements \u2714 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/vba_next/#directories","text":"The VBA Next core's directory name is 'VBA Next' The VBA Next core saves/loads to/from these directories. Frontend's Save directory 'content-name'.srm (Cartridge battery save) Frontend's State directory 'content-name'.state# (State)","title":"Directories"},{"location":"library/vba_next/#geometry-and-timing","text":"The VBA Next core's core provided FPS is 59.727 The VBA Next core's core provided sample rate is 32000 Hz The VBA Next core's core provided aspect ratio is 3/2","title":"Geometry and timing"},{"location":"library/vba_next/#core-options","text":"The VBA Next core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Use bios if available (Restart) [vbanext_bios] (Off/ On ) Uses BIOS present in RetroArch's system directory. Look at the BIOS section for more information. Use bios if available - On","title":"Core options"},{"location":"library/vba_next/#controllers","text":"The VBA Next core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/vba_next/#user-1-device-types","text":"None - Doesn't disable input RetroPad - Joypad RetroPad w/Analog - Joypad - There's no reason to switch to this.","title":"User 1 device types"},{"location":"library/vba_next/#controller-tables","text":"","title":"Controller tables"},{"location":"library/vba_next/#joypad","text":"User 1 Remap descriptors RetroPad Inputs B Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A L R","title":"Joypad"},{"location":"library/vba_next/#compatibility","text":"Game Issue Boktai Trilogy The solar sensor is not emulated. Croket! 2 \u2013 Yami no Bank to Banqueen Heavy slowdown when approaching the snowman in the beginning. Digimon Racing (Europe) Freezes during the intro. This can be avoided by enabling linking in the standalone VBA-M release. Drome Racers Only shows a black screen after the THQ logo. Hamtaro: Ham-Ham Games Locks up if the opening cinematics aren\u2019t skipped. Hot Wheels - Stunt Track Challenge Resets itself when trying to go in-game. Jurassic Park III: Park Builder Unreadable glitched text. Koro Koro Puzzle Happy Panechu! The tilt sensor is not emulated. Moto GP Black screen, loud screeching noise. Phantasy Star Collection Digital Eclipse logo sound effect is missing. Phantasy Star 1 flickers. SSX 3 Graphics glitches. Seems pitch-related. (1) Super Mario Advance 2: Super Mario World (Europe) The program crashes during the final fight, when Bowser approaches (zoom mode 7) WarioWare: Twisted! The tilt sensor is not emulated. Yoshi\u2019s Universal Gravitation The tilt sensor is not emulated. 1","title":"Compatibility"},{"location":"library/vba_next/#external-links","text":"Libretro VBA Next Core info file Libretro VBA Next Github Repository Report Libretro VBA Next Core Issues Here","title":"External Links"},{"location":"library/vba_next/#see-also","text":"","title":"See also"},{"location":"library/vba_next/#nintendo-game-boy-advance","text":"Nintendo - Game Boy Advance (Beetle GBA) Nintendo - Game Boy Advance (gpSP) Nintendo - Game Boy Advance (Meteor) Nintendo - Game Boy Advance (mGBA) Nintendo - Game Boy Advance (TempGBA) Nintendo - Game Boy Advance (VBA-M)","title":"Nintendo - Game Boy Advance"},{"location":"library/vecx/","text":"Vectrex (vecx) \u00b6 Background \u00b6 vecx is an emulator for the vector-display based Vectrex video game console. Author(s): Valavan Manohararajah|John Hawthorn|Nikita Zimin|Demeth Contribute to this documentation \u00b6 In order to propose improvements to this document, visit it's corresponding source page on github . Changes are proposed using \"Pull Requests.\" License \u00b6 GPLv3 Extensions \u00b6 bin|vec BIOS \u00b6 The vecx core does not feature BIOS use. Features \u00b6 Feature Supported Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controllers \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Options \u00b6 The vecx core has the following options that can be tweaked from the core options menu. The default setting is bolded. Res Multiplier ( 1 -4) Res Multiplier - 1 Res Multiplier - 4 Controllers \u00b6 The vecx core supports one controller setting: RetroPad vecx RetroPad 2 4 D-pad 1 3 Compatibility \u00b6 Unknown External Links \u00b6 Libretro Repository Report Core Issues Here Official GitHub Repository of the SDL port","title":"GCE - Vectrex (vecx)"},{"location":"library/vecx/#vectrex-vecx","text":"","title":"Vectrex (vecx)"},{"location":"library/vecx/#background","text":"vecx is an emulator for the vector-display based Vectrex video game console. Author(s): Valavan Manohararajah|John Hawthorn|Nikita Zimin|Demeth","title":"Background"},{"location":"library/vecx/#contribute-to-this-documentation","text":"In order to propose improvements to this document, visit it's corresponding source page on github . Changes are proposed using \"Pull Requests.\"","title":"Contribute to this documentation"},{"location":"library/vecx/#license","text":"GPLv3","title":"License"},{"location":"library/vecx/#extensions","text":"bin|vec","title":"Extensions"},{"location":"library/vecx/#bios","text":"The vecx core does not feature BIOS use.","title":"BIOS"},{"location":"library/vecx/#features","text":"Feature Supported Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controllers \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715","title":"Features"},{"location":"library/vecx/#options","text":"The vecx core has the following options that can be tweaked from the core options menu. The default setting is bolded. Res Multiplier ( 1 -4) Res Multiplier - 1 Res Multiplier - 4","title":"Options"},{"location":"library/vecx/#controllers","text":"The vecx core supports one controller setting: RetroPad vecx RetroPad 2 4 D-pad 1 3","title":"Controllers"},{"location":"library/vecx/#compatibility","text":"Unknown","title":"Compatibility"},{"location":"library/vecx/#external-links","text":"Libretro Repository Report Core Issues Here Official GitHub Repository of the SDL port","title":"External Links"},{"location":"library/vemulator/","text":"VeMUlator \u00b6 Background \u00b6 This is a port of the Android SEGA Dreamcast VMU emulator \"VeMUlator\" for libretro, it was translated from Java to C++ and then implemented the libretro.h callbacks. Author/License \u00b6 The VeMUlator core has been authored by Mahmoud Jaoune The VeMUlator core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the VeMUlator core have the following file extensions: .vms .dci .bin Features \u00b6 Frontend-level settings or features that the VeMUlator core respects. Feature Supported Restart - Screenshots \u2714 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping - Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The VeMUlator core's internal core name is 'VeMUlator' Geometry and timing \u00b6 The VeMUlator core's core provided FPS is 60 The VeMUlator core's core provided sample rate is 32768 Hz The VeMUlator core's core provided aspect ratio is 3/2 Core options \u00b6 The VeMUlator core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Enable flash write (.bin, requires restart) [enable_flash_write] ( enabled |disabled) Self-explanatory. Controllers \u00b6 The VeMUlator core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 device types \u00b6 None - Doesn't disable input. There's no reason to switch to this. RetroPad - Joypad - Stay on this. RetroPad w/Analog - Joypad - Same as RetroPad. There's no reason to switch to this. Controller tables \u00b6 Joypad \u00b6 RetroPad Inputs VeMUlator core Inputs B Start Up Down Left Right A Compatibility \u00b6 Known issues: Timer problems (Mainly T0, due to lack of documentation of the VMU.) Sound not being synchronized with the system. External Links \u00b6 Official/Libretro VeMUlator Github Repository Libretro VeMUlator Core info file Report Libretro VeMUlator Core Issues Here","title":"VeMUlator"},{"location":"library/vemulator/#vemulator","text":"","title":"VeMUlator"},{"location":"library/vemulator/#background","text":"This is a port of the Android SEGA Dreamcast VMU emulator \"VeMUlator\" for libretro, it was translated from Java to C++ and then implemented the libretro.h callbacks.","title":"Background"},{"location":"library/vemulator/#authorlicense","text":"The VeMUlator core has been authored by Mahmoud Jaoune The VeMUlator core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/vemulator/#extensions","text":"Content that can be loaded by the VeMUlator core have the following file extensions: .vms .dci .bin","title":"Extensions"},{"location":"library/vemulator/#features","text":"Frontend-level settings or features that the VeMUlator core respects. Feature Supported Restart - Screenshots \u2714 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping - Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/vemulator/#directories","text":"The VeMUlator core's internal core name is 'VeMUlator'","title":"Directories"},{"location":"library/vemulator/#geometry-and-timing","text":"The VeMUlator core's core provided FPS is 60 The VeMUlator core's core provided sample rate is 32768 Hz The VeMUlator core's core provided aspect ratio is 3/2","title":"Geometry and timing"},{"location":"library/vemulator/#core-options","text":"The VeMUlator core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Enable flash write (.bin, requires restart) [enable_flash_write] ( enabled |disabled) Self-explanatory.","title":"Core options"},{"location":"library/vemulator/#controllers","text":"The VeMUlator core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/vemulator/#user-1-device-types","text":"None - Doesn't disable input. There's no reason to switch to this. RetroPad - Joypad - Stay on this. RetroPad w/Analog - Joypad - Same as RetroPad. There's no reason to switch to this.","title":"User 1 device types"},{"location":"library/vemulator/#controller-tables","text":"","title":"Controller tables"},{"location":"library/vemulator/#joypad","text":"RetroPad Inputs VeMUlator core Inputs B Start Up Down Left Right A","title":"Joypad"},{"location":"library/vemulator/#compatibility","text":"Known issues: Timer problems (Mainly T0, due to lack of documentation of the VMU.) Sound not being synchronized with the system.","title":"Compatibility"},{"location":"library/vemulator/#external-links","text":"Official/Libretro VeMUlator Github Repository Libretro VeMUlator Core info file Report Libretro VeMUlator Core Issues Here","title":"External Links"},{"location":"library/video_processor/","text":"Video Processor \u00b6 Background \u00b6 Libretro core for V4L2 capture devices The basic idea is this -- plug your legacy console into a capture device and use RetroArch to upscale it and apply shaders to taste. How to start the Video Processor core: \u00b6 To start the Video Processor core, go to RetroArch's main menu screen. Select 'Load Core', then 'Start Video Processor'. The content should now start running! Author/License \u00b6 The Video Processor core has been authored by Jared McNeill The Video Processor core is licensed under BSD-2-Clause A summary of the licenses behind RetroArch and its cores can be found here . Features \u00b6 Frontend-level settings or features that the Video Processor core respects. Feature Supported Restart - Screenshots - Saves - States - Rewind - Netplay - Core Options - RetroAchievements - RetroArch Cheats - Native Cheats - Controls - Remapping - Multi-Mouse - Rumble - Sensors - Camera - Location - Subsystem - Softpatching - Disk Control - Username - Language - Crop Overscan - LEDs - Directories \u00b6 The Video Processor core's internal core name is 'V4L2' Geometry and timing \u00b6 The Video Processor core's core provided FPS is (FPS) The Video Processor core's core provided sample rate is 48000 Hz The Video Processor core's core provided aspect ratio is (Ratio) Usage \u00b6 Awaiting description Controllers \u00b6 The Video Processor core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User # - # device types \u00b6 Awaiting description. Joypad \u00b6 Awaiting description. External Links \u00b6 Libretro Video Processor Github Repository Report Libretro Video Processor Core Issues Here","title":"Video Processor"},{"location":"library/video_processor/#video-processor","text":"","title":"Video Processor"},{"location":"library/video_processor/#background","text":"Libretro core for V4L2 capture devices The basic idea is this -- plug your legacy console into a capture device and use RetroArch to upscale it and apply shaders to taste.","title":"Background"},{"location":"library/video_processor/#how-to-start-the-video-processor-core","text":"To start the Video Processor core, go to RetroArch's main menu screen. Select 'Load Core', then 'Start Video Processor'. The content should now start running!","title":"How to start the Video Processor core:"},{"location":"library/video_processor/#authorlicense","text":"The Video Processor core has been authored by Jared McNeill The Video Processor core is licensed under BSD-2-Clause A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/video_processor/#features","text":"Frontend-level settings or features that the Video Processor core respects. Feature Supported Restart - Screenshots - Saves - States - Rewind - Netplay - Core Options - RetroAchievements - RetroArch Cheats - Native Cheats - Controls - Remapping - Multi-Mouse - Rumble - Sensors - Camera - Location - Subsystem - Softpatching - Disk Control - Username - Language - Crop Overscan - LEDs -","title":"Features"},{"location":"library/video_processor/#directories","text":"The Video Processor core's internal core name is 'V4L2'","title":"Directories"},{"location":"library/video_processor/#geometry-and-timing","text":"The Video Processor core's core provided FPS is (FPS) The Video Processor core's core provided sample rate is 48000 Hz The Video Processor core's core provided aspect ratio is (Ratio)","title":"Geometry and timing"},{"location":"library/video_processor/#usage","text":"Awaiting description","title":"Usage"},{"location":"library/video_processor/#controllers","text":"The Video Processor core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/video_processor/#user-device-types","text":"Awaiting description.","title":"User # - # device types"},{"location":"library/video_processor/#joypad","text":"Awaiting description.","title":"Joypad"},{"location":"library/video_processor/#external-links","text":"Libretro Video Processor Github Repository Report Libretro Video Processor Core Issues Here","title":"External Links"},{"location":"library/virtual_jaguar/","text":"Atari - Jaguar (Virtual Jaguar) \u00b6 Background \u00b6 Virtual Jaguar is a portable Jaguar emulator which is based on the source code of what used to be Potato Emulation. Author/License \u00b6 The Virtual Jaguar core has been authored by David Raingeard Shamus The Virtual Jaguar core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the Virtual Jaguar core have the following file extensions: .j64 .jag .rom .abs .cof .bin .prg Databases \u00b6 RetroArch database(s) that are associated with the Virtual Jaguar core: Atari - Jaguar Features \u00b6 Frontend-level settings or features that the Virtual Jaguar core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The Virtual Jaguar core's internal core name is 'Virtual Jaguar' The Virtual Jaguar core saves/loads to/from these directories. Frontend's Save directory File Description *.srm Cartridge EEPROM save *.cdrom.srm CD-ROM EEPROM save Note: When performing an in-game save, the Virtual Jaguar core creates both a Cartridge EEPROM save file and a CD-ROM EEPROM save file, regardless of the game type. Geometry and timing \u00b6 The Virtual Jaguar core's core provided FPS is 50 for PAL games and 60 for NTSC games. The Virtual Jaguar core's core provided sample rate is 48000 Hz The Virtual Jaguar core's core provided aspect ratio is 4/3 Core options \u00b6 The Virtual Jaguar core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Fast Blitter [virtualjaguar_usefastblitter] ( disabled |enabled) This option will force Virtual Jaguar to use the older, less compatible yet faster blitter. Some games will not work properly with this option on. Doom Res Hack [virtualjaguar_doom_res_hack] ( disabled |enabled) A hack that needs to be enabled for Doom to run at its correct resolution. Doom Res Hack - Disabled Doom Res Hack - Enabled Bios [virtualjaguar_bios] ( disabled |enabled) Enables BIOS loading sequence. Bios - Enabled Pal (Restart) [virtualjaguar_pal] ( disabled |enabled) NTSC to PAL switch. Setting this to on switches to PAL mode. Controllers \u00b6 The Virtual Jaguar core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 - 2 device types \u00b6 None - Doesn't disable input. There's no reason to switch to this. RetroPad - Joypad - Stay on this. RetroPad w/Analog - Joypad - Same as RetroPad. There's no reason to switch to this. Controller tables \u00b6 Joypad \u00b6 User 1 - 2 Remap descriptors RetroPad Inputs B C Pause Option D-Pad Up D-Pad Down D-Pad Left D-Pad Right A Numpad 0 Numpad 1 Numpad 2 Numpad 3 Numpad 4 Numpad 5 Numpad 6 Keyboard \u00b6 User 1 Joypad Descriptors Keyboard Inputs Numpad 0 0 Numpad 1 1 Numpad 2 2 Numpad 3 3 Numpad 4 4 Numpad 5 5 Numpad 6 6 Numpad 7 7 Numpad 8 8 Numpad 9 9 Numpad * - Numpad # = ## Compatibility A reference compatibility table can be found on the bottom of this page Game Issue Cybermorph Graphics glitches. (1) Doom Enable Doom core option hack for proper graphics pitch. Iron Soldier Hangs after selecting a stage. Iron Soldier 2 Hangs after selecting a stage. Audio glitches. Kasumi Ninja Graphics glitches. Missing background layers (2) Ruiner Pinball Doesn't boot. Super Burnout Hangs after selecting a track. Towers II Heavy flickering. Wolfenstein 3D ROM version doesn't boot, J64 version does. (1) (2) External Links \u00b6 Official Virtual Jaguar Website Official Virtual Jaguar Git Repository Libretro Virtual Jaguar Core info file Libretro Virtual Jaguar Github Repository Report Libretro Virtual Jaguar Core Issues Here","title":"Atari - Jaguar (Virtual Jaguar)"},{"location":"library/virtual_jaguar/#atari-jaguar-virtual-jaguar","text":"","title":"Atari - Jaguar (Virtual Jaguar)"},{"location":"library/virtual_jaguar/#background","text":"Virtual Jaguar is a portable Jaguar emulator which is based on the source code of what used to be Potato Emulation.","title":"Background"},{"location":"library/virtual_jaguar/#authorlicense","text":"The Virtual Jaguar core has been authored by David Raingeard Shamus The Virtual Jaguar core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/virtual_jaguar/#extensions","text":"Content that can be loaded by the Virtual Jaguar core have the following file extensions: .j64 .jag .rom .abs .cof .bin .prg","title":"Extensions"},{"location":"library/virtual_jaguar/#databases","text":"RetroArch database(s) that are associated with the Virtual Jaguar core: Atari - Jaguar","title":"Databases"},{"location":"library/virtual_jaguar/#features","text":"Frontend-level settings or features that the Virtual Jaguar core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/virtual_jaguar/#directories","text":"The Virtual Jaguar core's internal core name is 'Virtual Jaguar' The Virtual Jaguar core saves/loads to/from these directories. Frontend's Save directory File Description *.srm Cartridge EEPROM save *.cdrom.srm CD-ROM EEPROM save Note: When performing an in-game save, the Virtual Jaguar core creates both a Cartridge EEPROM save file and a CD-ROM EEPROM save file, regardless of the game type.","title":"Directories"},{"location":"library/virtual_jaguar/#geometry-and-timing","text":"The Virtual Jaguar core's core provided FPS is 50 for PAL games and 60 for NTSC games. The Virtual Jaguar core's core provided sample rate is 48000 Hz The Virtual Jaguar core's core provided aspect ratio is 4/3","title":"Geometry and timing"},{"location":"library/virtual_jaguar/#core-options","text":"The Virtual Jaguar core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Fast Blitter [virtualjaguar_usefastblitter] ( disabled |enabled) This option will force Virtual Jaguar to use the older, less compatible yet faster blitter. Some games will not work properly with this option on. Doom Res Hack [virtualjaguar_doom_res_hack] ( disabled |enabled) A hack that needs to be enabled for Doom to run at its correct resolution. Doom Res Hack - Disabled Doom Res Hack - Enabled Bios [virtualjaguar_bios] ( disabled |enabled) Enables BIOS loading sequence. Bios - Enabled Pal (Restart) [virtualjaguar_pal] ( disabled |enabled) NTSC to PAL switch. Setting this to on switches to PAL mode.","title":"Core options"},{"location":"library/virtual_jaguar/#controllers","text":"The Virtual Jaguar core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/virtual_jaguar/#user-1-2-device-types","text":"None - Doesn't disable input. There's no reason to switch to this. RetroPad - Joypad - Stay on this. RetroPad w/Analog - Joypad - Same as RetroPad. There's no reason to switch to this.","title":"User 1 - 2 device types"},{"location":"library/virtual_jaguar/#controller-tables","text":"","title":"Controller tables"},{"location":"library/virtual_jaguar/#joypad","text":"User 1 - 2 Remap descriptors RetroPad Inputs B C Pause Option D-Pad Up D-Pad Down D-Pad Left D-Pad Right A Numpad 0 Numpad 1 Numpad 2 Numpad 3 Numpad 4 Numpad 5 Numpad 6","title":"Joypad"},{"location":"library/virtual_jaguar/#keyboard","text":"User 1 Joypad Descriptors Keyboard Inputs Numpad 0 0 Numpad 1 1 Numpad 2 2 Numpad 3 3 Numpad 4 4 Numpad 5 5 Numpad 6 6 Numpad 7 7 Numpad 8 8 Numpad 9 9 Numpad * - Numpad # = ## Compatibility A reference compatibility table can be found on the bottom of this page Game Issue Cybermorph Graphics glitches. (1) Doom Enable Doom core option hack for proper graphics pitch. Iron Soldier Hangs after selecting a stage. Iron Soldier 2 Hangs after selecting a stage. Audio glitches. Kasumi Ninja Graphics glitches. Missing background layers (2) Ruiner Pinball Doesn't boot. Super Burnout Hangs after selecting a track. Towers II Heavy flickering. Wolfenstein 3D ROM version doesn't boot, J64 version does. (1) (2)","title":"Keyboard"},{"location":"library/virtual_jaguar/#external-links","text":"Official Virtual Jaguar Website Official Virtual Jaguar Git Repository Libretro Virtual Jaguar Core info file Libretro Virtual Jaguar Github Repository Report Libretro Virtual Jaguar Core Issues Here","title":"External Links"},{"location":"library/xrick/","text":"Rick Dangerous (XRick) \u00b6 Background \u00b6 Xrick is an open source implementation of the game \"Rick Dangerous\". This libretro core is based on BigOrno's work . How to start the XRick core: \u00b6 To start the XRick core, you need to obtain Rick Dangerous' data files. You can do this by going to RetroArch's main menu screen and selecting 'Online Updater'. From there, select 'Content Downloader'. Select 'Rick Dangerous', then select 'Rick Dangerous.zip'. This should download and extract this file to RetroArch's Downloads directory. Go back to RetroArch's main menu screen. Select 'Load Content', then 'Downloads'. Select the 'xrick' directory, next select 'data.zip'. Then, select Load Archive. If you are asked which core to select, choose 'Rick Dangerous (XRick)'. The content should now start running! Author/License \u00b6 The XRick core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the XRick core have the following file extensions: .zip Databases \u00b6 RetroArch database(s) that are associated with the XRick core: Rick Dangerous Features \u00b6 Frontend-level settings or features that the XRick core respects. Feature Supported Restart \u2715 Screenshots \u2714 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2715 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The XRick core's internal core name is 'xrick' Geometry and timing \u00b6 The XRick core's core provided FPS is 50 The XRick core's core provided sample rate is 22050.0 Hz The XRick core's core provided aspect ratio is 4/3 Controllers \u00b6 The XRick core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User 1 device types \u00b6 None - Doesn't disable input. There's no reason to switch to this. RetroPad - Joypad - Stay on this. RetroPad w/Analog - Joypad - Same as RetroPad. There's no reason to switch to this. Controller tables \u00b6 Joypad \u00b6 RetroPad Inputs XRick core inputs Jump Crouch Left Right Attack Supported combinations Attack + Left = Stab left using your bayonet Attack + Right = Stab right using your bayonet Attack + Up = Shoot Attack + Down = Drop a bomb External Links \u00b6 Official XRick Website Libretro XRick Core info file Libretro XRick Github Repository Report Libretro XRick Core Issues Here","title":"Rick Dangerous (XRick)"},{"location":"library/xrick/#rick-dangerous-xrick","text":"","title":"Rick Dangerous (XRick)"},{"location":"library/xrick/#background","text":"Xrick is an open source implementation of the game \"Rick Dangerous\". This libretro core is based on BigOrno's work .","title":"Background"},{"location":"library/xrick/#how-to-start-the-xrick-core","text":"To start the XRick core, you need to obtain Rick Dangerous' data files. You can do this by going to RetroArch's main menu screen and selecting 'Online Updater'. From there, select 'Content Downloader'. Select 'Rick Dangerous', then select 'Rick Dangerous.zip'. This should download and extract this file to RetroArch's Downloads directory. Go back to RetroArch's main menu screen. Select 'Load Content', then 'Downloads'. Select the 'xrick' directory, next select 'data.zip'. Then, select Load Archive. If you are asked which core to select, choose 'Rick Dangerous (XRick)'. The content should now start running!","title":"How to start the XRick core:"},{"location":"library/xrick/#authorlicense","text":"The XRick core is licensed under GPLv3 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/xrick/#extensions","text":"Content that can be loaded by the XRick core have the following file extensions: .zip","title":"Extensions"},{"location":"library/xrick/#databases","text":"RetroArch database(s) that are associated with the XRick core: Rick Dangerous","title":"Databases"},{"location":"library/xrick/#features","text":"Frontend-level settings or features that the XRick core respects. Feature Supported Restart \u2715 Screenshots \u2714 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2715 RetroAchievements \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/xrick/#directories","text":"The XRick core's internal core name is 'xrick'","title":"Directories"},{"location":"library/xrick/#geometry-and-timing","text":"The XRick core's core provided FPS is 50 The XRick core's core provided sample rate is 22050.0 Hz The XRick core's core provided aspect ratio is 4/3","title":"Geometry and timing"},{"location":"library/xrick/#controllers","text":"The XRick core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/xrick/#user-1-device-types","text":"None - Doesn't disable input. There's no reason to switch to this. RetroPad - Joypad - Stay on this. RetroPad w/Analog - Joypad - Same as RetroPad. There's no reason to switch to this.","title":"User 1 device types"},{"location":"library/xrick/#controller-tables","text":"","title":"Controller tables"},{"location":"library/xrick/#joypad","text":"RetroPad Inputs XRick core inputs Jump Crouch Left Right Attack Supported combinations Attack + Left = Stab left using your bayonet Attack + Right = Stab right using your bayonet Attack + Up = Shoot Attack + Down = Drop a bomb","title":"Joypad"},{"location":"library/xrick/#external-links","text":"Official XRick Website Libretro XRick Core info file Libretro XRick Github Repository Report Libretro XRick Core Issues Here","title":"External Links"},{"location":"library/yabause/","text":"Sega - Saturn (Yabause) \u00b6 Background \u00b6 Yabause is a Sega Saturn emulator that is both open-source and written with portability in mind. It is software rendered. Without any update for years it seems upstream is now dead. Author/License \u00b6 The Yabause core has been authored by Guillaume Duhammel Theo Berkau Anders Montonen The Yabause core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here . Extensions \u00b6 Content that can be loaded by the Yabause core have the following file extensions: .cue .iso .ccd .mds .chd .zip Databases \u00b6 RetroArch database(s) that are associated with the Yabause core: Sega - Saturn BIOS \u00b6 Required or optional firmware files go in the frontend's system directory. Filename Description md5sum saturn_bios.bin Saturn BIOS - Optional af5828fdff51384f99b3c4926be27762 This md5sum is just a hint, it is not required, any valid saturn bios should work. Features \u00b6 Frontend-level settings or features that the Yabause core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715 Directories \u00b6 The Yabause core's library name is 'Yabause' The Yabause core saves/loads to/from these directories. Frontend's Save directory 'content-name'.srm (Save) Frontend's State directory 'content-name'.state# (State) Geometry and timing \u00b6 The Yabause core's core provided FPS is 60 for NTSC games and 50 for PAL games The Yabause core's core provided sample rate is 44100 Hz The Yabause core's core provided aspect ratio is 4/3 Loading Sega Saturn content \u00b6 Yabause is not compatible with cue sheets containing references to audio files with wav/mp3/ogg/flac/ape extensions. Zip files containing cue+bin files can be loaded directly, however the dump will be loaded in RAM (meaning it will use around 700MB of RAM depending on the size of the dump). Core options \u00b6 The Yabause core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Frameskip [yabause_frameskip] ( disabled |enabled) Frames are skipped when the CPU is unable to keep up a stable rate. Force HLE BIOS (restart) [yabause_force_hle_bios] ( disabled |enabled) HLE BIOS will be used even when a real BIOS file is present. Addon Cartridge (restart) [yabause_addon_cart] ( none |1M_ram|4M_ram) Allows switching between the various RAM cartridges released for the system. A list of games that require a cartridge can be found here . 6Player Adaptor on Port 1 [yabause_multitap_port1] ( disabled |enabled) Enable multitap in port 1. 6Player Adaptor on Port 2 [yabause_multitap_port2] ( disabled |enabled) Enable multitap in port 2. Number of Threads (restart) [yabause_numthreads] (1|2| 4 |8|16|32) Adjust the number of threads to an appropriate level for your CPU. Controllers \u00b6 The Yabause core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): User device types \u00b6 None - Doesn't disable input. There's no reason to switch to this. Saturn Pad - Joypad Saturn 3D Pad - Analog Multitap support \u00b6 Must be enabled in core options. Controller tables \u00b6 Joypad \u00b6 User 1 - 12 Remap descriptors RetroPad Inputs A X Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right B Y C Z L R Analog X X Analog Y Y Compatibility \u00b6 Official Yabause Compatibility List Known issues \u00b6 Savestates work but can freeze a game Enabling both multitaps at the same time causes some kind of \"autofire\" bug External Links \u00b6 Official Yabause Website Official Yabause Documentation Official Yabause Repository Libretro Yabause Core info file Libretro Yabause Github Repository Report Libretro Yabause Core Issues Here See also \u00b6 Sega - Saturn \u00b6 Sega - Saturn (Beetle Saturn)","title":"Sega - Saturn (Yabause)"},{"location":"library/yabause/#sega-saturn-yabause","text":"","title":"Sega - Saturn (Yabause)"},{"location":"library/yabause/#background","text":"Yabause is a Sega Saturn emulator that is both open-source and written with portability in mind. It is software rendered. Without any update for years it seems upstream is now dead.","title":"Background"},{"location":"library/yabause/#authorlicense","text":"The Yabause core has been authored by Guillaume Duhammel Theo Berkau Anders Montonen The Yabause core is licensed under GPLv2 A summary of the licenses behind RetroArch and its cores can be found here .","title":"Author/License"},{"location":"library/yabause/#extensions","text":"Content that can be loaded by the Yabause core have the following file extensions: .cue .iso .ccd .mds .chd .zip","title":"Extensions"},{"location":"library/yabause/#databases","text":"RetroArch database(s) that are associated with the Yabause core: Sega - Saturn","title":"Databases"},{"location":"library/yabause/#bios","text":"Required or optional firmware files go in the frontend's system directory. Filename Description md5sum saturn_bios.bin Saturn BIOS - Optional af5828fdff51384f99b3c4926be27762 This md5sum is just a hint, it is not required, any valid saturn bios should work.","title":"BIOS"},{"location":"library/yabause/#features","text":"Frontend-level settings or features that the Yabause core respects. Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715","title":"Features"},{"location":"library/yabause/#directories","text":"The Yabause core's library name is 'Yabause' The Yabause core saves/loads to/from these directories. Frontend's Save directory 'content-name'.srm (Save) Frontend's State directory 'content-name'.state# (State)","title":"Directories"},{"location":"library/yabause/#geometry-and-timing","text":"The Yabause core's core provided FPS is 60 for NTSC games and 50 for PAL games The Yabause core's core provided sample rate is 44100 Hz The Yabause core's core provided aspect ratio is 4/3","title":"Geometry and timing"},{"location":"library/yabause/#loading-sega-saturn-content","text":"Yabause is not compatible with cue sheets containing references to audio files with wav/mp3/ogg/flac/ape extensions. Zip files containing cue+bin files can be loaded directly, however the dump will be loaded in RAM (meaning it will use around 700MB of RAM depending on the size of the dump).","title":"Loading Sega Saturn content"},{"location":"library/yabause/#core-options","text":"The Yabause core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. Frameskip [yabause_frameskip] ( disabled |enabled) Frames are skipped when the CPU is unable to keep up a stable rate. Force HLE BIOS (restart) [yabause_force_hle_bios] ( disabled |enabled) HLE BIOS will be used even when a real BIOS file is present. Addon Cartridge (restart) [yabause_addon_cart] ( none |1M_ram|4M_ram) Allows switching between the various RAM cartridges released for the system. A list of games that require a cartridge can be found here . 6Player Adaptor on Port 1 [yabause_multitap_port1] ( disabled |enabled) Enable multitap in port 1. 6Player Adaptor on Port 2 [yabause_multitap_port2] ( disabled |enabled) Enable multitap in port 2. Number of Threads (restart) [yabause_numthreads] (1|2| 4 |8|16|32) Adjust the number of threads to an appropriate level for your CPU.","title":"Core options"},{"location":"library/yabause/#controllers","text":"The Yabause core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):","title":"Controllers"},{"location":"library/yabause/#user-device-types","text":"None - Doesn't disable input. There's no reason to switch to this. Saturn Pad - Joypad Saturn 3D Pad - Analog","title":"User device types"},{"location":"library/yabause/#multitap-support","text":"Must be enabled in core options.","title":"Multitap support"},{"location":"library/yabause/#controller-tables","text":"","title":"Controller tables"},{"location":"library/yabause/#joypad","text":"User 1 - 12 Remap descriptors RetroPad Inputs A X Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right B Y C Z L R Analog X X Analog Y Y","title":"Joypad"},{"location":"library/yabause/#compatibility","text":"Official Yabause Compatibility List","title":"Compatibility"},{"location":"library/yabause/#known-issues","text":"Savestates work but can freeze a game Enabling both multitaps at the same time causes some kind of \"autofire\" bug","title":"Known issues"},{"location":"library/yabause/#external-links","text":"Official Yabause Website Official Yabause Documentation Official Yabause Repository Libretro Yabause Core info file Libretro Yabause Github Repository Report Libretro Yabause Core Issues Here","title":"External Links"},{"location":"library/yabause/#see-also","text":"","title":"See also"},{"location":"library/yabause/#sega-saturn","text":"Sega - Saturn (Beetle Saturn)","title":"Sega - Saturn"},{"location":"library/compatibility/32x/","text":"Sega 32X Core Compatibility \u00b6 PicoDrive \u00b6 Game Issue Brutal Unleashed \u2013 Above the Claw Softlocks after the first fight. FIFA Soccer \u201996 Glitched main menu text. Knuckles\u2019 Chaotix Glitched graphics on the Player Select screen. NBA Jam Tournament Edition Framerate issues. NFL Quarterback Club Some menu graphics are missing. Virtua Racing Deluxe Blinking line during the SEGA logo screen. World Series Baseball Starring Deion Sanders Crashes when starting a match. WWF Raw Various graphics are missing.","title":"Sega - 32X Compatibility List"},{"location":"library/compatibility/32x/#sega-32x-core-compatibility","text":"","title":"Sega 32X Core Compatibility"},{"location":"library/compatibility/32x/#picodrive","text":"Game Issue Brutal Unleashed \u2013 Above the Claw Softlocks after the first fight. FIFA Soccer \u201996 Glitched main menu text. Knuckles\u2019 Chaotix Glitched graphics on the Player Select screen. NBA Jam Tournament Edition Framerate issues. NFL Quarterback Club Some menu graphics are missing. Virtua Racing Deluxe Blinking line during the SEGA logo screen. World Series Baseball Starring Deion Sanders Crashes when starting a match. WWF Raw Various graphics are missing.","title":"PicoDrive"},{"location":"library/compatibility/3do/","text":"3DO Core Compatibility \u00b6 Opera \u00b6 Opera Core Compatibility List","title":"3DO Compatibility List"},{"location":"library/compatibility/3do/#3do-core-compatibility","text":"","title":"3DO Core Compatibility"},{"location":"library/compatibility/3do/#opera","text":"Opera Core Compatibility List","title":"Opera"},{"location":"library/compatibility/dc/","text":"Sega Dreamcast Core Compatibility \u00b6 FlyCast \u00b6 General FlyCast Issues The date and time do not seem to get properly saved, as the system will ask you to set the clock every time you start. Once you save to a VMU slot with any game, that VMU becomes inaccessible the next time you load the emulator. Polygon/Alpha sorting issues can make objects appear distorted in regular Flycast core. Use Per-Pixel Alpha sorting if you want complete/accurate emulation instead. When using an Xbox 360 Controller, analog triggers don't work properly. Use the bumpers instead. Changing games without closing and reloading RetroArch often leads to RetroArch crashing. Game Issue Sonic Adventure (PAL) Must be set to use \"VGA\" output in core options, as \"TV\" mode will cause all subsequent FMV to make RetroArch become unresponsive. The Typing of the Dead (NTSC-J) Must have real BIOS for kanji, hiragana, and katakana to show up since HLE BIOS only has US/ASCII characters.","title":"Sega - Dreamcast Compatibility List"},{"location":"library/compatibility/dc/#sega-dreamcast-core-compatibility","text":"","title":"Sega Dreamcast Core Compatibility"},{"location":"library/compatibility/dc/#flycast","text":"General FlyCast Issues The date and time do not seem to get properly saved, as the system will ask you to set the clock every time you start. Once you save to a VMU slot with any game, that VMU becomes inaccessible the next time you load the emulator. Polygon/Alpha sorting issues can make objects appear distorted in regular Flycast core. Use Per-Pixel Alpha sorting if you want complete/accurate emulation instead. When using an Xbox 360 Controller, analog triggers don't work properly. Use the bumpers instead. Changing games without closing and reloading RetroArch often leads to RetroArch crashing. Game Issue Sonic Adventure (PAL) Must be set to use \"VGA\" output in core options, as \"TV\" mode will cause all subsequent FMV to make RetroArch become unresponsive. The Typing of the Dead (NTSC-J) Must have real BIOS for kanji, hiragana, and katakana to show up since HLE BIOS only has US/ASCII characters.","title":"FlyCast"},{"location":"library/compatibility/ds/","text":"Nintendo DS Core Compatibility \u00b6 DeSmuME \u00b6 Game Issue Alice in Wonderland Needs JIT Block Size 8 or smaller to get past title screen. Golden Sun: Dark Dawn (Europe) Runs very slowly. Buggy sound. Hotel Dusk: Room 215 Graphics glitches. Unintended \"scanlines\" appear on some screens. Pok\u00e9mon HeartGold (Europe) (Rev 10) Graphics glitches . Black pixels pop-ups in the top screen. Top screen goes black. Pok\u00e9mon SoulSilver (Europe) (Rev 10) Graphics glitches. Black pixels pop-ups in the top screen. Top screen goes black. Puppy Palace (U) / My Puppy Shop (E) Crashes in menus. Rune Factory (U) Random crashes. Rune Factory 2 (U) Random crashes. Ultimate Mortal Kombat 3 Runs very slowly. Yoshi Touch & Go Runs very slowly. Yu-Gi-Oh! 5D's WORLD CHAMPIONSHIP 2010 (J) Random crashes.","title":"Nintendo - DS Compatibility List"},{"location":"library/compatibility/ds/#nintendo-ds-core-compatibility","text":"","title":"Nintendo DS Core Compatibility"},{"location":"library/compatibility/ds/#desmume","text":"Game Issue Alice in Wonderland Needs JIT Block Size 8 or smaller to get past title screen. Golden Sun: Dark Dawn (Europe) Runs very slowly. Buggy sound. Hotel Dusk: Room 215 Graphics glitches. Unintended \"scanlines\" appear on some screens. Pok\u00e9mon HeartGold (Europe) (Rev 10) Graphics glitches . Black pixels pop-ups in the top screen. Top screen goes black. Pok\u00e9mon SoulSilver (Europe) (Rev 10) Graphics glitches. Black pixels pop-ups in the top screen. Top screen goes black. Puppy Palace (U) / My Puppy Shop (E) Crashes in menus. Rune Factory (U) Random crashes. Rune Factory 2 (U) Random crashes. Ultimate Mortal Kombat 3 Runs very slowly. Yoshi Touch & Go Runs very slowly. Yu-Gi-Oh! 5D's WORLD CHAMPIONSHIP 2010 (J) Random crashes.","title":"DeSmuME"},{"location":"library/compatibility/gba/","text":"Nintendo Game Boy Advance Core Compatibility \u00b6 gpSP \u00b6 Game Issue Activision Anthology Freezes when entering a game. Banjo-Kazooie - Grunty's Revenge Black screen during developer logo. Resets when Banjo leaves his house. Boktai Trilogy The solar sensor is not emulated. DemiKids - Light/Dark Version Crashes when entering a battle. Digimon Racing (Europe) Freezes during the intro. Dragon Ball Z - The Legacy of Goku Graphics glitches. Final Fantasy VI Background/tiling order issues. Game Boy Advance Video - Dragon Ball GT - Volume 1 White screen. Grand Theft Auto Advance Crashes after first dialog. Harry Potter - Quidditch World Cup Crashes when going ingame. Koro Koro Puzzle Happy Panechu! The tilt sensor is not emulated. Mario & Luigi - Superstar Saga Crashes when entering a battle. Phantasy Star Collection Phantasy Star 1 flickers. R-Type III - The Third Lightning Softlocks at Irem startup screen. Rock 'n Roll Racing Corrupted graphics, not playable. Rockman & Forte Doesn't continue after GBA BIOS screen. Sims 2, The - Pets Graphics glitches. Heavy flickering, black objects. Street Racing Syndicate Freezes at startup screen, doesn't continue. Super Monkey Ball Jr. Softlocks at startup screen. Super Street Fighter II Turbo/X Revival Small graphics glitch. Selecting speed 'Turbo 1' and beyond on the character select screen makes the game speed window not fully visible. Tales of Phantasia (USA version) Softlocks during the introduction sequence (just before the small guy hits the tall guy in the right). WarioWare: Twisted! The tilt sensor is not emulated. Wolfenstein 3D Softlocks at id Software startup screen. Yoshi\u2019s Universal Gravitation The tilt sensor is not emulated. VBA-M \u00b6 Game Issue Boktai Trilogy The solar sensor is not emulated Digimon Racing (Europe) Freezes during the intro. This can be avoided by enabling linking in the standalone VBA-M release Koro Koro Puzzle Happy Panechu! The tilt sensor is not emulated Phantasy Star Collection Digital Eclipse logo sound effect is missing. Phantasy Star 1 flickers WarioWare: Twisted! The tilt sensor is not emulated Yoshi\u2019s Universal Gravitation The tilt sensor is not emulated VBA Next \u00b6 Game Issue Boktai Trilogy The solar sensor is not emulated. Croket! 2 \u2013 Yami no Bank to Banqueen Heavy slowdown when approaching the snowman in the beginning. Digimon Racing (Europe) Freezes during the intro. This can be avoided by enabling linking in the standalone VBA-M release. Drome Racers Only shows a black screen after the THQ logo. Hamtaro: Ham-Ham Games Locks up if the opening cinematics aren\u2019t skipped. Hot Wheels - Stunt Track Challenge Resets itself when trying to go in-game. Jurassic Park III: Park Builder Unreadable glitched text. Koro Koro Puzzle Happy Panechu! The tilt sensor is not emulated. Moto GP Black screen, loud screeching noise. Phantasy Star Collection Digital Eclipse logo sound effect is missing. Phantasy Star 1 flickers. SSX 3 Graphics glitches. Seems pitch-related. Super Mario Advance 2: Super Mario World (Europe) The program crashes during the final fight, when Bowser approaches (zoom mode 7) WarioWare: Twisted! The tilt sensor is not emulated. Yoshi\u2019s Universal Gravitation The tilt sensor is not emulated.","title":"Nintendo - Game Boy Advance Compatibility List"},{"location":"library/compatibility/gba/#nintendo-game-boy-advance-core-compatibility","text":"","title":"Nintendo Game Boy Advance Core Compatibility"},{"location":"library/compatibility/gba/#gpsp","text":"Game Issue Activision Anthology Freezes when entering a game. Banjo-Kazooie - Grunty's Revenge Black screen during developer logo. Resets when Banjo leaves his house. Boktai Trilogy The solar sensor is not emulated. DemiKids - Light/Dark Version Crashes when entering a battle. Digimon Racing (Europe) Freezes during the intro. Dragon Ball Z - The Legacy of Goku Graphics glitches. Final Fantasy VI Background/tiling order issues. Game Boy Advance Video - Dragon Ball GT - Volume 1 White screen. Grand Theft Auto Advance Crashes after first dialog. Harry Potter - Quidditch World Cup Crashes when going ingame. Koro Koro Puzzle Happy Panechu! The tilt sensor is not emulated. Mario & Luigi - Superstar Saga Crashes when entering a battle. Phantasy Star Collection Phantasy Star 1 flickers. R-Type III - The Third Lightning Softlocks at Irem startup screen. Rock 'n Roll Racing Corrupted graphics, not playable. Rockman & Forte Doesn't continue after GBA BIOS screen. Sims 2, The - Pets Graphics glitches. Heavy flickering, black objects. Street Racing Syndicate Freezes at startup screen, doesn't continue. Super Monkey Ball Jr. Softlocks at startup screen. Super Street Fighter II Turbo/X Revival Small graphics glitch. Selecting speed 'Turbo 1' and beyond on the character select screen makes the game speed window not fully visible. Tales of Phantasia (USA version) Softlocks during the introduction sequence (just before the small guy hits the tall guy in the right). WarioWare: Twisted! The tilt sensor is not emulated. Wolfenstein 3D Softlocks at id Software startup screen. Yoshi\u2019s Universal Gravitation The tilt sensor is not emulated.","title":"gpSP"},{"location":"library/compatibility/gba/#vba-m","text":"Game Issue Boktai Trilogy The solar sensor is not emulated Digimon Racing (Europe) Freezes during the intro. This can be avoided by enabling linking in the standalone VBA-M release Koro Koro Puzzle Happy Panechu! The tilt sensor is not emulated Phantasy Star Collection Digital Eclipse logo sound effect is missing. Phantasy Star 1 flickers WarioWare: Twisted! The tilt sensor is not emulated Yoshi\u2019s Universal Gravitation The tilt sensor is not emulated","title":"VBA-M"},{"location":"library/compatibility/gba/#vba-next","text":"Game Issue Boktai Trilogy The solar sensor is not emulated. Croket! 2 \u2013 Yami no Bank to Banqueen Heavy slowdown when approaching the snowman in the beginning. Digimon Racing (Europe) Freezes during the intro. This can be avoided by enabling linking in the standalone VBA-M release. Drome Racers Only shows a black screen after the THQ logo. Hamtaro: Ham-Ham Games Locks up if the opening cinematics aren\u2019t skipped. Hot Wheels - Stunt Track Challenge Resets itself when trying to go in-game. Jurassic Park III: Park Builder Unreadable glitched text. Koro Koro Puzzle Happy Panechu! The tilt sensor is not emulated. Moto GP Black screen, loud screeching noise. Phantasy Star Collection Digital Eclipse logo sound effect is missing. Phantasy Star 1 flickers. SSX 3 Graphics glitches. Seems pitch-related. Super Mario Advance 2: Super Mario World (Europe) The program crashes during the final fight, when Bowser approaches (zoom mode 7) WarioWare: Twisted! The tilt sensor is not emulated. Yoshi\u2019s Universal Gravitation The tilt sensor is not emulated.","title":"VBA Next"},{"location":"library/compatibility/gbc/","text":"Nintendo Game Boy Color Core Compatibility \u00b6 Gambatte \u00b6 Game Issue Command Master Crashes on start. Unemulated MBC7 mapper. Game Boy Camera Crashes on start. Unemulated Pocket Camera mapper. Game de Hakken!! Tamagotchi - Osutchi to Mesutchi Crashes on start. Unemulated TAMA5 mapper. Kirby Tilt 'n' Tumble Crashes on start. Unemulated MBC7 mapper. Net de Get: Mini-Game @ 100 Crashes on start. Unemulated MBC6 mapper.","title":"Nintendo - Game Boy Color Compatibility List"},{"location":"library/compatibility/gbc/#nintendo-game-boy-color-core-compatibility","text":"","title":"Nintendo Game Boy Color Core Compatibility"},{"location":"library/compatibility/gbc/#gambatte","text":"Game Issue Command Master Crashes on start. Unemulated MBC7 mapper. Game Boy Camera Crashes on start. Unemulated Pocket Camera mapper. Game de Hakken!! Tamagotchi - Osutchi to Mesutchi Crashes on start. Unemulated TAMA5 mapper. Kirby Tilt 'n' Tumble Crashes on start. Unemulated MBC7 mapper. Net de Get: Mini-Game @ 100 Crashes on start. Unemulated MBC6 mapper.","title":"Gambatte"},{"location":"library/compatibility/jaguar/","text":"Atari Jaguar Core Compatibility \u00b6 Virtual Jaguar \u00b6 A reference compatibility table can be found here https://icculus.org/virtualjaguar/ Game Issue Cybermorph Graphics glitches. Doom Enable Doom core option hack for proper graphics pitch. Iron Soldier Hangs after selecting a stage. Iron Soldier 2 Hangs after selecting a stage. Audio glitches. Kasumi Ninja Graphics glitches. Missing background layers Ruiner Pinball Doesn't boot. Super Burnout Hangs after selecting a track. Towers II Heavy flickering. Wolfenstein 3D Doesn't boot.","title":"Atari - Jaguar Compatibility List"},{"location":"library/compatibility/jaguar/#atari-jaguar-core-compatibility","text":"","title":"Atari Jaguar Core Compatibility"},{"location":"library/compatibility/jaguar/#virtual-jaguar","text":"A reference compatibility table can be found here https://icculus.org/virtualjaguar/ Game Issue Cybermorph Graphics glitches. Doom Enable Doom core option hack for proper graphics pitch. Iron Soldier Hangs after selecting a stage. Iron Soldier 2 Hangs after selecting a stage. Audio glitches. Kasumi Ninja Graphics glitches. Missing background layers Ruiner Pinball Doesn't boot. Super Burnout Hangs after selecting a track. Towers II Heavy flickering. Wolfenstein 3D Doesn't boot.","title":"Virtual Jaguar"},{"location":"library/compatibility/lynx/","text":"Atari Lynx Core Compatibility \u00b6 Handy \u00b6 Game Issue RoadBlasters Graphics glitches. Minor flickering and glitches after starting a race. Beetle Lynx \u00b6 Game Issue RoadBlasters Graphics glitches. Minor flickering and glitches after starting a race.","title":"Atari - Lynx Compatibility List:"},{"location":"library/compatibility/lynx/#atari-lynx-core-compatibility","text":"","title":"Atari Lynx Core Compatibility"},{"location":"library/compatibility/lynx/#handy","text":"Game Issue RoadBlasters Graphics glitches. Minor flickering and glitches after starting a race.","title":"Handy"},{"location":"library/compatibility/lynx/#beetle-lynx","text":"Game Issue RoadBlasters Graphics glitches. Minor flickering and glitches after starting a race.","title":"Beetle Lynx"},{"location":"library/compatibility/nes/","text":"Nintendo NES Core Compatibility \u00b6 Nestopia \u00b6 Game Issue Skull & Crossbones Graphical glitches and screen shaking when in 2-player mode. FCEUmm \u00b6 Game Issue Skull & Crossbones Graphical glitches and screen shaking when in 2-player mode. bnes \u00b6 Game Issue Crisis Force Graphical glitches. Huge Insect No enemies spawn. Lagrange Point No music. Ms. Pac-Man (Tengen version) Graphical glitches on the sides of the screen. Skull & Crossbones Crashes on start. QuickNES \u00b6 Game Issue Burai Fighter Softlocks when entering a level. Confirmed issue. MMC3 incompatible. Family Circuit '91 Crashes on start. Unsupported Mapper 210. Huge Insect No enemies spawn. Mapper 3 confirmed issue. Unemulated bus conflict handling. Skull & Crossbones Crashes on start. Unsupported Mapper.","title":"Nintendo - NES Compatibility List"},{"location":"library/compatibility/nes/#nintendo-nes-core-compatibility","text":"","title":"Nintendo NES Core Compatibility"},{"location":"library/compatibility/nes/#nestopia","text":"Game Issue Skull & Crossbones Graphical glitches and screen shaking when in 2-player mode.","title":"Nestopia"},{"location":"library/compatibility/nes/#fceumm","text":"Game Issue Skull & Crossbones Graphical glitches and screen shaking when in 2-player mode.","title":"FCEUmm"},{"location":"library/compatibility/nes/#bnes","text":"Game Issue Crisis Force Graphical glitches. Huge Insect No enemies spawn. Lagrange Point No music. Ms. Pac-Man (Tengen version) Graphical glitches on the sides of the screen. Skull & Crossbones Crashes on start.","title":"bnes"},{"location":"library/compatibility/nes/#quicknes","text":"Game Issue Burai Fighter Softlocks when entering a level. Confirmed issue. MMC3 incompatible. Family Circuit '91 Crashes on start. Unsupported Mapper 210. Huge Insect No enemies spawn. Mapper 3 confirmed issue. Unemulated bus conflict handling. Skull & Crossbones Crashes on start. Unsupported Mapper.","title":"QuickNES"},{"location":"library/compatibility/pcfx/","text":"NEC PC-FX Core Compatibility \u00b6 Beetle PC-FX \u00b6 Game Issue Pia Carrot e Youkoso!! (Japan) [T-En by David Michel + filler v1.0] Doesn't boot. Confirmed to work on real hardware.","title":"NEC - PC-FX Compatibility List"},{"location":"library/compatibility/pcfx/#nec-pc-fx-core-compatibility","text":"","title":"NEC PC-FX Core Compatibility"},{"location":"library/compatibility/pcfx/#beetle-pc-fx","text":"Game Issue Pia Carrot e Youkoso!! (Japan) [T-En by David Michel + filler v1.0] Doesn't boot. Confirmed to work on real hardware.","title":"Beetle PC-FX"},{"location":"library/compatibility/psx/","text":"PlayStation Core Compatibility \u00b6 Beetle PSX \u00b6 A list of known emulation bugs can be found here https://forum.fobby.net/index.php?t=msg&th=1114&start=0& PCSX ReARMed \u00b6 Game Issue Jumping Flash 2 Graphics glitches. Geometry issues. Tobal 2 Graphics glitch. Garbled Dream Factory intro sequence.","title":"Sony - Playstation Compatibility List"},{"location":"library/compatibility/psx/#playstation-core-compatibility","text":"","title":"PlayStation Core Compatibility"},{"location":"library/compatibility/psx/#beetle-psx","text":"A list of known emulation bugs can be found here https://forum.fobby.net/index.php?t=msg&th=1114&start=0&","title":"Beetle PSX"},{"location":"library/compatibility/psx/#pcsx-rearmed","text":"Game Issue Jumping Flash 2 Graphics glitches. Geometry issues. Tobal 2 Graphics glitch. Garbled Dream Factory intro sequence.","title":"PCSX ReARMed"},{"location":"library/compatibility/saturn/","text":"Sega Saturn Core Compatibility \u00b6 Yabause \u00b6 Yabause Core Compatibility List","title":"Sega - Saturn Compatibility List"},{"location":"library/compatibility/saturn/#sega-saturn-core-compatibility","text":"","title":"Sega Saturn Core Compatibility"},{"location":"library/compatibility/saturn/#yabause","text":"Yabause Core Compatibility List","title":"Yabause"},{"location":"library/compatibility/snes/","text":"Nintendo SNES Core Compatibility \u00b6 bsnes Accuracy \u00b6 The bsnes Accuracy core fully emulates all SNES games that have ever been officially released. Same with bsnes-mercury Accuracy bsnes Balanced \u00b6 Game Issue A.S.P. Air Strike Patrol Black lines show up during gameplay. The shadow below the aircraft is missing. Same with bsnes-mercury Balanced bsnes Performance \u00b6 Game Issue A.S.P. Air Strike Patrol Black lines show up during gameplay. The shadow below the aircraft is missing. Funaki Masakatsu Hybrid Wrestler \u2013 Tougi Denshou Corrupted graphics on the Pancrase logo screen. Mecarobot Golf The ground \"wobbles\" during gameplay. Mega Man X2 Only displays a black screen. Mega Man X3 Only displays a black screen. Mortal Kombat II Various glitched graphics. NHL \u201994 Corrupted line on the NHL logo screen. Tetris Attack Lots of flickering on the VS. CPU mode map screen. Same with bsnes-mercury Performance Snes9x 2005 \u00b6 Game Issue A.S.P. Air Strike Patrol The shadow below the aircraft is missing. Glitched graphics on the briefing screens. Bass Masters Classic - Pro Edition Only shows a black screen. Funaki Masakatsu Hybrid Wrestler \u2013 Tougi Denshou Corrupted graphics on the Pancrase logo screen. Hayazashi Nidan Morita Shougi 2 Matches won\u2019t start. Madden NFL 96 Only shows a black screen. Masters New \u2013 Harukanaru Augusta 3 Black screen after selecting game. Mecarobot Golf The ground \"wobbles\" during gameplay. Mechwarrior 3050 Black screen after the Activision logo. Same with Snes9x 2005 Plus Snes9x 2010 \u00b6 Game Issue A.S.P. Air Strike Patrol The shadow below the aircraft is missing. Glitched graphics on the briefing screens. Bass Masters Classic - Pro Edition Only shows a black screen. Doom Colored dots appear during gameplay. F-1 Grand Prix Glitched HUD display. F1 ROC II \u2013 Race of Champions Crashes when starting a race. Funaki Masakatsu Hybrid Wrestler \u2013 Tougi Denshou Corrupted graphics on the Pancrase logo screen. Hayazashi Nidan Morita Shougi 2 Matches won\u2019t start. Madden NFL 96 Only shows a black screen. Masters New \u2013 Harukanaru Augusta 3 Graphical corruption during gameplay. Mecarobot Golf The ground \"wobbles\" during gameplay. Mechwarrior 3050 Black screen after the Activision logo. Secret of Evermore (PAL) Randomly freezes when the background music changes. Sink or Swim Sometimes the levels are filled with water instantly. Speedy Gonzales: Los Gatos Bandidos Freezes when pressing a switch in the last level. Super Bomberman 3 Freezes after about 20 seconds in the Battle mode menu. Super Bomberman 5 Title screen flickers if the opening cinematic isn\u2019t skipped. Snes9x \u00b6 Game Issue A.S.P. Air Strike Patrol The shadow below the aircraft is missing. Glitched graphics on the briefing screens. BS-Zelda MottZilla Patch Only shows a black screen. Doom Colored dots appear during gameplay. Funaki Masakatsu Hybrid Wrestler \u2013 Tougi Denshou Corrupted graphics on the Pancrase logo screen. Hayazashi Nidan Morita Shougi 2 Matches won\u2019t start. Mecarobot Golf The ground \"wobbles\" during gameplay. Secret of Evermore (PAL versions) Randomly freezes when the background music changes. higan Accuracy \u00b6 The higan Accuracy core fully emulates all SNES games that have ever been officially released. nSide Balanced \u00b6 Game Issue A.S.P. Air Strike Patrol Black lines show up during gameplay. The shadow below the aircraft is missing.","title":"Nintendo - SNES Compatibility List"},{"location":"library/compatibility/snes/#nintendo-snes-core-compatibility","text":"","title":"Nintendo SNES Core Compatibility"},{"location":"library/compatibility/snes/#bsnes-accuracy","text":"The bsnes Accuracy core fully emulates all SNES games that have ever been officially released. Same with bsnes-mercury Accuracy","title":"bsnes Accuracy"},{"location":"library/compatibility/snes/#bsnes-balanced","text":"Game Issue A.S.P. Air Strike Patrol Black lines show up during gameplay. The shadow below the aircraft is missing. Same with bsnes-mercury Balanced","title":"bsnes Balanced"},{"location":"library/compatibility/snes/#bsnes-performance","text":"Game Issue A.S.P. Air Strike Patrol Black lines show up during gameplay. The shadow below the aircraft is missing. Funaki Masakatsu Hybrid Wrestler \u2013 Tougi Denshou Corrupted graphics on the Pancrase logo screen. Mecarobot Golf The ground \"wobbles\" during gameplay. Mega Man X2 Only displays a black screen. Mega Man X3 Only displays a black screen. Mortal Kombat II Various glitched graphics. NHL \u201994 Corrupted line on the NHL logo screen. Tetris Attack Lots of flickering on the VS. CPU mode map screen. Same with bsnes-mercury Performance","title":"bsnes Performance"},{"location":"library/compatibility/snes/#snes9x-2005","text":"Game Issue A.S.P. Air Strike Patrol The shadow below the aircraft is missing. Glitched graphics on the briefing screens. Bass Masters Classic - Pro Edition Only shows a black screen. Funaki Masakatsu Hybrid Wrestler \u2013 Tougi Denshou Corrupted graphics on the Pancrase logo screen. Hayazashi Nidan Morita Shougi 2 Matches won\u2019t start. Madden NFL 96 Only shows a black screen. Masters New \u2013 Harukanaru Augusta 3 Black screen after selecting game. Mecarobot Golf The ground \"wobbles\" during gameplay. Mechwarrior 3050 Black screen after the Activision logo. Same with Snes9x 2005 Plus","title":"Snes9x 2005"},{"location":"library/compatibility/snes/#snes9x-2010","text":"Game Issue A.S.P. Air Strike Patrol The shadow below the aircraft is missing. Glitched graphics on the briefing screens. Bass Masters Classic - Pro Edition Only shows a black screen. Doom Colored dots appear during gameplay. F-1 Grand Prix Glitched HUD display. F1 ROC II \u2013 Race of Champions Crashes when starting a race. Funaki Masakatsu Hybrid Wrestler \u2013 Tougi Denshou Corrupted graphics on the Pancrase logo screen. Hayazashi Nidan Morita Shougi 2 Matches won\u2019t start. Madden NFL 96 Only shows a black screen. Masters New \u2013 Harukanaru Augusta 3 Graphical corruption during gameplay. Mecarobot Golf The ground \"wobbles\" during gameplay. Mechwarrior 3050 Black screen after the Activision logo. Secret of Evermore (PAL) Randomly freezes when the background music changes. Sink or Swim Sometimes the levels are filled with water instantly. Speedy Gonzales: Los Gatos Bandidos Freezes when pressing a switch in the last level. Super Bomberman 3 Freezes after about 20 seconds in the Battle mode menu. Super Bomberman 5 Title screen flickers if the opening cinematic isn\u2019t skipped.","title":"Snes9x 2010"},{"location":"library/compatibility/snes/#snes9x","text":"Game Issue A.S.P. Air Strike Patrol The shadow below the aircraft is missing. Glitched graphics on the briefing screens. BS-Zelda MottZilla Patch Only shows a black screen. Doom Colored dots appear during gameplay. Funaki Masakatsu Hybrid Wrestler \u2013 Tougi Denshou Corrupted graphics on the Pancrase logo screen. Hayazashi Nidan Morita Shougi 2 Matches won\u2019t start. Mecarobot Golf The ground \"wobbles\" during gameplay. Secret of Evermore (PAL versions) Randomly freezes when the background music changes.","title":"Snes9x"},{"location":"library/compatibility/snes/#higan-accuracy","text":"The higan Accuracy core fully emulates all SNES games that have ever been officially released.","title":"higan Accuracy"},{"location":"library/compatibility/snes/#nside-balanced","text":"Game Issue A.S.P. Air Strike Patrol Black lines show up during gameplay. The shadow below the aircraft is missing.","title":"nSide Balanced"},{"location":"library/compatibility/wswan/","text":"Bandai Wonderswan Core Compatibility \u00b6 Beetle Cygne \u00b6 Game Issue Tonpuusou Title screen announcer voice missing. Softlocks after picking a menu option.","title":"Bandai - Wonderswan Compatibility List"},{"location":"library/compatibility/wswan/#bandai-wonderswan-core-compatibility","text":"","title":"Bandai Wonderswan Core Compatibility"},{"location":"library/compatibility/wswan/#beetle-cygne","text":"Game Issue Tonpuusou Title screen announcer voice missing. Softlocks after picking a menu option.","title":"Beetle Cygne"},{"location":"meta/core-list/","text":"3D Engine 2048 Atari800 Beetle bsnes Beetle Cygne BeetleDC Beetle GBA Beetle Lynx Beetle NeoPop Beetle PC-FX Beetle PCE FAST Beetle PSX Beetle PSX HW Beetle Saturn Beetle SGX Beetle VB blueMSX bnes bsnes-mercury Accuracy bsnes-mercury Balanced bsnes-mercury Performance bsnes Accuracy bsnes Balanced bsnes C++98 (v085) bsnes Performance Cannonball Caprice32 ChaiLove Citra Citra Canary/Experimental Craft CrocoDS DeSmuME DeSmuME 2015 Dinothawr Dolphin DOSBox Dummy Core Dungeon Crawl Stone Soup EasyRPG EightyOne Emux CHIP-8 Emux GB Emux NES Emux SMS FB Alpha FB Alpha 2012 FB Alpha 2012 CPS-1 FB Alpha 2012 CPS-2 FB Alpha 2012 CPS-3 FB Alpha 2012 Neo Geo FCEUmm FFmpeg fMSX FreeIntv FreeJ2ME Frodo Fuse Gambatte Game Music Emu Gearboy Gearsystem Genesis Plus GX gpSP GW Handy Hatari higan Accuracy Imageviewer Lutro MAME MAME 2000 MAME 2003 MAME 2003 Midway MAME 2003-Plus - Experimental MAME 2009 MAME 2010 MAME 2014 MAME 2016 melonDS Mesen Mesen-S MESS 2014 Meteor mGBA mpv Mr.Boom Mupen64Plus Mupen64Plus GLES3 Neko Project II Neko Project II Kai Nestopia UE nSide Balanced NXEngine O2EM OpenLara Opera P-UAE ParaLLEl N64 PCem PCSX ReARMed PCSX ReARMed [Interpreter] PicoDrive PocketCDG PokeMini PPSSPP PrBoom ProSystem PX68k QuickNES REminiscence RemoteJoy Remote RetroPad SameBoy ScummVM SMS Plus GX Snes9x Snes9x 2002 Snes9x 2005 Snes9x 2005 Plus Snes9x 2010 Stella TempGBA TGB Dual Theodore TIC-80 The Powder Toy TyrQuake UME 2014 Uzem VBA-M VBA Next vecx VeMUlator VICE C64 VICE C128 VICE PLUS4 VICE VIC20 Video Processor Virtual Jaguar XRick Yabause","title":"Core List"},{"location":"meta/core-template/","text":"// THE CORE TEMPLATE DOES NOT NEED TO BE FOLLOWED 100% // DOCUMENT THE CORE IN A WAY THAT FEELS THE EASIEST/MOST EFFICIENT TO YOU [Title] \u00b6 // [Title] is the display name entry from the core's info file // https://github.com/libretro/libretro-super/tree/master/dist/info Background \u00b6 [Background info] // Add [Background] info for the core here, use google for background info The [Core name] core has been authored by [Author] // Add [Core name] // [Author] is the display name entry from the core's info file // https://github.com/libretro/libretro-super/tree/master/dist/info The [Core name] core is licensed under License // Add [Core name] // Add [License] and (URL), use the core info file, the licenses doc or google for license info // https://github.com/libretro/libretro-super/tree/master/dist/info // https://docs.libretro.com/development/licenses/ A summary of the licenses behind RetroArch and its cores can be found here . Requirements \u00b6 [Requirements] // Add [Requirements] such as hardware or software requirements for the core here How to start the [Core name] core: \u00b6 // This section is for cores that need to be started in a special way /// Use this example section for cores that need files from RetroArch's Content Downloader To start the [Core name] core, you need to obtain [Core name]'s data files. You can do this by going to RetroArch's main menu screen and selecting 'Online Updater'. From there, select 'Content Downloader'. // Fill in the [Core name] Select '[Content directory name]', then select '[Game filename]'. This should download and extract this file to RetroArch's Downloads directory. // Fill in the [Content directory name] and the [Game filename] Go back to RetroArch's main menu screen. Select 'Load Content', then 'Downloads'. Select the '[Content directory name]' directory, then select '[Game filename]'. // Fill in the [Content directory name] and the [Game filename] If you are asked which core to select, choose '[Title]'. // Fill in the [Title] The content should now start running! /// Use this example section for cores that don't need content to be started To start the [Core name] core, go to RetroArch's main menu screen. Select 'Load Core', then '[Core name]'. // Fill in the [Core name] Now, select 'Start Core'. The content should now start running! BIOS \u00b6 // Add firmware information from the core info file here // https://github.com/libretro/libretro-super/tree/master/dist/info ) // For core that don't need BIOS, either say BIOS not required or just not include a BIOS section Required or optional firmware files go in the frontend's system directory. Filename Description md5sum bios_filename.bin Description - Optional/Required Extensions \u00b6 Content that can be loaded by the [Core name] core have the following file extensions: // Fill in the [Core name] .[extension] // Copy the exntension entry from the core info file and paste it here. // https://github.com/libretro/libretro-super/tree/master/dist/info ) // Also look at the core's libretro.c/libretro.cpp file, sometimes the core info files can get out of sync RetroArch database(s) that are associated with the [Core name] core: // Fill in the [Core name] Database name // Add database entries from the core info file here and add (URL) from libretro-database repo // https://github.com/libretro/libretro-super/tree/master/dist/info // https://github.com/libretro/libretro-database/tree/master/rdb Features \u00b6 Frontend-level settings or features that the [Core name] core respects. // Fill in the [Core name] // Use \u2714 or \u2715 // Leave it as - if unsure Feature Supported Restart - Saves - States - Rewind - Netplay - Core Options - RetroAchievements - RetroArch Cheats - Native Cheats - Controls - Remapping - Multi-Mouse - Rumble - Sensors - Camera - Location - Subsystem - Softpatching - Disk Control - Username - Language - Crop Overscan - LEDs - Directories \u00b6 // This section is a list of files and/or directories the core creates in certain directories The [Core name] core's library name is '[Library name]' //Add [Core name] and the [Library name]. Check libretro.c/.cpp for [Library name] The [Core name] core saves/loads to/from these directories. // Fill in the [Core name] // Add a list of directories/files the core uses // The Home, Appdata directories sections are rarely used, they're only for cores that don't follow the libretro API 100% Frontend's Home directory File Description filename.bin Description Frontend's Save directory File Description filename.bin Description Frontend's State directory File Description filename.bin Description Frontend's System directory File Description filename.bin Description Loaded content's directory File Description filename.bin Description Appdata directory File Description filename.bin Description Geometry and timing \u00b6 // Add [Core name], [FPS], [Sample rate], [Base width], [Base height], [Max width], [Max height], [Aspect ratio] The [Core name] core's core provided FPS is [FPS] The [Core name] core's core provided sample rate is [Sample rate] The [Core name] core's base width is [Base width] The [Core name] core's base height is [Base height] The [Core name] core's max width is [Max width] The [Core name] core's max height is [Max height] The [Core name] core's core provided aspect ratio is [Aspect ratio] Usage \u00b6 // Explain how to use the core if further explaination is needed Core options \u00b6 The [Core name] core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. // Fill in the [Core name] Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. // Fill in core options. // Add core option screenshots if needed. Core Option [option-string] ( Setting1 |Setting2) Awaiting description. Core Option - Setting User # - # device types \u00b6 The [Core name] core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): // Add [Core name] and device types /// Possible device types /// Joypad /// Analog /// Keyboard /// Mouse /// Lightgun /// Pointer None - Optional description. (Device name) - (Device type) - Optional description. Other devices \u00b6 // This section is for cores that have devices that cannot be manually selected (Device name) - (Device type) - Optional description. Rumble \u00b6 // This section is for cores that have rumble support // Explain how to activate rumble Rumble only works in the [Core name] core when // Fill in the [Core name] The content being ran has rumble support. The frontend being used has rumble support. The joypad device being used has rumble support. Multitap \u00b6 // This section for cores that have an option to activate mutlitap in supported games // Explain how to activate multitap Joypad \u00b6 // Add RetroPad inputs, please note the third column is only used when an input doesn't have a descriptor RetroPad Inputs User # input descriptors (Device name) Inputs Action 1 - Action 2 - Action 3 - Action 4 - Action 5 - Action 6 - Action 7 - Action 8 - Action 9 - Action 10 - Action 11 - Action 12 - Action 13 - Action 14 - Action 15 - Action 16 - X Action 17 - Y Action 18 - X Action 19 - Y Action 20 - Keyboard \u00b6 // Add keyboard inputs RetroKeyboard Inputs (Device name) Inputs Keyboard Backspace - Keyboard Tab - Keyboard Clear - Keyboard Return - Keyboard Pause - Keyboard Escape - Keyboard Space - Keyboard Exclaim ! - Keyboard Double Quote \" - Keyboard Hash # - Keyboard Dollar $ - Keyboard Ampersand & - Keyboard Quote ' - Keyboard Left Parenthesis ( - Keyboard Right Parenthesis ) - Keyboard Asterisk * - Keyboard Plus + - Keyboard Comma , - Keyboard Minus - - Keyboard Period . - Keyboard Slash / - Keyboard 0 - Keyboard 1 - Keyboard 2 - Keyboard 3 - Keyboard 4 - Keyboard 5 - Keyboard 6 - Keyboard 7 - Keyboard 8 - Keyboard 9 - Keyboard Colon : - Keyboard Semicolon ; - Keyboard Less than < - Keyboard Equals = - Keyboard Greater than > - Keyboard Question ? - Keyboard At @ - Keyboard Left Bracket [ - Keyboard Backslash \\ - Keyboard Right Bracket ] - Keyboard Caret ^ - Keyboard Underscore _ - Keyboard Backquote ` - Keyboard a - Keyboard b - Keyboard c - Keyboard d - Keyboard e - Keyboard f - Keyboard g - Keyboard h - Keyboard i - Keyboard j - Keyboard k - Keyboard l - Keyboard m - Keyboard n - Keyboard o - Keyboard p - Keyboard q - Keyboard r - Keyboard s - Keyboard t - Keyboard u - Keyboard v - Keyboard w - Keyboard x - Keyboard y - Keyboard z - Keyboard Delete - Keyboard Keypad 0 - Keyboard Keypad 1 - Keyboard Keypad 2 - Keyboard Keypad 3 - Keyboard Keypad 4 - Keyboard Keypad 5 - Keyboard Keypad 6 - Keyboard Keypad 7 - Keyboard Keypad 8 - Keyboard Keypad 9 - Keyboard Keypad Period . - Keyboard Keypad Divide / - Keyboard Keypad Multiply * - Keyboard Keypad Minus - - Keyboard Keypad Plus + - Keyboard Keypad Enter - Keyboard Keypad Equals = - Keyboard Up - Keyboard Down - Keyboard Right - Keyboard Left - Keyboard Insert - Keyboard Home - Keyboard End - Keyboard Page Up - Keyboard Page Down - Keyboard F1 - Keyboard F2 - Keyboard F3 - Keyboard F4 - Keyboard F5 - Keyboard F6 - Keyboard F7 - Keyboard F8 - Keyboard F9 - Keyboard F10 - Keyboard F11 - Keyboard F12 - Keyboard F13 - Keyboard F14 - Keyboard F15 - Keyboard Num Lock - Keyboard Caps Lock - Keyboard Scroll Lock - Keyboard Right Shift - Keyboard Left Shift - Keyboard Right Control - Keyboard Left Control - Keyboard Right Alt - Keyboard Left Alt - Keyboard Right Meta - Keyboard Left Meta - Keyboard Right Super - Keyboard Left Super - Keyboard Mode - Keyboard Compose - Keyboard Help - Keyboard Print - Keyboard Sys Req - Keyboard Break - Keyboard Menu - Keyboard Power - Keyboard \u20ac - Keyboard Undo - Keyboard Unmapped - Keyboard Unknown - Mouse \u00b6 // Add mouse inputs RetroMouse Inputs (Device name) Inputs Mouse Cursor - Mouse 1 - Mouse 2 - Mouse 3 - Mouse 4 - Mouse 5 - Wheel Up - Wheel Down - Wheel Left - Wheel Right - Pointer \u00b6 // Add pointer inputs RetroPointer Inputs (Device name) Inputs or Pointer Position - or Pointer Pressed - Lightgun \u00b6 // Add lightgun inputs /// Deprecated Lightgun inputs /// RETRO_DEVICE_ID_LIGHTGUN_CURSOR - Use Gun Aux A instead /// RETRO_DEVICE_ID_LIGHTGUN_TURBO - Use Gun Aux B instead /// RETRO_DEVICE_ID_LIGHTGUN_PAUSE - Use Gun Start instead RetroLightgun Inputs (Device name) Inputs Gun Crosshair - Gun Trigger - Gun Reload - Gun Aux A - Gun Aux B - Gun Aux C - Gun Start - Gun Select - Gun D-pad Up - Gun D-pad Down - Gun D-pad Left - Gun D-pad Right - Compatibility \u00b6 // Paste in a link to a compatibility list // Or write up a compatibility description // Or make a compatibility table External Links \u00b6 // Put relevant links here Official/Original (Core name) Website Official/Original (Core name) (Website name) Repository Libretro (Core name) Core info file Libretro (Core name) (Website name) Repository Report Libretro (Core name) Core Issues Here (Related cores) \u00b6 // Add links to related core docs here. Use the See Also doc for help // https://docs.libretro.com/meta/see_also Other Core","title":"Core Template"},{"location":"meta/core-template/#title","text":"// [Title] is the display name entry from the core's info file // https://github.com/libretro/libretro-super/tree/master/dist/info","title":"[Title]"},{"location":"meta/core-template/#background","text":"[Background info] // Add [Background] info for the core here, use google for background info The [Core name] core has been authored by [Author] // Add [Core name] // [Author] is the display name entry from the core's info file // https://github.com/libretro/libretro-super/tree/master/dist/info The [Core name] core is licensed under License // Add [Core name] // Add [License] and (URL), use the core info file, the licenses doc or google for license info // https://github.com/libretro/libretro-super/tree/master/dist/info // https://docs.libretro.com/development/licenses/ A summary of the licenses behind RetroArch and its cores can be found here .","title":"Background"},{"location":"meta/core-template/#requirements","text":"[Requirements] // Add [Requirements] such as hardware or software requirements for the core here","title":"Requirements"},{"location":"meta/core-template/#how-to-start-the-core-name-core","text":"// This section is for cores that need to be started in a special way /// Use this example section for cores that need files from RetroArch's Content Downloader To start the [Core name] core, you need to obtain [Core name]'s data files. You can do this by going to RetroArch's main menu screen and selecting 'Online Updater'. From there, select 'Content Downloader'. // Fill in the [Core name] Select '[Content directory name]', then select '[Game filename]'. This should download and extract this file to RetroArch's Downloads directory. // Fill in the [Content directory name] and the [Game filename] Go back to RetroArch's main menu screen. Select 'Load Content', then 'Downloads'. Select the '[Content directory name]' directory, then select '[Game filename]'. // Fill in the [Content directory name] and the [Game filename] If you are asked which core to select, choose '[Title]'. // Fill in the [Title] The content should now start running! /// Use this example section for cores that don't need content to be started To start the [Core name] core, go to RetroArch's main menu screen. Select 'Load Core', then '[Core name]'. // Fill in the [Core name] Now, select 'Start Core'. The content should now start running!","title":"How to start the [Core name] core:"},{"location":"meta/core-template/#bios","text":"// Add firmware information from the core info file here // https://github.com/libretro/libretro-super/tree/master/dist/info ) // For core that don't need BIOS, either say BIOS not required or just not include a BIOS section Required or optional firmware files go in the frontend's system directory. Filename Description md5sum bios_filename.bin Description - Optional/Required","title":"BIOS"},{"location":"meta/core-template/#extensions","text":"Content that can be loaded by the [Core name] core have the following file extensions: // Fill in the [Core name] .[extension] // Copy the exntension entry from the core info file and paste it here. // https://github.com/libretro/libretro-super/tree/master/dist/info ) // Also look at the core's libretro.c/libretro.cpp file, sometimes the core info files can get out of sync RetroArch database(s) that are associated with the [Core name] core: // Fill in the [Core name] Database name // Add database entries from the core info file here and add (URL) from libretro-database repo // https://github.com/libretro/libretro-super/tree/master/dist/info // https://github.com/libretro/libretro-database/tree/master/rdb","title":"Extensions"},{"location":"meta/core-template/#features","text":"Frontend-level settings or features that the [Core name] core respects. // Fill in the [Core name] // Use \u2714 or \u2715 // Leave it as - if unsure Feature Supported Restart - Saves - States - Rewind - Netplay - Core Options - RetroAchievements - RetroArch Cheats - Native Cheats - Controls - Remapping - Multi-Mouse - Rumble - Sensors - Camera - Location - Subsystem - Softpatching - Disk Control - Username - Language - Crop Overscan - LEDs -","title":"Features"},{"location":"meta/core-template/#directories","text":"// This section is a list of files and/or directories the core creates in certain directories The [Core name] core's library name is '[Library name]' //Add [Core name] and the [Library name]. Check libretro.c/.cpp for [Library name] The [Core name] core saves/loads to/from these directories. // Fill in the [Core name] // Add a list of directories/files the core uses // The Home, Appdata directories sections are rarely used, they're only for cores that don't follow the libretro API 100% Frontend's Home directory File Description filename.bin Description Frontend's Save directory File Description filename.bin Description Frontend's State directory File Description filename.bin Description Frontend's System directory File Description filename.bin Description Loaded content's directory File Description filename.bin Description Appdata directory File Description filename.bin Description","title":"Directories"},{"location":"meta/core-template/#geometry-and-timing","text":"// Add [Core name], [FPS], [Sample rate], [Base width], [Base height], [Max width], [Max height], [Aspect ratio] The [Core name] core's core provided FPS is [FPS] The [Core name] core's core provided sample rate is [Sample rate] The [Core name] core's base width is [Base width] The [Core name] core's base height is [Base height] The [Core name] core's max width is [Max width] The [Core name] core's max height is [Max height] The [Core name] core's core provided aspect ratio is [Aspect ratio]","title":"Geometry and timing"},{"location":"meta/core-template/#usage","text":"// Explain how to use the core if further explaination is needed","title":"Usage"},{"location":"meta/core-template/#core-options","text":"The [Core name] core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. // Fill in the [Core name] Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch. // Fill in core options. // Add core option screenshots if needed. Core Option [option-string] ( Setting1 |Setting2) Awaiting description. Core Option - Setting","title":"Core options"},{"location":"meta/core-template/#user-device-types","text":"The [Core name] core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s): // Add [Core name] and device types /// Possible device types /// Joypad /// Analog /// Keyboard /// Mouse /// Lightgun /// Pointer None - Optional description. (Device name) - (Device type) - Optional description.","title":"User # - # device types"},{"location":"meta/core-template/#other-devices","text":"// This section is for cores that have devices that cannot be manually selected (Device name) - (Device type) - Optional description.","title":"Other devices"},{"location":"meta/core-template/#rumble","text":"// This section is for cores that have rumble support // Explain how to activate rumble Rumble only works in the [Core name] core when // Fill in the [Core name] The content being ran has rumble support. The frontend being used has rumble support. The joypad device being used has rumble support.","title":"Rumble"},{"location":"meta/core-template/#multitap","text":"// This section for cores that have an option to activate mutlitap in supported games // Explain how to activate multitap","title":"Multitap"},{"location":"meta/core-template/#joypad","text":"// Add RetroPad inputs, please note the third column is only used when an input doesn't have a descriptor RetroPad Inputs User # input descriptors (Device name) Inputs Action 1 - Action 2 - Action 3 - Action 4 - Action 5 - Action 6 - Action 7 - Action 8 - Action 9 - Action 10 - Action 11 - Action 12 - Action 13 - Action 14 - Action 15 - Action 16 - X Action 17 - Y Action 18 - X Action 19 - Y Action 20 -","title":"Joypad"},{"location":"meta/core-template/#keyboard","text":"// Add keyboard inputs RetroKeyboard Inputs (Device name) Inputs Keyboard Backspace - Keyboard Tab - Keyboard Clear - Keyboard Return - Keyboard Pause - Keyboard Escape - Keyboard Space - Keyboard Exclaim ! - Keyboard Double Quote \" - Keyboard Hash # - Keyboard Dollar $ - Keyboard Ampersand & - Keyboard Quote ' - Keyboard Left Parenthesis ( - Keyboard Right Parenthesis ) - Keyboard Asterisk * - Keyboard Plus + - Keyboard Comma , - Keyboard Minus - - Keyboard Period . - Keyboard Slash / - Keyboard 0 - Keyboard 1 - Keyboard 2 - Keyboard 3 - Keyboard 4 - Keyboard 5 - Keyboard 6 - Keyboard 7 - Keyboard 8 - Keyboard 9 - Keyboard Colon : - Keyboard Semicolon ; - Keyboard Less than < - Keyboard Equals = - Keyboard Greater than > - Keyboard Question ? - Keyboard At @ - Keyboard Left Bracket [ - Keyboard Backslash \\ - Keyboard Right Bracket ] - Keyboard Caret ^ - Keyboard Underscore _ - Keyboard Backquote ` - Keyboard a - Keyboard b - Keyboard c - Keyboard d - Keyboard e - Keyboard f - Keyboard g - Keyboard h - Keyboard i - Keyboard j - Keyboard k - Keyboard l - Keyboard m - Keyboard n - Keyboard o - Keyboard p - Keyboard q - Keyboard r - Keyboard s - Keyboard t - Keyboard u - Keyboard v - Keyboard w - Keyboard x - Keyboard y - Keyboard z - Keyboard Delete - Keyboard Keypad 0 - Keyboard Keypad 1 - Keyboard Keypad 2 - Keyboard Keypad 3 - Keyboard Keypad 4 - Keyboard Keypad 5 - Keyboard Keypad 6 - Keyboard Keypad 7 - Keyboard Keypad 8 - Keyboard Keypad 9 - Keyboard Keypad Period . - Keyboard Keypad Divide / - Keyboard Keypad Multiply * - Keyboard Keypad Minus - - Keyboard Keypad Plus + - Keyboard Keypad Enter - Keyboard Keypad Equals = - Keyboard Up - Keyboard Down - Keyboard Right - Keyboard Left - Keyboard Insert - Keyboard Home - Keyboard End - Keyboard Page Up - Keyboard Page Down - Keyboard F1 - Keyboard F2 - Keyboard F3 - Keyboard F4 - Keyboard F5 - Keyboard F6 - Keyboard F7 - Keyboard F8 - Keyboard F9 - Keyboard F10 - Keyboard F11 - Keyboard F12 - Keyboard F13 - Keyboard F14 - Keyboard F15 - Keyboard Num Lock - Keyboard Caps Lock - Keyboard Scroll Lock - Keyboard Right Shift - Keyboard Left Shift - Keyboard Right Control - Keyboard Left Control - Keyboard Right Alt - Keyboard Left Alt - Keyboard Right Meta - Keyboard Left Meta - Keyboard Right Super - Keyboard Left Super - Keyboard Mode - Keyboard Compose - Keyboard Help - Keyboard Print - Keyboard Sys Req - Keyboard Break - Keyboard Menu - Keyboard Power - Keyboard \u20ac - Keyboard Undo - Keyboard Unmapped - Keyboard Unknown -","title":"Keyboard"},{"location":"meta/core-template/#mouse","text":"// Add mouse inputs RetroMouse Inputs (Device name) Inputs Mouse Cursor - Mouse 1 - Mouse 2 - Mouse 3 - Mouse 4 - Mouse 5 - Wheel Up - Wheel Down - Wheel Left - Wheel Right -","title":"Mouse"},{"location":"meta/core-template/#pointer","text":"// Add pointer inputs RetroPointer Inputs (Device name) Inputs or Pointer Position - or Pointer Pressed -","title":"Pointer"},{"location":"meta/core-template/#lightgun","text":"// Add lightgun inputs /// Deprecated Lightgun inputs /// RETRO_DEVICE_ID_LIGHTGUN_CURSOR - Use Gun Aux A instead /// RETRO_DEVICE_ID_LIGHTGUN_TURBO - Use Gun Aux B instead /// RETRO_DEVICE_ID_LIGHTGUN_PAUSE - Use Gun Start instead RetroLightgun Inputs (Device name) Inputs Gun Crosshair - Gun Trigger - Gun Reload - Gun Aux A - Gun Aux B - Gun Aux C - Gun Start - Gun Select - Gun D-pad Up - Gun D-pad Down - Gun D-pad Left - Gun D-pad Right -","title":"Lightgun"},{"location":"meta/core-template/#compatibility","text":"// Paste in a link to a compatibility list // Or write up a compatibility description // Or make a compatibility table","title":"Compatibility"},{"location":"meta/core-template/#external-links","text":"// Put relevant links here Official/Original (Core name) Website Official/Original (Core name) (Website name) Repository Libretro (Core name) Core info file Libretro (Core name) (Website name) Repository Report Libretro (Core name) Core Issues Here","title":"External Links"},{"location":"meta/core-template/#related-cores","text":"// Add links to related core docs here. Use the See Also doc for help // https://docs.libretro.com/meta/see_also Other Core","title":"(Related cores)"},{"location":"meta/how-to-contribute/","text":"Contribute to the documentation \u00b6 The docs are written in Markdown if you need help with the syntax use this guide . Mkdocs uses some Markdown extensions that you may have to familiarize with. The documentation source is maintained via Git . For more info on how to use git refer to their help In order to propose improvements to a document: Clone the repo Make the changes and update your clone Follow the \"Building the docs\" section to render the documentation site locally Propose your changes using the button New Pull Request in the docs repo There is a To-Do list for libretro/docs here and you can submit suggestions or issues regarding documentation at the libretro/docs issue tracker . Building the docs \u00b6 Make sure you have Python and pip installed python --version pip --version Building in Windows/msys2 If you are using the standard RetroArch msys2 environment, you will need to install python with the command pacman -S python . Next you will need to download the get-pip.py script from the pip bootstrap site. Finally, execute the script with the command python get-pip.py . Install MkDocs pip install mkdocs Install MkDocs-Material pip install mkdocs-material Install PyMdown Extensions pip install pymdown-extensions Build the site mkdocs build The documentation will be built to the site directory; preview any changes with MkDocs' built-in dev-server before submitting a pull request mkdocs serve References Guide to installing mkdocs Adding a new core \u00b6 These are the documents that should be added/updated when a new core is added to the libretro ecosystem. Add the core to docs/library/ (Follow the latest core template. docs/meta/core-template.md) Add the core to mkdocs.yml Add the core to docs/meta/core-list.md Add the core to docs/meta/see-also.md if it's related to another core in some way Add the core to docs/development/licenses.md Add the core to docs/guides/softpatching.md if it supports softpatching Add the core to docs/guides/retroachievements.md if it supports cheevos Add the core to docs/library/bios.md if it needs a BIOS","title":"Adding or Editing Documentation"},{"location":"meta/how-to-contribute/#contribute-to-the-documentation","text":"The docs are written in Markdown if you need help with the syntax use this guide . Mkdocs uses some Markdown extensions that you may have to familiarize with. The documentation source is maintained via Git . For more info on how to use git refer to their help In order to propose improvements to a document: Clone the repo Make the changes and update your clone Follow the \"Building the docs\" section to render the documentation site locally Propose your changes using the button New Pull Request in the docs repo There is a To-Do list for libretro/docs here and you can submit suggestions or issues regarding documentation at the libretro/docs issue tracker .","title":"Contribute to the documentation"},{"location":"meta/how-to-contribute/#building-the-docs","text":"Make sure you have Python and pip installed python --version pip --version Building in Windows/msys2 If you are using the standard RetroArch msys2 environment, you will need to install python with the command pacman -S python . Next you will need to download the get-pip.py script from the pip bootstrap site. Finally, execute the script with the command python get-pip.py . Install MkDocs pip install mkdocs Install MkDocs-Material pip install mkdocs-material Install PyMdown Extensions pip install pymdown-extensions Build the site mkdocs build The documentation will be built to the site directory; preview any changes with MkDocs' built-in dev-server before submitting a pull request mkdocs serve References Guide to installing mkdocs","title":"Building the docs"},{"location":"meta/how-to-contribute/#adding-a-new-core","text":"These are the documents that should be added/updated when a new core is added to the libretro ecosystem. Add the core to docs/library/ (Follow the latest core template. docs/meta/core-template.md) Add the core to mkdocs.yml Add the core to docs/meta/core-list.md Add the core to docs/meta/see-also.md if it's related to another core in some way Add the core to docs/development/licenses.md Add the core to docs/guides/softpatching.md if it supports softpatching Add the core to docs/guides/retroachievements.md if it supports cheevos Add the core to docs/library/bios.md if it needs a BIOS","title":"Adding a new core"},{"location":"meta/see-also/","text":"See Also \u00b6 This is a list of cores that are related to each other in some way. CPC \u00b6 Amstrad - CPC (Caprice32) Amstrad - CPC (CrocoDS) Lynx \u00b6 Atari - Lynx (Beetle Lynx) Atari - Lynx (Handy) MSX \u00b6 Microsoft - MSX (fMSX) MSX/SVI/ColecoVision/SG-1000 (blueMSX) TG-16 \u00b6 NEC - PC Engine / CD (Beetle PCE FAST) NEC - PC Engine SuperGrafx (Beetle SGX) GB \u00b6 Nintendo - Game Boy / Color (Emux GB) Nintendo - Game Boy / Color (Gambatte) Nintendo - Game Boy / Color (Gearboy) Nintendo - Game Boy / Color (SameBoy) Nintendo - Game Boy / Color (TGB Dual) Nintendo - Game Boy Advance (mGBA) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (nSide Balanced) Nintendo - SNES / Famicom (Mesen-S) GBA \u00b6 Nintendo - Game Boy Advance (Beetle GBA) Nintendo - Game Boy Advance (gpSP) Nintendo - Game Boy Advance (Meteor) Nintendo - Game Boy Advance (mGBA) Nintendo - Game Boy Advance (TempGBA) Nintendo - Game Boy Advance (VBA-M) Nintendo - Game Boy Advance (VBA Next) 3DS \u00b6 Nintendo - 3DS (Citra) Nintendo - 3DS (Citra Canary/Experimental) N64 \u00b6 Nintendo - Nintendo 64 (Mupen64Plus) Nintendo - Nintendo 64 (Mupen64Plus GLES3) Nintendo - Nintendo 64 (ParaLLEl N64) NDS \u00b6 Nintendo - DS (DeSmuME 2015) Nintendo - DS (DeSmuME) Nintendo - DS (melonDS) NES \u00b6 Nintendo - NES / Famicom (bnes) Nintendo - NES / Famicom (Emux NES) Nintendo - NES / Famicom (FCEUmm) Nintendo - NES / Famicom (Mesen) Nintendo - NES / Famicom (Nestopia UE) Nintendo - NES / Famicom (QuickNES) SNES \u00b6 Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (nSide Balanced) Nintendo - SNES / Famicom (Mesen-S) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2005) Nintendo - SNES / Famicom (Snes9x 2010) Dreamcast \u00b6 Sega - Dreamcast (Redream) Sega - Dreamcast (Flycast) Sega 16-bit \u00b6 Sega - Master System (Emux SMS) Sega - MS/GG/MD/CD (Genesis Plus GX) Sega - MS/MD/CD/32X (PicoDrive) Sega - MS/GG/SG-1000 (Gearsystem) Sega - MS/GG (SMS Plus GX) MSX/SVI/ColecoVision/SG-1000 (blueMSX) Saturn \u00b6 Sega - Saturn (Beetle Saturn) Sega - Saturn (Yabause) PSX \u00b6 Sony - PlayStation (Beetle PSX HW) Sony - PlayStation (Beetle PSX) Sony - PlayStation (PCSX ReARMed) Custom Engine \u00b6 ChaiLove Lua Engine (Lutro) Media \u00b6 FFmpeg Game Music Emu Imageviewer mpv PocketCDG id Software \u00b6 Doom (PrBoom) Quake 1 (TyrQuake) Arcade \u00b6 MAME MAME 2000 MAME 2003 MAME 2003 Midway MAME 2003-Plus MAME 2009 MAME 2010 MAME 2014 MAME 2016 MESS 2014 UME 2014 FB Alpha FB Alpha 2012 FB Alpha 2012 CPS-1 FB Alpha 2012 CPS-2 FB Alpha 2012 CPS-3 FB Alpha 2012 Neo Geo","title":"See Also"},{"location":"meta/see-also/#see-also","text":"This is a list of cores that are related to each other in some way.","title":"See Also"},{"location":"meta/see-also/#cpc","text":"Amstrad - CPC (Caprice32) Amstrad - CPC (CrocoDS)","title":"CPC"},{"location":"meta/see-also/#lynx","text":"Atari - Lynx (Beetle Lynx) Atari - Lynx (Handy)","title":"Lynx"},{"location":"meta/see-also/#msx","text":"Microsoft - MSX (fMSX) MSX/SVI/ColecoVision/SG-1000 (blueMSX)","title":"MSX"},{"location":"meta/see-also/#tg-16","text":"NEC - PC Engine / CD (Beetle PCE FAST) NEC - PC Engine SuperGrafx (Beetle SGX)","title":"TG-16"},{"location":"meta/see-also/#gb","text":"Nintendo - Game Boy / Color (Emux GB) Nintendo - Game Boy / Color (Gambatte) Nintendo - Game Boy / Color (Gearboy) Nintendo - Game Boy / Color (SameBoy) Nintendo - Game Boy / Color (TGB Dual) Nintendo - Game Boy Advance (mGBA) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (nSide Balanced) Nintendo - SNES / Famicom (Mesen-S)","title":"GB"},{"location":"meta/see-also/#gba","text":"Nintendo - Game Boy Advance (Beetle GBA) Nintendo - Game Boy Advance (gpSP) Nintendo - Game Boy Advance (Meteor) Nintendo - Game Boy Advance (mGBA) Nintendo - Game Boy Advance (TempGBA) Nintendo - Game Boy Advance (VBA-M) Nintendo - Game Boy Advance (VBA Next)","title":"GBA"},{"location":"meta/see-also/#3ds","text":"Nintendo - 3DS (Citra) Nintendo - 3DS (Citra Canary/Experimental)","title":"3DS"},{"location":"meta/see-also/#n64","text":"Nintendo - Nintendo 64 (Mupen64Plus) Nintendo - Nintendo 64 (Mupen64Plus GLES3) Nintendo - Nintendo 64 (ParaLLEl N64)","title":"N64"},{"location":"meta/see-also/#nds","text":"Nintendo - DS (DeSmuME 2015) Nintendo - DS (DeSmuME) Nintendo - DS (melonDS)","title":"NDS"},{"location":"meta/see-also/#nes","text":"Nintendo - NES / Famicom (bnes) Nintendo - NES / Famicom (Emux NES) Nintendo - NES / Famicom (FCEUmm) Nintendo - NES / Famicom (Mesen) Nintendo - NES / Famicom (Nestopia UE) Nintendo - NES / Famicom (QuickNES)","title":"NES"},{"location":"meta/see-also/#snes","text":"Nintendo - SNES / Famicom (Beetle bsnes) Nintendo - SNES / Famicom (bsnes-mercury Accuracy) Nintendo - SNES / Famicom (bsnes-mercury Balanced) Nintendo - SNES / Famicom (bsnes-mercury Performance) Nintendo - SNES / Famicom (bsnes Accuracy) Nintendo - SNES / Famicom (bsnes Balanced) Nintendo - SNES / Famicom (bsnes C++98 (v085)) Nintendo - SNES / Famicom (bsnes Performance) Nintendo - SNES / Famicom (higan Accuracy) Nintendo - SNES / Famicom (nSide Balanced) Nintendo - SNES / Famicom (Mesen-S) Nintendo - SNES / Famicom (Snes9x) Nintendo - SNES / Famicom (Snes9x 2002) Nintendo - SNES / Famicom (Snes9x 2005 Plus) Nintendo - SNES / Famicom (Snes9x 2005) Nintendo - SNES / Famicom (Snes9x 2010)","title":"SNES"},{"location":"meta/see-also/#dreamcast","text":"Sega - Dreamcast (Redream) Sega - Dreamcast (Flycast)","title":"Dreamcast"},{"location":"meta/see-also/#sega-16-bit","text":"Sega - Master System (Emux SMS) Sega - MS/GG/MD/CD (Genesis Plus GX) Sega - MS/MD/CD/32X (PicoDrive) Sega - MS/GG/SG-1000 (Gearsystem) Sega - MS/GG (SMS Plus GX) MSX/SVI/ColecoVision/SG-1000 (blueMSX)","title":"Sega 16-bit"},{"location":"meta/see-also/#saturn","text":"Sega - Saturn (Beetle Saturn) Sega - Saturn (Yabause)","title":"Saturn"},{"location":"meta/see-also/#psx","text":"Sony - PlayStation (Beetle PSX HW) Sony - PlayStation (Beetle PSX) Sony - PlayStation (PCSX ReARMed)","title":"PSX"},{"location":"meta/see-also/#custom-engine","text":"ChaiLove Lua Engine (Lutro)","title":"Custom Engine"},{"location":"meta/see-also/#media","text":"FFmpeg Game Music Emu Imageviewer mpv PocketCDG","title":"Media"},{"location":"meta/see-also/#id-software","text":"Doom (PrBoom) Quake 1 (TyrQuake)","title":"id Software"},{"location":"meta/see-also/#arcade","text":"MAME MAME 2000 MAME 2003 MAME 2003 Midway MAME 2003-Plus MAME 2009 MAME 2010 MAME 2014 MAME 2016 MESS 2014 UME 2014 FB Alpha FB Alpha 2012 FB Alpha 2012 CPS-1 FB Alpha 2012 CPS-2 FB Alpha 2012 CPS-3 FB Alpha 2012 Neo Geo","title":"Arcade"},{"location":"meta/shader-preview-template/","text":"Title \u00b6 Background \u00b6 Preview Image \u00b6 Comments \u00b6 External Links \u00b6 Slang Shaders GLSL Shaders CG Shaders","title":"Shader Preview Template"},{"location":"meta/shader-preview-template/#title","text":"","title":"Title"},{"location":"meta/shader-preview-template/#background","text":"","title":"Background"},{"location":"meta/shader-preview-template/#preview-image","text":"","title":"Preview Image"},{"location":"meta/shader-preview-template/#comments","text":"","title":"Comments"},{"location":"meta/shader-preview-template/#external-links","text":"Slang Shaders GLSL Shaders CG Shaders","title":"External Links"},{"location":"shader/3dfx/","text":"3dfx \u00b6 Background \u00b6 Preview Image \u00b6 3dfx_4x1 Comments \u00b6 External Links \u00b6 Slang Shaders GLSL Shaders CG Shaders","title":"3dfx"},{"location":"shader/3dfx/#3dfx","text":"","title":"3dfx"},{"location":"shader/3dfx/#background","text":"","title":"Background"},{"location":"shader/3dfx/#preview-image","text":"3dfx_4x1","title":"Preview Image"},{"location":"shader/3dfx/#comments","text":"","title":"Comments"},{"location":"shader/3dfx/#external-links","text":"Slang Shaders GLSL Shaders CG Shaders","title":"External Links"},{"location":"shader/antialiasing/","text":"antialiasing \u00b6 Background \u00b6 Preview Image \u00b6 aa-shader-4.0 advanced-aa fxaa smaa Comments \u00b6 External Links \u00b6 Slang Shaders GLSL Shaders CG Shaders","title":"antialiasing"},{"location":"shader/antialiasing/#antialiasing","text":"","title":"antialiasing"},{"location":"shader/antialiasing/#background","text":"","title":"Background"},{"location":"shader/antialiasing/#preview-image","text":"aa-shader-4.0 advanced-aa fxaa smaa","title":"Preview Image"},{"location":"shader/antialiasing/#comments","text":"","title":"Comments"},{"location":"shader/antialiasing/#external-links","text":"Slang Shaders GLSL Shaders CG Shaders","title":"External Links"},{"location":"shader/border/","text":"border \u00b6 Description \u00b6 Shaders that include a border to fill the empty space left when rendering a non widescreen viewport on a widescreen display. Preview Image \u00b6 bigblur-crt bigblur hexagons imgborder Comments \u00b6 External Links \u00b6 Slang Shaders GLSL Shaders CG Shaders","title":"border"},{"location":"shader/border/#border","text":"","title":"border"},{"location":"shader/border/#description","text":"Shaders that include a border to fill the empty space left when rendering a non widescreen viewport on a widescreen display.","title":"Description"},{"location":"shader/border/#preview-image","text":"bigblur-crt bigblur hexagons imgborder","title":"Preview Image"},{"location":"shader/border/#comments","text":"","title":"Comments"},{"location":"shader/border/#external-links","text":"Slang Shaders GLSL Shaders CG Shaders","title":"External Links"},{"location":"shader/cgp/","text":"cgp \u00b6 Background \u00b6 Preview Image \u00b6 2x2xscalehq 2xbr-crt-hyllian 2xbr-hybrid-crt-hyllian 2xbr-jinc2-sharper-hybrid 2xbr-reverse-aa crt-reverse-aa-ddt crt-royale-kurozumi gameboy-colors gameboy-scree-n-grid gameboy-screen-grid+motionblur lowquality-lcd lowquality-lcd+motionblur xbr-dilation-smart-blur-4xsoft xbr-dtt-dilation-soft2-aa-gamma xbr-hybrid-bicubic xbr-hybrid-ddt xbr-hybrid-lanczos xbr-hybrid-sharp-lanczos xbr-smart-blur Comments \u00b6 External Links \u00b6 Slang Shaders GLSL Shaders CG Shaders","title":"cgp"},{"location":"shader/cgp/#cgp","text":"","title":"cgp"},{"location":"shader/cgp/#background","text":"","title":"Background"},{"location":"shader/cgp/#preview-image","text":"2x2xscalehq 2xbr-crt-hyllian 2xbr-hybrid-crt-hyllian 2xbr-jinc2-sharper-hybrid 2xbr-reverse-aa crt-reverse-aa-ddt crt-royale-kurozumi gameboy-colors gameboy-scree-n-grid gameboy-screen-grid+motionblur lowquality-lcd lowquality-lcd+motionblur xbr-dilation-smart-blur-4xsoft xbr-dtt-dilation-soft2-aa-gamma xbr-hybrid-bicubic xbr-hybrid-ddt xbr-hybrid-lanczos xbr-hybrid-sharp-lanczos xbr-smart-blur","title":"Preview Image"},{"location":"shader/cgp/#comments","text":"","title":"Comments"},{"location":"shader/cgp/#external-links","text":"Slang Shaders GLSL Shaders CG Shaders","title":"External Links"},{"location":"shader/crt/","text":"crt \u00b6 Background \u00b6 Preview Image \u00b6 crt-aperture crt-caligari crt-cgwg-fast crt-easymode-halation crt-easymode crt-geom crt-hyllian-multipass crt-hyllian crt-interlaced-halation crt-lottes-fast crt-lottes-multipass-interlace-glow crt-lottes-multipass crt-lottes crt-nes-mini crt-potato-cool crt-potato-warm crt-royale crt-slangtest-cubic crt-slangtest-lanczos crtglow_gauss_ntsc_3phase crtglow_gauss crtglow_lanczos dotmask gtu-famicom gtu-v050 gtuv50-radeon gtuv50 meta-crt ntsc-shadowmask-interlacing ntsc-shadowmask-noblend ntsc-shadowmask phosphorlut-4k phosphorlut-shadowmask phosphorlut zfast-crt Comments \u00b6 External Links \u00b6 Slang Shaders GLSL Shaders CG Shaders","title":"crt"},{"location":"shader/crt/#crt","text":"","title":"crt"},{"location":"shader/crt/#background","text":"","title":"Background"},{"location":"shader/crt/#preview-image","text":"crt-aperture crt-caligari crt-cgwg-fast crt-easymode-halation crt-easymode crt-geom crt-hyllian-multipass crt-hyllian crt-interlaced-halation crt-lottes-fast crt-lottes-multipass-interlace-glow crt-lottes-multipass crt-lottes crt-nes-mini crt-potato-cool crt-potato-warm crt-royale crt-slangtest-cubic crt-slangtest-lanczos crtglow_gauss_ntsc_3phase crtglow_gauss crtglow_lanczos dotmask gtu-famicom gtu-v050 gtuv50-radeon gtuv50 meta-crt ntsc-shadowmask-interlacing ntsc-shadowmask-noblend ntsc-shadowmask phosphorlut-4k phosphorlut-shadowmask phosphorlut zfast-crt","title":"Preview Image"},{"location":"shader/crt/#comments","text":"","title":"Comments"},{"location":"shader/crt/#external-links","text":"Slang Shaders GLSL Shaders CG Shaders","title":"External Links"},{"location":"shader/crt_royale/","text":"CRT-Royale \u00b6 CRT-Royale is a collection of shaders developed by TroggleMonkey. It is quite an advanced shader that requires a bit of documentation in order to get the most out of it. Contents Basics \u00b6 crt-royale is a highly customizable CRT shader for Retroarch and other programs supporting the libretro Cg shader standard. It uses a number of nonstandardized extensions like sRGB FBO's, mipmapping, and runtime shader parameters, but hopefully it will run without much of a fuss on new implementations of the standard as well. Customizable Parameters \u00b6 There are a huge number of parameters. Among the things you can customize: Phosphor mask type: An aperture grille, slot mask, and shadow mask are each included, although the latter won't be seeing much usage until 1440p displays and better become more common (4k UHD and 8k UHD are increasingly optimal). Phosphor mask dot pitch Phosphor mask resampling method: Choose between Lanczos sinc resizing, mipmapped hardware resizing, and no resizing of the input LUT. Phosphor bloom softness and type (real or fake ;)) Gaussian and generalized Gaussian scanline beam properties/distribution, including convergence offsets Screen geometry, including curvature (spherical, alternative spherical, or cylindrical like Trinitrons), tilt, and borders Antialiasing level, resampling filter, and sharpness parameters for gracefully combining screen curvature with high-frequency phosphor details, including optionally resampling based on RGB subpixel positions. Halation (electrons bouncing under the glass and lighting random phosphors) random phosphors) Refractive diffusion (light spreading from the imperfect CRT glass face) Interlacing options etc. How to Customize \u00b6 There are two major ways to customize the shader: Runtime shader parameters allow convenient experimentation with real-time feedback, but they are much slower, because they prevent static evaluation of a lot of math. Disabling them drastically speeds up the shader. If runtime shader parameters are disabled (partially or totally), those same settings can be freely altered in the text of the user-settings.h file. There are also a number of other static-only settings, including the #define macros which indicate where and when to allow runtime shader parameters. To disable them entirely, comment out the \"#define RUNTIME_SHADER_PARAMS_ENABLE\" line by putting a double-slash (\"//\") at the ginning...your FPS will skyrocket. Preset Versions \u00b6 You may also note that there are two major versions of the shader preset: crt-royale.cgh is the \"full\" version of the shader, which blooms the light from the brighter phosphors to maintain brightness and avoid clipping. crt-royale-fake-bloom.cgh is the \"cheater's\" version of the shader, which only fakes the bloom based on carefully blending in a [potentially blurred] version of the original input. This version is MUCH faster, and you have to strain to see the difference, so people with slower GPU's will prefer it. There's a lot to play around with, and I encourage everyone using this shader to read through the user-settings.h file to learn about the parameters. Before loading the shader, be sure to read the next section, entitled... Frequently Asked Questions \u00b6 Why is the shader crashing when I load it!? \u00b6 Do you get C6001 or C6002 errors with integrated graphics, like Intel HD 4000? If so, please try one of the following .cgp presets: crt-royale-intel.cgp crt-royale-fake-bloom-intel.cgp These load .cg wrappers that #define INTEGRATED_GRAPHICS_COMPATIBILITY_MODE (also available in user-settings.h) before loading the main .cg shader files. Integrated graphics compatibility mode will disable these three features, which currently require more registers or instructions than Intel GPU's allow: PHOSPHOR_MASK_MANUALLY_RESIZE: The phosphor mask will be softer. (This may be reenabled in a later release.) RUNTIME_GEOMETRY_MODE: You must change the screen geometry/curvature using the geom_mode_static setting in user-settings.h. The high-quality 4x4 Gaussian resize for the bloom approximation Using Intel-specific .cgp files is equivalent to #defining INTEGRATED_GRAPHICS_COMPATIBILITY_MODE in your user-settings.h. Out of the box, user-settings.h is configured for maximum configurability and compatibility with dedicated nVidia and AMD/ATI GPU's. Compatibility mode is disabled by default to avoid silently degrading quality for AMD/ATI and nVidia users, so Intel-specific .cgp's are a convenient way for Intel users to play with the shader without editing text files. I've tested this solution on Intel HD 4000 graphics, and it should work for that GPU at least, but please let me know if you're still having problems! Why is everything so slow!? \u00b6 Out of the box, this will be a problem for all but monster GPU's. The default user-settings.h file disables any features and optimizations which might cause compilation failure on AMD/ATI GPU's. Despite the name of the options, this is not a problem with your card or drivers; it's a shortcoming in the Cg shader compiler's nVidia-centric profile setups. Uncommenting the following #define macros at the top of user-settings.h will help performance a good deal on compatible nVidia cards: #define DRIVERS_ALLOW_DERIVATIVES #define DRIVERS_ALLOW_DYNAMIC_BRANCHES #define ACCOMODATE_POSSIBLE_DYNAMIC_LOOPS #define DRIVERS_ALLOW_TEX2DLOD #define DRIVERS_ALLOW_TEX2DBIAS A few of these warrant some elaboration. First, derivatives: Derivatives allow the shader to cheaply calculate a tangent-space matrix for correct antialiasing when curvature or overscan are used. Without them, there are two options: Cheat, and there will be artifacts with strong cylindrical curvature Compute the correct tangent-space matrix analytically. This is used by default, and it's controlled by this option near the bottom: geom_force_correct_tangent_matrix = true Dynamic branches: Dynamic branches allow the shader to avoid performing computations that it doesn't need (but might have, given different runtime options). Without them, the shader has to either let the GPU evaluate every possible codepath and select a result, or make a \"best guess\" ahead of time. The full phosphor bloom suffers most from not having dynamic branches, because the shader doesn't know how big of a blur to use until it knows your phosphor mask dot pitch...which you set at runtime if shader parameters are enabled. If RUNTIME_PHOSPHOR_BLOOM_SIGMA is commented out (faster), this won't matter: The shader will just select the blur size and standard deviation suitable for the mask_triad_size_desired_static setting in user-settings.cgp. It will be fast, but larger triads won't blur enough, and smaller triads will blur more than they need to. However, if RUNTIME_PHOSPHOR_BLOOM_SIGMA is enabled, the shader will calculate an optimal standard deviation and try to use the right blur size for it...but using an \"if standard deviation is such and such\" condition would be prohibitively slow without dynamic branches. Instead, the shader uses the largest and slowest blur the user lets it use (to cover the widest range of triad sizes and standard deviations), according to these macros: #define PHOSPHOR_BLOOM_TRIADS_LARGER_THAN_3_PIXELS //#define PHOSPHOR_BLOOM_TRIADS_LARGER_THAN_6_PIXELS //#define PHOSPHOR_BLOOM_TRIADS_LARGER_THAN_9_PIXELS //#define PHOSPHOR_BLOOM_TRIADS_LARGER_THAN_12_PIXELS The more you have uncommented, the larger the triads you can blur, but the slower runtime sigmas will be if your GPU can't use dynamic branches. By default, triads up to 6 pixels wide will be bloomed perfectly, and a little beyond that (8 should be fine), but going too far beyond that will create blocking artifacts in the blur due to an insufficient support size. tex2Dlod: The tex2Dlod function allows the shader to disables anisotropic filtering, which can get confused when we're manually tiling the texture coordinates for a small resized phosphor mask tile (it creates nasty seam artifacts). There are several ways the shader can deal with this: The cheapest is to use tex2Dlod to tile the output of MASK_RESIZE across the screen...and the slower alternatives either require derivatives or force the shader to draw 2 tiles to MASK_RESIZE in each direction, thereby reducing your maximum allowed dot pitch by half. tex2Dbias: According to nVidia's Cg language standard library page, tex2Dbias requires the fp30 profile, which doesn't work on ATI/AMD cards...but you might actually have mixed results. This can be used as a substitute for tex2Dlod at times, so it's worth trying even on ATI. #Why is everything still so slow?!? \u00b6 For maximum quality and configurability out of the box, almost all shader parameters are enabled by default (except for the disproportionately expensive runtime subpixel offsets). Some are more expensive than others. Commenting the following macro disables all shader parameters: #define RUNTIME_SHADER_PARAMS_ENABLE Commenting these macros disables selective shader parameters: #define RUNTIME_PHOSPHOR_BLOOM_SIGMA #define RUNTIME_ANTIALIAS_WEIGHTS //#define RUNTIME_ANTIALIAS_SUBPIXEL_OFFSETS #define RUNTIME_SCANLINES_HORIZ_FILTER_COLORSPACE #define RUNTIME_GEOMETRY_TILT #define RUNTIME_GEOMETRY_MODE #define FORCE_RUNTIME_PHOSPHOR_MASK_MODE_TYPE_SELECT Note that all shader parameters will still show up in your GUI list, and the disabled ones simply won't work. Finally, there are a lot of other options enabled by default that carry serious performance penalties. For instance, the default antialiasing filter is a cubic filter, because it's the most configurable, but it's also quite slow if RUNTIME_ANTIALIAS_WEIGHTS is #defined. A lot of the static true/false options have a significant influence, and the shader is faster if the red subpixel offset (from which the blue one is calculated as well) is zero...even if it's a static value, because RUNTIME_ANTIALIAS_SUBPIXEL_OFFSETS is commented out. To avoid any confusion, I should also clarify now that subpixel offsets are separate from scanline beam convergence offsets. To quickly see how much performance you can get from other settings, you can temporarily replace your user-settings.h with one of: crt-royale-settings-files/user-settings-fast-static-ati.h crt-royale-settings-files/user-settings-fast-static-nvidia.h, then load crt-royale-fake-bloom.cgp. It should be far more playable. Why won't my shader bloom my phosphors enough? \u00b6 First, see the discussion about dynamic branching above, in 1. If you don't have dynamic branches, you can either uncomment the lines that let the shader pessimistically use larger blurs than it's guaranteed to need (which is slow), or...you can just use crt-royale-fake-bloom.cgp, which doesn't have this problem. :) Why can't I make my phosphors any bigger? \u00b6 By default, the phosphor mask is Lanczos-resized in earlier passes to your specified dot pitch (mask_sample_mode = 0). This gives a much sharper result than mipmapped hardware sampling (mask_sample_mode = 1), but it can be much slower without taking proper care: If the input mask tile (containing 8 phosphor triads by default) is large, like 512x512, and you try to resize it to 24x24 for 3x3 pixel triads, the resizer has to take 128 samples in each pass/direction (the max allowed) for a 3-lobe Lanczos filter. This can be very slow, so I made the output of MASK_RESIZE very small by default: Just 1/16 th of the viewport size in each direction. The exact limit scales with your viewport size, and it should be reasonable, but the restrictions can get tighter if we can't use tex2Dlod and have to fit two whole tiles (16 phosphor triads with default 8-triad tiles) into the MASK_RESIZE pass for compatibility with anisotropic filtering (long story). If you want bigger phosphor triads, you have two options: Set mask_sample_mode to 1 in your shader params (if enabled) or set mask_sample_mode_static to 1 in your user-settings.h file. This will use hardware sampling, which is softer but has no limitations. To increase the limit with manual mask-resizing (best quality), you need to do five things: Go into your .cgp file and find the MASK_RESIZE pass (the horizontal mask resizing pass) and the one before it (the vertical mask resizing pass). Find the viewport-relative scales, which should say 0.0625, and change them to 0.125 or even 0.25. Still in your .cgp file, also make sure your mask_*_texture_small filenames point to LUT textures that are larger than your final desired onscreen size (upsizing is not currently permitted). Go into user-cgp-constants.h and change mask_resize_viewport_scale from 0.0625 to the new value you changed it to in step 1. This is necessary, because we can't pass that value from the .cgp file to the shader, and the shader can't compute the viewport size (necessary) without it. Still in user-cgp-constants.h, update mask_texture_small_size and mask_triads_per_tile appropriately if you changed your LUT texture in step 2. Reload your .cgp file. I REALLY wish there was an easier way to do that, but my hands are tied until .cgp files are allowed to pass more information to .cg shaders (which would require major updates to the cg2glsl script). Why can't I make my phosphors any smaller than 2 pixels per triad? \u00b6 This is controlled by mask_min_allowed_triad_size in your user-settings.h file. Set it to 1.0 instead of 2.0 (anything lower than 1 is pointless), and you're set. It defaults to 2.0 to make mask resizing twice as fast when dynamic branches aren't allowed. Some people may want to be able to fade the phosphors away entirely to get a more PVM-like scanlined image though, so change it to 1.0 for that (or get a higher-resolution display ;)). Note: This setting should be obsolete soon. I have some ideas for more sophisticated mask resampling that I just don't have a spare few hours to implement yet. I am not running integrated graphics. Why am I getting errors? \u00b6 First recheck the top of your user-settings.h to make sure incompatible driver options are commented out (disabled). If they're all disabled and you're still having problems, you've probably found a bug. There are bound to be a number of them with certain setting combinations, and there might even be a few individual settings I broke more recently than I tested them. My contact information is up top, so let me know! Why am I getting banding in dark colors? Or, why won't mipmapping work? \u00b6 crt-royale uses features like sRGB and mipmapping, which are not available in the latest Retroarch release (1.0.0.2) at the time of this writing. You may get banding in dark colors if your platform or Retroarch version doesn't support sRGB FBO's, and mask_sample_mode 1 will look awful without mipmapping. I expect most platforms capable of running this shader at full speed will support sRGB FBO's, but if yours doesn't, please let me know, and I'll include a note about it. Alternately, setting levels_autodim_temp too low will cause precision loss and banding. How do I set geometry/curvature/etc.? \u00b6 If RUNTIME_SHADER_PARAMS_ENABLE and RUNTIME_GEOMETRY_MODE are both #defined (not commented out) in user-settings.cgp, you can find these options in your shader parameters (in Retroarch's RGUI for instance) under e.g. geom_mode. Otherwise, you can set the corresponding e.g. geom_mode_static options in user-settings.h. Why don't my shader parameters stick? \u00b6 This is a bit confusing, at least in the version of Retroarch I'm using. In the Shader Options menu, Parameters (Current) controls what's on your screen right now, whereas Parameters (RGUI) seems to control what gets saved to a shader preset (in your base shaders directory) with Save As Shader Preset. Why did you slow the shader down with all of these features I don't want? Why didn't you make the defaults more to my liking? \u00b6 The default settings tend to best match flat ~13\" slot mask TV's with sharp scanlines. Real CRT's however vary a lot in their characteristics (and many are softer in more ways than one), so it's impossible to make the default settings look like everyone's favorite CRT. Moreover, it's impossible to decide which of the slower features and options are superfluous: Some people love curvature, and some people hate it. Some people love scanlines, and some people hate them. Some people love phosphors, and some people hate them. Some people love interlacing support, and some people hate it. Some people love sharpness, and some people hate it. Some people love convergence error, and some people hate it. The one thing you hate the most is probably someone else's most critical feature. This is why there are so many options, why the shader is so complicated, and why it's impossible to please everyone out of the box...unfortunately. That said, if you spend some time tweaking the settings, you're bound to get a picture you like. Once you've made up your mind, you can save the settings to a user-settings.h file and disable shader parameters and other slow options to get the kind of performance you want. Why didn't you include a shader preset with NTSC support? Why didnt' you include more canned presets with different options? Why can't I select from one of several user settings files without manual file renaming? \u00b6 I do plan on adding a version that uses the NTSC shader for the first two passes, but it will take a bit of work, because there are several NTSC shader versions as it is. It's easy enough to combine the HALATION_BLUR passes into a one-pass blur from blurs/blur9x9fast.cg, but I'm not sure yet just how much modification the NTSC shader passes themselves might need for best results. I originally wanted NTSC support to be included out-of-the-box, but I'd also like to release the shader ASAP, so it'll have to wait. As for other canned presets, that's a little more complicated: I DO intend on creating more canned presets, but the combinatorial explosion of major codepath options in this shader is too overwhelming to be as exhaustive as I'd like. When I get the time, I'll add what I can to make this more user-friendly. In the meantime, I'll start adding a few different default versions of the user settings file and put them in a subdirectory for people to manually place in the main directory and rename to \"user-settings.h.\" However, the libretro Cg shader specification (and the Cg to GLSL compiler) does not currently allow .cgp files to pass any static settings to the source files. This presents a huge problem, because it means that in order to create a new preset with different options, I also have to create duplicate files for EVERY single .cg pass for every permutation, not just the .cgp. I plan on creating a number of skeleton wrapper .cg files in a subdirectory (which set a few options and then include the main .cg file for the pass), but it'll be a while yet. In the meantime, I'd rather let people play with what's already done than keep it hidden on my hard drive. Why do so many values in user_settings.h have a _static suffix? \u00b6 The \"_static\" suffix is there to prevent naming conflicts with runtime shader parameters: The shader usually uses a version without the suffix, which is assigned either the value of the \"_static\" version or the runtime shader parameter version. If a value in user-settings.h doesn't have a \"_static\" suffix, it's usually because it's a static compile-time option only, with no corresponding runtime version. Basically, you can ignore the suffix. :) Are there any broken settings I should be aware of? What if I want to change settings in the .cgp file? \u00b6 As far as I know, all of the options in user-settings.h and the runtime shader parameters are pretty robust, with a few caveats: As noted above, there are some tradeoffs between runtime and compile-time options. If runtime blur sigmas are disabled for instance, the phosphor bloom (and to a lesser extent, the fake bloom) may not blur the right amount. If you set your aspect ratio incorrectly, and mask_specify_num_triads == 1.0 (i.e. true, as opposed to 0.0, which is false), the shader will misinterpret the number of triads you want by the same proportion. Disabled shader parameters will do nothing, including either: mask_triad_size_desired mask_num_triads_desired, depending on the value of mask_specify_num_triads. There is a broken and unimplemented option in derived-settings-and-constants.h, but users shouldn't need to mess around in there anyway. (It's related to the more efficient phosphor mask resampling I want to implement.) However, the .cgp files are another story: They are pretty brittle, especially when it comes to their interaction with user-cgp-constants.h. Be aware that the shader passes rely on scale types and sizes in your .cgp file being exactly what they expect. Do not change any scale types from the defaults, or you'll get artifacts under certain conditions. You can change the BLOOM_APPROX and MASK_RESIZE scale values (not scale types), but you must update the associated constant in user-cgp-constants.h to let the .cg shader files know about it, and the implications may reach farther than you expect. Similarly, if you plan on changing an LUT texture, make sure you update the associated constants in user-cgp-constants.h. In short, if you plan on changing anything in a .cgp file, you'll want to read it thoroughly first, especially the \"IMPORTANT\" section at the top. What are the most common dot pitches for CRT televisions? What kind of resolution would I need for a real shadow mask? \u00b6 The most demanding CRT we're ever likely to emulate is a Sony PVM-20M4U: Width: 450mm Aperture Grille Pitch: 0.31mm Triads in 4:3 frame: 1451, assuming little to no overscan For 3-pixel triads, we would need about 6k UHD resolution. A BVM-20F1U has similar requirements. However, common slot masks are far more similar to the kind of image this shader will produce at 900p, 1080p, 1200p, and 1440p: A typical 13\" diagonal CRT might have a 0.60mm slot pitch, for a total of 440.26666666666665 or so phosphor triads horizontally. A typical 19\" diagonal CRT might have a 0.75mm slot pitch, for a total of 514.7733333333333 or so phosphor triads horizontally. According to http://repairfaq.ece.drexel.edu/REPAIR/F_crtfaq.html , a typical 25\" diagonal CRT might have a 0.9mm slot pitch, for a total of 564.4444444444445 or so phosphor triads horizontally. A 21\" Samsung SMC210N CCTV monitor (450 TV lines) has a 0.7mm stripe pitch, for a total of 609.6 or so phosphor triads horizontally. The included EDP shadow mask starts looking very good with ~6-pixel triads, so it may take nearly 4k resolution to make it a particularly compelling option. However, it's possible to make smaller shadow masks on a pixel-by-pixel basis and tile them at a 1:1 ratio (mask_sample_mode = 2). I may include a mask like this in a future update. Is this phosphor bloom realistic? \u00b6 Probably not: Realistically, the \"phosphor bloom\" blurs bright phosphors significantly more than your eyes would bloom the brighter phosphors on a real CRT. This extra blurring however is necessary to distribute enough brightness to nearby pixels that we can amplify the overall brightness to that of the original source after applying the phosphor mask. If you're interested, there are more comments on the subject at the top of the fragment shader in crt-royale-bloom-approx.cg. On the subject of the phosphor bloom: I intended to include some exposition about the math behind the brightpass calculation (and the much more complex and thorough calculation I originally used to blur the minimal amount necessary, which turned out to be inferior in practice), but that document isn't release-ready at the moment. Sorry Hyllian. ;) So what do you plan on adding in the future? I'd like to add these relatively soon: A combined ntsc-crt-royale.cgp and ntsc-crt-royale-fake-bloom.cgp. More presets, especially if maister or squarepusher find a way to make the Cg to GLSL compiler process .cgp files (which will allows .cgp's to pass arbitrary #defines to the .cg shader passes). More efficient and flexible phosphor mask resampling. Hopefully, this will make it possible to manually resize the mask on Intel HD Graphics as well. Make it more easy and convenient to use and experiment with mask_sample_mode 2 (direct 1:1 tiling of an input texture) by using a separate LUT texture with its own parameters in user-cgp-constants.h, etc. I haven't done this yet because it requires yet another texture sample that could hurt other codepaths, and I'm waiting until I have time to optimize it. Refine the runtime shader parameters: Some of them are probably too fine-grained and slow to change. Maybe's: I've had trouble getting LUT's from subdirectories to work consistently across platforms, but I'd like to get around that and include more mask textures I've made. If you're using spherical curvature with a small radius, the edges of the sphere are blocky due to the pixel discards being done in 2x2 fragment blocks. I'd like to fix this if it can be done without a performance hit. I have some ideas for procedural mask generation with a fast, closed-form low-pass filter, but I don't know if I'll ever get around to it.","title":"crt-royale"},{"location":"shader/crt_royale/#crt-royale","text":"CRT-Royale is a collection of shaders developed by TroggleMonkey. It is quite an advanced shader that requires a bit of documentation in order to get the most out of it. Contents","title":"CRT-Royale"},{"location":"shader/crt_royale/#basics","text":"crt-royale is a highly customizable CRT shader for Retroarch and other programs supporting the libretro Cg shader standard. It uses a number of nonstandardized extensions like sRGB FBO's, mipmapping, and runtime shader parameters, but hopefully it will run without much of a fuss on new implementations of the standard as well.","title":"Basics"},{"location":"shader/crt_royale/#customizable-parameters","text":"There are a huge number of parameters. Among the things you can customize: Phosphor mask type: An aperture grille, slot mask, and shadow mask are each included, although the latter won't be seeing much usage until 1440p displays and better become more common (4k UHD and 8k UHD are increasingly optimal). Phosphor mask dot pitch Phosphor mask resampling method: Choose between Lanczos sinc resizing, mipmapped hardware resizing, and no resizing of the input LUT. Phosphor bloom softness and type (real or fake ;)) Gaussian and generalized Gaussian scanline beam properties/distribution, including convergence offsets Screen geometry, including curvature (spherical, alternative spherical, or cylindrical like Trinitrons), tilt, and borders Antialiasing level, resampling filter, and sharpness parameters for gracefully combining screen curvature with high-frequency phosphor details, including optionally resampling based on RGB subpixel positions. Halation (electrons bouncing under the glass and lighting random phosphors) random phosphors) Refractive diffusion (light spreading from the imperfect CRT glass face) Interlacing options etc.","title":"Customizable Parameters"},{"location":"shader/crt_royale/#how-to-customize","text":"There are two major ways to customize the shader: Runtime shader parameters allow convenient experimentation with real-time feedback, but they are much slower, because they prevent static evaluation of a lot of math. Disabling them drastically speeds up the shader. If runtime shader parameters are disabled (partially or totally), those same settings can be freely altered in the text of the user-settings.h file. There are also a number of other static-only settings, including the #define macros which indicate where and when to allow runtime shader parameters. To disable them entirely, comment out the \"#define RUNTIME_SHADER_PARAMS_ENABLE\" line by putting a double-slash (\"//\") at the ginning...your FPS will skyrocket.","title":"How to Customize"},{"location":"shader/crt_royale/#preset-versions","text":"You may also note that there are two major versions of the shader preset: crt-royale.cgh is the \"full\" version of the shader, which blooms the light from the brighter phosphors to maintain brightness and avoid clipping. crt-royale-fake-bloom.cgh is the \"cheater's\" version of the shader, which only fakes the bloom based on carefully blending in a [potentially blurred] version of the original input. This version is MUCH faster, and you have to strain to see the difference, so people with slower GPU's will prefer it. There's a lot to play around with, and I encourage everyone using this shader to read through the user-settings.h file to learn about the parameters. Before loading the shader, be sure to read the next section, entitled...","title":"Preset Versions"},{"location":"shader/crt_royale/#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"shader/crt_royale/#why-is-the-shader-crashing-when-i-load-it","text":"Do you get C6001 or C6002 errors with integrated graphics, like Intel HD 4000? If so, please try one of the following .cgp presets: crt-royale-intel.cgp crt-royale-fake-bloom-intel.cgp These load .cg wrappers that #define INTEGRATED_GRAPHICS_COMPATIBILITY_MODE (also available in user-settings.h) before loading the main .cg shader files. Integrated graphics compatibility mode will disable these three features, which currently require more registers or instructions than Intel GPU's allow: PHOSPHOR_MASK_MANUALLY_RESIZE: The phosphor mask will be softer. (This may be reenabled in a later release.) RUNTIME_GEOMETRY_MODE: You must change the screen geometry/curvature using the geom_mode_static setting in user-settings.h. The high-quality 4x4 Gaussian resize for the bloom approximation Using Intel-specific .cgp files is equivalent to #defining INTEGRATED_GRAPHICS_COMPATIBILITY_MODE in your user-settings.h. Out of the box, user-settings.h is configured for maximum configurability and compatibility with dedicated nVidia and AMD/ATI GPU's. Compatibility mode is disabled by default to avoid silently degrading quality for AMD/ATI and nVidia users, so Intel-specific .cgp's are a convenient way for Intel users to play with the shader without editing text files. I've tested this solution on Intel HD 4000 graphics, and it should work for that GPU at least, but please let me know if you're still having problems!","title":"Why is the shader crashing when I load it!?"},{"location":"shader/crt_royale/#why-is-everything-so-slow","text":"Out of the box, this will be a problem for all but monster GPU's. The default user-settings.h file disables any features and optimizations which might cause compilation failure on AMD/ATI GPU's. Despite the name of the options, this is not a problem with your card or drivers; it's a shortcoming in the Cg shader compiler's nVidia-centric profile setups. Uncommenting the following #define macros at the top of user-settings.h will help performance a good deal on compatible nVidia cards: #define DRIVERS_ALLOW_DERIVATIVES #define DRIVERS_ALLOW_DYNAMIC_BRANCHES #define ACCOMODATE_POSSIBLE_DYNAMIC_LOOPS #define DRIVERS_ALLOW_TEX2DLOD #define DRIVERS_ALLOW_TEX2DBIAS A few of these warrant some elaboration. First, derivatives: Derivatives allow the shader to cheaply calculate a tangent-space matrix for correct antialiasing when curvature or overscan are used. Without them, there are two options: Cheat, and there will be artifacts with strong cylindrical curvature Compute the correct tangent-space matrix analytically. This is used by default, and it's controlled by this option near the bottom: geom_force_correct_tangent_matrix = true Dynamic branches: Dynamic branches allow the shader to avoid performing computations that it doesn't need (but might have, given different runtime options). Without them, the shader has to either let the GPU evaluate every possible codepath and select a result, or make a \"best guess\" ahead of time. The full phosphor bloom suffers most from not having dynamic branches, because the shader doesn't know how big of a blur to use until it knows your phosphor mask dot pitch...which you set at runtime if shader parameters are enabled. If RUNTIME_PHOSPHOR_BLOOM_SIGMA is commented out (faster), this won't matter: The shader will just select the blur size and standard deviation suitable for the mask_triad_size_desired_static setting in user-settings.cgp. It will be fast, but larger triads won't blur enough, and smaller triads will blur more than they need to. However, if RUNTIME_PHOSPHOR_BLOOM_SIGMA is enabled, the shader will calculate an optimal standard deviation and try to use the right blur size for it...but using an \"if standard deviation is such and such\" condition would be prohibitively slow without dynamic branches. Instead, the shader uses the largest and slowest blur the user lets it use (to cover the widest range of triad sizes and standard deviations), according to these macros: #define PHOSPHOR_BLOOM_TRIADS_LARGER_THAN_3_PIXELS //#define PHOSPHOR_BLOOM_TRIADS_LARGER_THAN_6_PIXELS //#define PHOSPHOR_BLOOM_TRIADS_LARGER_THAN_9_PIXELS //#define PHOSPHOR_BLOOM_TRIADS_LARGER_THAN_12_PIXELS The more you have uncommented, the larger the triads you can blur, but the slower runtime sigmas will be if your GPU can't use dynamic branches. By default, triads up to 6 pixels wide will be bloomed perfectly, and a little beyond that (8 should be fine), but going too far beyond that will create blocking artifacts in the blur due to an insufficient support size. tex2Dlod: The tex2Dlod function allows the shader to disables anisotropic filtering, which can get confused when we're manually tiling the texture coordinates for a small resized phosphor mask tile (it creates nasty seam artifacts). There are several ways the shader can deal with this: The cheapest is to use tex2Dlod to tile the output of MASK_RESIZE across the screen...and the slower alternatives either require derivatives or force the shader to draw 2 tiles to MASK_RESIZE in each direction, thereby reducing your maximum allowed dot pitch by half. tex2Dbias: According to nVidia's Cg language standard library page, tex2Dbias requires the fp30 profile, which doesn't work on ATI/AMD cards...but you might actually have mixed results. This can be used as a substitute for tex2Dlod at times, so it's worth trying even on ATI.","title":"Why is everything so slow!?"},{"location":"shader/crt_royale/#why-is-everything-still-so-slow","text":"For maximum quality and configurability out of the box, almost all shader parameters are enabled by default (except for the disproportionately expensive runtime subpixel offsets). Some are more expensive than others. Commenting the following macro disables all shader parameters: #define RUNTIME_SHADER_PARAMS_ENABLE Commenting these macros disables selective shader parameters: #define RUNTIME_PHOSPHOR_BLOOM_SIGMA #define RUNTIME_ANTIALIAS_WEIGHTS //#define RUNTIME_ANTIALIAS_SUBPIXEL_OFFSETS #define RUNTIME_SCANLINES_HORIZ_FILTER_COLORSPACE #define RUNTIME_GEOMETRY_TILT #define RUNTIME_GEOMETRY_MODE #define FORCE_RUNTIME_PHOSPHOR_MASK_MODE_TYPE_SELECT Note that all shader parameters will still show up in your GUI list, and the disabled ones simply won't work. Finally, there are a lot of other options enabled by default that carry serious performance penalties. For instance, the default antialiasing filter is a cubic filter, because it's the most configurable, but it's also quite slow if RUNTIME_ANTIALIAS_WEIGHTS is #defined. A lot of the static true/false options have a significant influence, and the shader is faster if the red subpixel offset (from which the blue one is calculated as well) is zero...even if it's a static value, because RUNTIME_ANTIALIAS_SUBPIXEL_OFFSETS is commented out. To avoid any confusion, I should also clarify now that subpixel offsets are separate from scanline beam convergence offsets. To quickly see how much performance you can get from other settings, you can temporarily replace your user-settings.h with one of: crt-royale-settings-files/user-settings-fast-static-ati.h crt-royale-settings-files/user-settings-fast-static-nvidia.h, then load crt-royale-fake-bloom.cgp. It should be far more playable.","title":"#Why is everything still so slow?!?"},{"location":"shader/crt_royale/#why-wont-my-shader-bloom-my-phosphors-enough","text":"First, see the discussion about dynamic branching above, in 1. If you don't have dynamic branches, you can either uncomment the lines that let the shader pessimistically use larger blurs than it's guaranteed to need (which is slow), or...you can just use crt-royale-fake-bloom.cgp, which doesn't have this problem. :)","title":"Why won't my shader bloom my phosphors enough?"},{"location":"shader/crt_royale/#why-cant-i-make-my-phosphors-any-bigger","text":"By default, the phosphor mask is Lanczos-resized in earlier passes to your specified dot pitch (mask_sample_mode = 0). This gives a much sharper result than mipmapped hardware sampling (mask_sample_mode = 1), but it can be much slower without taking proper care: If the input mask tile (containing 8 phosphor triads by default) is large, like 512x512, and you try to resize it to 24x24 for 3x3 pixel triads, the resizer has to take 128 samples in each pass/direction (the max allowed) for a 3-lobe Lanczos filter. This can be very slow, so I made the output of MASK_RESIZE very small by default: Just 1/16 th of the viewport size in each direction. The exact limit scales with your viewport size, and it should be reasonable, but the restrictions can get tighter if we can't use tex2Dlod and have to fit two whole tiles (16 phosphor triads with default 8-triad tiles) into the MASK_RESIZE pass for compatibility with anisotropic filtering (long story). If you want bigger phosphor triads, you have two options: Set mask_sample_mode to 1 in your shader params (if enabled) or set mask_sample_mode_static to 1 in your user-settings.h file. This will use hardware sampling, which is softer but has no limitations. To increase the limit with manual mask-resizing (best quality), you need to do five things: Go into your .cgp file and find the MASK_RESIZE pass (the horizontal mask resizing pass) and the one before it (the vertical mask resizing pass). Find the viewport-relative scales, which should say 0.0625, and change them to 0.125 or even 0.25. Still in your .cgp file, also make sure your mask_*_texture_small filenames point to LUT textures that are larger than your final desired onscreen size (upsizing is not currently permitted). Go into user-cgp-constants.h and change mask_resize_viewport_scale from 0.0625 to the new value you changed it to in step 1. This is necessary, because we can't pass that value from the .cgp file to the shader, and the shader can't compute the viewport size (necessary) without it. Still in user-cgp-constants.h, update mask_texture_small_size and mask_triads_per_tile appropriately if you changed your LUT texture in step 2. Reload your .cgp file. I REALLY wish there was an easier way to do that, but my hands are tied until .cgp files are allowed to pass more information to .cg shaders (which would require major updates to the cg2glsl script).","title":"Why can't I make my phosphors any bigger?"},{"location":"shader/crt_royale/#why-cant-i-make-my-phosphors-any-smaller-than-2-pixels-per-triad","text":"This is controlled by mask_min_allowed_triad_size in your user-settings.h file. Set it to 1.0 instead of 2.0 (anything lower than 1 is pointless), and you're set. It defaults to 2.0 to make mask resizing twice as fast when dynamic branches aren't allowed. Some people may want to be able to fade the phosphors away entirely to get a more PVM-like scanlined image though, so change it to 1.0 for that (or get a higher-resolution display ;)). Note: This setting should be obsolete soon. I have some ideas for more sophisticated mask resampling that I just don't have a spare few hours to implement yet.","title":"Why can't I make my phosphors any smaller than 2 pixels per triad?"},{"location":"shader/crt_royale/#i-am-not-running-integrated-graphics-why-am-i-getting-errors","text":"First recheck the top of your user-settings.h to make sure incompatible driver options are commented out (disabled). If they're all disabled and you're still having problems, you've probably found a bug. There are bound to be a number of them with certain setting combinations, and there might even be a few individual settings I broke more recently than I tested them. My contact information is up top, so let me know!","title":"I am not running integrated graphics. Why am I getting errors?"},{"location":"shader/crt_royale/#why-am-i-getting-banding-in-dark-colors-or-why-wont-mipmapping-work","text":"crt-royale uses features like sRGB and mipmapping, which are not available in the latest Retroarch release (1.0.0.2) at the time of this writing. You may get banding in dark colors if your platform or Retroarch version doesn't support sRGB FBO's, and mask_sample_mode 1 will look awful without mipmapping. I expect most platforms capable of running this shader at full speed will support sRGB FBO's, but if yours doesn't, please let me know, and I'll include a note about it. Alternately, setting levels_autodim_temp too low will cause precision loss and banding.","title":"Why am I getting banding in dark colors? Or, why won't mipmapping work?"},{"location":"shader/crt_royale/#how-do-i-set-geometrycurvatureetc","text":"If RUNTIME_SHADER_PARAMS_ENABLE and RUNTIME_GEOMETRY_MODE are both #defined (not commented out) in user-settings.cgp, you can find these options in your shader parameters (in Retroarch's RGUI for instance) under e.g. geom_mode. Otherwise, you can set the corresponding e.g. geom_mode_static options in user-settings.h.","title":"How do I set geometry/curvature/etc.?"},{"location":"shader/crt_royale/#why-dont-my-shader-parameters-stick","text":"This is a bit confusing, at least in the version of Retroarch I'm using. In the Shader Options menu, Parameters (Current) controls what's on your screen right now, whereas Parameters (RGUI) seems to control what gets saved to a shader preset (in your base shaders directory) with Save As Shader Preset.","title":"Why don't my shader parameters stick?"},{"location":"shader/crt_royale/#why-did-you-slow-the-shader-down-with-all-of-these-features-i-dont-want-why-didnt-you-make-the-defaults-more-to-my-liking","text":"The default settings tend to best match flat ~13\" slot mask TV's with sharp scanlines. Real CRT's however vary a lot in their characteristics (and many are softer in more ways than one), so it's impossible to make the default settings look like everyone's favorite CRT. Moreover, it's impossible to decide which of the slower features and options are superfluous: Some people love curvature, and some people hate it. Some people love scanlines, and some people hate them. Some people love phosphors, and some people hate them. Some people love interlacing support, and some people hate it. Some people love sharpness, and some people hate it. Some people love convergence error, and some people hate it. The one thing you hate the most is probably someone else's most critical feature. This is why there are so many options, why the shader is so complicated, and why it's impossible to please everyone out of the box...unfortunately. That said, if you spend some time tweaking the settings, you're bound to get a picture you like. Once you've made up your mind, you can save the settings to a user-settings.h file and disable shader parameters and other slow options to get the kind of performance you want.","title":"Why did you slow the shader down with all of these features I don't want? Why didn't you make the defaults more to my liking?"},{"location":"shader/crt_royale/#why-didnt-you-include-a-shader-preset-with-ntsc-support-why-didnt-you-include-more-canned-presets-with-different-options-why-cant-i-select-from-one-of-several-user-settings-files-without-manual-file-renaming","text":"I do plan on adding a version that uses the NTSC shader for the first two passes, but it will take a bit of work, because there are several NTSC shader versions as it is. It's easy enough to combine the HALATION_BLUR passes into a one-pass blur from blurs/blur9x9fast.cg, but I'm not sure yet just how much modification the NTSC shader passes themselves might need for best results. I originally wanted NTSC support to be included out-of-the-box, but I'd also like to release the shader ASAP, so it'll have to wait. As for other canned presets, that's a little more complicated: I DO intend on creating more canned presets, but the combinatorial explosion of major codepath options in this shader is too overwhelming to be as exhaustive as I'd like. When I get the time, I'll add what I can to make this more user-friendly. In the meantime, I'll start adding a few different default versions of the user settings file and put them in a subdirectory for people to manually place in the main directory and rename to \"user-settings.h.\" However, the libretro Cg shader specification (and the Cg to GLSL compiler) does not currently allow .cgp files to pass any static settings to the source files. This presents a huge problem, because it means that in order to create a new preset with different options, I also have to create duplicate files for EVERY single .cg pass for every permutation, not just the .cgp. I plan on creating a number of skeleton wrapper .cg files in a subdirectory (which set a few options and then include the main .cg file for the pass), but it'll be a while yet. In the meantime, I'd rather let people play with what's already done than keep it hidden on my hard drive.","title":"Why didn't you include a shader preset with NTSC support? Why didnt' you include more canned presets with different options? Why can't I select from one of several user settings files without manual file renaming?"},{"location":"shader/crt_royale/#why-do-so-many-values-in-user_settingsh-have-a-_static-suffix","text":"The \"_static\" suffix is there to prevent naming conflicts with runtime shader parameters: The shader usually uses a version without the suffix, which is assigned either the value of the \"_static\" version or the runtime shader parameter version. If a value in user-settings.h doesn't have a \"_static\" suffix, it's usually because it's a static compile-time option only, with no corresponding runtime version. Basically, you can ignore the suffix. :)","title":"Why do so many values in user_settings.h have a _static suffix?"},{"location":"shader/crt_royale/#are-there-any-broken-settings-i-should-be-aware-of-what-if-i-want-to-change-settings-in-the-cgp-file","text":"As far as I know, all of the options in user-settings.h and the runtime shader parameters are pretty robust, with a few caveats: As noted above, there are some tradeoffs between runtime and compile-time options. If runtime blur sigmas are disabled for instance, the phosphor bloom (and to a lesser extent, the fake bloom) may not blur the right amount. If you set your aspect ratio incorrectly, and mask_specify_num_triads == 1.0 (i.e. true, as opposed to 0.0, which is false), the shader will misinterpret the number of triads you want by the same proportion. Disabled shader parameters will do nothing, including either: mask_triad_size_desired mask_num_triads_desired, depending on the value of mask_specify_num_triads. There is a broken and unimplemented option in derived-settings-and-constants.h, but users shouldn't need to mess around in there anyway. (It's related to the more efficient phosphor mask resampling I want to implement.) However, the .cgp files are another story: They are pretty brittle, especially when it comes to their interaction with user-cgp-constants.h. Be aware that the shader passes rely on scale types and sizes in your .cgp file being exactly what they expect. Do not change any scale types from the defaults, or you'll get artifacts under certain conditions. You can change the BLOOM_APPROX and MASK_RESIZE scale values (not scale types), but you must update the associated constant in user-cgp-constants.h to let the .cg shader files know about it, and the implications may reach farther than you expect. Similarly, if you plan on changing an LUT texture, make sure you update the associated constants in user-cgp-constants.h. In short, if you plan on changing anything in a .cgp file, you'll want to read it thoroughly first, especially the \"IMPORTANT\" section at the top.","title":"Are there any broken settings I should be aware of? What if I want to change settings in the .cgp file?"},{"location":"shader/crt_royale/#what-are-the-most-common-dot-pitches-for-crt-televisions-what-kind-of-resolution-would-i-need-for-a-real-shadow-mask","text":"The most demanding CRT we're ever likely to emulate is a Sony PVM-20M4U: Width: 450mm Aperture Grille Pitch: 0.31mm Triads in 4:3 frame: 1451, assuming little to no overscan For 3-pixel triads, we would need about 6k UHD resolution. A BVM-20F1U has similar requirements. However, common slot masks are far more similar to the kind of image this shader will produce at 900p, 1080p, 1200p, and 1440p: A typical 13\" diagonal CRT might have a 0.60mm slot pitch, for a total of 440.26666666666665 or so phosphor triads horizontally. A typical 19\" diagonal CRT might have a 0.75mm slot pitch, for a total of 514.7733333333333 or so phosphor triads horizontally. According to http://repairfaq.ece.drexel.edu/REPAIR/F_crtfaq.html , a typical 25\" diagonal CRT might have a 0.9mm slot pitch, for a total of 564.4444444444445 or so phosphor triads horizontally. A 21\" Samsung SMC210N CCTV monitor (450 TV lines) has a 0.7mm stripe pitch, for a total of 609.6 or so phosphor triads horizontally. The included EDP shadow mask starts looking very good with ~6-pixel triads, so it may take nearly 4k resolution to make it a particularly compelling option. However, it's possible to make smaller shadow masks on a pixel-by-pixel basis and tile them at a 1:1 ratio (mask_sample_mode = 2). I may include a mask like this in a future update.","title":"What are the most common dot pitches for CRT televisions? What kind of resolution would I need for a real shadow mask?"},{"location":"shader/crt_royale/#is-this-phosphor-bloom-realistic","text":"Probably not: Realistically, the \"phosphor bloom\" blurs bright phosphors significantly more than your eyes would bloom the brighter phosphors on a real CRT. This extra blurring however is necessary to distribute enough brightness to nearby pixels that we can amplify the overall brightness to that of the original source after applying the phosphor mask. If you're interested, there are more comments on the subject at the top of the fragment shader in crt-royale-bloom-approx.cg. On the subject of the phosphor bloom: I intended to include some exposition about the math behind the brightpass calculation (and the much more complex and thorough calculation I originally used to blur the minimal amount necessary, which turned out to be inferior in practice), but that document isn't release-ready at the moment. Sorry Hyllian. ;) So what do you plan on adding in the future? I'd like to add these relatively soon: A combined ntsc-crt-royale.cgp and ntsc-crt-royale-fake-bloom.cgp. More presets, especially if maister or squarepusher find a way to make the Cg to GLSL compiler process .cgp files (which will allows .cgp's to pass arbitrary #defines to the .cg shader passes). More efficient and flexible phosphor mask resampling. Hopefully, this will make it possible to manually resize the mask on Intel HD Graphics as well. Make it more easy and convenient to use and experiment with mask_sample_mode 2 (direct 1:1 tiling of an input texture) by using a separate LUT texture with its own parameters in user-cgp-constants.h, etc. I haven't done this yet because it requires yet another texture sample that could hurt other codepaths, and I'm waiting until I have time to optimize it. Refine the runtime shader parameters: Some of them are probably too fine-grained and slow to change. Maybe's: I've had trouble getting LUT's from subdirectories to work consistently across platforms, but I'd like to get around that and include more mask textures I've made. If you're using spherical curvature with a small radius, the edges of the sphere are blocky due to the pixel discards being done in 2x2 fragment blocks. I'd like to fix this if it can be done without a performance hit. I have some ideas for procedural mask generation with a fast, closed-form low-pass filter, but I don't know if I'll ever get around to it.","title":"Is this phosphor bloom realistic?"},{"location":"shader/cubic/","text":"cubic \u00b6 Background \u00b6 Preview Image \u00b6 cubic-gamma-correct cubic Comments \u00b6 External Links \u00b6 Slang Shaders GLSL Shaders CG Shaders","title":"cubic"},{"location":"shader/cubic/#cubic","text":"","title":"cubic"},{"location":"shader/cubic/#background","text":"","title":"Background"},{"location":"shader/cubic/#preview-image","text":"cubic-gamma-correct cubic","title":"Preview Image"},{"location":"shader/cubic/#comments","text":"","title":"Comments"},{"location":"shader/cubic/#external-links","text":"Slang Shaders GLSL Shaders CG Shaders","title":"External Links"},{"location":"shader/ddt/","text":"ddt \u00b6 Background \u00b6 Preview Image \u00b6 ddt Comments \u00b6 External Links \u00b6 Slang Shaders GLSL Shaders CG Shaders","title":"ddt"},{"location":"shader/ddt/#ddt","text":"","title":"ddt"},{"location":"shader/ddt/#background","text":"","title":"Background"},{"location":"shader/ddt/#preview-image","text":"ddt","title":"Preview Image"},{"location":"shader/ddt/#comments","text":"","title":"Comments"},{"location":"shader/ddt/#external-links","text":"Slang Shaders GLSL Shaders CG Shaders","title":"External Links"},{"location":"shader/dithering/","text":"dithering \u00b6 Background \u00b6 Preview Image \u00b6 bayer-matrix-dithering cbod-v1 gdapt gdapt+xbr-hybrid+aa gdapt+xbr-hybrid+ddt gendither mdapt mdapt+xbr-hybrid+aa mdapt+xbr-hybrid+ddt Comments \u00b6 External Links \u00b6 Slang Shaders GLSL Shaders CG Shaders","title":"dithering"},{"location":"shader/dithering/#dithering","text":"","title":"dithering"},{"location":"shader/dithering/#background","text":"","title":"Background"},{"location":"shader/dithering/#preview-image","text":"bayer-matrix-dithering cbod-v1 gdapt gdapt+xbr-hybrid+aa gdapt+xbr-hybrid+ddt gendither mdapt mdapt+xbr-hybrid+aa mdapt+xbr-hybrid+ddt","title":"Preview Image"},{"location":"shader/dithering/#comments","text":"","title":"Comments"},{"location":"shader/dithering/#external-links","text":"Slang Shaders GLSL Shaders CG Shaders","title":"External Links"},{"location":"shader/eagle/","text":"eagle \u00b6 Background \u00b6 Preview Image \u00b6 supereagle Comments \u00b6 External Links \u00b6 Slang Shaders GLSL Shaders CG Shaders","title":"eagle"},{"location":"shader/eagle/#eagle","text":"","title":"eagle"},{"location":"shader/eagle/#background","text":"","title":"Background"},{"location":"shader/eagle/#preview-image","text":"supereagle","title":"Preview Image"},{"location":"shader/eagle/#comments","text":"","title":"Comments"},{"location":"shader/eagle/#external-links","text":"Slang Shaders GLSL Shaders CG Shaders","title":"External Links"},{"location":"shader/handheld-border/","text":"handheld console borders \u00b6 Description \u00b6 Shaders that apply a handheld console border image, at different scale factors, for various handheld consoles. Preview Image \u00b6 dmg-2x dmg-3x dmg-4x dmg-5x dmg-5x gb-pocket-2x gb-pocket-3x gb-pocket-4x gb-pocket-5x gb-pocket-6x gb-pocket-6x gba-3x gba-4x gba-5x gba-6x gbc-2x gbc-3x gbc-4x gb-pocket-5x gb-pocket-6x gba-2x gba-3x gba-4x gba-5x gba-6x gbc-2x gbc-3x gbc-4x gbc-5x gbc-6x gg-2x gg-3x gg-4x gg-5x gg-6x ngp-2x ngp-3x ngp-4x ngp-5x ngp-6x Comments \u00b6 External Links \u00b6 Slang Shaders GLSL Shaders CG Shaders","title":"handheld-border"},{"location":"shader/handheld-border/#handheld-console-borders","text":"","title":"handheld console borders"},{"location":"shader/handheld-border/#description","text":"Shaders that apply a handheld console border image, at different scale factors, for various handheld consoles.","title":"Description"},{"location":"shader/handheld-border/#preview-image","text":"dmg-2x dmg-3x dmg-4x dmg-5x dmg-5x gb-pocket-2x gb-pocket-3x gb-pocket-4x gb-pocket-5x gb-pocket-6x gb-pocket-6x gba-3x gba-4x gba-5x gba-6x gbc-2x gbc-3x gbc-4x gb-pocket-5x gb-pocket-6x gba-2x gba-3x gba-4x gba-5x gba-6x gbc-2x gbc-3x gbc-4x gbc-5x gbc-6x gg-2x gg-3x gg-4x gg-5x gg-6x ngp-2x ngp-3x ngp-4x ngp-5x ngp-6x","title":"Preview Image"},{"location":"shader/handheld-border/#comments","text":"","title":"Comments"},{"location":"shader/handheld-border/#external-links","text":"Slang Shaders GLSL Shaders CG Shaders","title":"External Links"},{"location":"shader/handheld/","text":"handheld \u00b6 Description \u00b6 Collection of handheld specific shaders. Preview Image \u00b6 dot gameboy-light gameboy-pocket gameboy gba-color lcd-3x lcd-grid-v2-gba-color-motionblur lcd-grid-v2 lcd-grid-v2 nds-color psp-color vba-color zfast-lcd Comments \u00b6 External Links \u00b6 Slang Shaders GLSL Shaders CG Shaders","title":"handheld"},{"location":"shader/handheld/#handheld","text":"","title":"handheld"},{"location":"shader/handheld/#description","text":"Collection of handheld specific shaders.","title":"Description"},{"location":"shader/handheld/#preview-image","text":"dot gameboy-light gameboy-pocket gameboy gba-color lcd-3x lcd-grid-v2-gba-color-motionblur lcd-grid-v2 lcd-grid-v2 nds-color psp-color vba-color zfast-lcd","title":"Preview Image"},{"location":"shader/handheld/#comments","text":"","title":"Comments"},{"location":"shader/handheld/#external-links","text":"Slang Shaders GLSL Shaders CG Shaders","title":"External Links"},{"location":"shader/hqx/","text":"hqx \u00b6 Background \u00b6 Preview Image \u00b6 hq2x hq3x hq4x Comments \u00b6 External Links \u00b6 Slang Shaders GLSL Shaders CG Shaders","title":"hqx"},{"location":"shader/hqx/#hqx","text":"","title":"hqx"},{"location":"shader/hqx/#background","text":"","title":"Background"},{"location":"shader/hqx/#preview-image","text":"hq2x hq3x hq4x","title":"Preview Image"},{"location":"shader/hqx/#comments","text":"","title":"Comments"},{"location":"shader/hqx/#external-links","text":"Slang Shaders GLSL Shaders CG Shaders","title":"External Links"},{"location":"shader/introduction/","text":"Shader Preview Introduction \u00b6 Background \u00b6 A section to display thumbnail previews for RetroArch's many shaders. Its structured to reflect the common-shaders and slang-shaders repos and it includes previews of the shader presets (i.e., not individual shaders unless they have an accompanying preset). When possible, preview shots were created by opening the upscale-test image in RetroArch's built-in image-viewer core at 8x scale. Some shaders require additional settings or images to capture their effects and those are handled on a case-by-case basis. When additional settings are required, notes should be added to the preview comments. Upscale Test Image \u00b6 External Links \u00b6 Slang Shaders GLSL Shaders CG Shaders","title":"Introduction"},{"location":"shader/introduction/#shader-preview-introduction","text":"","title":"Shader Preview Introduction"},{"location":"shader/introduction/#background","text":"A section to display thumbnail previews for RetroArch's many shaders. Its structured to reflect the common-shaders and slang-shaders repos and it includes previews of the shader presets (i.e., not individual shaders unless they have an accompanying preset). When possible, preview shots were created by opening the upscale-test image in RetroArch's built-in image-viewer core at 8x scale. Some shaders require additional settings or images to capture their effects and those are handled on a case-by-case basis. When additional settings are required, notes should be added to the preview comments.","title":"Background"},{"location":"shader/introduction/#upscale-test-image","text":"","title":"Upscale Test Image"},{"location":"shader/introduction/#external-links","text":"Slang Shaders GLSL Shaders CG Shaders","title":"External Links"},{"location":"shader/linear/","text":"linear \u00b6 Background \u00b6 Preview Image \u00b6 Comments \u00b6 External Links \u00b6 Slang Shaders GLSL Shaders CG Shaders","title":"linear"},{"location":"shader/linear/#linear","text":"","title":"linear"},{"location":"shader/linear/#background","text":"","title":"Background"},{"location":"shader/linear/#preview-image","text":"","title":"Preview Image"},{"location":"shader/linear/#comments","text":"","title":"Comments"},{"location":"shader/linear/#external-links","text":"Slang Shaders GLSL Shaders CG Shaders","title":"External Links"},{"location":"shader/motionblur/","text":"motionblur \u00b6 Background \u00b6 Preview Image \u00b6 feedback motionblur-simple Comments \u00b6 External Links \u00b6 Slang Shaders GLSL Shaders CG Shaders","title":"motionblur"},{"location":"shader/motionblur/#motionblur","text":"","title":"motionblur"},{"location":"shader/motionblur/#background","text":"","title":"Background"},{"location":"shader/motionblur/#preview-image","text":"feedback motionblur-simple","title":"Preview Image"},{"location":"shader/motionblur/#comments","text":"","title":"Comments"},{"location":"shader/motionblur/#external-links","text":"Slang Shaders GLSL Shaders CG Shaders","title":"External Links"},{"location":"shader/mudlord/","text":"mudlord \u00b6 Description \u00b6 A collection of shader presets by community member Mudlord. Preview Image \u00b6 bloom blur emboss oldtv toon waterpaint-mudlord Comments \u00b6 External Links \u00b6 Slang Shaders GLSL Shaders CG Shaders","title":"mudlord"},{"location":"shader/mudlord/#mudlord","text":"","title":"mudlord"},{"location":"shader/mudlord/#description","text":"A collection of shader presets by community member Mudlord.","title":"Description"},{"location":"shader/mudlord/#preview-image","text":"bloom blur emboss oldtv toon waterpaint-mudlord","title":"Preview Image"},{"location":"shader/mudlord/#comments","text":"","title":"Comments"},{"location":"shader/mudlord/#external-links","text":"Slang Shaders GLSL Shaders CG Shaders","title":"External Links"},{"location":"shader/nedi/","text":"nedi \u00b6 Background \u00b6 Preview Image \u00b6 fast-bilateral-nedi nedi Comments \u00b6 External Links \u00b6 Slang Shaders GLSL Shaders CG Shaders","title":"nedi"},{"location":"shader/nedi/#nedi","text":"","title":"nedi"},{"location":"shader/nedi/#background","text":"","title":"Background"},{"location":"shader/nedi/#preview-image","text":"fast-bilateral-nedi nedi","title":"Preview Image"},{"location":"shader/nedi/#comments","text":"","title":"Comments"},{"location":"shader/nedi/#external-links","text":"Slang Shaders GLSL Shaders CG Shaders","title":"External Links"},{"location":"shader/nnedi3/","text":"nnedi3 \u00b6 Background \u00b6 Preview Image \u00b6 nnedi3-nns16-2x-luma nnedi3-nns16-2x-rgb nnedi3-nns16-4x-luma nnedi3-nns32-2x-rgb-nns32-4x-luma nnedi3-nns32-4x-rgb nnedi3-nns64-2x-nns32-4x-nns16-8x-rgb nnedi3-nns64-2x-nns32-4x-rgb Comments \u00b6 External Links \u00b6 Slang Shaders GLSL Shaders CG Shaders","title":"nnedi3"},{"location":"shader/nnedi3/#nnedi3","text":"","title":"nnedi3"},{"location":"shader/nnedi3/#background","text":"","title":"Background"},{"location":"shader/nnedi3/#preview-image","text":"nnedi3-nns16-2x-luma nnedi3-nns16-2x-rgb nnedi3-nns16-4x-luma nnedi3-nns32-2x-rgb-nns32-4x-luma nnedi3-nns32-4x-rgb nnedi3-nns64-2x-nns32-4x-nns16-8x-rgb nnedi3-nns64-2x-nns32-4x-rgb","title":"Preview Image"},{"location":"shader/nnedi3/#comments","text":"","title":"Comments"},{"location":"shader/nnedi3/#external-links","text":"Slang Shaders GLSL Shaders CG Shaders","title":"External Links"},{"location":"shader/ntsc/","text":"ntsc \u00b6 Background \u00b6 Preview Image \u00b6 ntsc mame-ntsc ntsc-256px-gauss-scanline ntsc-256px-svideo-gauss-scanline ntsc-256px-svideo ntsc-256px ntsc-320px-gauss-scanline ntsc-320px-svideo-gauss-scanline ntsc-320px-svideo ntsc-320px ntsc-svideo ntsc-vcr Comments \u00b6 External Links \u00b6 Slang Shaders GLSL Shaders CG Shaders","title":"ntsc"},{"location":"shader/ntsc/#ntsc","text":"","title":"ntsc"},{"location":"shader/ntsc/#background","text":"","title":"Background"},{"location":"shader/ntsc/#preview-image","text":"ntsc mame-ntsc ntsc-256px-gauss-scanline ntsc-256px-svideo-gauss-scanline ntsc-256px-svideo ntsc-256px ntsc-320px-gauss-scanline ntsc-320px-svideo-gauss-scanline ntsc-320px-svideo ntsc-320px ntsc-svideo ntsc-vcr","title":"Preview Image"},{"location":"shader/ntsc/#comments","text":"","title":"Comments"},{"location":"shader/ntsc/#external-links","text":"Slang Shaders GLSL Shaders CG Shaders","title":"External Links"},{"location":"shader/presets/","text":"presets \u00b6 Background \u00b6 Preview Image \u00b6 crt-royale-kurozumi ntsc-phosphorlut scalefx9-aa-blur-hazy-ntsc-sh1nra358 scalefx9-aa-blur-hazy-vibrance-sh1nra358 Comments \u00b6 External Links \u00b6 Slang Shaders GLSL Shaders CG Shaders","title":"presets"},{"location":"shader/presets/#presets","text":"","title":"presets"},{"location":"shader/presets/#background","text":"","title":"Background"},{"location":"shader/presets/#preview-image","text":"crt-royale-kurozumi ntsc-phosphorlut scalefx9-aa-blur-hazy-ntsc-sh1nra358 scalefx9-aa-blur-hazy-vibrance-sh1nra358","title":"Preview Image"},{"location":"shader/presets/#comments","text":"","title":"Comments"},{"location":"shader/presets/#external-links","text":"Slang Shaders GLSL Shaders CG Shaders","title":"External Links"},{"location":"shader/retro/","text":"retro \u00b6 Background \u00b6 Preview Image \u00b6 aann ascii bead bevel pixellate retro-v2 sharp-bilinear smootheststep Comments \u00b6 External Links \u00b6 Slang Shaders GLSL Shaders CG Shaders","title":"retro"},{"location":"shader/retro/#retro","text":"","title":"retro"},{"location":"shader/retro/#background","text":"","title":"Background"},{"location":"shader/retro/#preview-image","text":"aann ascii bead bevel pixellate retro-v2 sharp-bilinear smootheststep","title":"Preview Image"},{"location":"shader/retro/#comments","text":"","title":"Comments"},{"location":"shader/retro/#external-links","text":"Slang Shaders GLSL Shaders CG Shaders","title":"External Links"},{"location":"shader/sabr/","text":"sabr \u00b6 Background \u00b6 Preview Image \u00b6 sabr-hybrid-deposterize sabr-v1.1 sabr-v3.0 sabr Comments \u00b6 External Links \u00b6 Slang Shaders GLSL Shaders CG Shaders","title":"sabr"},{"location":"shader/sabr/#sabr","text":"","title":"sabr"},{"location":"shader/sabr/#background","text":"","title":"Background"},{"location":"shader/sabr/#preview-image","text":"sabr-hybrid-deposterize sabr-v1.1 sabr-v3.0 sabr","title":"Preview Image"},{"location":"shader/sabr/#comments","text":"","title":"Comments"},{"location":"shader/sabr/#external-links","text":"Slang Shaders GLSL Shaders CG Shaders","title":"External Links"},{"location":"shader/scalefx-old-shaders/","text":"Old scalefx shaders \u00b6 Background \u00b6 Preview Image \u00b6 scalefx_hybrid scalefx-9x scalefx scalefx9 xsoft+scalefx_hybrid xsoft+scalefx xsoft+scalefx+sharpsmoother xsofter+scalefx_hybrid xsofter+scalefx Comments \u00b6 External Links \u00b6 Slang Shaders GLSL Shaders CG Shaders","title":"scalefx-OLD-shaders"},{"location":"shader/scalefx-old-shaders/#old-scalefx-shaders","text":"","title":"Old scalefx shaders"},{"location":"shader/scalefx-old-shaders/#background","text":"","title":"Background"},{"location":"shader/scalefx-old-shaders/#preview-image","text":"scalefx_hybrid scalefx-9x scalefx scalefx9 xsoft+scalefx_hybrid xsoft+scalefx xsoft+scalefx+sharpsmoother xsofter+scalefx_hybrid xsofter+scalefx","title":"Preview Image"},{"location":"shader/scalefx-old-shaders/#comments","text":"","title":"Comments"},{"location":"shader/scalefx-old-shaders/#external-links","text":"Slang Shaders GLSL Shaders CG Shaders","title":"External Links"},{"location":"shader/scalefx/","text":"scalefx \u00b6 Background \u00b6 Preview Image \u00b6 scalefx scalefx-hybrid Comments \u00b6 External Links \u00b6 Slang Shaders GLSL Shaders CG Shaders","title":"scalefx"},{"location":"shader/scalefx/#scalefx","text":"","title":"scalefx"},{"location":"shader/scalefx/#background","text":"","title":"Background"},{"location":"shader/scalefx/#preview-image","text":"scalefx scalefx-hybrid","title":"Preview Image"},{"location":"shader/scalefx/#comments","text":"","title":"Comments"},{"location":"shader/scalefx/#external-links","text":"Slang Shaders GLSL Shaders CG Shaders","title":"External Links"},{"location":"shader/scalehq/","text":"scalehq \u00b6 Background \u00b6 Preview Image \u00b6 2x-scalehq 2xScaleHQ 4x-scalehq 4xScaleHQ Comments \u00b6 External Links \u00b6 Slang Shaders GLSL Shaders CG Shaders","title":"scalehq"},{"location":"shader/scalehq/#scalehq","text":"","title":"scalehq"},{"location":"shader/scalehq/#background","text":"","title":"Background"},{"location":"shader/scalehq/#preview-image","text":"2x-scalehq 2xScaleHQ 4x-scalehq 4xScaleHQ","title":"Preview Image"},{"location":"shader/scalehq/#comments","text":"","title":"Comments"},{"location":"shader/scalehq/#external-links","text":"Slang Shaders GLSL Shaders CG Shaders","title":"External Links"},{"location":"shader/scalenx/","text":"scalenx \u00b6 Background \u00b6 Preview Image \u00b6 scale2x scale2xplus scale2xSFX scale3x Comments \u00b6 External Links \u00b6 Slang Shaders GLSL Shaders CG Shaders","title":"scalenx"},{"location":"shader/scalenx/#scalenx","text":"","title":"scalenx"},{"location":"shader/scalenx/#background","text":"","title":"Background"},{"location":"shader/scalenx/#preview-image","text":"scale2x scale2xplus scale2xSFX scale3x","title":"Preview Image"},{"location":"shader/scalenx/#comments","text":"","title":"Comments"},{"location":"shader/scalenx/#external-links","text":"Slang Shaders GLSL Shaders CG Shaders","title":"External Links"},{"location":"shader/sharpen/","text":"sharpen \u00b6 Background \u00b6 Preview Image \u00b6 adaptive-sharpen Comments \u00b6 External Links \u00b6 Slang Shaders GLSL Shaders CG Shaders","title":"sharpen"},{"location":"shader/sharpen/#sharpen","text":"","title":"sharpen"},{"location":"shader/sharpen/#background","text":"","title":"Background"},{"location":"shader/sharpen/#preview-image","text":"adaptive-sharpen","title":"Preview Image"},{"location":"shader/sharpen/#comments","text":"","title":"Comments"},{"location":"shader/sharpen/#external-links","text":"Slang Shaders GLSL Shaders CG Shaders","title":"External Links"},{"location":"shader/windowed/","text":"windowed \u00b6 Background \u00b6 Preview Image \u00b6 jinc2-sharp jinc2-sharper jinc2 lanczos16 Comments \u00b6 External Links \u00b6 Slang Shaders GLSL Shaders CG Shaders","title":"windowed"},{"location":"shader/windowed/#windowed","text":"","title":"windowed"},{"location":"shader/windowed/#background","text":"","title":"Background"},{"location":"shader/windowed/#preview-image","text":"jinc2-sharp jinc2-sharper jinc2 lanczos16","title":"Preview Image"},{"location":"shader/windowed/#comments","text":"","title":"Comments"},{"location":"shader/windowed/#external-links","text":"Slang Shaders GLSL Shaders CG Shaders","title":"External Links"},{"location":"shader/xbr/","text":"xbr \u00b6 Background \u00b6 Preview Image \u00b6 2xbr-lv1-multipass super-xbr-2p super-xbr-3p-smoother super-xbr-6p super-xbr-fast-3p super-xbr-fast-6p xbr-hybrid xbr-lv1-noblend xbr-lv2-fast xbr-lv2-multipass xbr-lv2-noblend xbr-lv2 xbr-lv3-multipass xbr-lv3-noblend xbr-lv3 xbr-mlv4-dilation xbr-mlv4-multipass Comments \u00b6 External Links \u00b6 Slang Shaders GLSL Shaders CG Shaders","title":"xbr"},{"location":"shader/xbr/#xbr","text":"","title":"xbr"},{"location":"shader/xbr/#background","text":"","title":"Background"},{"location":"shader/xbr/#preview-image","text":"2xbr-lv1-multipass super-xbr-2p super-xbr-3p-smoother super-xbr-6p super-xbr-fast-3p super-xbr-fast-6p xbr-hybrid xbr-lv1-noblend xbr-lv2-fast xbr-lv2-multipass xbr-lv2-noblend xbr-lv2 xbr-lv3-multipass xbr-lv3-noblend xbr-lv3 xbr-mlv4-dilation xbr-mlv4-multipass","title":"Preview Image"},{"location":"shader/xbr/#comments","text":"","title":"Comments"},{"location":"shader/xbr/#external-links","text":"Slang Shaders GLSL Shaders CG Shaders","title":"External Links"},{"location":"shader/xbrz/","text":"xbrz \u00b6 Background \u00b6 Preview Image \u00b6 4xbrz 5xbrz 6xbrz Comments \u00b6 External Links \u00b6 Slang Shaders GLSL Shaders CG Shaders","title":"xbrz"},{"location":"shader/xbrz/#xbrz","text":"","title":"xbrz"},{"location":"shader/xbrz/#background","text":"","title":"Background"},{"location":"shader/xbrz/#preview-image","text":"4xbrz 5xbrz 6xbrz","title":"Preview Image"},{"location":"shader/xbrz/#comments","text":"","title":"Comments"},{"location":"shader/xbrz/#external-links","text":"Slang Shaders GLSL Shaders CG Shaders","title":"External Links"},{"location":"shader/xsal/","text":"xsal \u00b6 Background \u00b6 Preview Image \u00b6 2xsal-level2-crt 2xsal 4xsal-level2-crt 4xsal-level2-hq 4xsal-level2 Comments \u00b6 External Links \u00b6 Slang Shaders GLSL Shaders CG Shaders","title":"xsal"},{"location":"shader/xsal/#xsal","text":"","title":"xsal"},{"location":"shader/xsal/#background","text":"","title":"Background"},{"location":"shader/xsal/#preview-image","text":"2xsal-level2-crt 2xsal 4xsal-level2-crt 4xsal-level2-hq 4xsal-level2","title":"Preview Image"},{"location":"shader/xsal/#comments","text":"","title":"Comments"},{"location":"shader/xsal/#external-links","text":"Slang Shaders GLSL Shaders CG Shaders","title":"External Links"},{"location":"shader/xsoft/","text":"xsoft \u00b6 Background \u00b6 Preview Image \u00b6 4xsoft 4xsoftSdB Comments \u00b6 External Links \u00b6 Slang Shaders GLSL Shaders CG Shaders","title":"xsoft"},{"location":"shader/xsoft/#xsoft","text":"","title":"xsoft"},{"location":"shader/xsoft/#background","text":"","title":"Background"},{"location":"shader/xsoft/#preview-image","text":"4xsoft 4xsoftSdB","title":"Preview Image"},{"location":"shader/xsoft/#comments","text":"","title":"Comments"},{"location":"shader/xsoft/#external-links","text":"Slang Shaders GLSL Shaders CG Shaders","title":"External Links"}]}